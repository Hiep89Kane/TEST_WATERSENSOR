
TEST_WATERSENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc20  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800fcd8  0800fcd8  0001fcd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801058c  0801058c  00030270  2**0
                  CONTENTS
  4 .ARM          00000000  0801058c  0801058c  00030270  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801058c  0801058c  00030270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801058c  0801058c  0002058c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010590  08010590  00020590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08010594  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000768  20000270  08010804  00030270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009d8  08010804  000309d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f8a  00000000  00000000  00030298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e95  00000000  00000000  00051222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  000560b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00057b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c43d  00000000  00000000  00059448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002550c  00000000  00000000  00075885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2a2c  00000000  00000000  0009ad91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d7bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007268  00000000  00000000  0013d810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000270 	.word	0x20000270
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800fcac 	.word	0x0800fcac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000274 	.word	0x20000274
 80000fc:	0800fcac 	.word	0x0800fcac

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fac5 	bl	80019c4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa15 	bl	8001874 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fab7 	bl	80019c4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 faad 	bl	80019c4 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fa3d 	bl	80018f8 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fa33 	bl	80018f8 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 f9b7 	bl	800081c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f943 	bl	8000744 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 f9a9 	bl	800081c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 f99f 	bl	800081c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 f94f 	bl	8000790 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 f945 	bl	8000790 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fdiv>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	464f      	mov	r7, r9
 8000518:	4646      	mov	r6, r8
 800051a:	46d6      	mov	lr, sl
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	b5c0      	push	{r6, r7, lr}
 8000520:	0047      	lsls	r7, r0, #1
 8000522:	1c0c      	adds	r4, r1, #0
 8000524:	0a6d      	lsrs	r5, r5, #9
 8000526:	0e3f      	lsrs	r7, r7, #24
 8000528:	0fc6      	lsrs	r6, r0, #31
 800052a:	2f00      	cmp	r7, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x1c>
 800052e:	e070      	b.n	8000612 <__aeabi_fdiv+0xfe>
 8000530:	2fff      	cmp	r7, #255	; 0xff
 8000532:	d100      	bne.n	8000536 <__aeabi_fdiv+0x22>
 8000534:	e075      	b.n	8000622 <__aeabi_fdiv+0x10e>
 8000536:	00eb      	lsls	r3, r5, #3
 8000538:	2580      	movs	r5, #128	; 0x80
 800053a:	04ed      	lsls	r5, r5, #19
 800053c:	431d      	orrs	r5, r3
 800053e:	2300      	movs	r3, #0
 8000540:	4699      	mov	r9, r3
 8000542:	469a      	mov	sl, r3
 8000544:	3f7f      	subs	r7, #127	; 0x7f
 8000546:	0260      	lsls	r0, r4, #9
 8000548:	0a43      	lsrs	r3, r0, #9
 800054a:	4698      	mov	r8, r3
 800054c:	0063      	lsls	r3, r4, #1
 800054e:	0e1b      	lsrs	r3, r3, #24
 8000550:	0fe4      	lsrs	r4, r4, #31
 8000552:	2b00      	cmp	r3, #0
 8000554:	d04e      	beq.n	80005f4 <__aeabi_fdiv+0xe0>
 8000556:	2bff      	cmp	r3, #255	; 0xff
 8000558:	d046      	beq.n	80005e8 <__aeabi_fdiv+0xd4>
 800055a:	4642      	mov	r2, r8
 800055c:	00d0      	lsls	r0, r2, #3
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	04d2      	lsls	r2, r2, #19
 8000562:	4302      	orrs	r2, r0
 8000564:	4690      	mov	r8, r2
 8000566:	2200      	movs	r2, #0
 8000568:	3b7f      	subs	r3, #127	; 0x7f
 800056a:	0031      	movs	r1, r6
 800056c:	1aff      	subs	r7, r7, r3
 800056e:	464b      	mov	r3, r9
 8000570:	4061      	eors	r1, r4
 8000572:	b2c9      	uxtb	r1, r1
 8000574:	4313      	orrs	r3, r2
 8000576:	2b0f      	cmp	r3, #15
 8000578:	d900      	bls.n	800057c <__aeabi_fdiv+0x68>
 800057a:	e0b5      	b.n	80006e8 <__aeabi_fdiv+0x1d4>
 800057c:	486e      	ldr	r0, [pc, #440]	; (8000738 <__aeabi_fdiv+0x224>)
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	58c3      	ldr	r3, [r0, r3]
 8000582:	469f      	mov	pc, r3
 8000584:	2300      	movs	r3, #0
 8000586:	4698      	mov	r8, r3
 8000588:	0026      	movs	r6, r4
 800058a:	4645      	mov	r5, r8
 800058c:	4692      	mov	sl, r2
 800058e:	4653      	mov	r3, sl
 8000590:	2b02      	cmp	r3, #2
 8000592:	d100      	bne.n	8000596 <__aeabi_fdiv+0x82>
 8000594:	e089      	b.n	80006aa <__aeabi_fdiv+0x196>
 8000596:	2b03      	cmp	r3, #3
 8000598:	d100      	bne.n	800059c <__aeabi_fdiv+0x88>
 800059a:	e09e      	b.n	80006da <__aeabi_fdiv+0x1c6>
 800059c:	2b01      	cmp	r3, #1
 800059e:	d018      	beq.n	80005d2 <__aeabi_fdiv+0xbe>
 80005a0:	003b      	movs	r3, r7
 80005a2:	337f      	adds	r3, #127	; 0x7f
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	dd69      	ble.n	800067c <__aeabi_fdiv+0x168>
 80005a8:	076a      	lsls	r2, r5, #29
 80005aa:	d004      	beq.n	80005b6 <__aeabi_fdiv+0xa2>
 80005ac:	220f      	movs	r2, #15
 80005ae:	402a      	ands	r2, r5
 80005b0:	2a04      	cmp	r2, #4
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fdiv+0xa2>
 80005b4:	3504      	adds	r5, #4
 80005b6:	012a      	lsls	r2, r5, #4
 80005b8:	d503      	bpl.n	80005c2 <__aeabi_fdiv+0xae>
 80005ba:	4b60      	ldr	r3, [pc, #384]	; (800073c <__aeabi_fdiv+0x228>)
 80005bc:	401d      	ands	r5, r3
 80005be:	003b      	movs	r3, r7
 80005c0:	3380      	adds	r3, #128	; 0x80
 80005c2:	2bfe      	cmp	r3, #254	; 0xfe
 80005c4:	dd00      	ble.n	80005c8 <__aeabi_fdiv+0xb4>
 80005c6:	e070      	b.n	80006aa <__aeabi_fdiv+0x196>
 80005c8:	01ad      	lsls	r5, r5, #6
 80005ca:	0a6d      	lsrs	r5, r5, #9
 80005cc:	b2d8      	uxtb	r0, r3
 80005ce:	e002      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80005d0:	000e      	movs	r6, r1
 80005d2:	2000      	movs	r0, #0
 80005d4:	2500      	movs	r5, #0
 80005d6:	05c0      	lsls	r0, r0, #23
 80005d8:	4328      	orrs	r0, r5
 80005da:	07f6      	lsls	r6, r6, #31
 80005dc:	4330      	orrs	r0, r6
 80005de:	bce0      	pop	{r5, r6, r7}
 80005e0:	46ba      	mov	sl, r7
 80005e2:	46b1      	mov	r9, r6
 80005e4:	46a8      	mov	r8, r5
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	4643      	mov	r3, r8
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d13f      	bne.n	800066e <__aeabi_fdiv+0x15a>
 80005ee:	2202      	movs	r2, #2
 80005f0:	3fff      	subs	r7, #255	; 0xff
 80005f2:	e003      	b.n	80005fc <__aeabi_fdiv+0xe8>
 80005f4:	4643      	mov	r3, r8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d12d      	bne.n	8000656 <__aeabi_fdiv+0x142>
 80005fa:	2201      	movs	r2, #1
 80005fc:	0031      	movs	r1, r6
 80005fe:	464b      	mov	r3, r9
 8000600:	4061      	eors	r1, r4
 8000602:	b2c9      	uxtb	r1, r1
 8000604:	4313      	orrs	r3, r2
 8000606:	2b0f      	cmp	r3, #15
 8000608:	d834      	bhi.n	8000674 <__aeabi_fdiv+0x160>
 800060a:	484d      	ldr	r0, [pc, #308]	; (8000740 <__aeabi_fdiv+0x22c>)
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	58c3      	ldr	r3, [r0, r3]
 8000610:	469f      	mov	pc, r3
 8000612:	2d00      	cmp	r5, #0
 8000614:	d113      	bne.n	800063e <__aeabi_fdiv+0x12a>
 8000616:	2304      	movs	r3, #4
 8000618:	4699      	mov	r9, r3
 800061a:	3b03      	subs	r3, #3
 800061c:	2700      	movs	r7, #0
 800061e:	469a      	mov	sl, r3
 8000620:	e791      	b.n	8000546 <__aeabi_fdiv+0x32>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d105      	bne.n	8000632 <__aeabi_fdiv+0x11e>
 8000626:	2308      	movs	r3, #8
 8000628:	4699      	mov	r9, r3
 800062a:	3b06      	subs	r3, #6
 800062c:	27ff      	movs	r7, #255	; 0xff
 800062e:	469a      	mov	sl, r3
 8000630:	e789      	b.n	8000546 <__aeabi_fdiv+0x32>
 8000632:	230c      	movs	r3, #12
 8000634:	4699      	mov	r9, r3
 8000636:	3b09      	subs	r3, #9
 8000638:	27ff      	movs	r7, #255	; 0xff
 800063a:	469a      	mov	sl, r3
 800063c:	e783      	b.n	8000546 <__aeabi_fdiv+0x32>
 800063e:	0028      	movs	r0, r5
 8000640:	f002 f99c 	bl	800297c <__clzsi2>
 8000644:	2776      	movs	r7, #118	; 0x76
 8000646:	1f43      	subs	r3, r0, #5
 8000648:	409d      	lsls	r5, r3
 800064a:	2300      	movs	r3, #0
 800064c:	427f      	negs	r7, r7
 800064e:	4699      	mov	r9, r3
 8000650:	469a      	mov	sl, r3
 8000652:	1a3f      	subs	r7, r7, r0
 8000654:	e777      	b.n	8000546 <__aeabi_fdiv+0x32>
 8000656:	4640      	mov	r0, r8
 8000658:	f002 f990 	bl	800297c <__clzsi2>
 800065c:	4642      	mov	r2, r8
 800065e:	1f43      	subs	r3, r0, #5
 8000660:	409a      	lsls	r2, r3
 8000662:	2376      	movs	r3, #118	; 0x76
 8000664:	425b      	negs	r3, r3
 8000666:	4690      	mov	r8, r2
 8000668:	1a1b      	subs	r3, r3, r0
 800066a:	2200      	movs	r2, #0
 800066c:	e77d      	b.n	800056a <__aeabi_fdiv+0x56>
 800066e:	23ff      	movs	r3, #255	; 0xff
 8000670:	2203      	movs	r2, #3
 8000672:	e77a      	b.n	800056a <__aeabi_fdiv+0x56>
 8000674:	000e      	movs	r6, r1
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	2500      	movs	r5, #0
 800067a:	e7ac      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 800067c:	2001      	movs	r0, #1
 800067e:	1ac0      	subs	r0, r0, r3
 8000680:	281b      	cmp	r0, #27
 8000682:	dca6      	bgt.n	80005d2 <__aeabi_fdiv+0xbe>
 8000684:	379e      	adds	r7, #158	; 0x9e
 8000686:	002a      	movs	r2, r5
 8000688:	40bd      	lsls	r5, r7
 800068a:	40c2      	lsrs	r2, r0
 800068c:	1e6b      	subs	r3, r5, #1
 800068e:	419d      	sbcs	r5, r3
 8000690:	4315      	orrs	r5, r2
 8000692:	076b      	lsls	r3, r5, #29
 8000694:	d004      	beq.n	80006a0 <__aeabi_fdiv+0x18c>
 8000696:	230f      	movs	r3, #15
 8000698:	402b      	ands	r3, r5
 800069a:	2b04      	cmp	r3, #4
 800069c:	d000      	beq.n	80006a0 <__aeabi_fdiv+0x18c>
 800069e:	3504      	adds	r5, #4
 80006a0:	016b      	lsls	r3, r5, #5
 80006a2:	d544      	bpl.n	800072e <__aeabi_fdiv+0x21a>
 80006a4:	2001      	movs	r0, #1
 80006a6:	2500      	movs	r5, #0
 80006a8:	e795      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006aa:	20ff      	movs	r0, #255	; 0xff
 80006ac:	2500      	movs	r5, #0
 80006ae:	e792      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006b0:	2580      	movs	r5, #128	; 0x80
 80006b2:	2600      	movs	r6, #0
 80006b4:	20ff      	movs	r0, #255	; 0xff
 80006b6:	03ed      	lsls	r5, r5, #15
 80006b8:	e78d      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006ba:	2300      	movs	r3, #0
 80006bc:	4698      	mov	r8, r3
 80006be:	2080      	movs	r0, #128	; 0x80
 80006c0:	03c0      	lsls	r0, r0, #15
 80006c2:	4205      	tst	r5, r0
 80006c4:	d009      	beq.n	80006da <__aeabi_fdiv+0x1c6>
 80006c6:	4643      	mov	r3, r8
 80006c8:	4203      	tst	r3, r0
 80006ca:	d106      	bne.n	80006da <__aeabi_fdiv+0x1c6>
 80006cc:	4645      	mov	r5, r8
 80006ce:	4305      	orrs	r5, r0
 80006d0:	026d      	lsls	r5, r5, #9
 80006d2:	0026      	movs	r6, r4
 80006d4:	20ff      	movs	r0, #255	; 0xff
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	e77d      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006da:	2080      	movs	r0, #128	; 0x80
 80006dc:	03c0      	lsls	r0, r0, #15
 80006de:	4305      	orrs	r5, r0
 80006e0:	026d      	lsls	r5, r5, #9
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	0a6d      	lsrs	r5, r5, #9
 80006e6:	e776      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006e8:	4642      	mov	r2, r8
 80006ea:	016b      	lsls	r3, r5, #5
 80006ec:	0150      	lsls	r0, r2, #5
 80006ee:	4283      	cmp	r3, r0
 80006f0:	d219      	bcs.n	8000726 <__aeabi_fdiv+0x212>
 80006f2:	221b      	movs	r2, #27
 80006f4:	2500      	movs	r5, #0
 80006f6:	3f01      	subs	r7, #1
 80006f8:	2601      	movs	r6, #1
 80006fa:	001c      	movs	r4, r3
 80006fc:	006d      	lsls	r5, r5, #1
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	2c00      	cmp	r4, #0
 8000702:	db01      	blt.n	8000708 <__aeabi_fdiv+0x1f4>
 8000704:	4298      	cmp	r0, r3
 8000706:	d801      	bhi.n	800070c <__aeabi_fdiv+0x1f8>
 8000708:	1a1b      	subs	r3, r3, r0
 800070a:	4335      	orrs	r5, r6
 800070c:	3a01      	subs	r2, #1
 800070e:	2a00      	cmp	r2, #0
 8000710:	d1f3      	bne.n	80006fa <__aeabi_fdiv+0x1e6>
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	4193      	sbcs	r3, r2
 8000716:	431d      	orrs	r5, r3
 8000718:	003b      	movs	r3, r7
 800071a:	337f      	adds	r3, #127	; 0x7f
 800071c:	000e      	movs	r6, r1
 800071e:	2b00      	cmp	r3, #0
 8000720:	dd00      	ble.n	8000724 <__aeabi_fdiv+0x210>
 8000722:	e741      	b.n	80005a8 <__aeabi_fdiv+0x94>
 8000724:	e7aa      	b.n	800067c <__aeabi_fdiv+0x168>
 8000726:	221a      	movs	r2, #26
 8000728:	2501      	movs	r5, #1
 800072a:	1a1b      	subs	r3, r3, r0
 800072c:	e7e4      	b.n	80006f8 <__aeabi_fdiv+0x1e4>
 800072e:	01ad      	lsls	r5, r5, #6
 8000730:	2000      	movs	r0, #0
 8000732:	0a6d      	lsrs	r5, r5, #9
 8000734:	e74f      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	0800ff44 	.word	0x0800ff44
 800073c:	f7ffffff 	.word	0xf7ffffff
 8000740:	0800ff84 	.word	0x0800ff84

08000744 <__eqsf2>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	0042      	lsls	r2, r0, #1
 8000748:	0245      	lsls	r5, r0, #9
 800074a:	024e      	lsls	r6, r1, #9
 800074c:	004c      	lsls	r4, r1, #1
 800074e:	0fc3      	lsrs	r3, r0, #31
 8000750:	0a6d      	lsrs	r5, r5, #9
 8000752:	2001      	movs	r0, #1
 8000754:	0e12      	lsrs	r2, r2, #24
 8000756:	0a76      	lsrs	r6, r6, #9
 8000758:	0e24      	lsrs	r4, r4, #24
 800075a:	0fc9      	lsrs	r1, r1, #31
 800075c:	2aff      	cmp	r2, #255	; 0xff
 800075e:	d006      	beq.n	800076e <__eqsf2+0x2a>
 8000760:	2cff      	cmp	r4, #255	; 0xff
 8000762:	d003      	beq.n	800076c <__eqsf2+0x28>
 8000764:	42a2      	cmp	r2, r4
 8000766:	d101      	bne.n	800076c <__eqsf2+0x28>
 8000768:	42b5      	cmp	r5, r6
 800076a:	d006      	beq.n	800077a <__eqsf2+0x36>
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	2d00      	cmp	r5, #0
 8000770:	d1fc      	bne.n	800076c <__eqsf2+0x28>
 8000772:	2cff      	cmp	r4, #255	; 0xff
 8000774:	d1fa      	bne.n	800076c <__eqsf2+0x28>
 8000776:	2e00      	cmp	r6, #0
 8000778:	d1f8      	bne.n	800076c <__eqsf2+0x28>
 800077a:	428b      	cmp	r3, r1
 800077c:	d006      	beq.n	800078c <__eqsf2+0x48>
 800077e:	2001      	movs	r0, #1
 8000780:	2a00      	cmp	r2, #0
 8000782:	d1f3      	bne.n	800076c <__eqsf2+0x28>
 8000784:	0028      	movs	r0, r5
 8000786:	1e43      	subs	r3, r0, #1
 8000788:	4198      	sbcs	r0, r3
 800078a:	e7ef      	b.n	800076c <__eqsf2+0x28>
 800078c:	2000      	movs	r0, #0
 800078e:	e7ed      	b.n	800076c <__eqsf2+0x28>

08000790 <__gesf2>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	0042      	lsls	r2, r0, #1
 8000794:	0245      	lsls	r5, r0, #9
 8000796:	024e      	lsls	r6, r1, #9
 8000798:	004c      	lsls	r4, r1, #1
 800079a:	0fc3      	lsrs	r3, r0, #31
 800079c:	0a6d      	lsrs	r5, r5, #9
 800079e:	0e12      	lsrs	r2, r2, #24
 80007a0:	0a76      	lsrs	r6, r6, #9
 80007a2:	0e24      	lsrs	r4, r4, #24
 80007a4:	0fc8      	lsrs	r0, r1, #31
 80007a6:	2aff      	cmp	r2, #255	; 0xff
 80007a8:	d01b      	beq.n	80007e2 <__gesf2+0x52>
 80007aa:	2cff      	cmp	r4, #255	; 0xff
 80007ac:	d00e      	beq.n	80007cc <__gesf2+0x3c>
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	d11b      	bne.n	80007ea <__gesf2+0x5a>
 80007b2:	2c00      	cmp	r4, #0
 80007b4:	d101      	bne.n	80007ba <__gesf2+0x2a>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d01c      	beq.n	80007f4 <__gesf2+0x64>
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d00c      	beq.n	80007d8 <__gesf2+0x48>
 80007be:	4283      	cmp	r3, r0
 80007c0:	d01c      	beq.n	80007fc <__gesf2+0x6c>
 80007c2:	2102      	movs	r1, #2
 80007c4:	1e58      	subs	r0, r3, #1
 80007c6:	4008      	ands	r0, r1
 80007c8:	3801      	subs	r0, #1
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d122      	bne.n	8000816 <__gesf2+0x86>
 80007d0:	2a00      	cmp	r2, #0
 80007d2:	d1f4      	bne.n	80007be <__gesf2+0x2e>
 80007d4:	2d00      	cmp	r5, #0
 80007d6:	d1f2      	bne.n	80007be <__gesf2+0x2e>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d1f6      	bne.n	80007ca <__gesf2+0x3a>
 80007dc:	2001      	movs	r0, #1
 80007de:	4240      	negs	r0, r0
 80007e0:	e7f3      	b.n	80007ca <__gesf2+0x3a>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d117      	bne.n	8000816 <__gesf2+0x86>
 80007e6:	2cff      	cmp	r4, #255	; 0xff
 80007e8:	d0f0      	beq.n	80007cc <__gesf2+0x3c>
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d1e7      	bne.n	80007be <__gesf2+0x2e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d1e5      	bne.n	80007be <__gesf2+0x2e>
 80007f2:	e7e6      	b.n	80007c2 <__gesf2+0x32>
 80007f4:	2000      	movs	r0, #0
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	d0e7      	beq.n	80007ca <__gesf2+0x3a>
 80007fa:	e7e2      	b.n	80007c2 <__gesf2+0x32>
 80007fc:	42a2      	cmp	r2, r4
 80007fe:	dc05      	bgt.n	800080c <__gesf2+0x7c>
 8000800:	dbea      	blt.n	80007d8 <__gesf2+0x48>
 8000802:	42b5      	cmp	r5, r6
 8000804:	d802      	bhi.n	800080c <__gesf2+0x7c>
 8000806:	d3e7      	bcc.n	80007d8 <__gesf2+0x48>
 8000808:	2000      	movs	r0, #0
 800080a:	e7de      	b.n	80007ca <__gesf2+0x3a>
 800080c:	4243      	negs	r3, r0
 800080e:	4158      	adcs	r0, r3
 8000810:	0040      	lsls	r0, r0, #1
 8000812:	3801      	subs	r0, #1
 8000814:	e7d9      	b.n	80007ca <__gesf2+0x3a>
 8000816:	2002      	movs	r0, #2
 8000818:	4240      	negs	r0, r0
 800081a:	e7d6      	b.n	80007ca <__gesf2+0x3a>

0800081c <__lesf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	0245      	lsls	r5, r0, #9
 8000822:	024e      	lsls	r6, r1, #9
 8000824:	004c      	lsls	r4, r1, #1
 8000826:	0fc3      	lsrs	r3, r0, #31
 8000828:	0a6d      	lsrs	r5, r5, #9
 800082a:	0e12      	lsrs	r2, r2, #24
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e24      	lsrs	r4, r4, #24
 8000830:	0fc8      	lsrs	r0, r1, #31
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d00b      	beq.n	800084e <__lesf2+0x32>
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d00d      	beq.n	8000856 <__lesf2+0x3a>
 800083a:	2a00      	cmp	r2, #0
 800083c:	d11f      	bne.n	800087e <__lesf2+0x62>
 800083e:	2c00      	cmp	r4, #0
 8000840:	d116      	bne.n	8000870 <__lesf2+0x54>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d114      	bne.n	8000870 <__lesf2+0x54>
 8000846:	2000      	movs	r0, #0
 8000848:	2d00      	cmp	r5, #0
 800084a:	d010      	beq.n	800086e <__lesf2+0x52>
 800084c:	e009      	b.n	8000862 <__lesf2+0x46>
 800084e:	2d00      	cmp	r5, #0
 8000850:	d10c      	bne.n	800086c <__lesf2+0x50>
 8000852:	2cff      	cmp	r4, #255	; 0xff
 8000854:	d113      	bne.n	800087e <__lesf2+0x62>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d108      	bne.n	800086c <__lesf2+0x50>
 800085a:	2a00      	cmp	r2, #0
 800085c:	d008      	beq.n	8000870 <__lesf2+0x54>
 800085e:	4283      	cmp	r3, r0
 8000860:	d012      	beq.n	8000888 <__lesf2+0x6c>
 8000862:	2102      	movs	r1, #2
 8000864:	1e58      	subs	r0, r3, #1
 8000866:	4008      	ands	r0, r1
 8000868:	3801      	subs	r0, #1
 800086a:	e000      	b.n	800086e <__lesf2+0x52>
 800086c:	2002      	movs	r0, #2
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	2d00      	cmp	r5, #0
 8000872:	d1f4      	bne.n	800085e <__lesf2+0x42>
 8000874:	2800      	cmp	r0, #0
 8000876:	d1fa      	bne.n	800086e <__lesf2+0x52>
 8000878:	2001      	movs	r0, #1
 800087a:	4240      	negs	r0, r0
 800087c:	e7f7      	b.n	800086e <__lesf2+0x52>
 800087e:	2c00      	cmp	r4, #0
 8000880:	d1ed      	bne.n	800085e <__lesf2+0x42>
 8000882:	2e00      	cmp	r6, #0
 8000884:	d1eb      	bne.n	800085e <__lesf2+0x42>
 8000886:	e7ec      	b.n	8000862 <__lesf2+0x46>
 8000888:	42a2      	cmp	r2, r4
 800088a:	dc05      	bgt.n	8000898 <__lesf2+0x7c>
 800088c:	dbf2      	blt.n	8000874 <__lesf2+0x58>
 800088e:	42b5      	cmp	r5, r6
 8000890:	d802      	bhi.n	8000898 <__lesf2+0x7c>
 8000892:	d3ef      	bcc.n	8000874 <__lesf2+0x58>
 8000894:	2000      	movs	r0, #0
 8000896:	e7ea      	b.n	800086e <__lesf2+0x52>
 8000898:	4243      	negs	r3, r0
 800089a:	4158      	adcs	r0, r3
 800089c:	0040      	lsls	r0, r0, #1
 800089e:	3801      	subs	r0, #1
 80008a0:	e7e5      	b.n	800086e <__lesf2+0x52>
 80008a2:	46c0      	nop			; (mov r8, r8)

080008a4 <__aeabi_fmul>:
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	464f      	mov	r7, r9
 80008a8:	4646      	mov	r6, r8
 80008aa:	46d6      	mov	lr, sl
 80008ac:	0244      	lsls	r4, r0, #9
 80008ae:	0045      	lsls	r5, r0, #1
 80008b0:	b5c0      	push	{r6, r7, lr}
 80008b2:	0a64      	lsrs	r4, r4, #9
 80008b4:	1c0f      	adds	r7, r1, #0
 80008b6:	0e2d      	lsrs	r5, r5, #24
 80008b8:	0fc6      	lsrs	r6, r0, #31
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fmul+0x1c>
 80008be:	e08d      	b.n	80009dc <__aeabi_fmul+0x138>
 80008c0:	2dff      	cmp	r5, #255	; 0xff
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fmul+0x22>
 80008c4:	e092      	b.n	80009ec <__aeabi_fmul+0x148>
 80008c6:	2300      	movs	r3, #0
 80008c8:	2080      	movs	r0, #128	; 0x80
 80008ca:	4699      	mov	r9, r3
 80008cc:	469a      	mov	sl, r3
 80008ce:	00e4      	lsls	r4, r4, #3
 80008d0:	04c0      	lsls	r0, r0, #19
 80008d2:	4304      	orrs	r4, r0
 80008d4:	3d7f      	subs	r5, #127	; 0x7f
 80008d6:	0278      	lsls	r0, r7, #9
 80008d8:	0a43      	lsrs	r3, r0, #9
 80008da:	4698      	mov	r8, r3
 80008dc:	007b      	lsls	r3, r7, #1
 80008de:	0e1b      	lsrs	r3, r3, #24
 80008e0:	0fff      	lsrs	r7, r7, #31
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fmul+0x44>
 80008e6:	e070      	b.n	80009ca <__aeabi_fmul+0x126>
 80008e8:	2bff      	cmp	r3, #255	; 0xff
 80008ea:	d100      	bne.n	80008ee <__aeabi_fmul+0x4a>
 80008ec:	e086      	b.n	80009fc <__aeabi_fmul+0x158>
 80008ee:	4642      	mov	r2, r8
 80008f0:	00d0      	lsls	r0, r2, #3
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	3b7f      	subs	r3, #127	; 0x7f
 80008f6:	18ed      	adds	r5, r5, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	04d2      	lsls	r2, r2, #19
 80008fc:	4302      	orrs	r2, r0
 80008fe:	4690      	mov	r8, r2
 8000900:	469c      	mov	ip, r3
 8000902:	0031      	movs	r1, r6
 8000904:	464b      	mov	r3, r9
 8000906:	4079      	eors	r1, r7
 8000908:	1c68      	adds	r0, r5, #1
 800090a:	2b0f      	cmp	r3, #15
 800090c:	d81c      	bhi.n	8000948 <__aeabi_fmul+0xa4>
 800090e:	4a76      	ldr	r2, [pc, #472]	; (8000ae8 <__aeabi_fmul+0x244>)
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	58d3      	ldr	r3, [r2, r3]
 8000914:	469f      	mov	pc, r3
 8000916:	0039      	movs	r1, r7
 8000918:	4644      	mov	r4, r8
 800091a:	46e2      	mov	sl, ip
 800091c:	4653      	mov	r3, sl
 800091e:	2b02      	cmp	r3, #2
 8000920:	d00f      	beq.n	8000942 <__aeabi_fmul+0x9e>
 8000922:	2b03      	cmp	r3, #3
 8000924:	d100      	bne.n	8000928 <__aeabi_fmul+0x84>
 8000926:	e0d7      	b.n	8000ad8 <__aeabi_fmul+0x234>
 8000928:	2b01      	cmp	r3, #1
 800092a:	d137      	bne.n	800099c <__aeabi_fmul+0xf8>
 800092c:	2000      	movs	r0, #0
 800092e:	2400      	movs	r4, #0
 8000930:	05c0      	lsls	r0, r0, #23
 8000932:	4320      	orrs	r0, r4
 8000934:	07c9      	lsls	r1, r1, #31
 8000936:	4308      	orrs	r0, r1
 8000938:	bce0      	pop	{r5, r6, r7}
 800093a:	46ba      	mov	sl, r7
 800093c:	46b1      	mov	r9, r6
 800093e:	46a8      	mov	r8, r5
 8000940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	2400      	movs	r4, #0
 8000946:	e7f3      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000948:	0c26      	lsrs	r6, r4, #16
 800094a:	0424      	lsls	r4, r4, #16
 800094c:	0c22      	lsrs	r2, r4, #16
 800094e:	4644      	mov	r4, r8
 8000950:	0424      	lsls	r4, r4, #16
 8000952:	0c24      	lsrs	r4, r4, #16
 8000954:	4643      	mov	r3, r8
 8000956:	0027      	movs	r7, r4
 8000958:	0c1b      	lsrs	r3, r3, #16
 800095a:	4357      	muls	r7, r2
 800095c:	4374      	muls	r4, r6
 800095e:	435a      	muls	r2, r3
 8000960:	435e      	muls	r6, r3
 8000962:	1912      	adds	r2, r2, r4
 8000964:	0c3b      	lsrs	r3, r7, #16
 8000966:	189b      	adds	r3, r3, r2
 8000968:	429c      	cmp	r4, r3
 800096a:	d903      	bls.n	8000974 <__aeabi_fmul+0xd0>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0252      	lsls	r2, r2, #9
 8000970:	4694      	mov	ip, r2
 8000972:	4466      	add	r6, ip
 8000974:	043f      	lsls	r7, r7, #16
 8000976:	041a      	lsls	r2, r3, #16
 8000978:	0c3f      	lsrs	r7, r7, #16
 800097a:	19d2      	adds	r2, r2, r7
 800097c:	0194      	lsls	r4, r2, #6
 800097e:	1e67      	subs	r7, r4, #1
 8000980:	41bc      	sbcs	r4, r7
 8000982:	0c1b      	lsrs	r3, r3, #16
 8000984:	0e92      	lsrs	r2, r2, #26
 8000986:	199b      	adds	r3, r3, r6
 8000988:	4314      	orrs	r4, r2
 800098a:	019b      	lsls	r3, r3, #6
 800098c:	431c      	orrs	r4, r3
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	d400      	bmi.n	8000994 <__aeabi_fmul+0xf0>
 8000992:	e09b      	b.n	8000acc <__aeabi_fmul+0x228>
 8000994:	2301      	movs	r3, #1
 8000996:	0862      	lsrs	r2, r4, #1
 8000998:	401c      	ands	r4, r3
 800099a:	4314      	orrs	r4, r2
 800099c:	0002      	movs	r2, r0
 800099e:	327f      	adds	r2, #127	; 0x7f
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	dd64      	ble.n	8000a6e <__aeabi_fmul+0x1ca>
 80009a4:	0763      	lsls	r3, r4, #29
 80009a6:	d004      	beq.n	80009b2 <__aeabi_fmul+0x10e>
 80009a8:	230f      	movs	r3, #15
 80009aa:	4023      	ands	r3, r4
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	d000      	beq.n	80009b2 <__aeabi_fmul+0x10e>
 80009b0:	3404      	adds	r4, #4
 80009b2:	0123      	lsls	r3, r4, #4
 80009b4:	d503      	bpl.n	80009be <__aeabi_fmul+0x11a>
 80009b6:	0002      	movs	r2, r0
 80009b8:	4b4c      	ldr	r3, [pc, #304]	; (8000aec <__aeabi_fmul+0x248>)
 80009ba:	3280      	adds	r2, #128	; 0x80
 80009bc:	401c      	ands	r4, r3
 80009be:	2afe      	cmp	r2, #254	; 0xfe
 80009c0:	dcbf      	bgt.n	8000942 <__aeabi_fmul+0x9e>
 80009c2:	01a4      	lsls	r4, r4, #6
 80009c4:	0a64      	lsrs	r4, r4, #9
 80009c6:	b2d0      	uxtb	r0, r2
 80009c8:	e7b2      	b.n	8000930 <__aeabi_fmul+0x8c>
 80009ca:	4643      	mov	r3, r8
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d13d      	bne.n	8000a4c <__aeabi_fmul+0x1a8>
 80009d0:	464a      	mov	r2, r9
 80009d2:	3301      	adds	r3, #1
 80009d4:	431a      	orrs	r2, r3
 80009d6:	4691      	mov	r9, r2
 80009d8:	469c      	mov	ip, r3
 80009da:	e792      	b.n	8000902 <__aeabi_fmul+0x5e>
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d129      	bne.n	8000a34 <__aeabi_fmul+0x190>
 80009e0:	2304      	movs	r3, #4
 80009e2:	4699      	mov	r9, r3
 80009e4:	3b03      	subs	r3, #3
 80009e6:	2500      	movs	r5, #0
 80009e8:	469a      	mov	sl, r3
 80009ea:	e774      	b.n	80008d6 <__aeabi_fmul+0x32>
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	d11b      	bne.n	8000a28 <__aeabi_fmul+0x184>
 80009f0:	2308      	movs	r3, #8
 80009f2:	4699      	mov	r9, r3
 80009f4:	3b06      	subs	r3, #6
 80009f6:	25ff      	movs	r5, #255	; 0xff
 80009f8:	469a      	mov	sl, r3
 80009fa:	e76c      	b.n	80008d6 <__aeabi_fmul+0x32>
 80009fc:	4643      	mov	r3, r8
 80009fe:	35ff      	adds	r5, #255	; 0xff
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10b      	bne.n	8000a1c <__aeabi_fmul+0x178>
 8000a04:	2302      	movs	r3, #2
 8000a06:	464a      	mov	r2, r9
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	4691      	mov	r9, r2
 8000a0c:	469c      	mov	ip, r3
 8000a0e:	e778      	b.n	8000902 <__aeabi_fmul+0x5e>
 8000a10:	4653      	mov	r3, sl
 8000a12:	0031      	movs	r1, r6
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fmul+0x176>
 8000a18:	e783      	b.n	8000922 <__aeabi_fmul+0x7e>
 8000a1a:	e792      	b.n	8000942 <__aeabi_fmul+0x9e>
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	464a      	mov	r2, r9
 8000a20:	431a      	orrs	r2, r3
 8000a22:	4691      	mov	r9, r2
 8000a24:	469c      	mov	ip, r3
 8000a26:	e76c      	b.n	8000902 <__aeabi_fmul+0x5e>
 8000a28:	230c      	movs	r3, #12
 8000a2a:	4699      	mov	r9, r3
 8000a2c:	3b09      	subs	r3, #9
 8000a2e:	25ff      	movs	r5, #255	; 0xff
 8000a30:	469a      	mov	sl, r3
 8000a32:	e750      	b.n	80008d6 <__aeabi_fmul+0x32>
 8000a34:	0020      	movs	r0, r4
 8000a36:	f001 ffa1 	bl	800297c <__clzsi2>
 8000a3a:	2576      	movs	r5, #118	; 0x76
 8000a3c:	1f43      	subs	r3, r0, #5
 8000a3e:	409c      	lsls	r4, r3
 8000a40:	2300      	movs	r3, #0
 8000a42:	426d      	negs	r5, r5
 8000a44:	4699      	mov	r9, r3
 8000a46:	469a      	mov	sl, r3
 8000a48:	1a2d      	subs	r5, r5, r0
 8000a4a:	e744      	b.n	80008d6 <__aeabi_fmul+0x32>
 8000a4c:	4640      	mov	r0, r8
 8000a4e:	f001 ff95 	bl	800297c <__clzsi2>
 8000a52:	4642      	mov	r2, r8
 8000a54:	1f43      	subs	r3, r0, #5
 8000a56:	409a      	lsls	r2, r3
 8000a58:	2300      	movs	r3, #0
 8000a5a:	1a2d      	subs	r5, r5, r0
 8000a5c:	4690      	mov	r8, r2
 8000a5e:	469c      	mov	ip, r3
 8000a60:	3d76      	subs	r5, #118	; 0x76
 8000a62:	e74e      	b.n	8000902 <__aeabi_fmul+0x5e>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	2100      	movs	r1, #0
 8000a68:	20ff      	movs	r0, #255	; 0xff
 8000a6a:	03e4      	lsls	r4, r4, #15
 8000a6c:	e760      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	2b1b      	cmp	r3, #27
 8000a74:	dd00      	ble.n	8000a78 <__aeabi_fmul+0x1d4>
 8000a76:	e759      	b.n	800092c <__aeabi_fmul+0x88>
 8000a78:	0022      	movs	r2, r4
 8000a7a:	309e      	adds	r0, #158	; 0x9e
 8000a7c:	40da      	lsrs	r2, r3
 8000a7e:	4084      	lsls	r4, r0
 8000a80:	0013      	movs	r3, r2
 8000a82:	1e62      	subs	r2, r4, #1
 8000a84:	4194      	sbcs	r4, r2
 8000a86:	431c      	orrs	r4, r3
 8000a88:	0763      	lsls	r3, r4, #29
 8000a8a:	d004      	beq.n	8000a96 <__aeabi_fmul+0x1f2>
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	4023      	ands	r3, r4
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fmul+0x1f2>
 8000a94:	3404      	adds	r4, #4
 8000a96:	0163      	lsls	r3, r4, #5
 8000a98:	d51a      	bpl.n	8000ad0 <__aeabi_fmul+0x22c>
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	e747      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000aa0:	2080      	movs	r0, #128	; 0x80
 8000aa2:	03c0      	lsls	r0, r0, #15
 8000aa4:	4204      	tst	r4, r0
 8000aa6:	d009      	beq.n	8000abc <__aeabi_fmul+0x218>
 8000aa8:	4643      	mov	r3, r8
 8000aaa:	4203      	tst	r3, r0
 8000aac:	d106      	bne.n	8000abc <__aeabi_fmul+0x218>
 8000aae:	4644      	mov	r4, r8
 8000ab0:	4304      	orrs	r4, r0
 8000ab2:	0264      	lsls	r4, r4, #9
 8000ab4:	0039      	movs	r1, r7
 8000ab6:	20ff      	movs	r0, #255	; 0xff
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	e739      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000abc:	2080      	movs	r0, #128	; 0x80
 8000abe:	03c0      	lsls	r0, r0, #15
 8000ac0:	4304      	orrs	r4, r0
 8000ac2:	0264      	lsls	r4, r4, #9
 8000ac4:	0031      	movs	r1, r6
 8000ac6:	20ff      	movs	r0, #255	; 0xff
 8000ac8:	0a64      	lsrs	r4, r4, #9
 8000aca:	e731      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000acc:	0028      	movs	r0, r5
 8000ace:	e765      	b.n	800099c <__aeabi_fmul+0xf8>
 8000ad0:	01a4      	lsls	r4, r4, #6
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	e72b      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000ad8:	2080      	movs	r0, #128	; 0x80
 8000ada:	03c0      	lsls	r0, r0, #15
 8000adc:	4304      	orrs	r4, r0
 8000ade:	0264      	lsls	r4, r4, #9
 8000ae0:	20ff      	movs	r0, #255	; 0xff
 8000ae2:	0a64      	lsrs	r4, r4, #9
 8000ae4:	e724      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	0800ffc4 	.word	0x0800ffc4
 8000aec:	f7ffffff 	.word	0xf7ffffff

08000af0 <__aeabi_i2f>:
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af2:	2800      	cmp	r0, #0
 8000af4:	d013      	beq.n	8000b1e <__aeabi_i2f+0x2e>
 8000af6:	17c3      	asrs	r3, r0, #31
 8000af8:	18c6      	adds	r6, r0, r3
 8000afa:	405e      	eors	r6, r3
 8000afc:	0fc4      	lsrs	r4, r0, #31
 8000afe:	0030      	movs	r0, r6
 8000b00:	f001 ff3c 	bl	800297c <__clzsi2>
 8000b04:	239e      	movs	r3, #158	; 0x9e
 8000b06:	0005      	movs	r5, r0
 8000b08:	1a1b      	subs	r3, r3, r0
 8000b0a:	2b96      	cmp	r3, #150	; 0x96
 8000b0c:	dc0f      	bgt.n	8000b2e <__aeabi_i2f+0x3e>
 8000b0e:	2808      	cmp	r0, #8
 8000b10:	dd01      	ble.n	8000b16 <__aeabi_i2f+0x26>
 8000b12:	3d08      	subs	r5, #8
 8000b14:	40ae      	lsls	r6, r5
 8000b16:	0276      	lsls	r6, r6, #9
 8000b18:	0a76      	lsrs	r6, r6, #9
 8000b1a:	b2d8      	uxtb	r0, r3
 8000b1c:	e002      	b.n	8000b24 <__aeabi_i2f+0x34>
 8000b1e:	2400      	movs	r4, #0
 8000b20:	2000      	movs	r0, #0
 8000b22:	2600      	movs	r6, #0
 8000b24:	05c0      	lsls	r0, r0, #23
 8000b26:	4330      	orrs	r0, r6
 8000b28:	07e4      	lsls	r4, r4, #31
 8000b2a:	4320      	orrs	r0, r4
 8000b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b2e:	2b99      	cmp	r3, #153	; 0x99
 8000b30:	dd0c      	ble.n	8000b4c <__aeabi_i2f+0x5c>
 8000b32:	2205      	movs	r2, #5
 8000b34:	0031      	movs	r1, r6
 8000b36:	1a12      	subs	r2, r2, r0
 8000b38:	40d1      	lsrs	r1, r2
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	0001      	movs	r1, r0
 8000b3e:	0030      	movs	r0, r6
 8000b40:	311b      	adds	r1, #27
 8000b42:	4088      	lsls	r0, r1
 8000b44:	1e41      	subs	r1, r0, #1
 8000b46:	4188      	sbcs	r0, r1
 8000b48:	4302      	orrs	r2, r0
 8000b4a:	0016      	movs	r6, r2
 8000b4c:	2d05      	cmp	r5, #5
 8000b4e:	dc12      	bgt.n	8000b76 <__aeabi_i2f+0x86>
 8000b50:	0031      	movs	r1, r6
 8000b52:	4f0d      	ldr	r7, [pc, #52]	; (8000b88 <__aeabi_i2f+0x98>)
 8000b54:	4039      	ands	r1, r7
 8000b56:	0772      	lsls	r2, r6, #29
 8000b58:	d009      	beq.n	8000b6e <__aeabi_i2f+0x7e>
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	4030      	ands	r0, r6
 8000b5e:	2804      	cmp	r0, #4
 8000b60:	d005      	beq.n	8000b6e <__aeabi_i2f+0x7e>
 8000b62:	3104      	adds	r1, #4
 8000b64:	014a      	lsls	r2, r1, #5
 8000b66:	d502      	bpl.n	8000b6e <__aeabi_i2f+0x7e>
 8000b68:	239f      	movs	r3, #159	; 0x9f
 8000b6a:	4039      	ands	r1, r7
 8000b6c:	1b5b      	subs	r3, r3, r5
 8000b6e:	0189      	lsls	r1, r1, #6
 8000b70:	0a4e      	lsrs	r6, r1, #9
 8000b72:	b2d8      	uxtb	r0, r3
 8000b74:	e7d6      	b.n	8000b24 <__aeabi_i2f+0x34>
 8000b76:	1f6a      	subs	r2, r5, #5
 8000b78:	4096      	lsls	r6, r2
 8000b7a:	0031      	movs	r1, r6
 8000b7c:	4f02      	ldr	r7, [pc, #8]	; (8000b88 <__aeabi_i2f+0x98>)
 8000b7e:	4039      	ands	r1, r7
 8000b80:	0772      	lsls	r2, r6, #29
 8000b82:	d0f4      	beq.n	8000b6e <__aeabi_i2f+0x7e>
 8000b84:	e7e9      	b.n	8000b5a <__aeabi_i2f+0x6a>
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	fbffffff 	.word	0xfbffffff

08000b8c <__aeabi_ui2f>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	1e05      	subs	r5, r0, #0
 8000b90:	d00e      	beq.n	8000bb0 <__aeabi_ui2f+0x24>
 8000b92:	f001 fef3 	bl	800297c <__clzsi2>
 8000b96:	239e      	movs	r3, #158	; 0x9e
 8000b98:	0004      	movs	r4, r0
 8000b9a:	1a1b      	subs	r3, r3, r0
 8000b9c:	2b96      	cmp	r3, #150	; 0x96
 8000b9e:	dc0c      	bgt.n	8000bba <__aeabi_ui2f+0x2e>
 8000ba0:	2808      	cmp	r0, #8
 8000ba2:	dd01      	ble.n	8000ba8 <__aeabi_ui2f+0x1c>
 8000ba4:	3c08      	subs	r4, #8
 8000ba6:	40a5      	lsls	r5, r4
 8000ba8:	026d      	lsls	r5, r5, #9
 8000baa:	0a6d      	lsrs	r5, r5, #9
 8000bac:	b2d8      	uxtb	r0, r3
 8000bae:	e001      	b.n	8000bb4 <__aeabi_ui2f+0x28>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	05c0      	lsls	r0, r0, #23
 8000bb6:	4328      	orrs	r0, r5
 8000bb8:	bd70      	pop	{r4, r5, r6, pc}
 8000bba:	2b99      	cmp	r3, #153	; 0x99
 8000bbc:	dd09      	ble.n	8000bd2 <__aeabi_ui2f+0x46>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	0029      	movs	r1, r5
 8000bc2:	321b      	adds	r2, #27
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	1e4a      	subs	r2, r1, #1
 8000bc8:	4191      	sbcs	r1, r2
 8000bca:	2205      	movs	r2, #5
 8000bcc:	1a12      	subs	r2, r2, r0
 8000bce:	40d5      	lsrs	r5, r2
 8000bd0:	430d      	orrs	r5, r1
 8000bd2:	2c05      	cmp	r4, #5
 8000bd4:	dc12      	bgt.n	8000bfc <__aeabi_ui2f+0x70>
 8000bd6:	0029      	movs	r1, r5
 8000bd8:	4e0c      	ldr	r6, [pc, #48]	; (8000c0c <__aeabi_ui2f+0x80>)
 8000bda:	4031      	ands	r1, r6
 8000bdc:	076a      	lsls	r2, r5, #29
 8000bde:	d009      	beq.n	8000bf4 <__aeabi_ui2f+0x68>
 8000be0:	200f      	movs	r0, #15
 8000be2:	4028      	ands	r0, r5
 8000be4:	2804      	cmp	r0, #4
 8000be6:	d005      	beq.n	8000bf4 <__aeabi_ui2f+0x68>
 8000be8:	3104      	adds	r1, #4
 8000bea:	014a      	lsls	r2, r1, #5
 8000bec:	d502      	bpl.n	8000bf4 <__aeabi_ui2f+0x68>
 8000bee:	239f      	movs	r3, #159	; 0x9f
 8000bf0:	4031      	ands	r1, r6
 8000bf2:	1b1b      	subs	r3, r3, r4
 8000bf4:	0189      	lsls	r1, r1, #6
 8000bf6:	0a4d      	lsrs	r5, r1, #9
 8000bf8:	b2d8      	uxtb	r0, r3
 8000bfa:	e7db      	b.n	8000bb4 <__aeabi_ui2f+0x28>
 8000bfc:	1f62      	subs	r2, r4, #5
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	0029      	movs	r1, r5
 8000c02:	4e02      	ldr	r6, [pc, #8]	; (8000c0c <__aeabi_ui2f+0x80>)
 8000c04:	4031      	ands	r1, r6
 8000c06:	076a      	lsls	r2, r5, #29
 8000c08:	d0f4      	beq.n	8000bf4 <__aeabi_ui2f+0x68>
 8000c0a:	e7e9      	b.n	8000be0 <__aeabi_ui2f+0x54>
 8000c0c:	fbffffff 	.word	0xfbffffff

08000c10 <__aeabi_dadd>:
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	464f      	mov	r7, r9
 8000c14:	4646      	mov	r6, r8
 8000c16:	46d6      	mov	lr, sl
 8000c18:	000d      	movs	r5, r1
 8000c1a:	0004      	movs	r4, r0
 8000c1c:	b5c0      	push	{r6, r7, lr}
 8000c1e:	001f      	movs	r7, r3
 8000c20:	0011      	movs	r1, r2
 8000c22:	0328      	lsls	r0, r5, #12
 8000c24:	0f62      	lsrs	r2, r4, #29
 8000c26:	0a40      	lsrs	r0, r0, #9
 8000c28:	4310      	orrs	r0, r2
 8000c2a:	007a      	lsls	r2, r7, #1
 8000c2c:	0d52      	lsrs	r2, r2, #21
 8000c2e:	00e3      	lsls	r3, r4, #3
 8000c30:	033c      	lsls	r4, r7, #12
 8000c32:	4691      	mov	r9, r2
 8000c34:	0a64      	lsrs	r4, r4, #9
 8000c36:	0ffa      	lsrs	r2, r7, #31
 8000c38:	0f4f      	lsrs	r7, r1, #29
 8000c3a:	006e      	lsls	r6, r5, #1
 8000c3c:	4327      	orrs	r7, r4
 8000c3e:	4692      	mov	sl, r2
 8000c40:	46b8      	mov	r8, r7
 8000c42:	0d76      	lsrs	r6, r6, #21
 8000c44:	0fed      	lsrs	r5, r5, #31
 8000c46:	00c9      	lsls	r1, r1, #3
 8000c48:	4295      	cmp	r5, r2
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dadd+0x3e>
 8000c4c:	e099      	b.n	8000d82 <__aeabi_dadd+0x172>
 8000c4e:	464c      	mov	r4, r9
 8000c50:	1b34      	subs	r4, r6, r4
 8000c52:	46a4      	mov	ip, r4
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_dadd+0x4a>
 8000c58:	e07c      	b.n	8000d54 <__aeabi_dadd+0x144>
 8000c5a:	464a      	mov	r2, r9
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dadd+0x52>
 8000c60:	e0b8      	b.n	8000dd4 <__aeabi_dadd+0x1c4>
 8000c62:	4ac5      	ldr	r2, [pc, #788]	; (8000f78 <__aeabi_dadd+0x368>)
 8000c64:	4296      	cmp	r6, r2
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x5a>
 8000c68:	e11c      	b.n	8000ea4 <__aeabi_dadd+0x294>
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	003c      	movs	r4, r7
 8000c6e:	0412      	lsls	r2, r2, #16
 8000c70:	4314      	orrs	r4, r2
 8000c72:	46a0      	mov	r8, r4
 8000c74:	4662      	mov	r2, ip
 8000c76:	2a38      	cmp	r2, #56	; 0x38
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_dadd+0x6c>
 8000c7a:	e161      	b.n	8000f40 <__aeabi_dadd+0x330>
 8000c7c:	2a1f      	cmp	r2, #31
 8000c7e:	dd00      	ble.n	8000c82 <__aeabi_dadd+0x72>
 8000c80:	e1cc      	b.n	800101c <__aeabi_dadd+0x40c>
 8000c82:	4664      	mov	r4, ip
 8000c84:	2220      	movs	r2, #32
 8000c86:	1b12      	subs	r2, r2, r4
 8000c88:	4644      	mov	r4, r8
 8000c8a:	4094      	lsls	r4, r2
 8000c8c:	000f      	movs	r7, r1
 8000c8e:	46a1      	mov	r9, r4
 8000c90:	4664      	mov	r4, ip
 8000c92:	4091      	lsls	r1, r2
 8000c94:	40e7      	lsrs	r7, r4
 8000c96:	464c      	mov	r4, r9
 8000c98:	1e4a      	subs	r2, r1, #1
 8000c9a:	4191      	sbcs	r1, r2
 8000c9c:	433c      	orrs	r4, r7
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	4321      	orrs	r1, r4
 8000ca2:	4664      	mov	r4, ip
 8000ca4:	40e2      	lsrs	r2, r4
 8000ca6:	1a80      	subs	r0, r0, r2
 8000ca8:	1a5c      	subs	r4, r3, r1
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	419b      	sbcs	r3, r3
 8000cae:	425f      	negs	r7, r3
 8000cb0:	1bc7      	subs	r7, r0, r7
 8000cb2:	023b      	lsls	r3, r7, #8
 8000cb4:	d400      	bmi.n	8000cb8 <__aeabi_dadd+0xa8>
 8000cb6:	e0d0      	b.n	8000e5a <__aeabi_dadd+0x24a>
 8000cb8:	027f      	lsls	r7, r7, #9
 8000cba:	0a7f      	lsrs	r7, r7, #9
 8000cbc:	2f00      	cmp	r7, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0xb2>
 8000cc0:	e0ff      	b.n	8000ec2 <__aeabi_dadd+0x2b2>
 8000cc2:	0038      	movs	r0, r7
 8000cc4:	f001 fe5a 	bl	800297c <__clzsi2>
 8000cc8:	0001      	movs	r1, r0
 8000cca:	3908      	subs	r1, #8
 8000ccc:	2320      	movs	r3, #32
 8000cce:	0022      	movs	r2, r4
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	408f      	lsls	r7, r1
 8000cd4:	40da      	lsrs	r2, r3
 8000cd6:	408c      	lsls	r4, r1
 8000cd8:	4317      	orrs	r7, r2
 8000cda:	42b1      	cmp	r1, r6
 8000cdc:	da00      	bge.n	8000ce0 <__aeabi_dadd+0xd0>
 8000cde:	e0ff      	b.n	8000ee0 <__aeabi_dadd+0x2d0>
 8000ce0:	1b89      	subs	r1, r1, r6
 8000ce2:	1c4b      	adds	r3, r1, #1
 8000ce4:	2b1f      	cmp	r3, #31
 8000ce6:	dd00      	ble.n	8000cea <__aeabi_dadd+0xda>
 8000ce8:	e0a8      	b.n	8000e3c <__aeabi_dadd+0x22c>
 8000cea:	2220      	movs	r2, #32
 8000cec:	0039      	movs	r1, r7
 8000cee:	1ad2      	subs	r2, r2, r3
 8000cf0:	0020      	movs	r0, r4
 8000cf2:	4094      	lsls	r4, r2
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	40d8      	lsrs	r0, r3
 8000cf8:	1e62      	subs	r2, r4, #1
 8000cfa:	4194      	sbcs	r4, r2
 8000cfc:	40df      	lsrs	r7, r3
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4301      	orrs	r1, r0
 8000d02:	430c      	orrs	r4, r1
 8000d04:	0763      	lsls	r3, r4, #29
 8000d06:	d009      	beq.n	8000d1c <__aeabi_dadd+0x10c>
 8000d08:	230f      	movs	r3, #15
 8000d0a:	4023      	ands	r3, r4
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d005      	beq.n	8000d1c <__aeabi_dadd+0x10c>
 8000d10:	1d23      	adds	r3, r4, #4
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	41a4      	sbcs	r4, r4
 8000d16:	4264      	negs	r4, r4
 8000d18:	193f      	adds	r7, r7, r4
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	023b      	lsls	r3, r7, #8
 8000d1e:	d400      	bmi.n	8000d22 <__aeabi_dadd+0x112>
 8000d20:	e09e      	b.n	8000e60 <__aeabi_dadd+0x250>
 8000d22:	4b95      	ldr	r3, [pc, #596]	; (8000f78 <__aeabi_dadd+0x368>)
 8000d24:	3601      	adds	r6, #1
 8000d26:	429e      	cmp	r6, r3
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x11c>
 8000d2a:	e0b7      	b.n	8000e9c <__aeabi_dadd+0x28c>
 8000d2c:	4a93      	ldr	r2, [pc, #588]	; (8000f7c <__aeabi_dadd+0x36c>)
 8000d2e:	08e4      	lsrs	r4, r4, #3
 8000d30:	4017      	ands	r7, r2
 8000d32:	077b      	lsls	r3, r7, #29
 8000d34:	0571      	lsls	r1, r6, #21
 8000d36:	027f      	lsls	r7, r7, #9
 8000d38:	4323      	orrs	r3, r4
 8000d3a:	0b3f      	lsrs	r7, r7, #12
 8000d3c:	0d4a      	lsrs	r2, r1, #21
 8000d3e:	0512      	lsls	r2, r2, #20
 8000d40:	433a      	orrs	r2, r7
 8000d42:	07ed      	lsls	r5, r5, #31
 8000d44:	432a      	orrs	r2, r5
 8000d46:	0018      	movs	r0, r3
 8000d48:	0011      	movs	r1, r2
 8000d4a:	bce0      	pop	{r5, r6, r7}
 8000d4c:	46ba      	mov	sl, r7
 8000d4e:	46b1      	mov	r9, r6
 8000d50:	46a8      	mov	r8, r5
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04b      	beq.n	8000df0 <__aeabi_dadd+0x1e0>
 8000d58:	464c      	mov	r4, r9
 8000d5a:	1ba4      	subs	r4, r4, r6
 8000d5c:	46a4      	mov	ip, r4
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d000      	beq.n	8000d64 <__aeabi_dadd+0x154>
 8000d62:	e123      	b.n	8000fac <__aeabi_dadd+0x39c>
 8000d64:	0004      	movs	r4, r0
 8000d66:	431c      	orrs	r4, r3
 8000d68:	d100      	bne.n	8000d6c <__aeabi_dadd+0x15c>
 8000d6a:	e1af      	b.n	80010cc <__aeabi_dadd+0x4bc>
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	1e54      	subs	r4, r2, #1
 8000d70:	2a01      	cmp	r2, #1
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dadd+0x166>
 8000d74:	e215      	b.n	80011a2 <__aeabi_dadd+0x592>
 8000d76:	4d80      	ldr	r5, [pc, #512]	; (8000f78 <__aeabi_dadd+0x368>)
 8000d78:	45ac      	cmp	ip, r5
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_dadd+0x16e>
 8000d7c:	e1c8      	b.n	8001110 <__aeabi_dadd+0x500>
 8000d7e:	46a4      	mov	ip, r4
 8000d80:	e11b      	b.n	8000fba <__aeabi_dadd+0x3aa>
 8000d82:	464a      	mov	r2, r9
 8000d84:	1ab2      	subs	r2, r6, r2
 8000d86:	4694      	mov	ip, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_dadd+0x17e>
 8000d8c:	e0ac      	b.n	8000ee8 <__aeabi_dadd+0x2d8>
 8000d8e:	464a      	mov	r2, r9
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d043      	beq.n	8000e1c <__aeabi_dadd+0x20c>
 8000d94:	4a78      	ldr	r2, [pc, #480]	; (8000f78 <__aeabi_dadd+0x368>)
 8000d96:	4296      	cmp	r6, r2
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x18c>
 8000d9a:	e1af      	b.n	80010fc <__aeabi_dadd+0x4ec>
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	003c      	movs	r4, r7
 8000da0:	0412      	lsls	r2, r2, #16
 8000da2:	4314      	orrs	r4, r2
 8000da4:	46a0      	mov	r8, r4
 8000da6:	4662      	mov	r2, ip
 8000da8:	2a38      	cmp	r2, #56	; 0x38
 8000daa:	dc67      	bgt.n	8000e7c <__aeabi_dadd+0x26c>
 8000dac:	2a1f      	cmp	r2, #31
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_dadd+0x1a2>
 8000db0:	e15f      	b.n	8001072 <__aeabi_dadd+0x462>
 8000db2:	4647      	mov	r7, r8
 8000db4:	3a20      	subs	r2, #32
 8000db6:	40d7      	lsrs	r7, r2
 8000db8:	4662      	mov	r2, ip
 8000dba:	2a20      	cmp	r2, #32
 8000dbc:	d005      	beq.n	8000dca <__aeabi_dadd+0x1ba>
 8000dbe:	4664      	mov	r4, ip
 8000dc0:	2240      	movs	r2, #64	; 0x40
 8000dc2:	1b12      	subs	r2, r2, r4
 8000dc4:	4644      	mov	r4, r8
 8000dc6:	4094      	lsls	r4, r2
 8000dc8:	4321      	orrs	r1, r4
 8000dca:	1e4a      	subs	r2, r1, #1
 8000dcc:	4191      	sbcs	r1, r2
 8000dce:	000c      	movs	r4, r1
 8000dd0:	433c      	orrs	r4, r7
 8000dd2:	e057      	b.n	8000e84 <__aeabi_dadd+0x274>
 8000dd4:	003a      	movs	r2, r7
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_dadd+0x1cc>
 8000dda:	e105      	b.n	8000fe8 <__aeabi_dadd+0x3d8>
 8000ddc:	0022      	movs	r2, r4
 8000dde:	3a01      	subs	r2, #1
 8000de0:	2c01      	cmp	r4, #1
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x1d6>
 8000de4:	e182      	b.n	80010ec <__aeabi_dadd+0x4dc>
 8000de6:	4c64      	ldr	r4, [pc, #400]	; (8000f78 <__aeabi_dadd+0x368>)
 8000de8:	45a4      	cmp	ip, r4
 8000dea:	d05b      	beq.n	8000ea4 <__aeabi_dadd+0x294>
 8000dec:	4694      	mov	ip, r2
 8000dee:	e741      	b.n	8000c74 <__aeabi_dadd+0x64>
 8000df0:	4c63      	ldr	r4, [pc, #396]	; (8000f80 <__aeabi_dadd+0x370>)
 8000df2:	1c77      	adds	r7, r6, #1
 8000df4:	4227      	tst	r7, r4
 8000df6:	d000      	beq.n	8000dfa <__aeabi_dadd+0x1ea>
 8000df8:	e0c4      	b.n	8000f84 <__aeabi_dadd+0x374>
 8000dfa:	0004      	movs	r4, r0
 8000dfc:	431c      	orrs	r4, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d000      	beq.n	8000e04 <__aeabi_dadd+0x1f4>
 8000e02:	e169      	b.n	80010d8 <__aeabi_dadd+0x4c8>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x1fa>
 8000e08:	e1bf      	b.n	800118a <__aeabi_dadd+0x57a>
 8000e0a:	4644      	mov	r4, r8
 8000e0c:	430c      	orrs	r4, r1
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_dadd+0x202>
 8000e10:	e1d0      	b.n	80011b4 <__aeabi_dadd+0x5a4>
 8000e12:	0742      	lsls	r2, r0, #29
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	08c0      	lsrs	r0, r0, #3
 8000e1a:	e029      	b.n	8000e70 <__aeabi_dadd+0x260>
 8000e1c:	003a      	movs	r2, r7
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	d100      	bne.n	8000e24 <__aeabi_dadd+0x214>
 8000e22:	e170      	b.n	8001106 <__aeabi_dadd+0x4f6>
 8000e24:	4662      	mov	r2, ip
 8000e26:	4664      	mov	r4, ip
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	2c01      	cmp	r4, #1
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dadd+0x220>
 8000e2e:	e0e0      	b.n	8000ff2 <__aeabi_dadd+0x3e2>
 8000e30:	4c51      	ldr	r4, [pc, #324]	; (8000f78 <__aeabi_dadd+0x368>)
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dadd+0x228>
 8000e36:	e161      	b.n	80010fc <__aeabi_dadd+0x4ec>
 8000e38:	4694      	mov	ip, r2
 8000e3a:	e7b4      	b.n	8000da6 <__aeabi_dadd+0x196>
 8000e3c:	003a      	movs	r2, r7
 8000e3e:	391f      	subs	r1, #31
 8000e40:	40ca      	lsrs	r2, r1
 8000e42:	0011      	movs	r1, r2
 8000e44:	2b20      	cmp	r3, #32
 8000e46:	d003      	beq.n	8000e50 <__aeabi_dadd+0x240>
 8000e48:	2240      	movs	r2, #64	; 0x40
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	409f      	lsls	r7, r3
 8000e4e:	433c      	orrs	r4, r7
 8000e50:	1e63      	subs	r3, r4, #1
 8000e52:	419c      	sbcs	r4, r3
 8000e54:	2700      	movs	r7, #0
 8000e56:	2600      	movs	r6, #0
 8000e58:	430c      	orrs	r4, r1
 8000e5a:	0763      	lsls	r3, r4, #29
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_dadd+0x250>
 8000e5e:	e753      	b.n	8000d08 <__aeabi_dadd+0xf8>
 8000e60:	46b4      	mov	ip, r6
 8000e62:	08e4      	lsrs	r4, r4, #3
 8000e64:	077b      	lsls	r3, r7, #29
 8000e66:	4323      	orrs	r3, r4
 8000e68:	08f8      	lsrs	r0, r7, #3
 8000e6a:	4a43      	ldr	r2, [pc, #268]	; (8000f78 <__aeabi_dadd+0x368>)
 8000e6c:	4594      	cmp	ip, r2
 8000e6e:	d01d      	beq.n	8000eac <__aeabi_dadd+0x29c>
 8000e70:	4662      	mov	r2, ip
 8000e72:	0307      	lsls	r7, r0, #12
 8000e74:	0552      	lsls	r2, r2, #21
 8000e76:	0b3f      	lsrs	r7, r7, #12
 8000e78:	0d52      	lsrs	r2, r2, #21
 8000e7a:	e760      	b.n	8000d3e <__aeabi_dadd+0x12e>
 8000e7c:	4644      	mov	r4, r8
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	1e62      	subs	r2, r4, #1
 8000e82:	4194      	sbcs	r4, r2
 8000e84:	18e4      	adds	r4, r4, r3
 8000e86:	429c      	cmp	r4, r3
 8000e88:	419b      	sbcs	r3, r3
 8000e8a:	425f      	negs	r7, r3
 8000e8c:	183f      	adds	r7, r7, r0
 8000e8e:	023b      	lsls	r3, r7, #8
 8000e90:	d5e3      	bpl.n	8000e5a <__aeabi_dadd+0x24a>
 8000e92:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <__aeabi_dadd+0x368>)
 8000e94:	3601      	adds	r6, #1
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d000      	beq.n	8000e9c <__aeabi_dadd+0x28c>
 8000e9a:	e0b5      	b.n	8001008 <__aeabi_dadd+0x3f8>
 8000e9c:	0032      	movs	r2, r6
 8000e9e:	2700      	movs	r7, #0
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e74c      	b.n	8000d3e <__aeabi_dadd+0x12e>
 8000ea4:	0742      	lsls	r2, r0, #29
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	08c0      	lsrs	r0, r0, #3
 8000eac:	001a      	movs	r2, r3
 8000eae:	4302      	orrs	r2, r0
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dadd+0x2a4>
 8000eb2:	e1e1      	b.n	8001278 <__aeabi_dadd+0x668>
 8000eb4:	2780      	movs	r7, #128	; 0x80
 8000eb6:	033f      	lsls	r7, r7, #12
 8000eb8:	4307      	orrs	r7, r0
 8000eba:	033f      	lsls	r7, r7, #12
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	; (8000f78 <__aeabi_dadd+0x368>)
 8000ebe:	0b3f      	lsrs	r7, r7, #12
 8000ec0:	e73d      	b.n	8000d3e <__aeabi_dadd+0x12e>
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	f001 fd5a 	bl	800297c <__clzsi2>
 8000ec8:	0001      	movs	r1, r0
 8000eca:	3118      	adds	r1, #24
 8000ecc:	291f      	cmp	r1, #31
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_dadd+0x2c2>
 8000ed0:	e6fc      	b.n	8000ccc <__aeabi_dadd+0xbc>
 8000ed2:	3808      	subs	r0, #8
 8000ed4:	4084      	lsls	r4, r0
 8000ed6:	0027      	movs	r7, r4
 8000ed8:	2400      	movs	r4, #0
 8000eda:	42b1      	cmp	r1, r6
 8000edc:	db00      	blt.n	8000ee0 <__aeabi_dadd+0x2d0>
 8000ede:	e6ff      	b.n	8000ce0 <__aeabi_dadd+0xd0>
 8000ee0:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <__aeabi_dadd+0x36c>)
 8000ee2:	1a76      	subs	r6, r6, r1
 8000ee4:	4017      	ands	r7, r2
 8000ee6:	e70d      	b.n	8000d04 <__aeabi_dadd+0xf4>
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d02f      	beq.n	8000f4c <__aeabi_dadd+0x33c>
 8000eec:	464a      	mov	r2, r9
 8000eee:	1b92      	subs	r2, r2, r6
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	2e00      	cmp	r6, #0
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_dadd+0x2e8>
 8000ef6:	e0ad      	b.n	8001054 <__aeabi_dadd+0x444>
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <__aeabi_dadd+0x368>)
 8000efa:	4591      	cmp	r9, r2
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x2f0>
 8000efe:	e10f      	b.n	8001120 <__aeabi_dadd+0x510>
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	4310      	orrs	r0, r2
 8000f06:	4662      	mov	r2, ip
 8000f08:	2a38      	cmp	r2, #56	; 0x38
 8000f0a:	dd00      	ble.n	8000f0e <__aeabi_dadd+0x2fe>
 8000f0c:	e10f      	b.n	800112e <__aeabi_dadd+0x51e>
 8000f0e:	2a1f      	cmp	r2, #31
 8000f10:	dd00      	ble.n	8000f14 <__aeabi_dadd+0x304>
 8000f12:	e180      	b.n	8001216 <__aeabi_dadd+0x606>
 8000f14:	4664      	mov	r4, ip
 8000f16:	2220      	movs	r2, #32
 8000f18:	001e      	movs	r6, r3
 8000f1a:	1b12      	subs	r2, r2, r4
 8000f1c:	4667      	mov	r7, ip
 8000f1e:	0004      	movs	r4, r0
 8000f20:	4093      	lsls	r3, r2
 8000f22:	4094      	lsls	r4, r2
 8000f24:	40fe      	lsrs	r6, r7
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	4193      	sbcs	r3, r2
 8000f2a:	40f8      	lsrs	r0, r7
 8000f2c:	4334      	orrs	r4, r6
 8000f2e:	431c      	orrs	r4, r3
 8000f30:	4480      	add	r8, r0
 8000f32:	1864      	adds	r4, r4, r1
 8000f34:	428c      	cmp	r4, r1
 8000f36:	41bf      	sbcs	r7, r7
 8000f38:	427f      	negs	r7, r7
 8000f3a:	464e      	mov	r6, r9
 8000f3c:	4447      	add	r7, r8
 8000f3e:	e7a6      	b.n	8000e8e <__aeabi_dadd+0x27e>
 8000f40:	4642      	mov	r2, r8
 8000f42:	430a      	orrs	r2, r1
 8000f44:	0011      	movs	r1, r2
 8000f46:	1e4a      	subs	r2, r1, #1
 8000f48:	4191      	sbcs	r1, r2
 8000f4a:	e6ad      	b.n	8000ca8 <__aeabi_dadd+0x98>
 8000f4c:	4c0c      	ldr	r4, [pc, #48]	; (8000f80 <__aeabi_dadd+0x370>)
 8000f4e:	1c72      	adds	r2, r6, #1
 8000f50:	4222      	tst	r2, r4
 8000f52:	d000      	beq.n	8000f56 <__aeabi_dadd+0x346>
 8000f54:	e0a1      	b.n	800109a <__aeabi_dadd+0x48a>
 8000f56:	0002      	movs	r2, r0
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	2e00      	cmp	r6, #0
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_dadd+0x350>
 8000f5e:	e0fa      	b.n	8001156 <__aeabi_dadd+0x546>
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_dadd+0x356>
 8000f64:	e145      	b.n	80011f2 <__aeabi_dadd+0x5e2>
 8000f66:	003a      	movs	r2, r7
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_dadd+0x35e>
 8000f6c:	e146      	b.n	80011fc <__aeabi_dadd+0x5ec>
 8000f6e:	0742      	lsls	r2, r0, #29
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	08c0      	lsrs	r0, r0, #3
 8000f76:	e77b      	b.n	8000e70 <__aeabi_dadd+0x260>
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	ff7fffff 	.word	0xff7fffff
 8000f80:	000007fe 	.word	0x000007fe
 8000f84:	4647      	mov	r7, r8
 8000f86:	1a5c      	subs	r4, r3, r1
 8000f88:	1bc2      	subs	r2, r0, r7
 8000f8a:	42a3      	cmp	r3, r4
 8000f8c:	41bf      	sbcs	r7, r7
 8000f8e:	427f      	negs	r7, r7
 8000f90:	46b9      	mov	r9, r7
 8000f92:	0017      	movs	r7, r2
 8000f94:	464a      	mov	r2, r9
 8000f96:	1abf      	subs	r7, r7, r2
 8000f98:	023a      	lsls	r2, r7, #8
 8000f9a:	d500      	bpl.n	8000f9e <__aeabi_dadd+0x38e>
 8000f9c:	e08d      	b.n	80010ba <__aeabi_dadd+0x4aa>
 8000f9e:	0023      	movs	r3, r4
 8000fa0:	433b      	orrs	r3, r7
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_dadd+0x396>
 8000fa4:	e68a      	b.n	8000cbc <__aeabi_dadd+0xac>
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	2500      	movs	r5, #0
 8000faa:	e761      	b.n	8000e70 <__aeabi_dadd+0x260>
 8000fac:	4cb4      	ldr	r4, [pc, #720]	; (8001280 <__aeabi_dadd+0x670>)
 8000fae:	45a1      	cmp	r9, r4
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x3a4>
 8000fb2:	e0ad      	b.n	8001110 <__aeabi_dadd+0x500>
 8000fb4:	2480      	movs	r4, #128	; 0x80
 8000fb6:	0424      	lsls	r4, r4, #16
 8000fb8:	4320      	orrs	r0, r4
 8000fba:	4664      	mov	r4, ip
 8000fbc:	2c38      	cmp	r4, #56	; 0x38
 8000fbe:	dc3d      	bgt.n	800103c <__aeabi_dadd+0x42c>
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	2c1f      	cmp	r4, #31
 8000fc4:	dd00      	ble.n	8000fc8 <__aeabi_dadd+0x3b8>
 8000fc6:	e0b7      	b.n	8001138 <__aeabi_dadd+0x528>
 8000fc8:	2520      	movs	r5, #32
 8000fca:	001e      	movs	r6, r3
 8000fcc:	1b2d      	subs	r5, r5, r4
 8000fce:	0004      	movs	r4, r0
 8000fd0:	40ab      	lsls	r3, r5
 8000fd2:	40ac      	lsls	r4, r5
 8000fd4:	40d6      	lsrs	r6, r2
 8000fd6:	40d0      	lsrs	r0, r2
 8000fd8:	4642      	mov	r2, r8
 8000fda:	1e5d      	subs	r5, r3, #1
 8000fdc:	41ab      	sbcs	r3, r5
 8000fde:	4334      	orrs	r4, r6
 8000fe0:	1a12      	subs	r2, r2, r0
 8000fe2:	4690      	mov	r8, r2
 8000fe4:	4323      	orrs	r3, r4
 8000fe6:	e02c      	b.n	8001042 <__aeabi_dadd+0x432>
 8000fe8:	0742      	lsls	r2, r0, #29
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	08c0      	lsrs	r0, r0, #3
 8000ff0:	e73b      	b.n	8000e6a <__aeabi_dadd+0x25a>
 8000ff2:	185c      	adds	r4, r3, r1
 8000ff4:	429c      	cmp	r4, r3
 8000ff6:	419b      	sbcs	r3, r3
 8000ff8:	4440      	add	r0, r8
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	18c7      	adds	r7, r0, r3
 8000ffe:	2601      	movs	r6, #1
 8001000:	023b      	lsls	r3, r7, #8
 8001002:	d400      	bmi.n	8001006 <__aeabi_dadd+0x3f6>
 8001004:	e729      	b.n	8000e5a <__aeabi_dadd+0x24a>
 8001006:	2602      	movs	r6, #2
 8001008:	4a9e      	ldr	r2, [pc, #632]	; (8001284 <__aeabi_dadd+0x674>)
 800100a:	0863      	lsrs	r3, r4, #1
 800100c:	4017      	ands	r7, r2
 800100e:	2201      	movs	r2, #1
 8001010:	4014      	ands	r4, r2
 8001012:	431c      	orrs	r4, r3
 8001014:	07fb      	lsls	r3, r7, #31
 8001016:	431c      	orrs	r4, r3
 8001018:	087f      	lsrs	r7, r7, #1
 800101a:	e673      	b.n	8000d04 <__aeabi_dadd+0xf4>
 800101c:	4644      	mov	r4, r8
 800101e:	3a20      	subs	r2, #32
 8001020:	40d4      	lsrs	r4, r2
 8001022:	4662      	mov	r2, ip
 8001024:	2a20      	cmp	r2, #32
 8001026:	d005      	beq.n	8001034 <__aeabi_dadd+0x424>
 8001028:	4667      	mov	r7, ip
 800102a:	2240      	movs	r2, #64	; 0x40
 800102c:	1bd2      	subs	r2, r2, r7
 800102e:	4647      	mov	r7, r8
 8001030:	4097      	lsls	r7, r2
 8001032:	4339      	orrs	r1, r7
 8001034:	1e4a      	subs	r2, r1, #1
 8001036:	4191      	sbcs	r1, r2
 8001038:	4321      	orrs	r1, r4
 800103a:	e635      	b.n	8000ca8 <__aeabi_dadd+0x98>
 800103c:	4303      	orrs	r3, r0
 800103e:	1e58      	subs	r0, r3, #1
 8001040:	4183      	sbcs	r3, r0
 8001042:	1acc      	subs	r4, r1, r3
 8001044:	42a1      	cmp	r1, r4
 8001046:	41bf      	sbcs	r7, r7
 8001048:	4643      	mov	r3, r8
 800104a:	427f      	negs	r7, r7
 800104c:	4655      	mov	r5, sl
 800104e:	464e      	mov	r6, r9
 8001050:	1bdf      	subs	r7, r3, r7
 8001052:	e62e      	b.n	8000cb2 <__aeabi_dadd+0xa2>
 8001054:	0002      	movs	r2, r0
 8001056:	431a      	orrs	r2, r3
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x44c>
 800105a:	e0bd      	b.n	80011d8 <__aeabi_dadd+0x5c8>
 800105c:	4662      	mov	r2, ip
 800105e:	4664      	mov	r4, ip
 8001060:	3a01      	subs	r2, #1
 8001062:	2c01      	cmp	r4, #1
 8001064:	d100      	bne.n	8001068 <__aeabi_dadd+0x458>
 8001066:	e0e5      	b.n	8001234 <__aeabi_dadd+0x624>
 8001068:	4c85      	ldr	r4, [pc, #532]	; (8001280 <__aeabi_dadd+0x670>)
 800106a:	45a4      	cmp	ip, r4
 800106c:	d058      	beq.n	8001120 <__aeabi_dadd+0x510>
 800106e:	4694      	mov	ip, r2
 8001070:	e749      	b.n	8000f06 <__aeabi_dadd+0x2f6>
 8001072:	4664      	mov	r4, ip
 8001074:	2220      	movs	r2, #32
 8001076:	1b12      	subs	r2, r2, r4
 8001078:	4644      	mov	r4, r8
 800107a:	4094      	lsls	r4, r2
 800107c:	000f      	movs	r7, r1
 800107e:	46a1      	mov	r9, r4
 8001080:	4664      	mov	r4, ip
 8001082:	4091      	lsls	r1, r2
 8001084:	40e7      	lsrs	r7, r4
 8001086:	464c      	mov	r4, r9
 8001088:	1e4a      	subs	r2, r1, #1
 800108a:	4191      	sbcs	r1, r2
 800108c:	433c      	orrs	r4, r7
 800108e:	4642      	mov	r2, r8
 8001090:	430c      	orrs	r4, r1
 8001092:	4661      	mov	r1, ip
 8001094:	40ca      	lsrs	r2, r1
 8001096:	1880      	adds	r0, r0, r2
 8001098:	e6f4      	b.n	8000e84 <__aeabi_dadd+0x274>
 800109a:	4c79      	ldr	r4, [pc, #484]	; (8001280 <__aeabi_dadd+0x670>)
 800109c:	42a2      	cmp	r2, r4
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0x492>
 80010a0:	e6fd      	b.n	8000e9e <__aeabi_dadd+0x28e>
 80010a2:	1859      	adds	r1, r3, r1
 80010a4:	4299      	cmp	r1, r3
 80010a6:	419b      	sbcs	r3, r3
 80010a8:	4440      	add	r0, r8
 80010aa:	425f      	negs	r7, r3
 80010ac:	19c7      	adds	r7, r0, r7
 80010ae:	07fc      	lsls	r4, r7, #31
 80010b0:	0849      	lsrs	r1, r1, #1
 80010b2:	0016      	movs	r6, r2
 80010b4:	430c      	orrs	r4, r1
 80010b6:	087f      	lsrs	r7, r7, #1
 80010b8:	e6cf      	b.n	8000e5a <__aeabi_dadd+0x24a>
 80010ba:	1acc      	subs	r4, r1, r3
 80010bc:	42a1      	cmp	r1, r4
 80010be:	41bf      	sbcs	r7, r7
 80010c0:	4643      	mov	r3, r8
 80010c2:	427f      	negs	r7, r7
 80010c4:	1a18      	subs	r0, r3, r0
 80010c6:	4655      	mov	r5, sl
 80010c8:	1bc7      	subs	r7, r0, r7
 80010ca:	e5f7      	b.n	8000cbc <__aeabi_dadd+0xac>
 80010cc:	08c9      	lsrs	r1, r1, #3
 80010ce:	077b      	lsls	r3, r7, #29
 80010d0:	4655      	mov	r5, sl
 80010d2:	430b      	orrs	r3, r1
 80010d4:	08f8      	lsrs	r0, r7, #3
 80010d6:	e6c8      	b.n	8000e6a <__aeabi_dadd+0x25a>
 80010d8:	2c00      	cmp	r4, #0
 80010da:	d000      	beq.n	80010de <__aeabi_dadd+0x4ce>
 80010dc:	e081      	b.n	80011e2 <__aeabi_dadd+0x5d2>
 80010de:	4643      	mov	r3, r8
 80010e0:	430b      	orrs	r3, r1
 80010e2:	d115      	bne.n	8001110 <__aeabi_dadd+0x500>
 80010e4:	2080      	movs	r0, #128	; 0x80
 80010e6:	2500      	movs	r5, #0
 80010e8:	0300      	lsls	r0, r0, #12
 80010ea:	e6e3      	b.n	8000eb4 <__aeabi_dadd+0x2a4>
 80010ec:	1a5c      	subs	r4, r3, r1
 80010ee:	42a3      	cmp	r3, r4
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	1bc7      	subs	r7, r0, r7
 80010f4:	425b      	negs	r3, r3
 80010f6:	2601      	movs	r6, #1
 80010f8:	1aff      	subs	r7, r7, r3
 80010fa:	e5da      	b.n	8000cb2 <__aeabi_dadd+0xa2>
 80010fc:	0742      	lsls	r2, r0, #29
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	4313      	orrs	r3, r2
 8001102:	08c0      	lsrs	r0, r0, #3
 8001104:	e6d2      	b.n	8000eac <__aeabi_dadd+0x29c>
 8001106:	0742      	lsls	r2, r0, #29
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	4313      	orrs	r3, r2
 800110c:	08c0      	lsrs	r0, r0, #3
 800110e:	e6ac      	b.n	8000e6a <__aeabi_dadd+0x25a>
 8001110:	4643      	mov	r3, r8
 8001112:	4642      	mov	r2, r8
 8001114:	08c9      	lsrs	r1, r1, #3
 8001116:	075b      	lsls	r3, r3, #29
 8001118:	4655      	mov	r5, sl
 800111a:	430b      	orrs	r3, r1
 800111c:	08d0      	lsrs	r0, r2, #3
 800111e:	e6c5      	b.n	8000eac <__aeabi_dadd+0x29c>
 8001120:	4643      	mov	r3, r8
 8001122:	4642      	mov	r2, r8
 8001124:	075b      	lsls	r3, r3, #29
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	430b      	orrs	r3, r1
 800112a:	08d0      	lsrs	r0, r2, #3
 800112c:	e6be      	b.n	8000eac <__aeabi_dadd+0x29c>
 800112e:	4303      	orrs	r3, r0
 8001130:	001c      	movs	r4, r3
 8001132:	1e63      	subs	r3, r4, #1
 8001134:	419c      	sbcs	r4, r3
 8001136:	e6fc      	b.n	8000f32 <__aeabi_dadd+0x322>
 8001138:	0002      	movs	r2, r0
 800113a:	3c20      	subs	r4, #32
 800113c:	40e2      	lsrs	r2, r4
 800113e:	0014      	movs	r4, r2
 8001140:	4662      	mov	r2, ip
 8001142:	2a20      	cmp	r2, #32
 8001144:	d003      	beq.n	800114e <__aeabi_dadd+0x53e>
 8001146:	2540      	movs	r5, #64	; 0x40
 8001148:	1aad      	subs	r5, r5, r2
 800114a:	40a8      	lsls	r0, r5
 800114c:	4303      	orrs	r3, r0
 800114e:	1e58      	subs	r0, r3, #1
 8001150:	4183      	sbcs	r3, r0
 8001152:	4323      	orrs	r3, r4
 8001154:	e775      	b.n	8001042 <__aeabi_dadd+0x432>
 8001156:	2a00      	cmp	r2, #0
 8001158:	d0e2      	beq.n	8001120 <__aeabi_dadd+0x510>
 800115a:	003a      	movs	r2, r7
 800115c:	430a      	orrs	r2, r1
 800115e:	d0cd      	beq.n	80010fc <__aeabi_dadd+0x4ec>
 8001160:	0742      	lsls	r2, r0, #29
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	4313      	orrs	r3, r2
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	08c0      	lsrs	r0, r0, #3
 800116a:	0312      	lsls	r2, r2, #12
 800116c:	4210      	tst	r0, r2
 800116e:	d006      	beq.n	800117e <__aeabi_dadd+0x56e>
 8001170:	08fc      	lsrs	r4, r7, #3
 8001172:	4214      	tst	r4, r2
 8001174:	d103      	bne.n	800117e <__aeabi_dadd+0x56e>
 8001176:	0020      	movs	r0, r4
 8001178:	08cb      	lsrs	r3, r1, #3
 800117a:	077a      	lsls	r2, r7, #29
 800117c:	4313      	orrs	r3, r2
 800117e:	0f5a      	lsrs	r2, r3, #29
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	0752      	lsls	r2, r2, #29
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	4313      	orrs	r3, r2
 8001188:	e690      	b.n	8000eac <__aeabi_dadd+0x29c>
 800118a:	4643      	mov	r3, r8
 800118c:	430b      	orrs	r3, r1
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x582>
 8001190:	e709      	b.n	8000fa6 <__aeabi_dadd+0x396>
 8001192:	4643      	mov	r3, r8
 8001194:	4642      	mov	r2, r8
 8001196:	08c9      	lsrs	r1, r1, #3
 8001198:	075b      	lsls	r3, r3, #29
 800119a:	4655      	mov	r5, sl
 800119c:	430b      	orrs	r3, r1
 800119e:	08d0      	lsrs	r0, r2, #3
 80011a0:	e666      	b.n	8000e70 <__aeabi_dadd+0x260>
 80011a2:	1acc      	subs	r4, r1, r3
 80011a4:	42a1      	cmp	r1, r4
 80011a6:	4189      	sbcs	r1, r1
 80011a8:	1a3f      	subs	r7, r7, r0
 80011aa:	4249      	negs	r1, r1
 80011ac:	4655      	mov	r5, sl
 80011ae:	2601      	movs	r6, #1
 80011b0:	1a7f      	subs	r7, r7, r1
 80011b2:	e57e      	b.n	8000cb2 <__aeabi_dadd+0xa2>
 80011b4:	4642      	mov	r2, r8
 80011b6:	1a5c      	subs	r4, r3, r1
 80011b8:	1a87      	subs	r7, r0, r2
 80011ba:	42a3      	cmp	r3, r4
 80011bc:	4192      	sbcs	r2, r2
 80011be:	4252      	negs	r2, r2
 80011c0:	1abf      	subs	r7, r7, r2
 80011c2:	023a      	lsls	r2, r7, #8
 80011c4:	d53d      	bpl.n	8001242 <__aeabi_dadd+0x632>
 80011c6:	1acc      	subs	r4, r1, r3
 80011c8:	42a1      	cmp	r1, r4
 80011ca:	4189      	sbcs	r1, r1
 80011cc:	4643      	mov	r3, r8
 80011ce:	4249      	negs	r1, r1
 80011d0:	1a1f      	subs	r7, r3, r0
 80011d2:	4655      	mov	r5, sl
 80011d4:	1a7f      	subs	r7, r7, r1
 80011d6:	e595      	b.n	8000d04 <__aeabi_dadd+0xf4>
 80011d8:	077b      	lsls	r3, r7, #29
 80011da:	08c9      	lsrs	r1, r1, #3
 80011dc:	430b      	orrs	r3, r1
 80011de:	08f8      	lsrs	r0, r7, #3
 80011e0:	e643      	b.n	8000e6a <__aeabi_dadd+0x25a>
 80011e2:	4644      	mov	r4, r8
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	430c      	orrs	r4, r1
 80011e8:	d130      	bne.n	800124c <__aeabi_dadd+0x63c>
 80011ea:	0742      	lsls	r2, r0, #29
 80011ec:	4313      	orrs	r3, r2
 80011ee:	08c0      	lsrs	r0, r0, #3
 80011f0:	e65c      	b.n	8000eac <__aeabi_dadd+0x29c>
 80011f2:	077b      	lsls	r3, r7, #29
 80011f4:	08c9      	lsrs	r1, r1, #3
 80011f6:	430b      	orrs	r3, r1
 80011f8:	08f8      	lsrs	r0, r7, #3
 80011fa:	e639      	b.n	8000e70 <__aeabi_dadd+0x260>
 80011fc:	185c      	adds	r4, r3, r1
 80011fe:	429c      	cmp	r4, r3
 8001200:	419b      	sbcs	r3, r3
 8001202:	4440      	add	r0, r8
 8001204:	425b      	negs	r3, r3
 8001206:	18c7      	adds	r7, r0, r3
 8001208:	023b      	lsls	r3, r7, #8
 800120a:	d400      	bmi.n	800120e <__aeabi_dadd+0x5fe>
 800120c:	e625      	b.n	8000e5a <__aeabi_dadd+0x24a>
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <__aeabi_dadd+0x674>)
 8001210:	2601      	movs	r6, #1
 8001212:	401f      	ands	r7, r3
 8001214:	e621      	b.n	8000e5a <__aeabi_dadd+0x24a>
 8001216:	0004      	movs	r4, r0
 8001218:	3a20      	subs	r2, #32
 800121a:	40d4      	lsrs	r4, r2
 800121c:	4662      	mov	r2, ip
 800121e:	2a20      	cmp	r2, #32
 8001220:	d004      	beq.n	800122c <__aeabi_dadd+0x61c>
 8001222:	2240      	movs	r2, #64	; 0x40
 8001224:	4666      	mov	r6, ip
 8001226:	1b92      	subs	r2, r2, r6
 8001228:	4090      	lsls	r0, r2
 800122a:	4303      	orrs	r3, r0
 800122c:	1e5a      	subs	r2, r3, #1
 800122e:	4193      	sbcs	r3, r2
 8001230:	431c      	orrs	r4, r3
 8001232:	e67e      	b.n	8000f32 <__aeabi_dadd+0x322>
 8001234:	185c      	adds	r4, r3, r1
 8001236:	428c      	cmp	r4, r1
 8001238:	4189      	sbcs	r1, r1
 800123a:	4440      	add	r0, r8
 800123c:	4249      	negs	r1, r1
 800123e:	1847      	adds	r7, r0, r1
 8001240:	e6dd      	b.n	8000ffe <__aeabi_dadd+0x3ee>
 8001242:	0023      	movs	r3, r4
 8001244:	433b      	orrs	r3, r7
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x63a>
 8001248:	e6ad      	b.n	8000fa6 <__aeabi_dadd+0x396>
 800124a:	e606      	b.n	8000e5a <__aeabi_dadd+0x24a>
 800124c:	0744      	lsls	r4, r0, #29
 800124e:	4323      	orrs	r3, r4
 8001250:	2480      	movs	r4, #128	; 0x80
 8001252:	08c0      	lsrs	r0, r0, #3
 8001254:	0324      	lsls	r4, r4, #12
 8001256:	4220      	tst	r0, r4
 8001258:	d008      	beq.n	800126c <__aeabi_dadd+0x65c>
 800125a:	4642      	mov	r2, r8
 800125c:	08d6      	lsrs	r6, r2, #3
 800125e:	4226      	tst	r6, r4
 8001260:	d104      	bne.n	800126c <__aeabi_dadd+0x65c>
 8001262:	4655      	mov	r5, sl
 8001264:	0030      	movs	r0, r6
 8001266:	08cb      	lsrs	r3, r1, #3
 8001268:	0751      	lsls	r1, r2, #29
 800126a:	430b      	orrs	r3, r1
 800126c:	0f5a      	lsrs	r2, r3, #29
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	0752      	lsls	r2, r2, #29
 8001274:	4313      	orrs	r3, r2
 8001276:	e619      	b.n	8000eac <__aeabi_dadd+0x29c>
 8001278:	2300      	movs	r3, #0
 800127a:	4a01      	ldr	r2, [pc, #4]	; (8001280 <__aeabi_dadd+0x670>)
 800127c:	001f      	movs	r7, r3
 800127e:	e55e      	b.n	8000d3e <__aeabi_dadd+0x12e>
 8001280:	000007ff 	.word	0x000007ff
 8001284:	ff7fffff 	.word	0xff7fffff

08001288 <__aeabi_ddiv>:
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	4657      	mov	r7, sl
 800128c:	464e      	mov	r6, r9
 800128e:	4645      	mov	r5, r8
 8001290:	46de      	mov	lr, fp
 8001292:	b5e0      	push	{r5, r6, r7, lr}
 8001294:	4681      	mov	r9, r0
 8001296:	0005      	movs	r5, r0
 8001298:	030c      	lsls	r4, r1, #12
 800129a:	0048      	lsls	r0, r1, #1
 800129c:	4692      	mov	sl, r2
 800129e:	001f      	movs	r7, r3
 80012a0:	b085      	sub	sp, #20
 80012a2:	0b24      	lsrs	r4, r4, #12
 80012a4:	0d40      	lsrs	r0, r0, #21
 80012a6:	0fce      	lsrs	r6, r1, #31
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d100      	bne.n	80012ae <__aeabi_ddiv+0x26>
 80012ac:	e156      	b.n	800155c <__aeabi_ddiv+0x2d4>
 80012ae:	4bd4      	ldr	r3, [pc, #848]	; (8001600 <__aeabi_ddiv+0x378>)
 80012b0:	4298      	cmp	r0, r3
 80012b2:	d100      	bne.n	80012b6 <__aeabi_ddiv+0x2e>
 80012b4:	e172      	b.n	800159c <__aeabi_ddiv+0x314>
 80012b6:	0f6b      	lsrs	r3, r5, #29
 80012b8:	00e4      	lsls	r4, r4, #3
 80012ba:	431c      	orrs	r4, r3
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	4323      	orrs	r3, r4
 80012c2:	4698      	mov	r8, r3
 80012c4:	4bcf      	ldr	r3, [pc, #828]	; (8001604 <__aeabi_ddiv+0x37c>)
 80012c6:	00ed      	lsls	r5, r5, #3
 80012c8:	469b      	mov	fp, r3
 80012ca:	2300      	movs	r3, #0
 80012cc:	4699      	mov	r9, r3
 80012ce:	4483      	add	fp, r0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	033c      	lsls	r4, r7, #12
 80012d4:	007b      	lsls	r3, r7, #1
 80012d6:	4650      	mov	r0, sl
 80012d8:	0b24      	lsrs	r4, r4, #12
 80012da:	0d5b      	lsrs	r3, r3, #21
 80012dc:	0fff      	lsrs	r7, r7, #31
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0x5c>
 80012e2:	e11f      	b.n	8001524 <__aeabi_ddiv+0x29c>
 80012e4:	4ac6      	ldr	r2, [pc, #792]	; (8001600 <__aeabi_ddiv+0x378>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d100      	bne.n	80012ec <__aeabi_ddiv+0x64>
 80012ea:	e162      	b.n	80015b2 <__aeabi_ddiv+0x32a>
 80012ec:	49c5      	ldr	r1, [pc, #788]	; (8001604 <__aeabi_ddiv+0x37c>)
 80012ee:	0f42      	lsrs	r2, r0, #29
 80012f0:	468c      	mov	ip, r1
 80012f2:	00e4      	lsls	r4, r4, #3
 80012f4:	4659      	mov	r1, fp
 80012f6:	4314      	orrs	r4, r2
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	4463      	add	r3, ip
 80012fc:	0412      	lsls	r2, r2, #16
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	4314      	orrs	r4, r2
 8001302:	469b      	mov	fp, r3
 8001304:	00c2      	lsls	r2, r0, #3
 8001306:	2000      	movs	r0, #0
 8001308:	0033      	movs	r3, r6
 800130a:	407b      	eors	r3, r7
 800130c:	469a      	mov	sl, r3
 800130e:	464b      	mov	r3, r9
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d827      	bhi.n	8001364 <__aeabi_ddiv+0xdc>
 8001314:	49bc      	ldr	r1, [pc, #752]	; (8001608 <__aeabi_ddiv+0x380>)
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	58cb      	ldr	r3, [r1, r3]
 800131a:	469f      	mov	pc, r3
 800131c:	46b2      	mov	sl, r6
 800131e:	9b00      	ldr	r3, [sp, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d016      	beq.n	8001352 <__aeabi_ddiv+0xca>
 8001324:	2b03      	cmp	r3, #3
 8001326:	d100      	bne.n	800132a <__aeabi_ddiv+0xa2>
 8001328:	e28e      	b.n	8001848 <__aeabi_ddiv+0x5c0>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d000      	beq.n	8001330 <__aeabi_ddiv+0xa8>
 800132e:	e0d9      	b.n	80014e4 <__aeabi_ddiv+0x25c>
 8001330:	2300      	movs	r3, #0
 8001332:	2400      	movs	r4, #0
 8001334:	2500      	movs	r5, #0
 8001336:	4652      	mov	r2, sl
 8001338:	051b      	lsls	r3, r3, #20
 800133a:	4323      	orrs	r3, r4
 800133c:	07d2      	lsls	r2, r2, #31
 800133e:	4313      	orrs	r3, r2
 8001340:	0028      	movs	r0, r5
 8001342:	0019      	movs	r1, r3
 8001344:	b005      	add	sp, #20
 8001346:	bcf0      	pop	{r4, r5, r6, r7}
 8001348:	46bb      	mov	fp, r7
 800134a:	46b2      	mov	sl, r6
 800134c:	46a9      	mov	r9, r5
 800134e:	46a0      	mov	r8, r4
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001352:	2400      	movs	r4, #0
 8001354:	2500      	movs	r5, #0
 8001356:	4baa      	ldr	r3, [pc, #680]	; (8001600 <__aeabi_ddiv+0x378>)
 8001358:	e7ed      	b.n	8001336 <__aeabi_ddiv+0xae>
 800135a:	46ba      	mov	sl, r7
 800135c:	46a0      	mov	r8, r4
 800135e:	0015      	movs	r5, r2
 8001360:	9000      	str	r0, [sp, #0]
 8001362:	e7dc      	b.n	800131e <__aeabi_ddiv+0x96>
 8001364:	4544      	cmp	r4, r8
 8001366:	d200      	bcs.n	800136a <__aeabi_ddiv+0xe2>
 8001368:	e1c7      	b.n	80016fa <__aeabi_ddiv+0x472>
 800136a:	d100      	bne.n	800136e <__aeabi_ddiv+0xe6>
 800136c:	e1c2      	b.n	80016f4 <__aeabi_ddiv+0x46c>
 800136e:	2301      	movs	r3, #1
 8001370:	425b      	negs	r3, r3
 8001372:	469c      	mov	ip, r3
 8001374:	002e      	movs	r6, r5
 8001376:	4640      	mov	r0, r8
 8001378:	2500      	movs	r5, #0
 800137a:	44e3      	add	fp, ip
 800137c:	0223      	lsls	r3, r4, #8
 800137e:	0e14      	lsrs	r4, r2, #24
 8001380:	431c      	orrs	r4, r3
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	4699      	mov	r9, r3
 8001386:	0423      	lsls	r3, r4, #16
 8001388:	0c1f      	lsrs	r7, r3, #16
 800138a:	0212      	lsls	r2, r2, #8
 800138c:	4649      	mov	r1, r9
 800138e:	9200      	str	r2, [sp, #0]
 8001390:	9701      	str	r7, [sp, #4]
 8001392:	f7fe ff57 	bl	8000244 <__aeabi_uidivmod>
 8001396:	0002      	movs	r2, r0
 8001398:	437a      	muls	r2, r7
 800139a:	040b      	lsls	r3, r1, #16
 800139c:	0c31      	lsrs	r1, r6, #16
 800139e:	4680      	mov	r8, r0
 80013a0:	4319      	orrs	r1, r3
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d907      	bls.n	80013b6 <__aeabi_ddiv+0x12e>
 80013a6:	2301      	movs	r3, #1
 80013a8:	425b      	negs	r3, r3
 80013aa:	469c      	mov	ip, r3
 80013ac:	1909      	adds	r1, r1, r4
 80013ae:	44e0      	add	r8, ip
 80013b0:	428c      	cmp	r4, r1
 80013b2:	d800      	bhi.n	80013b6 <__aeabi_ddiv+0x12e>
 80013b4:	e207      	b.n	80017c6 <__aeabi_ddiv+0x53e>
 80013b6:	1a88      	subs	r0, r1, r2
 80013b8:	4649      	mov	r1, r9
 80013ba:	f7fe ff43 	bl	8000244 <__aeabi_uidivmod>
 80013be:	0409      	lsls	r1, r1, #16
 80013c0:	468c      	mov	ip, r1
 80013c2:	0431      	lsls	r1, r6, #16
 80013c4:	4666      	mov	r6, ip
 80013c6:	9a01      	ldr	r2, [sp, #4]
 80013c8:	0c09      	lsrs	r1, r1, #16
 80013ca:	4342      	muls	r2, r0
 80013cc:	0003      	movs	r3, r0
 80013ce:	4331      	orrs	r1, r6
 80013d0:	428a      	cmp	r2, r1
 80013d2:	d904      	bls.n	80013de <__aeabi_ddiv+0x156>
 80013d4:	1909      	adds	r1, r1, r4
 80013d6:	3b01      	subs	r3, #1
 80013d8:	428c      	cmp	r4, r1
 80013da:	d800      	bhi.n	80013de <__aeabi_ddiv+0x156>
 80013dc:	e1ed      	b.n	80017ba <__aeabi_ddiv+0x532>
 80013de:	1a88      	subs	r0, r1, r2
 80013e0:	4642      	mov	r2, r8
 80013e2:	0412      	lsls	r2, r2, #16
 80013e4:	431a      	orrs	r2, r3
 80013e6:	4690      	mov	r8, r2
 80013e8:	4641      	mov	r1, r8
 80013ea:	9b00      	ldr	r3, [sp, #0]
 80013ec:	040e      	lsls	r6, r1, #16
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	001f      	movs	r7, r3
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	9b00      	ldr	r3, [sp, #0]
 80013f6:	0c36      	lsrs	r6, r6, #16
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	0c19      	lsrs	r1, r3, #16
 80013fc:	000b      	movs	r3, r1
 80013fe:	4373      	muls	r3, r6
 8001400:	0c12      	lsrs	r2, r2, #16
 8001402:	437e      	muls	r6, r7
 8001404:	9103      	str	r1, [sp, #12]
 8001406:	4351      	muls	r1, r2
 8001408:	437a      	muls	r2, r7
 800140a:	0c1f      	lsrs	r7, r3, #16
 800140c:	46bc      	mov	ip, r7
 800140e:	1876      	adds	r6, r6, r1
 8001410:	4466      	add	r6, ip
 8001412:	42b1      	cmp	r1, r6
 8001414:	d903      	bls.n	800141e <__aeabi_ddiv+0x196>
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	0249      	lsls	r1, r1, #9
 800141a:	468c      	mov	ip, r1
 800141c:	4462      	add	r2, ip
 800141e:	0c31      	lsrs	r1, r6, #16
 8001420:	188a      	adds	r2, r1, r2
 8001422:	0431      	lsls	r1, r6, #16
 8001424:	041e      	lsls	r6, r3, #16
 8001426:	0c36      	lsrs	r6, r6, #16
 8001428:	198e      	adds	r6, r1, r6
 800142a:	4290      	cmp	r0, r2
 800142c:	d302      	bcc.n	8001434 <__aeabi_ddiv+0x1ac>
 800142e:	d112      	bne.n	8001456 <__aeabi_ddiv+0x1ce>
 8001430:	42b5      	cmp	r5, r6
 8001432:	d210      	bcs.n	8001456 <__aeabi_ddiv+0x1ce>
 8001434:	4643      	mov	r3, r8
 8001436:	1e59      	subs	r1, r3, #1
 8001438:	9b00      	ldr	r3, [sp, #0]
 800143a:	469c      	mov	ip, r3
 800143c:	4465      	add	r5, ip
 800143e:	001f      	movs	r7, r3
 8001440:	429d      	cmp	r5, r3
 8001442:	419b      	sbcs	r3, r3
 8001444:	425b      	negs	r3, r3
 8001446:	191b      	adds	r3, r3, r4
 8001448:	18c0      	adds	r0, r0, r3
 800144a:	4284      	cmp	r4, r0
 800144c:	d200      	bcs.n	8001450 <__aeabi_ddiv+0x1c8>
 800144e:	e1a0      	b.n	8001792 <__aeabi_ddiv+0x50a>
 8001450:	d100      	bne.n	8001454 <__aeabi_ddiv+0x1cc>
 8001452:	e19b      	b.n	800178c <__aeabi_ddiv+0x504>
 8001454:	4688      	mov	r8, r1
 8001456:	1bae      	subs	r6, r5, r6
 8001458:	42b5      	cmp	r5, r6
 800145a:	41ad      	sbcs	r5, r5
 800145c:	1a80      	subs	r0, r0, r2
 800145e:	426d      	negs	r5, r5
 8001460:	1b40      	subs	r0, r0, r5
 8001462:	4284      	cmp	r4, r0
 8001464:	d100      	bne.n	8001468 <__aeabi_ddiv+0x1e0>
 8001466:	e1d5      	b.n	8001814 <__aeabi_ddiv+0x58c>
 8001468:	4649      	mov	r1, r9
 800146a:	f7fe feeb 	bl	8000244 <__aeabi_uidivmod>
 800146e:	9a01      	ldr	r2, [sp, #4]
 8001470:	040b      	lsls	r3, r1, #16
 8001472:	4342      	muls	r2, r0
 8001474:	0c31      	lsrs	r1, r6, #16
 8001476:	0005      	movs	r5, r0
 8001478:	4319      	orrs	r1, r3
 800147a:	428a      	cmp	r2, r1
 800147c:	d900      	bls.n	8001480 <__aeabi_ddiv+0x1f8>
 800147e:	e16c      	b.n	800175a <__aeabi_ddiv+0x4d2>
 8001480:	1a88      	subs	r0, r1, r2
 8001482:	4649      	mov	r1, r9
 8001484:	f7fe fede 	bl	8000244 <__aeabi_uidivmod>
 8001488:	9a01      	ldr	r2, [sp, #4]
 800148a:	0436      	lsls	r6, r6, #16
 800148c:	4342      	muls	r2, r0
 800148e:	0409      	lsls	r1, r1, #16
 8001490:	0c36      	lsrs	r6, r6, #16
 8001492:	0003      	movs	r3, r0
 8001494:	430e      	orrs	r6, r1
 8001496:	42b2      	cmp	r2, r6
 8001498:	d900      	bls.n	800149c <__aeabi_ddiv+0x214>
 800149a:	e153      	b.n	8001744 <__aeabi_ddiv+0x4bc>
 800149c:	9803      	ldr	r0, [sp, #12]
 800149e:	1ab6      	subs	r6, r6, r2
 80014a0:	0002      	movs	r2, r0
 80014a2:	042d      	lsls	r5, r5, #16
 80014a4:	431d      	orrs	r5, r3
 80014a6:	9f02      	ldr	r7, [sp, #8]
 80014a8:	042b      	lsls	r3, r5, #16
 80014aa:	0c1b      	lsrs	r3, r3, #16
 80014ac:	435a      	muls	r2, r3
 80014ae:	437b      	muls	r3, r7
 80014b0:	469c      	mov	ip, r3
 80014b2:	0c29      	lsrs	r1, r5, #16
 80014b4:	4348      	muls	r0, r1
 80014b6:	0c13      	lsrs	r3, r2, #16
 80014b8:	4484      	add	ip, r0
 80014ba:	4463      	add	r3, ip
 80014bc:	4379      	muls	r1, r7
 80014be:	4298      	cmp	r0, r3
 80014c0:	d903      	bls.n	80014ca <__aeabi_ddiv+0x242>
 80014c2:	2080      	movs	r0, #128	; 0x80
 80014c4:	0240      	lsls	r0, r0, #9
 80014c6:	4684      	mov	ip, r0
 80014c8:	4461      	add	r1, ip
 80014ca:	0c18      	lsrs	r0, r3, #16
 80014cc:	0412      	lsls	r2, r2, #16
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	0c12      	lsrs	r2, r2, #16
 80014d2:	1841      	adds	r1, r0, r1
 80014d4:	189b      	adds	r3, r3, r2
 80014d6:	428e      	cmp	r6, r1
 80014d8:	d200      	bcs.n	80014dc <__aeabi_ddiv+0x254>
 80014da:	e0ff      	b.n	80016dc <__aeabi_ddiv+0x454>
 80014dc:	d100      	bne.n	80014e0 <__aeabi_ddiv+0x258>
 80014de:	e0fa      	b.n	80016d6 <__aeabi_ddiv+0x44e>
 80014e0:	2301      	movs	r3, #1
 80014e2:	431d      	orrs	r5, r3
 80014e4:	4a49      	ldr	r2, [pc, #292]	; (800160c <__aeabi_ddiv+0x384>)
 80014e6:	445a      	add	r2, fp
 80014e8:	2a00      	cmp	r2, #0
 80014ea:	dc00      	bgt.n	80014ee <__aeabi_ddiv+0x266>
 80014ec:	e0aa      	b.n	8001644 <__aeabi_ddiv+0x3bc>
 80014ee:	076b      	lsls	r3, r5, #29
 80014f0:	d000      	beq.n	80014f4 <__aeabi_ddiv+0x26c>
 80014f2:	e13d      	b.n	8001770 <__aeabi_ddiv+0x4e8>
 80014f4:	08ed      	lsrs	r5, r5, #3
 80014f6:	4643      	mov	r3, r8
 80014f8:	01db      	lsls	r3, r3, #7
 80014fa:	d506      	bpl.n	800150a <__aeabi_ddiv+0x282>
 80014fc:	4642      	mov	r2, r8
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <__aeabi_ddiv+0x388>)
 8001500:	401a      	ands	r2, r3
 8001502:	4690      	mov	r8, r2
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	00d2      	lsls	r2, r2, #3
 8001508:	445a      	add	r2, fp
 800150a:	4b42      	ldr	r3, [pc, #264]	; (8001614 <__aeabi_ddiv+0x38c>)
 800150c:	429a      	cmp	r2, r3
 800150e:	dd00      	ble.n	8001512 <__aeabi_ddiv+0x28a>
 8001510:	e71f      	b.n	8001352 <__aeabi_ddiv+0xca>
 8001512:	4643      	mov	r3, r8
 8001514:	075b      	lsls	r3, r3, #29
 8001516:	431d      	orrs	r5, r3
 8001518:	4643      	mov	r3, r8
 800151a:	0552      	lsls	r2, r2, #21
 800151c:	025c      	lsls	r4, r3, #9
 800151e:	0b24      	lsrs	r4, r4, #12
 8001520:	0d53      	lsrs	r3, r2, #21
 8001522:	e708      	b.n	8001336 <__aeabi_ddiv+0xae>
 8001524:	4652      	mov	r2, sl
 8001526:	4322      	orrs	r2, r4
 8001528:	d100      	bne.n	800152c <__aeabi_ddiv+0x2a4>
 800152a:	e07b      	b.n	8001624 <__aeabi_ddiv+0x39c>
 800152c:	2c00      	cmp	r4, #0
 800152e:	d100      	bne.n	8001532 <__aeabi_ddiv+0x2aa>
 8001530:	e0fa      	b.n	8001728 <__aeabi_ddiv+0x4a0>
 8001532:	0020      	movs	r0, r4
 8001534:	f001 fa22 	bl	800297c <__clzsi2>
 8001538:	0002      	movs	r2, r0
 800153a:	3a0b      	subs	r2, #11
 800153c:	231d      	movs	r3, #29
 800153e:	0001      	movs	r1, r0
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	4652      	mov	r2, sl
 8001544:	3908      	subs	r1, #8
 8001546:	40da      	lsrs	r2, r3
 8001548:	408c      	lsls	r4, r1
 800154a:	4314      	orrs	r4, r2
 800154c:	4652      	mov	r2, sl
 800154e:	408a      	lsls	r2, r1
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <__aeabi_ddiv+0x390>)
 8001552:	4458      	add	r0, fp
 8001554:	469b      	mov	fp, r3
 8001556:	4483      	add	fp, r0
 8001558:	2000      	movs	r0, #0
 800155a:	e6d5      	b.n	8001308 <__aeabi_ddiv+0x80>
 800155c:	464b      	mov	r3, r9
 800155e:	4323      	orrs	r3, r4
 8001560:	4698      	mov	r8, r3
 8001562:	d044      	beq.n	80015ee <__aeabi_ddiv+0x366>
 8001564:	2c00      	cmp	r4, #0
 8001566:	d100      	bne.n	800156a <__aeabi_ddiv+0x2e2>
 8001568:	e0ce      	b.n	8001708 <__aeabi_ddiv+0x480>
 800156a:	0020      	movs	r0, r4
 800156c:	f001 fa06 	bl	800297c <__clzsi2>
 8001570:	0001      	movs	r1, r0
 8001572:	0002      	movs	r2, r0
 8001574:	390b      	subs	r1, #11
 8001576:	231d      	movs	r3, #29
 8001578:	1a5b      	subs	r3, r3, r1
 800157a:	4649      	mov	r1, r9
 800157c:	0010      	movs	r0, r2
 800157e:	40d9      	lsrs	r1, r3
 8001580:	3808      	subs	r0, #8
 8001582:	4084      	lsls	r4, r0
 8001584:	000b      	movs	r3, r1
 8001586:	464d      	mov	r5, r9
 8001588:	4323      	orrs	r3, r4
 800158a:	4698      	mov	r8, r3
 800158c:	4085      	lsls	r5, r0
 800158e:	4823      	ldr	r0, [pc, #140]	; (800161c <__aeabi_ddiv+0x394>)
 8001590:	1a83      	subs	r3, r0, r2
 8001592:	469b      	mov	fp, r3
 8001594:	2300      	movs	r3, #0
 8001596:	4699      	mov	r9, r3
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	e69a      	b.n	80012d2 <__aeabi_ddiv+0x4a>
 800159c:	464b      	mov	r3, r9
 800159e:	4323      	orrs	r3, r4
 80015a0:	4698      	mov	r8, r3
 80015a2:	d11d      	bne.n	80015e0 <__aeabi_ddiv+0x358>
 80015a4:	2308      	movs	r3, #8
 80015a6:	4699      	mov	r9, r3
 80015a8:	3b06      	subs	r3, #6
 80015aa:	2500      	movs	r5, #0
 80015ac:	4683      	mov	fp, r0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	e68f      	b.n	80012d2 <__aeabi_ddiv+0x4a>
 80015b2:	4652      	mov	r2, sl
 80015b4:	4322      	orrs	r2, r4
 80015b6:	d109      	bne.n	80015cc <__aeabi_ddiv+0x344>
 80015b8:	2302      	movs	r3, #2
 80015ba:	4649      	mov	r1, r9
 80015bc:	4319      	orrs	r1, r3
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <__aeabi_ddiv+0x398>)
 80015c0:	4689      	mov	r9, r1
 80015c2:	469c      	mov	ip, r3
 80015c4:	2400      	movs	r4, #0
 80015c6:	2002      	movs	r0, #2
 80015c8:	44e3      	add	fp, ip
 80015ca:	e69d      	b.n	8001308 <__aeabi_ddiv+0x80>
 80015cc:	2303      	movs	r3, #3
 80015ce:	464a      	mov	r2, r9
 80015d0:	431a      	orrs	r2, r3
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <__aeabi_ddiv+0x398>)
 80015d4:	4691      	mov	r9, r2
 80015d6:	469c      	mov	ip, r3
 80015d8:	4652      	mov	r2, sl
 80015da:	2003      	movs	r0, #3
 80015dc:	44e3      	add	fp, ip
 80015de:	e693      	b.n	8001308 <__aeabi_ddiv+0x80>
 80015e0:	230c      	movs	r3, #12
 80015e2:	4699      	mov	r9, r3
 80015e4:	3b09      	subs	r3, #9
 80015e6:	46a0      	mov	r8, r4
 80015e8:	4683      	mov	fp, r0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	e671      	b.n	80012d2 <__aeabi_ddiv+0x4a>
 80015ee:	2304      	movs	r3, #4
 80015f0:	4699      	mov	r9, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	469b      	mov	fp, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	2500      	movs	r5, #0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	e669      	b.n	80012d2 <__aeabi_ddiv+0x4a>
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	000007ff 	.word	0x000007ff
 8001604:	fffffc01 	.word	0xfffffc01
 8001608:	08010004 	.word	0x08010004
 800160c:	000003ff 	.word	0x000003ff
 8001610:	feffffff 	.word	0xfeffffff
 8001614:	000007fe 	.word	0x000007fe
 8001618:	000003f3 	.word	0x000003f3
 800161c:	fffffc0d 	.word	0xfffffc0d
 8001620:	fffff801 	.word	0xfffff801
 8001624:	4649      	mov	r1, r9
 8001626:	2301      	movs	r3, #1
 8001628:	4319      	orrs	r1, r3
 800162a:	4689      	mov	r9, r1
 800162c:	2400      	movs	r4, #0
 800162e:	2001      	movs	r0, #1
 8001630:	e66a      	b.n	8001308 <__aeabi_ddiv+0x80>
 8001632:	2300      	movs	r3, #0
 8001634:	2480      	movs	r4, #128	; 0x80
 8001636:	469a      	mov	sl, r3
 8001638:	2500      	movs	r5, #0
 800163a:	4b8a      	ldr	r3, [pc, #552]	; (8001864 <__aeabi_ddiv+0x5dc>)
 800163c:	0324      	lsls	r4, r4, #12
 800163e:	e67a      	b.n	8001336 <__aeabi_ddiv+0xae>
 8001640:	2501      	movs	r5, #1
 8001642:	426d      	negs	r5, r5
 8001644:	2301      	movs	r3, #1
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	2b38      	cmp	r3, #56	; 0x38
 800164a:	dd00      	ble.n	800164e <__aeabi_ddiv+0x3c6>
 800164c:	e670      	b.n	8001330 <__aeabi_ddiv+0xa8>
 800164e:	2b1f      	cmp	r3, #31
 8001650:	dc00      	bgt.n	8001654 <__aeabi_ddiv+0x3cc>
 8001652:	e0bf      	b.n	80017d4 <__aeabi_ddiv+0x54c>
 8001654:	211f      	movs	r1, #31
 8001656:	4249      	negs	r1, r1
 8001658:	1a8a      	subs	r2, r1, r2
 800165a:	4641      	mov	r1, r8
 800165c:	40d1      	lsrs	r1, r2
 800165e:	000a      	movs	r2, r1
 8001660:	2b20      	cmp	r3, #32
 8001662:	d004      	beq.n	800166e <__aeabi_ddiv+0x3e6>
 8001664:	4641      	mov	r1, r8
 8001666:	4b80      	ldr	r3, [pc, #512]	; (8001868 <__aeabi_ddiv+0x5e0>)
 8001668:	445b      	add	r3, fp
 800166a:	4099      	lsls	r1, r3
 800166c:	430d      	orrs	r5, r1
 800166e:	1e6b      	subs	r3, r5, #1
 8001670:	419d      	sbcs	r5, r3
 8001672:	2307      	movs	r3, #7
 8001674:	432a      	orrs	r2, r5
 8001676:	001d      	movs	r5, r3
 8001678:	2400      	movs	r4, #0
 800167a:	4015      	ands	r5, r2
 800167c:	4213      	tst	r3, r2
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x3fa>
 8001680:	e0d4      	b.n	800182c <__aeabi_ddiv+0x5a4>
 8001682:	210f      	movs	r1, #15
 8001684:	2300      	movs	r3, #0
 8001686:	4011      	ands	r1, r2
 8001688:	2904      	cmp	r1, #4
 800168a:	d100      	bne.n	800168e <__aeabi_ddiv+0x406>
 800168c:	e0cb      	b.n	8001826 <__aeabi_ddiv+0x59e>
 800168e:	1d11      	adds	r1, r2, #4
 8001690:	4291      	cmp	r1, r2
 8001692:	4192      	sbcs	r2, r2
 8001694:	4252      	negs	r2, r2
 8001696:	189b      	adds	r3, r3, r2
 8001698:	000a      	movs	r2, r1
 800169a:	0219      	lsls	r1, r3, #8
 800169c:	d400      	bmi.n	80016a0 <__aeabi_ddiv+0x418>
 800169e:	e0c2      	b.n	8001826 <__aeabi_ddiv+0x59e>
 80016a0:	2301      	movs	r3, #1
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	e646      	b.n	8001336 <__aeabi_ddiv+0xae>
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	4641      	mov	r1, r8
 80016ac:	031b      	lsls	r3, r3, #12
 80016ae:	4219      	tst	r1, r3
 80016b0:	d008      	beq.n	80016c4 <__aeabi_ddiv+0x43c>
 80016b2:	421c      	tst	r4, r3
 80016b4:	d106      	bne.n	80016c4 <__aeabi_ddiv+0x43c>
 80016b6:	431c      	orrs	r4, r3
 80016b8:	0324      	lsls	r4, r4, #12
 80016ba:	46ba      	mov	sl, r7
 80016bc:	0015      	movs	r5, r2
 80016be:	4b69      	ldr	r3, [pc, #420]	; (8001864 <__aeabi_ddiv+0x5dc>)
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	e638      	b.n	8001336 <__aeabi_ddiv+0xae>
 80016c4:	2480      	movs	r4, #128	; 0x80
 80016c6:	4643      	mov	r3, r8
 80016c8:	0324      	lsls	r4, r4, #12
 80016ca:	431c      	orrs	r4, r3
 80016cc:	0324      	lsls	r4, r4, #12
 80016ce:	46b2      	mov	sl, r6
 80016d0:	4b64      	ldr	r3, [pc, #400]	; (8001864 <__aeabi_ddiv+0x5dc>)
 80016d2:	0b24      	lsrs	r4, r4, #12
 80016d4:	e62f      	b.n	8001336 <__aeabi_ddiv+0xae>
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d100      	bne.n	80016dc <__aeabi_ddiv+0x454>
 80016da:	e703      	b.n	80014e4 <__aeabi_ddiv+0x25c>
 80016dc:	19a6      	adds	r6, r4, r6
 80016de:	1e68      	subs	r0, r5, #1
 80016e0:	42a6      	cmp	r6, r4
 80016e2:	d200      	bcs.n	80016e6 <__aeabi_ddiv+0x45e>
 80016e4:	e08d      	b.n	8001802 <__aeabi_ddiv+0x57a>
 80016e6:	428e      	cmp	r6, r1
 80016e8:	d200      	bcs.n	80016ec <__aeabi_ddiv+0x464>
 80016ea:	e0a3      	b.n	8001834 <__aeabi_ddiv+0x5ac>
 80016ec:	d100      	bne.n	80016f0 <__aeabi_ddiv+0x468>
 80016ee:	e0b3      	b.n	8001858 <__aeabi_ddiv+0x5d0>
 80016f0:	0005      	movs	r5, r0
 80016f2:	e6f5      	b.n	80014e0 <__aeabi_ddiv+0x258>
 80016f4:	42aa      	cmp	r2, r5
 80016f6:	d900      	bls.n	80016fa <__aeabi_ddiv+0x472>
 80016f8:	e639      	b.n	800136e <__aeabi_ddiv+0xe6>
 80016fa:	4643      	mov	r3, r8
 80016fc:	07de      	lsls	r6, r3, #31
 80016fe:	0858      	lsrs	r0, r3, #1
 8001700:	086b      	lsrs	r3, r5, #1
 8001702:	431e      	orrs	r6, r3
 8001704:	07ed      	lsls	r5, r5, #31
 8001706:	e639      	b.n	800137c <__aeabi_ddiv+0xf4>
 8001708:	4648      	mov	r0, r9
 800170a:	f001 f937 	bl	800297c <__clzsi2>
 800170e:	0001      	movs	r1, r0
 8001710:	0002      	movs	r2, r0
 8001712:	3115      	adds	r1, #21
 8001714:	3220      	adds	r2, #32
 8001716:	291c      	cmp	r1, #28
 8001718:	dc00      	bgt.n	800171c <__aeabi_ddiv+0x494>
 800171a:	e72c      	b.n	8001576 <__aeabi_ddiv+0x2ee>
 800171c:	464b      	mov	r3, r9
 800171e:	3808      	subs	r0, #8
 8001720:	4083      	lsls	r3, r0
 8001722:	2500      	movs	r5, #0
 8001724:	4698      	mov	r8, r3
 8001726:	e732      	b.n	800158e <__aeabi_ddiv+0x306>
 8001728:	f001 f928 	bl	800297c <__clzsi2>
 800172c:	0003      	movs	r3, r0
 800172e:	001a      	movs	r2, r3
 8001730:	3215      	adds	r2, #21
 8001732:	3020      	adds	r0, #32
 8001734:	2a1c      	cmp	r2, #28
 8001736:	dc00      	bgt.n	800173a <__aeabi_ddiv+0x4b2>
 8001738:	e700      	b.n	800153c <__aeabi_ddiv+0x2b4>
 800173a:	4654      	mov	r4, sl
 800173c:	3b08      	subs	r3, #8
 800173e:	2200      	movs	r2, #0
 8001740:	409c      	lsls	r4, r3
 8001742:	e705      	b.n	8001550 <__aeabi_ddiv+0x2c8>
 8001744:	1936      	adds	r6, r6, r4
 8001746:	3b01      	subs	r3, #1
 8001748:	42b4      	cmp	r4, r6
 800174a:	d900      	bls.n	800174e <__aeabi_ddiv+0x4c6>
 800174c:	e6a6      	b.n	800149c <__aeabi_ddiv+0x214>
 800174e:	42b2      	cmp	r2, r6
 8001750:	d800      	bhi.n	8001754 <__aeabi_ddiv+0x4cc>
 8001752:	e6a3      	b.n	800149c <__aeabi_ddiv+0x214>
 8001754:	1e83      	subs	r3, r0, #2
 8001756:	1936      	adds	r6, r6, r4
 8001758:	e6a0      	b.n	800149c <__aeabi_ddiv+0x214>
 800175a:	1909      	adds	r1, r1, r4
 800175c:	3d01      	subs	r5, #1
 800175e:	428c      	cmp	r4, r1
 8001760:	d900      	bls.n	8001764 <__aeabi_ddiv+0x4dc>
 8001762:	e68d      	b.n	8001480 <__aeabi_ddiv+0x1f8>
 8001764:	428a      	cmp	r2, r1
 8001766:	d800      	bhi.n	800176a <__aeabi_ddiv+0x4e2>
 8001768:	e68a      	b.n	8001480 <__aeabi_ddiv+0x1f8>
 800176a:	1e85      	subs	r5, r0, #2
 800176c:	1909      	adds	r1, r1, r4
 800176e:	e687      	b.n	8001480 <__aeabi_ddiv+0x1f8>
 8001770:	230f      	movs	r3, #15
 8001772:	402b      	ands	r3, r5
 8001774:	2b04      	cmp	r3, #4
 8001776:	d100      	bne.n	800177a <__aeabi_ddiv+0x4f2>
 8001778:	e6bc      	b.n	80014f4 <__aeabi_ddiv+0x26c>
 800177a:	2305      	movs	r3, #5
 800177c:	425b      	negs	r3, r3
 800177e:	42ab      	cmp	r3, r5
 8001780:	419b      	sbcs	r3, r3
 8001782:	3504      	adds	r5, #4
 8001784:	425b      	negs	r3, r3
 8001786:	08ed      	lsrs	r5, r5, #3
 8001788:	4498      	add	r8, r3
 800178a:	e6b4      	b.n	80014f6 <__aeabi_ddiv+0x26e>
 800178c:	42af      	cmp	r7, r5
 800178e:	d900      	bls.n	8001792 <__aeabi_ddiv+0x50a>
 8001790:	e660      	b.n	8001454 <__aeabi_ddiv+0x1cc>
 8001792:	4282      	cmp	r2, r0
 8001794:	d804      	bhi.n	80017a0 <__aeabi_ddiv+0x518>
 8001796:	d000      	beq.n	800179a <__aeabi_ddiv+0x512>
 8001798:	e65c      	b.n	8001454 <__aeabi_ddiv+0x1cc>
 800179a:	42ae      	cmp	r6, r5
 800179c:	d800      	bhi.n	80017a0 <__aeabi_ddiv+0x518>
 800179e:	e659      	b.n	8001454 <__aeabi_ddiv+0x1cc>
 80017a0:	2302      	movs	r3, #2
 80017a2:	425b      	negs	r3, r3
 80017a4:	469c      	mov	ip, r3
 80017a6:	9b00      	ldr	r3, [sp, #0]
 80017a8:	44e0      	add	r8, ip
 80017aa:	469c      	mov	ip, r3
 80017ac:	4465      	add	r5, ip
 80017ae:	429d      	cmp	r5, r3
 80017b0:	419b      	sbcs	r3, r3
 80017b2:	425b      	negs	r3, r3
 80017b4:	191b      	adds	r3, r3, r4
 80017b6:	18c0      	adds	r0, r0, r3
 80017b8:	e64d      	b.n	8001456 <__aeabi_ddiv+0x1ce>
 80017ba:	428a      	cmp	r2, r1
 80017bc:	d800      	bhi.n	80017c0 <__aeabi_ddiv+0x538>
 80017be:	e60e      	b.n	80013de <__aeabi_ddiv+0x156>
 80017c0:	1e83      	subs	r3, r0, #2
 80017c2:	1909      	adds	r1, r1, r4
 80017c4:	e60b      	b.n	80013de <__aeabi_ddiv+0x156>
 80017c6:	428a      	cmp	r2, r1
 80017c8:	d800      	bhi.n	80017cc <__aeabi_ddiv+0x544>
 80017ca:	e5f4      	b.n	80013b6 <__aeabi_ddiv+0x12e>
 80017cc:	1e83      	subs	r3, r0, #2
 80017ce:	4698      	mov	r8, r3
 80017d0:	1909      	adds	r1, r1, r4
 80017d2:	e5f0      	b.n	80013b6 <__aeabi_ddiv+0x12e>
 80017d4:	4925      	ldr	r1, [pc, #148]	; (800186c <__aeabi_ddiv+0x5e4>)
 80017d6:	0028      	movs	r0, r5
 80017d8:	4459      	add	r1, fp
 80017da:	408d      	lsls	r5, r1
 80017dc:	4642      	mov	r2, r8
 80017de:	408a      	lsls	r2, r1
 80017e0:	1e69      	subs	r1, r5, #1
 80017e2:	418d      	sbcs	r5, r1
 80017e4:	4641      	mov	r1, r8
 80017e6:	40d8      	lsrs	r0, r3
 80017e8:	40d9      	lsrs	r1, r3
 80017ea:	4302      	orrs	r2, r0
 80017ec:	432a      	orrs	r2, r5
 80017ee:	000b      	movs	r3, r1
 80017f0:	0751      	lsls	r1, r2, #29
 80017f2:	d100      	bne.n	80017f6 <__aeabi_ddiv+0x56e>
 80017f4:	e751      	b.n	800169a <__aeabi_ddiv+0x412>
 80017f6:	210f      	movs	r1, #15
 80017f8:	4011      	ands	r1, r2
 80017fa:	2904      	cmp	r1, #4
 80017fc:	d000      	beq.n	8001800 <__aeabi_ddiv+0x578>
 80017fe:	e746      	b.n	800168e <__aeabi_ddiv+0x406>
 8001800:	e74b      	b.n	800169a <__aeabi_ddiv+0x412>
 8001802:	0005      	movs	r5, r0
 8001804:	428e      	cmp	r6, r1
 8001806:	d000      	beq.n	800180a <__aeabi_ddiv+0x582>
 8001808:	e66a      	b.n	80014e0 <__aeabi_ddiv+0x258>
 800180a:	9a00      	ldr	r2, [sp, #0]
 800180c:	4293      	cmp	r3, r2
 800180e:	d000      	beq.n	8001812 <__aeabi_ddiv+0x58a>
 8001810:	e666      	b.n	80014e0 <__aeabi_ddiv+0x258>
 8001812:	e667      	b.n	80014e4 <__aeabi_ddiv+0x25c>
 8001814:	4a16      	ldr	r2, [pc, #88]	; (8001870 <__aeabi_ddiv+0x5e8>)
 8001816:	445a      	add	r2, fp
 8001818:	2a00      	cmp	r2, #0
 800181a:	dc00      	bgt.n	800181e <__aeabi_ddiv+0x596>
 800181c:	e710      	b.n	8001640 <__aeabi_ddiv+0x3b8>
 800181e:	2301      	movs	r3, #1
 8001820:	2500      	movs	r5, #0
 8001822:	4498      	add	r8, r3
 8001824:	e667      	b.n	80014f6 <__aeabi_ddiv+0x26e>
 8001826:	075d      	lsls	r5, r3, #29
 8001828:	025b      	lsls	r3, r3, #9
 800182a:	0b1c      	lsrs	r4, r3, #12
 800182c:	08d2      	lsrs	r2, r2, #3
 800182e:	2300      	movs	r3, #0
 8001830:	4315      	orrs	r5, r2
 8001832:	e580      	b.n	8001336 <__aeabi_ddiv+0xae>
 8001834:	9800      	ldr	r0, [sp, #0]
 8001836:	3d02      	subs	r5, #2
 8001838:	0042      	lsls	r2, r0, #1
 800183a:	4282      	cmp	r2, r0
 800183c:	41bf      	sbcs	r7, r7
 800183e:	427f      	negs	r7, r7
 8001840:	193c      	adds	r4, r7, r4
 8001842:	1936      	adds	r6, r6, r4
 8001844:	9200      	str	r2, [sp, #0]
 8001846:	e7dd      	b.n	8001804 <__aeabi_ddiv+0x57c>
 8001848:	2480      	movs	r4, #128	; 0x80
 800184a:	4643      	mov	r3, r8
 800184c:	0324      	lsls	r4, r4, #12
 800184e:	431c      	orrs	r4, r3
 8001850:	0324      	lsls	r4, r4, #12
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__aeabi_ddiv+0x5dc>)
 8001854:	0b24      	lsrs	r4, r4, #12
 8001856:	e56e      	b.n	8001336 <__aeabi_ddiv+0xae>
 8001858:	9a00      	ldr	r2, [sp, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d3ea      	bcc.n	8001834 <__aeabi_ddiv+0x5ac>
 800185e:	0005      	movs	r5, r0
 8001860:	e7d3      	b.n	800180a <__aeabi_ddiv+0x582>
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	000007ff 	.word	0x000007ff
 8001868:	0000043e 	.word	0x0000043e
 800186c:	0000041e 	.word	0x0000041e
 8001870:	000003ff 	.word	0x000003ff

08001874 <__eqdf2>:
 8001874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001876:	464e      	mov	r6, r9
 8001878:	4645      	mov	r5, r8
 800187a:	46de      	mov	lr, fp
 800187c:	4657      	mov	r7, sl
 800187e:	4690      	mov	r8, r2
 8001880:	b5e0      	push	{r5, r6, r7, lr}
 8001882:	0017      	movs	r7, r2
 8001884:	031a      	lsls	r2, r3, #12
 8001886:	0b12      	lsrs	r2, r2, #12
 8001888:	0005      	movs	r5, r0
 800188a:	4684      	mov	ip, r0
 800188c:	4819      	ldr	r0, [pc, #100]	; (80018f4 <__eqdf2+0x80>)
 800188e:	030e      	lsls	r6, r1, #12
 8001890:	004c      	lsls	r4, r1, #1
 8001892:	4691      	mov	r9, r2
 8001894:	005a      	lsls	r2, r3, #1
 8001896:	0fdb      	lsrs	r3, r3, #31
 8001898:	469b      	mov	fp, r3
 800189a:	0b36      	lsrs	r6, r6, #12
 800189c:	0d64      	lsrs	r4, r4, #21
 800189e:	0fc9      	lsrs	r1, r1, #31
 80018a0:	0d52      	lsrs	r2, r2, #21
 80018a2:	4284      	cmp	r4, r0
 80018a4:	d019      	beq.n	80018da <__eqdf2+0x66>
 80018a6:	4282      	cmp	r2, r0
 80018a8:	d010      	beq.n	80018cc <__eqdf2+0x58>
 80018aa:	2001      	movs	r0, #1
 80018ac:	4294      	cmp	r4, r2
 80018ae:	d10e      	bne.n	80018ce <__eqdf2+0x5a>
 80018b0:	454e      	cmp	r6, r9
 80018b2:	d10c      	bne.n	80018ce <__eqdf2+0x5a>
 80018b4:	2001      	movs	r0, #1
 80018b6:	45c4      	cmp	ip, r8
 80018b8:	d109      	bne.n	80018ce <__eqdf2+0x5a>
 80018ba:	4559      	cmp	r1, fp
 80018bc:	d017      	beq.n	80018ee <__eqdf2+0x7a>
 80018be:	2c00      	cmp	r4, #0
 80018c0:	d105      	bne.n	80018ce <__eqdf2+0x5a>
 80018c2:	0030      	movs	r0, r6
 80018c4:	4328      	orrs	r0, r5
 80018c6:	1e43      	subs	r3, r0, #1
 80018c8:	4198      	sbcs	r0, r3
 80018ca:	e000      	b.n	80018ce <__eqdf2+0x5a>
 80018cc:	2001      	movs	r0, #1
 80018ce:	bcf0      	pop	{r4, r5, r6, r7}
 80018d0:	46bb      	mov	fp, r7
 80018d2:	46b2      	mov	sl, r6
 80018d4:	46a9      	mov	r9, r5
 80018d6:	46a0      	mov	r8, r4
 80018d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018da:	0033      	movs	r3, r6
 80018dc:	2001      	movs	r0, #1
 80018de:	432b      	orrs	r3, r5
 80018e0:	d1f5      	bne.n	80018ce <__eqdf2+0x5a>
 80018e2:	42a2      	cmp	r2, r4
 80018e4:	d1f3      	bne.n	80018ce <__eqdf2+0x5a>
 80018e6:	464b      	mov	r3, r9
 80018e8:	433b      	orrs	r3, r7
 80018ea:	d1f0      	bne.n	80018ce <__eqdf2+0x5a>
 80018ec:	e7e2      	b.n	80018b4 <__eqdf2+0x40>
 80018ee:	2000      	movs	r0, #0
 80018f0:	e7ed      	b.n	80018ce <__eqdf2+0x5a>
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	000007ff 	.word	0x000007ff

080018f8 <__gedf2>:
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	4647      	mov	r7, r8
 80018fc:	46ce      	mov	lr, r9
 80018fe:	0004      	movs	r4, r0
 8001900:	0018      	movs	r0, r3
 8001902:	0016      	movs	r6, r2
 8001904:	031b      	lsls	r3, r3, #12
 8001906:	0b1b      	lsrs	r3, r3, #12
 8001908:	4d2d      	ldr	r5, [pc, #180]	; (80019c0 <__gedf2+0xc8>)
 800190a:	004a      	lsls	r2, r1, #1
 800190c:	4699      	mov	r9, r3
 800190e:	b580      	push	{r7, lr}
 8001910:	0043      	lsls	r3, r0, #1
 8001912:	030f      	lsls	r7, r1, #12
 8001914:	46a4      	mov	ip, r4
 8001916:	46b0      	mov	r8, r6
 8001918:	0b3f      	lsrs	r7, r7, #12
 800191a:	0d52      	lsrs	r2, r2, #21
 800191c:	0fc9      	lsrs	r1, r1, #31
 800191e:	0d5b      	lsrs	r3, r3, #21
 8001920:	0fc0      	lsrs	r0, r0, #31
 8001922:	42aa      	cmp	r2, r5
 8001924:	d021      	beq.n	800196a <__gedf2+0x72>
 8001926:	42ab      	cmp	r3, r5
 8001928:	d013      	beq.n	8001952 <__gedf2+0x5a>
 800192a:	2a00      	cmp	r2, #0
 800192c:	d122      	bne.n	8001974 <__gedf2+0x7c>
 800192e:	433c      	orrs	r4, r7
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <__gedf2+0x42>
 8001934:	464d      	mov	r5, r9
 8001936:	432e      	orrs	r6, r5
 8001938:	d022      	beq.n	8001980 <__gedf2+0x88>
 800193a:	2c00      	cmp	r4, #0
 800193c:	d010      	beq.n	8001960 <__gedf2+0x68>
 800193e:	4281      	cmp	r1, r0
 8001940:	d022      	beq.n	8001988 <__gedf2+0x90>
 8001942:	2002      	movs	r0, #2
 8001944:	3901      	subs	r1, #1
 8001946:	4008      	ands	r0, r1
 8001948:	3801      	subs	r0, #1
 800194a:	bcc0      	pop	{r6, r7}
 800194c:	46b9      	mov	r9, r7
 800194e:	46b0      	mov	r8, r6
 8001950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001952:	464d      	mov	r5, r9
 8001954:	432e      	orrs	r6, r5
 8001956:	d129      	bne.n	80019ac <__gedf2+0xb4>
 8001958:	2a00      	cmp	r2, #0
 800195a:	d1f0      	bne.n	800193e <__gedf2+0x46>
 800195c:	433c      	orrs	r4, r7
 800195e:	d1ee      	bne.n	800193e <__gedf2+0x46>
 8001960:	2800      	cmp	r0, #0
 8001962:	d1f2      	bne.n	800194a <__gedf2+0x52>
 8001964:	2001      	movs	r0, #1
 8001966:	4240      	negs	r0, r0
 8001968:	e7ef      	b.n	800194a <__gedf2+0x52>
 800196a:	003d      	movs	r5, r7
 800196c:	4325      	orrs	r5, r4
 800196e:	d11d      	bne.n	80019ac <__gedf2+0xb4>
 8001970:	4293      	cmp	r3, r2
 8001972:	d0ee      	beq.n	8001952 <__gedf2+0x5a>
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e2      	bne.n	800193e <__gedf2+0x46>
 8001978:	464c      	mov	r4, r9
 800197a:	4326      	orrs	r6, r4
 800197c:	d1df      	bne.n	800193e <__gedf2+0x46>
 800197e:	e7e0      	b.n	8001942 <__gedf2+0x4a>
 8001980:	2000      	movs	r0, #0
 8001982:	2c00      	cmp	r4, #0
 8001984:	d0e1      	beq.n	800194a <__gedf2+0x52>
 8001986:	e7dc      	b.n	8001942 <__gedf2+0x4a>
 8001988:	429a      	cmp	r2, r3
 800198a:	dc0a      	bgt.n	80019a2 <__gedf2+0xaa>
 800198c:	dbe8      	blt.n	8001960 <__gedf2+0x68>
 800198e:	454f      	cmp	r7, r9
 8001990:	d8d7      	bhi.n	8001942 <__gedf2+0x4a>
 8001992:	d00e      	beq.n	80019b2 <__gedf2+0xba>
 8001994:	2000      	movs	r0, #0
 8001996:	454f      	cmp	r7, r9
 8001998:	d2d7      	bcs.n	800194a <__gedf2+0x52>
 800199a:	2900      	cmp	r1, #0
 800199c:	d0e2      	beq.n	8001964 <__gedf2+0x6c>
 800199e:	0008      	movs	r0, r1
 80019a0:	e7d3      	b.n	800194a <__gedf2+0x52>
 80019a2:	4243      	negs	r3, r0
 80019a4:	4158      	adcs	r0, r3
 80019a6:	0040      	lsls	r0, r0, #1
 80019a8:	3801      	subs	r0, #1
 80019aa:	e7ce      	b.n	800194a <__gedf2+0x52>
 80019ac:	2002      	movs	r0, #2
 80019ae:	4240      	negs	r0, r0
 80019b0:	e7cb      	b.n	800194a <__gedf2+0x52>
 80019b2:	45c4      	cmp	ip, r8
 80019b4:	d8c5      	bhi.n	8001942 <__gedf2+0x4a>
 80019b6:	2000      	movs	r0, #0
 80019b8:	45c4      	cmp	ip, r8
 80019ba:	d2c6      	bcs.n	800194a <__gedf2+0x52>
 80019bc:	e7ed      	b.n	800199a <__gedf2+0xa2>
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	000007ff 	.word	0x000007ff

080019c4 <__ledf2>:
 80019c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c6:	4647      	mov	r7, r8
 80019c8:	46ce      	mov	lr, r9
 80019ca:	0004      	movs	r4, r0
 80019cc:	0018      	movs	r0, r3
 80019ce:	0016      	movs	r6, r2
 80019d0:	031b      	lsls	r3, r3, #12
 80019d2:	0b1b      	lsrs	r3, r3, #12
 80019d4:	4d2c      	ldr	r5, [pc, #176]	; (8001a88 <__ledf2+0xc4>)
 80019d6:	004a      	lsls	r2, r1, #1
 80019d8:	4699      	mov	r9, r3
 80019da:	b580      	push	{r7, lr}
 80019dc:	0043      	lsls	r3, r0, #1
 80019de:	030f      	lsls	r7, r1, #12
 80019e0:	46a4      	mov	ip, r4
 80019e2:	46b0      	mov	r8, r6
 80019e4:	0b3f      	lsrs	r7, r7, #12
 80019e6:	0d52      	lsrs	r2, r2, #21
 80019e8:	0fc9      	lsrs	r1, r1, #31
 80019ea:	0d5b      	lsrs	r3, r3, #21
 80019ec:	0fc0      	lsrs	r0, r0, #31
 80019ee:	42aa      	cmp	r2, r5
 80019f0:	d00d      	beq.n	8001a0e <__ledf2+0x4a>
 80019f2:	42ab      	cmp	r3, r5
 80019f4:	d010      	beq.n	8001a18 <__ledf2+0x54>
 80019f6:	2a00      	cmp	r2, #0
 80019f8:	d127      	bne.n	8001a4a <__ledf2+0x86>
 80019fa:	433c      	orrs	r4, r7
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d111      	bne.n	8001a24 <__ledf2+0x60>
 8001a00:	464d      	mov	r5, r9
 8001a02:	432e      	orrs	r6, r5
 8001a04:	d10e      	bne.n	8001a24 <__ledf2+0x60>
 8001a06:	2000      	movs	r0, #0
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d015      	beq.n	8001a38 <__ledf2+0x74>
 8001a0c:	e00e      	b.n	8001a2c <__ledf2+0x68>
 8001a0e:	003d      	movs	r5, r7
 8001a10:	4325      	orrs	r5, r4
 8001a12:	d110      	bne.n	8001a36 <__ledf2+0x72>
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d118      	bne.n	8001a4a <__ledf2+0x86>
 8001a18:	464d      	mov	r5, r9
 8001a1a:	432e      	orrs	r6, r5
 8001a1c:	d10b      	bne.n	8001a36 <__ledf2+0x72>
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	d102      	bne.n	8001a28 <__ledf2+0x64>
 8001a22:	433c      	orrs	r4, r7
 8001a24:	2c00      	cmp	r4, #0
 8001a26:	d00b      	beq.n	8001a40 <__ledf2+0x7c>
 8001a28:	4281      	cmp	r1, r0
 8001a2a:	d014      	beq.n	8001a56 <__ledf2+0x92>
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	3901      	subs	r1, #1
 8001a30:	4008      	ands	r0, r1
 8001a32:	3801      	subs	r0, #1
 8001a34:	e000      	b.n	8001a38 <__ledf2+0x74>
 8001a36:	2002      	movs	r0, #2
 8001a38:	bcc0      	pop	{r6, r7}
 8001a3a:	46b9      	mov	r9, r7
 8001a3c:	46b0      	mov	r8, r6
 8001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d1f9      	bne.n	8001a38 <__ledf2+0x74>
 8001a44:	2001      	movs	r0, #1
 8001a46:	4240      	negs	r0, r0
 8001a48:	e7f6      	b.n	8001a38 <__ledf2+0x74>
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ec      	bne.n	8001a28 <__ledf2+0x64>
 8001a4e:	464c      	mov	r4, r9
 8001a50:	4326      	orrs	r6, r4
 8001a52:	d1e9      	bne.n	8001a28 <__ledf2+0x64>
 8001a54:	e7ea      	b.n	8001a2c <__ledf2+0x68>
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dd04      	ble.n	8001a64 <__ledf2+0xa0>
 8001a5a:	4243      	negs	r3, r0
 8001a5c:	4158      	adcs	r0, r3
 8001a5e:	0040      	lsls	r0, r0, #1
 8001a60:	3801      	subs	r0, #1
 8001a62:	e7e9      	b.n	8001a38 <__ledf2+0x74>
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbeb      	blt.n	8001a40 <__ledf2+0x7c>
 8001a68:	454f      	cmp	r7, r9
 8001a6a:	d8df      	bhi.n	8001a2c <__ledf2+0x68>
 8001a6c:	d006      	beq.n	8001a7c <__ledf2+0xb8>
 8001a6e:	2000      	movs	r0, #0
 8001a70:	454f      	cmp	r7, r9
 8001a72:	d2e1      	bcs.n	8001a38 <__ledf2+0x74>
 8001a74:	2900      	cmp	r1, #0
 8001a76:	d0e5      	beq.n	8001a44 <__ledf2+0x80>
 8001a78:	0008      	movs	r0, r1
 8001a7a:	e7dd      	b.n	8001a38 <__ledf2+0x74>
 8001a7c:	45c4      	cmp	ip, r8
 8001a7e:	d8d5      	bhi.n	8001a2c <__ledf2+0x68>
 8001a80:	2000      	movs	r0, #0
 8001a82:	45c4      	cmp	ip, r8
 8001a84:	d2d8      	bcs.n	8001a38 <__ledf2+0x74>
 8001a86:	e7f5      	b.n	8001a74 <__ledf2+0xb0>
 8001a88:	000007ff 	.word	0x000007ff

08001a8c <__aeabi_dmul>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	4657      	mov	r7, sl
 8001a90:	464e      	mov	r6, r9
 8001a92:	4645      	mov	r5, r8
 8001a94:	46de      	mov	lr, fp
 8001a96:	b5e0      	push	{r5, r6, r7, lr}
 8001a98:	4698      	mov	r8, r3
 8001a9a:	030c      	lsls	r4, r1, #12
 8001a9c:	004b      	lsls	r3, r1, #1
 8001a9e:	0006      	movs	r6, r0
 8001aa0:	4692      	mov	sl, r2
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	0b24      	lsrs	r4, r4, #12
 8001aa6:	0d5b      	lsrs	r3, r3, #21
 8001aa8:	0fcf      	lsrs	r7, r1, #31
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dmul+0x24>
 8001aae:	e15c      	b.n	8001d6a <__aeabi_dmul+0x2de>
 8001ab0:	4ad9      	ldr	r2, [pc, #868]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dmul+0x2c>
 8001ab6:	e175      	b.n	8001da4 <__aeabi_dmul+0x318>
 8001ab8:	0f42      	lsrs	r2, r0, #29
 8001aba:	00e4      	lsls	r4, r4, #3
 8001abc:	4314      	orrs	r4, r2
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	0412      	lsls	r2, r2, #16
 8001ac2:	4314      	orrs	r4, r2
 8001ac4:	4ad5      	ldr	r2, [pc, #852]	; (8001e1c <__aeabi_dmul+0x390>)
 8001ac6:	00c5      	lsls	r5, r0, #3
 8001ac8:	4694      	mov	ip, r2
 8001aca:	4463      	add	r3, ip
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	031e      	lsls	r6, r3, #12
 8001ada:	0fd2      	lsrs	r2, r2, #31
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4650      	mov	r0, sl
 8001ae0:	4690      	mov	r8, r2
 8001ae2:	0b36      	lsrs	r6, r6, #12
 8001ae4:	0d5b      	lsrs	r3, r3, #21
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dmul+0x5e>
 8001ae8:	e120      	b.n	8001d2c <__aeabi_dmul+0x2a0>
 8001aea:	4acb      	ldr	r2, [pc, #812]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dmul+0x66>
 8001af0:	e162      	b.n	8001db8 <__aeabi_dmul+0x32c>
 8001af2:	49ca      	ldr	r1, [pc, #808]	; (8001e1c <__aeabi_dmul+0x390>)
 8001af4:	0f42      	lsrs	r2, r0, #29
 8001af6:	468c      	mov	ip, r1
 8001af8:	9900      	ldr	r1, [sp, #0]
 8001afa:	4463      	add	r3, ip
 8001afc:	00f6      	lsls	r6, r6, #3
 8001afe:	468c      	mov	ip, r1
 8001b00:	4316      	orrs	r6, r2
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	449c      	add	ip, r3
 8001b06:	0412      	lsls	r2, r2, #16
 8001b08:	4663      	mov	r3, ip
 8001b0a:	4316      	orrs	r6, r2
 8001b0c:	00c2      	lsls	r2, r0, #3
 8001b0e:	2000      	movs	r0, #0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	9900      	ldr	r1, [sp, #0]
 8001b14:	4643      	mov	r3, r8
 8001b16:	3101      	adds	r1, #1
 8001b18:	468c      	mov	ip, r1
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	407b      	eors	r3, r7
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	290f      	cmp	r1, #15
 8001b22:	d826      	bhi.n	8001b72 <__aeabi_dmul+0xe6>
 8001b24:	4bbe      	ldr	r3, [pc, #760]	; (8001e20 <__aeabi_dmul+0x394>)
 8001b26:	0089      	lsls	r1, r1, #2
 8001b28:	5859      	ldr	r1, [r3, r1]
 8001b2a:	468f      	mov	pc, r1
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	0034      	movs	r4, r6
 8001b32:	0015      	movs	r5, r2
 8001b34:	4683      	mov	fp, r0
 8001b36:	465b      	mov	r3, fp
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d016      	beq.n	8001b6a <__aeabi_dmul+0xde>
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dmul+0xb6>
 8001b40:	e203      	b.n	8001f4a <__aeabi_dmul+0x4be>
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dmul+0xbc>
 8001b46:	e0cd      	b.n	8001ce4 <__aeabi_dmul+0x258>
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2400      	movs	r4, #0
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	9b01      	ldr	r3, [sp, #4]
 8001b50:	0512      	lsls	r2, r2, #20
 8001b52:	4322      	orrs	r2, r4
 8001b54:	07db      	lsls	r3, r3, #31
 8001b56:	431a      	orrs	r2, r3
 8001b58:	0028      	movs	r0, r5
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	b007      	add	sp, #28
 8001b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b60:	46bb      	mov	fp, r7
 8001b62:	46b2      	mov	sl, r6
 8001b64:	46a9      	mov	r9, r5
 8001b66:	46a0      	mov	r8, r4
 8001b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b6a:	2400      	movs	r4, #0
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	4aaa      	ldr	r2, [pc, #680]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001b70:	e7ed      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001b72:	0c28      	lsrs	r0, r5, #16
 8001b74:	042d      	lsls	r5, r5, #16
 8001b76:	0c2d      	lsrs	r5, r5, #16
 8001b78:	002b      	movs	r3, r5
 8001b7a:	0c11      	lsrs	r1, r2, #16
 8001b7c:	0412      	lsls	r2, r2, #16
 8001b7e:	0c12      	lsrs	r2, r2, #16
 8001b80:	4353      	muls	r3, r2
 8001b82:	4698      	mov	r8, r3
 8001b84:	0013      	movs	r3, r2
 8001b86:	002f      	movs	r7, r5
 8001b88:	4343      	muls	r3, r0
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	434f      	muls	r7, r1
 8001b8e:	444f      	add	r7, r9
 8001b90:	46bb      	mov	fp, r7
 8001b92:	4647      	mov	r7, r8
 8001b94:	000b      	movs	r3, r1
 8001b96:	0c3f      	lsrs	r7, r7, #16
 8001b98:	46ba      	mov	sl, r7
 8001b9a:	4343      	muls	r3, r0
 8001b9c:	44da      	add	sl, fp
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	45d1      	cmp	r9, sl
 8001ba2:	d904      	bls.n	8001bae <__aeabi_dmul+0x122>
 8001ba4:	2780      	movs	r7, #128	; 0x80
 8001ba6:	027f      	lsls	r7, r7, #9
 8001ba8:	46b9      	mov	r9, r7
 8001baa:	444b      	add	r3, r9
 8001bac:	9302      	str	r3, [sp, #8]
 8001bae:	4653      	mov	r3, sl
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	469b      	mov	fp, r3
 8001bb4:	4653      	mov	r3, sl
 8001bb6:	041f      	lsls	r7, r3, #16
 8001bb8:	4643      	mov	r3, r8
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	4698      	mov	r8, r3
 8001bc0:	003b      	movs	r3, r7
 8001bc2:	4443      	add	r3, r8
 8001bc4:	9304      	str	r3, [sp, #16]
 8001bc6:	0c33      	lsrs	r3, r6, #16
 8001bc8:	0436      	lsls	r6, r6, #16
 8001bca:	0c36      	lsrs	r6, r6, #16
 8001bcc:	4698      	mov	r8, r3
 8001bce:	0033      	movs	r3, r6
 8001bd0:	4343      	muls	r3, r0
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	4643      	mov	r3, r8
 8001bd6:	4343      	muls	r3, r0
 8001bd8:	002f      	movs	r7, r5
 8001bda:	469a      	mov	sl, r3
 8001bdc:	4643      	mov	r3, r8
 8001bde:	4377      	muls	r7, r6
 8001be0:	435d      	muls	r5, r3
 8001be2:	0c38      	lsrs	r0, r7, #16
 8001be4:	444d      	add	r5, r9
 8001be6:	1945      	adds	r5, r0, r5
 8001be8:	45a9      	cmp	r9, r5
 8001bea:	d903      	bls.n	8001bf4 <__aeabi_dmul+0x168>
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	025b      	lsls	r3, r3, #9
 8001bf0:	4699      	mov	r9, r3
 8001bf2:	44ca      	add	sl, r9
 8001bf4:	043f      	lsls	r7, r7, #16
 8001bf6:	0c28      	lsrs	r0, r5, #16
 8001bf8:	0c3f      	lsrs	r7, r7, #16
 8001bfa:	042d      	lsls	r5, r5, #16
 8001bfc:	19ed      	adds	r5, r5, r7
 8001bfe:	0c27      	lsrs	r7, r4, #16
 8001c00:	0424      	lsls	r4, r4, #16
 8001c02:	0c24      	lsrs	r4, r4, #16
 8001c04:	0003      	movs	r3, r0
 8001c06:	0020      	movs	r0, r4
 8001c08:	4350      	muls	r0, r2
 8001c0a:	437a      	muls	r2, r7
 8001c0c:	4691      	mov	r9, r2
 8001c0e:	003a      	movs	r2, r7
 8001c10:	4453      	add	r3, sl
 8001c12:	9305      	str	r3, [sp, #20]
 8001c14:	0c03      	lsrs	r3, r0, #16
 8001c16:	469a      	mov	sl, r3
 8001c18:	434a      	muls	r2, r1
 8001c1a:	4361      	muls	r1, r4
 8001c1c:	4449      	add	r1, r9
 8001c1e:	4451      	add	r1, sl
 8001c20:	44ab      	add	fp, r5
 8001c22:	4589      	cmp	r9, r1
 8001c24:	d903      	bls.n	8001c2e <__aeabi_dmul+0x1a2>
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	025b      	lsls	r3, r3, #9
 8001c2a:	4699      	mov	r9, r3
 8001c2c:	444a      	add	r2, r9
 8001c2e:	0400      	lsls	r0, r0, #16
 8001c30:	0c0b      	lsrs	r3, r1, #16
 8001c32:	0c00      	lsrs	r0, r0, #16
 8001c34:	0409      	lsls	r1, r1, #16
 8001c36:	1809      	adds	r1, r1, r0
 8001c38:	0020      	movs	r0, r4
 8001c3a:	4699      	mov	r9, r3
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	4370      	muls	r0, r6
 8001c40:	435c      	muls	r4, r3
 8001c42:	437e      	muls	r6, r7
 8001c44:	435f      	muls	r7, r3
 8001c46:	0c03      	lsrs	r3, r0, #16
 8001c48:	4698      	mov	r8, r3
 8001c4a:	19a4      	adds	r4, r4, r6
 8001c4c:	4444      	add	r4, r8
 8001c4e:	444a      	add	r2, r9
 8001c50:	9703      	str	r7, [sp, #12]
 8001c52:	42a6      	cmp	r6, r4
 8001c54:	d904      	bls.n	8001c60 <__aeabi_dmul+0x1d4>
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	025b      	lsls	r3, r3, #9
 8001c5a:	4698      	mov	r8, r3
 8001c5c:	4447      	add	r7, r8
 8001c5e:	9703      	str	r7, [sp, #12]
 8001c60:	0423      	lsls	r3, r4, #16
 8001c62:	9e02      	ldr	r6, [sp, #8]
 8001c64:	469a      	mov	sl, r3
 8001c66:	9b05      	ldr	r3, [sp, #20]
 8001c68:	445e      	add	r6, fp
 8001c6a:	4698      	mov	r8, r3
 8001c6c:	42ae      	cmp	r6, r5
 8001c6e:	41ad      	sbcs	r5, r5
 8001c70:	1876      	adds	r6, r6, r1
 8001c72:	428e      	cmp	r6, r1
 8001c74:	4189      	sbcs	r1, r1
 8001c76:	0400      	lsls	r0, r0, #16
 8001c78:	0c00      	lsrs	r0, r0, #16
 8001c7a:	4450      	add	r0, sl
 8001c7c:	4440      	add	r0, r8
 8001c7e:	426d      	negs	r5, r5
 8001c80:	1947      	adds	r7, r0, r5
 8001c82:	46b8      	mov	r8, r7
 8001c84:	4693      	mov	fp, r2
 8001c86:	4249      	negs	r1, r1
 8001c88:	4689      	mov	r9, r1
 8001c8a:	44c3      	add	fp, r8
 8001c8c:	44d9      	add	r9, fp
 8001c8e:	4298      	cmp	r0, r3
 8001c90:	4180      	sbcs	r0, r0
 8001c92:	45a8      	cmp	r8, r5
 8001c94:	41ad      	sbcs	r5, r5
 8001c96:	4593      	cmp	fp, r2
 8001c98:	4192      	sbcs	r2, r2
 8001c9a:	4589      	cmp	r9, r1
 8001c9c:	4189      	sbcs	r1, r1
 8001c9e:	426d      	negs	r5, r5
 8001ca0:	4240      	negs	r0, r0
 8001ca2:	4328      	orrs	r0, r5
 8001ca4:	0c24      	lsrs	r4, r4, #16
 8001ca6:	4252      	negs	r2, r2
 8001ca8:	4249      	negs	r1, r1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	9b03      	ldr	r3, [sp, #12]
 8001cae:	1900      	adds	r0, r0, r4
 8001cb0:	1880      	adds	r0, r0, r2
 8001cb2:	18c7      	adds	r7, r0, r3
 8001cb4:	464b      	mov	r3, r9
 8001cb6:	0ddc      	lsrs	r4, r3, #23
 8001cb8:	9b04      	ldr	r3, [sp, #16]
 8001cba:	0275      	lsls	r5, r6, #9
 8001cbc:	431d      	orrs	r5, r3
 8001cbe:	1e6a      	subs	r2, r5, #1
 8001cc0:	4195      	sbcs	r5, r2
 8001cc2:	464b      	mov	r3, r9
 8001cc4:	0df6      	lsrs	r6, r6, #23
 8001cc6:	027f      	lsls	r7, r7, #9
 8001cc8:	4335      	orrs	r5, r6
 8001cca:	025a      	lsls	r2, r3, #9
 8001ccc:	433c      	orrs	r4, r7
 8001cce:	4315      	orrs	r5, r2
 8001cd0:	01fb      	lsls	r3, r7, #7
 8001cd2:	d400      	bmi.n	8001cd6 <__aeabi_dmul+0x24a>
 8001cd4:	e11c      	b.n	8001f10 <__aeabi_dmul+0x484>
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	086a      	lsrs	r2, r5, #1
 8001cda:	400d      	ands	r5, r1
 8001cdc:	4315      	orrs	r5, r2
 8001cde:	07e2      	lsls	r2, r4, #31
 8001ce0:	4315      	orrs	r5, r2
 8001ce2:	0864      	lsrs	r4, r4, #1
 8001ce4:	494f      	ldr	r1, [pc, #316]	; (8001e24 <__aeabi_dmul+0x398>)
 8001ce6:	4461      	add	r1, ip
 8001ce8:	2900      	cmp	r1, #0
 8001cea:	dc00      	bgt.n	8001cee <__aeabi_dmul+0x262>
 8001cec:	e0b0      	b.n	8001e50 <__aeabi_dmul+0x3c4>
 8001cee:	076b      	lsls	r3, r5, #29
 8001cf0:	d009      	beq.n	8001d06 <__aeabi_dmul+0x27a>
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	402a      	ands	r2, r5
 8001cf6:	2a04      	cmp	r2, #4
 8001cf8:	d005      	beq.n	8001d06 <__aeabi_dmul+0x27a>
 8001cfa:	1d2a      	adds	r2, r5, #4
 8001cfc:	42aa      	cmp	r2, r5
 8001cfe:	41ad      	sbcs	r5, r5
 8001d00:	426d      	negs	r5, r5
 8001d02:	1964      	adds	r4, r4, r5
 8001d04:	0015      	movs	r5, r2
 8001d06:	01e3      	lsls	r3, r4, #7
 8001d08:	d504      	bpl.n	8001d14 <__aeabi_dmul+0x288>
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	4a46      	ldr	r2, [pc, #280]	; (8001e28 <__aeabi_dmul+0x39c>)
 8001d0e:	00c9      	lsls	r1, r1, #3
 8001d10:	4014      	ands	r4, r2
 8001d12:	4461      	add	r1, ip
 8001d14:	4a45      	ldr	r2, [pc, #276]	; (8001e2c <__aeabi_dmul+0x3a0>)
 8001d16:	4291      	cmp	r1, r2
 8001d18:	dd00      	ble.n	8001d1c <__aeabi_dmul+0x290>
 8001d1a:	e726      	b.n	8001b6a <__aeabi_dmul+0xde>
 8001d1c:	0762      	lsls	r2, r4, #29
 8001d1e:	08ed      	lsrs	r5, r5, #3
 8001d20:	0264      	lsls	r4, r4, #9
 8001d22:	0549      	lsls	r1, r1, #21
 8001d24:	4315      	orrs	r5, r2
 8001d26:	0b24      	lsrs	r4, r4, #12
 8001d28:	0d4a      	lsrs	r2, r1, #21
 8001d2a:	e710      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001d2c:	4652      	mov	r2, sl
 8001d2e:	4332      	orrs	r2, r6
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dmul+0x2a8>
 8001d32:	e07f      	b.n	8001e34 <__aeabi_dmul+0x3a8>
 8001d34:	2e00      	cmp	r6, #0
 8001d36:	d100      	bne.n	8001d3a <__aeabi_dmul+0x2ae>
 8001d38:	e0dc      	b.n	8001ef4 <__aeabi_dmul+0x468>
 8001d3a:	0030      	movs	r0, r6
 8001d3c:	f000 fe1e 	bl	800297c <__clzsi2>
 8001d40:	0002      	movs	r2, r0
 8001d42:	3a0b      	subs	r2, #11
 8001d44:	231d      	movs	r3, #29
 8001d46:	0001      	movs	r1, r0
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	4652      	mov	r2, sl
 8001d4c:	3908      	subs	r1, #8
 8001d4e:	40da      	lsrs	r2, r3
 8001d50:	408e      	lsls	r6, r1
 8001d52:	4316      	orrs	r6, r2
 8001d54:	4652      	mov	r2, sl
 8001d56:	408a      	lsls	r2, r1
 8001d58:	9b00      	ldr	r3, [sp, #0]
 8001d5a:	4935      	ldr	r1, [pc, #212]	; (8001e30 <__aeabi_dmul+0x3a4>)
 8001d5c:	1a18      	subs	r0, r3, r0
 8001d5e:	0003      	movs	r3, r0
 8001d60:	468c      	mov	ip, r1
 8001d62:	4463      	add	r3, ip
 8001d64:	2000      	movs	r0, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	e6d3      	b.n	8001b12 <__aeabi_dmul+0x86>
 8001d6a:	0025      	movs	r5, r4
 8001d6c:	4305      	orrs	r5, r0
 8001d6e:	d04a      	beq.n	8001e06 <__aeabi_dmul+0x37a>
 8001d70:	2c00      	cmp	r4, #0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dmul+0x2ea>
 8001d74:	e0b0      	b.n	8001ed8 <__aeabi_dmul+0x44c>
 8001d76:	0020      	movs	r0, r4
 8001d78:	f000 fe00 	bl	800297c <__clzsi2>
 8001d7c:	0001      	movs	r1, r0
 8001d7e:	0002      	movs	r2, r0
 8001d80:	390b      	subs	r1, #11
 8001d82:	231d      	movs	r3, #29
 8001d84:	0010      	movs	r0, r2
 8001d86:	1a5b      	subs	r3, r3, r1
 8001d88:	0031      	movs	r1, r6
 8001d8a:	0035      	movs	r5, r6
 8001d8c:	3808      	subs	r0, #8
 8001d8e:	4084      	lsls	r4, r0
 8001d90:	40d9      	lsrs	r1, r3
 8001d92:	4085      	lsls	r5, r0
 8001d94:	430c      	orrs	r4, r1
 8001d96:	4826      	ldr	r0, [pc, #152]	; (8001e30 <__aeabi_dmul+0x3a4>)
 8001d98:	1a83      	subs	r3, r0, r2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	4699      	mov	r9, r3
 8001da0:	469b      	mov	fp, r3
 8001da2:	e697      	b.n	8001ad4 <__aeabi_dmul+0x48>
 8001da4:	0005      	movs	r5, r0
 8001da6:	4325      	orrs	r5, r4
 8001da8:	d126      	bne.n	8001df8 <__aeabi_dmul+0x36c>
 8001daa:	2208      	movs	r2, #8
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2302      	movs	r3, #2
 8001db0:	2400      	movs	r4, #0
 8001db2:	4691      	mov	r9, r2
 8001db4:	469b      	mov	fp, r3
 8001db6:	e68d      	b.n	8001ad4 <__aeabi_dmul+0x48>
 8001db8:	4652      	mov	r2, sl
 8001dba:	9b00      	ldr	r3, [sp, #0]
 8001dbc:	4332      	orrs	r2, r6
 8001dbe:	d110      	bne.n	8001de2 <__aeabi_dmul+0x356>
 8001dc0:	4915      	ldr	r1, [pc, #84]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	468c      	mov	ip, r1
 8001dc6:	4463      	add	r3, ip
 8001dc8:	4649      	mov	r1, r9
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2302      	movs	r3, #2
 8001dce:	4319      	orrs	r1, r3
 8001dd0:	4689      	mov	r9, r1
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	e69d      	b.n	8001b12 <__aeabi_dmul+0x86>
 8001dd6:	465b      	mov	r3, fp
 8001dd8:	9701      	str	r7, [sp, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dmul+0x354>
 8001dde:	e6ad      	b.n	8001b3c <__aeabi_dmul+0xb0>
 8001de0:	e6c3      	b.n	8001b6a <__aeabi_dmul+0xde>
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001de4:	2003      	movs	r0, #3
 8001de6:	4694      	mov	ip, r2
 8001de8:	4463      	add	r3, ip
 8001dea:	464a      	mov	r2, r9
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2303      	movs	r3, #3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	4691      	mov	r9, r2
 8001df4:	4652      	mov	r2, sl
 8001df6:	e68c      	b.n	8001b12 <__aeabi_dmul+0x86>
 8001df8:	220c      	movs	r2, #12
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	0005      	movs	r5, r0
 8001e00:	4691      	mov	r9, r2
 8001e02:	469b      	mov	fp, r3
 8001e04:	e666      	b.n	8001ad4 <__aeabi_dmul+0x48>
 8001e06:	2304      	movs	r3, #4
 8001e08:	4699      	mov	r9, r3
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	2400      	movs	r4, #0
 8001e12:	469b      	mov	fp, r3
 8001e14:	e65e      	b.n	8001ad4 <__aeabi_dmul+0x48>
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	000007ff 	.word	0x000007ff
 8001e1c:	fffffc01 	.word	0xfffffc01
 8001e20:	08010044 	.word	0x08010044
 8001e24:	000003ff 	.word	0x000003ff
 8001e28:	feffffff 	.word	0xfeffffff
 8001e2c:	000007fe 	.word	0x000007fe
 8001e30:	fffffc0d 	.word	0xfffffc0d
 8001e34:	4649      	mov	r1, r9
 8001e36:	2301      	movs	r3, #1
 8001e38:	4319      	orrs	r1, r3
 8001e3a:	4689      	mov	r9, r1
 8001e3c:	2600      	movs	r6, #0
 8001e3e:	2001      	movs	r0, #1
 8001e40:	e667      	b.n	8001b12 <__aeabi_dmul+0x86>
 8001e42:	2300      	movs	r3, #0
 8001e44:	2480      	movs	r4, #128	; 0x80
 8001e46:	2500      	movs	r5, #0
 8001e48:	4a43      	ldr	r2, [pc, #268]	; (8001f58 <__aeabi_dmul+0x4cc>)
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	0324      	lsls	r4, r4, #12
 8001e4e:	e67e      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001e50:	2001      	movs	r0, #1
 8001e52:	1a40      	subs	r0, r0, r1
 8001e54:	2838      	cmp	r0, #56	; 0x38
 8001e56:	dd00      	ble.n	8001e5a <__aeabi_dmul+0x3ce>
 8001e58:	e676      	b.n	8001b48 <__aeabi_dmul+0xbc>
 8001e5a:	281f      	cmp	r0, #31
 8001e5c:	dd5b      	ble.n	8001f16 <__aeabi_dmul+0x48a>
 8001e5e:	221f      	movs	r2, #31
 8001e60:	0023      	movs	r3, r4
 8001e62:	4252      	negs	r2, r2
 8001e64:	1a51      	subs	r1, r2, r1
 8001e66:	40cb      	lsrs	r3, r1
 8001e68:	0019      	movs	r1, r3
 8001e6a:	2820      	cmp	r0, #32
 8001e6c:	d003      	beq.n	8001e76 <__aeabi_dmul+0x3ea>
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <__aeabi_dmul+0x4d0>)
 8001e70:	4462      	add	r2, ip
 8001e72:	4094      	lsls	r4, r2
 8001e74:	4325      	orrs	r5, r4
 8001e76:	1e6a      	subs	r2, r5, #1
 8001e78:	4195      	sbcs	r5, r2
 8001e7a:	002a      	movs	r2, r5
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	2107      	movs	r1, #7
 8001e80:	000d      	movs	r5, r1
 8001e82:	2400      	movs	r4, #0
 8001e84:	4015      	ands	r5, r2
 8001e86:	4211      	tst	r1, r2
 8001e88:	d05b      	beq.n	8001f42 <__aeabi_dmul+0x4b6>
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	2400      	movs	r4, #0
 8001e8e:	4011      	ands	r1, r2
 8001e90:	2904      	cmp	r1, #4
 8001e92:	d053      	beq.n	8001f3c <__aeabi_dmul+0x4b0>
 8001e94:	1d11      	adds	r1, r2, #4
 8001e96:	4291      	cmp	r1, r2
 8001e98:	4192      	sbcs	r2, r2
 8001e9a:	4252      	negs	r2, r2
 8001e9c:	18a4      	adds	r4, r4, r2
 8001e9e:	000a      	movs	r2, r1
 8001ea0:	0223      	lsls	r3, r4, #8
 8001ea2:	d54b      	bpl.n	8001f3c <__aeabi_dmul+0x4b0>
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	2500      	movs	r5, #0
 8001eaa:	e650      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	031b      	lsls	r3, r3, #12
 8001eb0:	421c      	tst	r4, r3
 8001eb2:	d009      	beq.n	8001ec8 <__aeabi_dmul+0x43c>
 8001eb4:	421e      	tst	r6, r3
 8001eb6:	d107      	bne.n	8001ec8 <__aeabi_dmul+0x43c>
 8001eb8:	4333      	orrs	r3, r6
 8001eba:	031c      	lsls	r4, r3, #12
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	0015      	movs	r5, r2
 8001ec0:	0b24      	lsrs	r4, r4, #12
 8001ec2:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <__aeabi_dmul+0x4cc>)
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	e642      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	0312      	lsls	r2, r2, #12
 8001ecc:	4314      	orrs	r4, r2
 8001ece:	0324      	lsls	r4, r4, #12
 8001ed0:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <__aeabi_dmul+0x4cc>)
 8001ed2:	0b24      	lsrs	r4, r4, #12
 8001ed4:	9701      	str	r7, [sp, #4]
 8001ed6:	e63a      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001ed8:	f000 fd50 	bl	800297c <__clzsi2>
 8001edc:	0001      	movs	r1, r0
 8001ede:	0002      	movs	r2, r0
 8001ee0:	3115      	adds	r1, #21
 8001ee2:	3220      	adds	r2, #32
 8001ee4:	291c      	cmp	r1, #28
 8001ee6:	dc00      	bgt.n	8001eea <__aeabi_dmul+0x45e>
 8001ee8:	e74b      	b.n	8001d82 <__aeabi_dmul+0x2f6>
 8001eea:	0034      	movs	r4, r6
 8001eec:	3808      	subs	r0, #8
 8001eee:	2500      	movs	r5, #0
 8001ef0:	4084      	lsls	r4, r0
 8001ef2:	e750      	b.n	8001d96 <__aeabi_dmul+0x30a>
 8001ef4:	f000 fd42 	bl	800297c <__clzsi2>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	001a      	movs	r2, r3
 8001efc:	3215      	adds	r2, #21
 8001efe:	3020      	adds	r0, #32
 8001f00:	2a1c      	cmp	r2, #28
 8001f02:	dc00      	bgt.n	8001f06 <__aeabi_dmul+0x47a>
 8001f04:	e71e      	b.n	8001d44 <__aeabi_dmul+0x2b8>
 8001f06:	4656      	mov	r6, sl
 8001f08:	3b08      	subs	r3, #8
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	409e      	lsls	r6, r3
 8001f0e:	e723      	b.n	8001d58 <__aeabi_dmul+0x2cc>
 8001f10:	9b00      	ldr	r3, [sp, #0]
 8001f12:	469c      	mov	ip, r3
 8001f14:	e6e6      	b.n	8001ce4 <__aeabi_dmul+0x258>
 8001f16:	4912      	ldr	r1, [pc, #72]	; (8001f60 <__aeabi_dmul+0x4d4>)
 8001f18:	0022      	movs	r2, r4
 8001f1a:	4461      	add	r1, ip
 8001f1c:	002e      	movs	r6, r5
 8001f1e:	408d      	lsls	r5, r1
 8001f20:	408a      	lsls	r2, r1
 8001f22:	40c6      	lsrs	r6, r0
 8001f24:	1e69      	subs	r1, r5, #1
 8001f26:	418d      	sbcs	r5, r1
 8001f28:	4332      	orrs	r2, r6
 8001f2a:	432a      	orrs	r2, r5
 8001f2c:	40c4      	lsrs	r4, r0
 8001f2e:	0753      	lsls	r3, r2, #29
 8001f30:	d0b6      	beq.n	8001ea0 <__aeabi_dmul+0x414>
 8001f32:	210f      	movs	r1, #15
 8001f34:	4011      	ands	r1, r2
 8001f36:	2904      	cmp	r1, #4
 8001f38:	d1ac      	bne.n	8001e94 <__aeabi_dmul+0x408>
 8001f3a:	e7b1      	b.n	8001ea0 <__aeabi_dmul+0x414>
 8001f3c:	0765      	lsls	r5, r4, #29
 8001f3e:	0264      	lsls	r4, r4, #9
 8001f40:	0b24      	lsrs	r4, r4, #12
 8001f42:	08d2      	lsrs	r2, r2, #3
 8001f44:	4315      	orrs	r5, r2
 8001f46:	2200      	movs	r2, #0
 8001f48:	e601      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	0312      	lsls	r2, r2, #12
 8001f4e:	4314      	orrs	r4, r2
 8001f50:	0324      	lsls	r4, r4, #12
 8001f52:	4a01      	ldr	r2, [pc, #4]	; (8001f58 <__aeabi_dmul+0x4cc>)
 8001f54:	0b24      	lsrs	r4, r4, #12
 8001f56:	e5fa      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	0000043e 	.word	0x0000043e
 8001f60:	0000041e 	.word	0x0000041e

08001f64 <__aeabi_dsub>:
 8001f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f66:	4657      	mov	r7, sl
 8001f68:	464e      	mov	r6, r9
 8001f6a:	4645      	mov	r5, r8
 8001f6c:	46de      	mov	lr, fp
 8001f6e:	b5e0      	push	{r5, r6, r7, lr}
 8001f70:	001e      	movs	r6, r3
 8001f72:	0017      	movs	r7, r2
 8001f74:	004a      	lsls	r2, r1, #1
 8001f76:	030b      	lsls	r3, r1, #12
 8001f78:	0d52      	lsrs	r2, r2, #21
 8001f7a:	0a5b      	lsrs	r3, r3, #9
 8001f7c:	4690      	mov	r8, r2
 8001f7e:	0f42      	lsrs	r2, r0, #29
 8001f80:	431a      	orrs	r2, r3
 8001f82:	0fcd      	lsrs	r5, r1, #31
 8001f84:	4ccd      	ldr	r4, [pc, #820]	; (80022bc <__aeabi_dsub+0x358>)
 8001f86:	0331      	lsls	r1, r6, #12
 8001f88:	00c3      	lsls	r3, r0, #3
 8001f8a:	4694      	mov	ip, r2
 8001f8c:	0070      	lsls	r0, r6, #1
 8001f8e:	0f7a      	lsrs	r2, r7, #29
 8001f90:	0a49      	lsrs	r1, r1, #9
 8001f92:	00ff      	lsls	r7, r7, #3
 8001f94:	469a      	mov	sl, r3
 8001f96:	46b9      	mov	r9, r7
 8001f98:	0d40      	lsrs	r0, r0, #21
 8001f9a:	0ff6      	lsrs	r6, r6, #31
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x40>
 8001fa2:	e0b1      	b.n	8002108 <__aeabi_dsub+0x1a4>
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4056      	eors	r6, r2
 8001fa8:	46b3      	mov	fp, r6
 8001faa:	42b5      	cmp	r5, r6
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x4c>
 8001fae:	e088      	b.n	80020c2 <__aeabi_dsub+0x15e>
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	1a12      	subs	r2, r2, r0
 8001fb4:	2a00      	cmp	r2, #0
 8001fb6:	dc00      	bgt.n	8001fba <__aeabi_dsub+0x56>
 8001fb8:	e0ae      	b.n	8002118 <__aeabi_dsub+0x1b4>
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x5c>
 8001fbe:	e0c1      	b.n	8002144 <__aeabi_dsub+0x1e0>
 8001fc0:	48be      	ldr	r0, [pc, #760]	; (80022bc <__aeabi_dsub+0x358>)
 8001fc2:	4580      	cmp	r8, r0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x64>
 8001fc6:	e151      	b.n	800226c <__aeabi_dsub+0x308>
 8001fc8:	2080      	movs	r0, #128	; 0x80
 8001fca:	0400      	lsls	r0, r0, #16
 8001fcc:	4301      	orrs	r1, r0
 8001fce:	2a38      	cmp	r2, #56	; 0x38
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dsub+0x70>
 8001fd2:	e17b      	b.n	80022cc <__aeabi_dsub+0x368>
 8001fd4:	2a1f      	cmp	r2, #31
 8001fd6:	dd00      	ble.n	8001fda <__aeabi_dsub+0x76>
 8001fd8:	e1ee      	b.n	80023b8 <__aeabi_dsub+0x454>
 8001fda:	2020      	movs	r0, #32
 8001fdc:	003e      	movs	r6, r7
 8001fde:	1a80      	subs	r0, r0, r2
 8001fe0:	000c      	movs	r4, r1
 8001fe2:	40d6      	lsrs	r6, r2
 8001fe4:	40d1      	lsrs	r1, r2
 8001fe6:	4087      	lsls	r7, r0
 8001fe8:	4662      	mov	r2, ip
 8001fea:	4084      	lsls	r4, r0
 8001fec:	1a52      	subs	r2, r2, r1
 8001fee:	1e78      	subs	r0, r7, #1
 8001ff0:	4187      	sbcs	r7, r0
 8001ff2:	4694      	mov	ip, r2
 8001ff4:	4334      	orrs	r4, r6
 8001ff6:	4327      	orrs	r7, r4
 8001ff8:	1bdc      	subs	r4, r3, r7
 8001ffa:	42a3      	cmp	r3, r4
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	4662      	mov	r2, ip
 8002000:	425b      	negs	r3, r3
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4699      	mov	r9, r3
 8002006:	464b      	mov	r3, r9
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	d400      	bmi.n	800200e <__aeabi_dsub+0xaa>
 800200c:	e118      	b.n	8002240 <__aeabi_dsub+0x2dc>
 800200e:	464b      	mov	r3, r9
 8002010:	0258      	lsls	r0, r3, #9
 8002012:	0a43      	lsrs	r3, r0, #9
 8002014:	4699      	mov	r9, r3
 8002016:	464b      	mov	r3, r9
 8002018:	2b00      	cmp	r3, #0
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0xba>
 800201c:	e137      	b.n	800228e <__aeabi_dsub+0x32a>
 800201e:	4648      	mov	r0, r9
 8002020:	f000 fcac 	bl	800297c <__clzsi2>
 8002024:	0001      	movs	r1, r0
 8002026:	3908      	subs	r1, #8
 8002028:	2320      	movs	r3, #32
 800202a:	0022      	movs	r2, r4
 800202c:	4648      	mov	r0, r9
 800202e:	1a5b      	subs	r3, r3, r1
 8002030:	40da      	lsrs	r2, r3
 8002032:	4088      	lsls	r0, r1
 8002034:	408c      	lsls	r4, r1
 8002036:	4643      	mov	r3, r8
 8002038:	4310      	orrs	r0, r2
 800203a:	4588      	cmp	r8, r1
 800203c:	dd00      	ble.n	8002040 <__aeabi_dsub+0xdc>
 800203e:	e136      	b.n	80022ae <__aeabi_dsub+0x34a>
 8002040:	1ac9      	subs	r1, r1, r3
 8002042:	1c4b      	adds	r3, r1, #1
 8002044:	2b1f      	cmp	r3, #31
 8002046:	dd00      	ble.n	800204a <__aeabi_dsub+0xe6>
 8002048:	e0ea      	b.n	8002220 <__aeabi_dsub+0x2bc>
 800204a:	2220      	movs	r2, #32
 800204c:	0026      	movs	r6, r4
 800204e:	1ad2      	subs	r2, r2, r3
 8002050:	0001      	movs	r1, r0
 8002052:	4094      	lsls	r4, r2
 8002054:	40de      	lsrs	r6, r3
 8002056:	40d8      	lsrs	r0, r3
 8002058:	2300      	movs	r3, #0
 800205a:	4091      	lsls	r1, r2
 800205c:	1e62      	subs	r2, r4, #1
 800205e:	4194      	sbcs	r4, r2
 8002060:	4681      	mov	r9, r0
 8002062:	4698      	mov	r8, r3
 8002064:	4331      	orrs	r1, r6
 8002066:	430c      	orrs	r4, r1
 8002068:	0763      	lsls	r3, r4, #29
 800206a:	d009      	beq.n	8002080 <__aeabi_dsub+0x11c>
 800206c:	230f      	movs	r3, #15
 800206e:	4023      	ands	r3, r4
 8002070:	2b04      	cmp	r3, #4
 8002072:	d005      	beq.n	8002080 <__aeabi_dsub+0x11c>
 8002074:	1d23      	adds	r3, r4, #4
 8002076:	42a3      	cmp	r3, r4
 8002078:	41a4      	sbcs	r4, r4
 800207a:	4264      	negs	r4, r4
 800207c:	44a1      	add	r9, r4
 800207e:	001c      	movs	r4, r3
 8002080:	464b      	mov	r3, r9
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	d400      	bmi.n	8002088 <__aeabi_dsub+0x124>
 8002086:	e0de      	b.n	8002246 <__aeabi_dsub+0x2e2>
 8002088:	4641      	mov	r1, r8
 800208a:	4b8c      	ldr	r3, [pc, #560]	; (80022bc <__aeabi_dsub+0x358>)
 800208c:	3101      	adds	r1, #1
 800208e:	4299      	cmp	r1, r3
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x130>
 8002092:	e0e7      	b.n	8002264 <__aeabi_dsub+0x300>
 8002094:	464b      	mov	r3, r9
 8002096:	488a      	ldr	r0, [pc, #552]	; (80022c0 <__aeabi_dsub+0x35c>)
 8002098:	08e4      	lsrs	r4, r4, #3
 800209a:	4003      	ands	r3, r0
 800209c:	0018      	movs	r0, r3
 800209e:	0549      	lsls	r1, r1, #21
 80020a0:	075b      	lsls	r3, r3, #29
 80020a2:	0240      	lsls	r0, r0, #9
 80020a4:	4323      	orrs	r3, r4
 80020a6:	0d4a      	lsrs	r2, r1, #21
 80020a8:	0b04      	lsrs	r4, r0, #12
 80020aa:	0512      	lsls	r2, r2, #20
 80020ac:	07ed      	lsls	r5, r5, #31
 80020ae:	4322      	orrs	r2, r4
 80020b0:	432a      	orrs	r2, r5
 80020b2:	0018      	movs	r0, r3
 80020b4:	0011      	movs	r1, r2
 80020b6:	bcf0      	pop	{r4, r5, r6, r7}
 80020b8:	46bb      	mov	fp, r7
 80020ba:	46b2      	mov	sl, r6
 80020bc:	46a9      	mov	r9, r5
 80020be:	46a0      	mov	r8, r4
 80020c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020c2:	4642      	mov	r2, r8
 80020c4:	1a12      	subs	r2, r2, r0
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	dd52      	ble.n	8002170 <__aeabi_dsub+0x20c>
 80020ca:	2800      	cmp	r0, #0
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x16c>
 80020ce:	e09c      	b.n	800220a <__aeabi_dsub+0x2a6>
 80020d0:	45a0      	cmp	r8, r4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dsub+0x172>
 80020d4:	e0ca      	b.n	800226c <__aeabi_dsub+0x308>
 80020d6:	2080      	movs	r0, #128	; 0x80
 80020d8:	0400      	lsls	r0, r0, #16
 80020da:	4301      	orrs	r1, r0
 80020dc:	2a38      	cmp	r2, #56	; 0x38
 80020de:	dd00      	ble.n	80020e2 <__aeabi_dsub+0x17e>
 80020e0:	e149      	b.n	8002376 <__aeabi_dsub+0x412>
 80020e2:	2a1f      	cmp	r2, #31
 80020e4:	dc00      	bgt.n	80020e8 <__aeabi_dsub+0x184>
 80020e6:	e197      	b.n	8002418 <__aeabi_dsub+0x4b4>
 80020e8:	0010      	movs	r0, r2
 80020ea:	000e      	movs	r6, r1
 80020ec:	3820      	subs	r0, #32
 80020ee:	40c6      	lsrs	r6, r0
 80020f0:	2a20      	cmp	r2, #32
 80020f2:	d004      	beq.n	80020fe <__aeabi_dsub+0x19a>
 80020f4:	2040      	movs	r0, #64	; 0x40
 80020f6:	1a82      	subs	r2, r0, r2
 80020f8:	4091      	lsls	r1, r2
 80020fa:	430f      	orrs	r7, r1
 80020fc:	46b9      	mov	r9, r7
 80020fe:	464c      	mov	r4, r9
 8002100:	1e62      	subs	r2, r4, #1
 8002102:	4194      	sbcs	r4, r2
 8002104:	4334      	orrs	r4, r6
 8002106:	e13a      	b.n	800237e <__aeabi_dsub+0x41a>
 8002108:	000a      	movs	r2, r1
 800210a:	433a      	orrs	r2, r7
 800210c:	d028      	beq.n	8002160 <__aeabi_dsub+0x1fc>
 800210e:	46b3      	mov	fp, r6
 8002110:	42b5      	cmp	r5, r6
 8002112:	d02b      	beq.n	800216c <__aeabi_dsub+0x208>
 8002114:	4a6b      	ldr	r2, [pc, #428]	; (80022c4 <__aeabi_dsub+0x360>)
 8002116:	4442      	add	r2, r8
 8002118:	2a00      	cmp	r2, #0
 800211a:	d05d      	beq.n	80021d8 <__aeabi_dsub+0x274>
 800211c:	4642      	mov	r2, r8
 800211e:	4644      	mov	r4, r8
 8002120:	1a82      	subs	r2, r0, r2
 8002122:	2c00      	cmp	r4, #0
 8002124:	d000      	beq.n	8002128 <__aeabi_dsub+0x1c4>
 8002126:	e0f5      	b.n	8002314 <__aeabi_dsub+0x3b0>
 8002128:	4665      	mov	r5, ip
 800212a:	431d      	orrs	r5, r3
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x1cc>
 800212e:	e19c      	b.n	800246a <__aeabi_dsub+0x506>
 8002130:	1e55      	subs	r5, r2, #1
 8002132:	2a01      	cmp	r2, #1
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x1d4>
 8002136:	e1fb      	b.n	8002530 <__aeabi_dsub+0x5cc>
 8002138:	4c60      	ldr	r4, [pc, #384]	; (80022bc <__aeabi_dsub+0x358>)
 800213a:	42a2      	cmp	r2, r4
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x1dc>
 800213e:	e1bd      	b.n	80024bc <__aeabi_dsub+0x558>
 8002140:	002a      	movs	r2, r5
 8002142:	e0f0      	b.n	8002326 <__aeabi_dsub+0x3c2>
 8002144:	0008      	movs	r0, r1
 8002146:	4338      	orrs	r0, r7
 8002148:	d100      	bne.n	800214c <__aeabi_dsub+0x1e8>
 800214a:	e0c3      	b.n	80022d4 <__aeabi_dsub+0x370>
 800214c:	1e50      	subs	r0, r2, #1
 800214e:	2a01      	cmp	r2, #1
 8002150:	d100      	bne.n	8002154 <__aeabi_dsub+0x1f0>
 8002152:	e1a8      	b.n	80024a6 <__aeabi_dsub+0x542>
 8002154:	4c59      	ldr	r4, [pc, #356]	; (80022bc <__aeabi_dsub+0x358>)
 8002156:	42a2      	cmp	r2, r4
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x1f8>
 800215a:	e087      	b.n	800226c <__aeabi_dsub+0x308>
 800215c:	0002      	movs	r2, r0
 800215e:	e736      	b.n	8001fce <__aeabi_dsub+0x6a>
 8002160:	2201      	movs	r2, #1
 8002162:	4056      	eors	r6, r2
 8002164:	46b3      	mov	fp, r6
 8002166:	42b5      	cmp	r5, r6
 8002168:	d000      	beq.n	800216c <__aeabi_dsub+0x208>
 800216a:	e721      	b.n	8001fb0 <__aeabi_dsub+0x4c>
 800216c:	4a55      	ldr	r2, [pc, #340]	; (80022c4 <__aeabi_dsub+0x360>)
 800216e:	4442      	add	r2, r8
 8002170:	2a00      	cmp	r2, #0
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x212>
 8002174:	e0b5      	b.n	80022e2 <__aeabi_dsub+0x37e>
 8002176:	4642      	mov	r2, r8
 8002178:	4644      	mov	r4, r8
 800217a:	1a82      	subs	r2, r0, r2
 800217c:	2c00      	cmp	r4, #0
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0x21e>
 8002180:	e138      	b.n	80023f4 <__aeabi_dsub+0x490>
 8002182:	4e4e      	ldr	r6, [pc, #312]	; (80022bc <__aeabi_dsub+0x358>)
 8002184:	42b0      	cmp	r0, r6
 8002186:	d100      	bne.n	800218a <__aeabi_dsub+0x226>
 8002188:	e1de      	b.n	8002548 <__aeabi_dsub+0x5e4>
 800218a:	2680      	movs	r6, #128	; 0x80
 800218c:	4664      	mov	r4, ip
 800218e:	0436      	lsls	r6, r6, #16
 8002190:	4334      	orrs	r4, r6
 8002192:	46a4      	mov	ip, r4
 8002194:	2a38      	cmp	r2, #56	; 0x38
 8002196:	dd00      	ble.n	800219a <__aeabi_dsub+0x236>
 8002198:	e196      	b.n	80024c8 <__aeabi_dsub+0x564>
 800219a:	2a1f      	cmp	r2, #31
 800219c:	dd00      	ble.n	80021a0 <__aeabi_dsub+0x23c>
 800219e:	e224      	b.n	80025ea <__aeabi_dsub+0x686>
 80021a0:	2620      	movs	r6, #32
 80021a2:	1ab4      	subs	r4, r6, r2
 80021a4:	46a2      	mov	sl, r4
 80021a6:	4664      	mov	r4, ip
 80021a8:	4656      	mov	r6, sl
 80021aa:	40b4      	lsls	r4, r6
 80021ac:	46a1      	mov	r9, r4
 80021ae:	001c      	movs	r4, r3
 80021b0:	464e      	mov	r6, r9
 80021b2:	40d4      	lsrs	r4, r2
 80021b4:	4326      	orrs	r6, r4
 80021b6:	0034      	movs	r4, r6
 80021b8:	4656      	mov	r6, sl
 80021ba:	40b3      	lsls	r3, r6
 80021bc:	1e5e      	subs	r6, r3, #1
 80021be:	41b3      	sbcs	r3, r6
 80021c0:	431c      	orrs	r4, r3
 80021c2:	4663      	mov	r3, ip
 80021c4:	40d3      	lsrs	r3, r2
 80021c6:	18c9      	adds	r1, r1, r3
 80021c8:	19e4      	adds	r4, r4, r7
 80021ca:	42bc      	cmp	r4, r7
 80021cc:	41bf      	sbcs	r7, r7
 80021ce:	427f      	negs	r7, r7
 80021d0:	46b9      	mov	r9, r7
 80021d2:	4680      	mov	r8, r0
 80021d4:	4489      	add	r9, r1
 80021d6:	e0d8      	b.n	800238a <__aeabi_dsub+0x426>
 80021d8:	4640      	mov	r0, r8
 80021da:	4c3b      	ldr	r4, [pc, #236]	; (80022c8 <__aeabi_dsub+0x364>)
 80021dc:	3001      	adds	r0, #1
 80021de:	4220      	tst	r0, r4
 80021e0:	d000      	beq.n	80021e4 <__aeabi_dsub+0x280>
 80021e2:	e0b4      	b.n	800234e <__aeabi_dsub+0x3ea>
 80021e4:	4640      	mov	r0, r8
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d000      	beq.n	80021ec <__aeabi_dsub+0x288>
 80021ea:	e144      	b.n	8002476 <__aeabi_dsub+0x512>
 80021ec:	4660      	mov	r0, ip
 80021ee:	4318      	orrs	r0, r3
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x290>
 80021f2:	e190      	b.n	8002516 <__aeabi_dsub+0x5b2>
 80021f4:	0008      	movs	r0, r1
 80021f6:	4338      	orrs	r0, r7
 80021f8:	d000      	beq.n	80021fc <__aeabi_dsub+0x298>
 80021fa:	e1aa      	b.n	8002552 <__aeabi_dsub+0x5ee>
 80021fc:	4661      	mov	r1, ip
 80021fe:	08db      	lsrs	r3, r3, #3
 8002200:	0749      	lsls	r1, r1, #29
 8002202:	430b      	orrs	r3, r1
 8002204:	4661      	mov	r1, ip
 8002206:	08cc      	lsrs	r4, r1, #3
 8002208:	e027      	b.n	800225a <__aeabi_dsub+0x2f6>
 800220a:	0008      	movs	r0, r1
 800220c:	4338      	orrs	r0, r7
 800220e:	d061      	beq.n	80022d4 <__aeabi_dsub+0x370>
 8002210:	1e50      	subs	r0, r2, #1
 8002212:	2a01      	cmp	r2, #1
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x2b4>
 8002216:	e139      	b.n	800248c <__aeabi_dsub+0x528>
 8002218:	42a2      	cmp	r2, r4
 800221a:	d027      	beq.n	800226c <__aeabi_dsub+0x308>
 800221c:	0002      	movs	r2, r0
 800221e:	e75d      	b.n	80020dc <__aeabi_dsub+0x178>
 8002220:	0002      	movs	r2, r0
 8002222:	391f      	subs	r1, #31
 8002224:	40ca      	lsrs	r2, r1
 8002226:	0011      	movs	r1, r2
 8002228:	2b20      	cmp	r3, #32
 800222a:	d003      	beq.n	8002234 <__aeabi_dsub+0x2d0>
 800222c:	2240      	movs	r2, #64	; 0x40
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	4098      	lsls	r0, r3
 8002232:	4304      	orrs	r4, r0
 8002234:	1e63      	subs	r3, r4, #1
 8002236:	419c      	sbcs	r4, r3
 8002238:	2300      	movs	r3, #0
 800223a:	4699      	mov	r9, r3
 800223c:	4698      	mov	r8, r3
 800223e:	430c      	orrs	r4, r1
 8002240:	0763      	lsls	r3, r4, #29
 8002242:	d000      	beq.n	8002246 <__aeabi_dsub+0x2e2>
 8002244:	e712      	b.n	800206c <__aeabi_dsub+0x108>
 8002246:	464b      	mov	r3, r9
 8002248:	464a      	mov	r2, r9
 800224a:	08e4      	lsrs	r4, r4, #3
 800224c:	075b      	lsls	r3, r3, #29
 800224e:	4323      	orrs	r3, r4
 8002250:	08d4      	lsrs	r4, r2, #3
 8002252:	4642      	mov	r2, r8
 8002254:	4919      	ldr	r1, [pc, #100]	; (80022bc <__aeabi_dsub+0x358>)
 8002256:	428a      	cmp	r2, r1
 8002258:	d00e      	beq.n	8002278 <__aeabi_dsub+0x314>
 800225a:	0324      	lsls	r4, r4, #12
 800225c:	0552      	lsls	r2, r2, #21
 800225e:	0b24      	lsrs	r4, r4, #12
 8002260:	0d52      	lsrs	r2, r2, #21
 8002262:	e722      	b.n	80020aa <__aeabi_dsub+0x146>
 8002264:	000a      	movs	r2, r1
 8002266:	2400      	movs	r4, #0
 8002268:	2300      	movs	r3, #0
 800226a:	e71e      	b.n	80020aa <__aeabi_dsub+0x146>
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	4662      	mov	r2, ip
 8002270:	0752      	lsls	r2, r2, #29
 8002272:	4313      	orrs	r3, r2
 8002274:	4662      	mov	r2, ip
 8002276:	08d4      	lsrs	r4, r2, #3
 8002278:	001a      	movs	r2, r3
 800227a:	4322      	orrs	r2, r4
 800227c:	d100      	bne.n	8002280 <__aeabi_dsub+0x31c>
 800227e:	e1fc      	b.n	800267a <__aeabi_dsub+0x716>
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	0312      	lsls	r2, r2, #12
 8002284:	4314      	orrs	r4, r2
 8002286:	0324      	lsls	r4, r4, #12
 8002288:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <__aeabi_dsub+0x358>)
 800228a:	0b24      	lsrs	r4, r4, #12
 800228c:	e70d      	b.n	80020aa <__aeabi_dsub+0x146>
 800228e:	0020      	movs	r0, r4
 8002290:	f000 fb74 	bl	800297c <__clzsi2>
 8002294:	0001      	movs	r1, r0
 8002296:	3118      	adds	r1, #24
 8002298:	291f      	cmp	r1, #31
 800229a:	dc00      	bgt.n	800229e <__aeabi_dsub+0x33a>
 800229c:	e6c4      	b.n	8002028 <__aeabi_dsub+0xc4>
 800229e:	3808      	subs	r0, #8
 80022a0:	4084      	lsls	r4, r0
 80022a2:	4643      	mov	r3, r8
 80022a4:	0020      	movs	r0, r4
 80022a6:	2400      	movs	r4, #0
 80022a8:	4588      	cmp	r8, r1
 80022aa:	dc00      	bgt.n	80022ae <__aeabi_dsub+0x34a>
 80022ac:	e6c8      	b.n	8002040 <__aeabi_dsub+0xdc>
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <__aeabi_dsub+0x35c>)
 80022b0:	1a5b      	subs	r3, r3, r1
 80022b2:	4010      	ands	r0, r2
 80022b4:	4698      	mov	r8, r3
 80022b6:	4681      	mov	r9, r0
 80022b8:	e6d6      	b.n	8002068 <__aeabi_dsub+0x104>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	000007ff 	.word	0x000007ff
 80022c0:	ff7fffff 	.word	0xff7fffff
 80022c4:	fffff801 	.word	0xfffff801
 80022c8:	000007fe 	.word	0x000007fe
 80022cc:	430f      	orrs	r7, r1
 80022ce:	1e7a      	subs	r2, r7, #1
 80022d0:	4197      	sbcs	r7, r2
 80022d2:	e691      	b.n	8001ff8 <__aeabi_dsub+0x94>
 80022d4:	4661      	mov	r1, ip
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	0749      	lsls	r1, r1, #29
 80022da:	430b      	orrs	r3, r1
 80022dc:	4661      	mov	r1, ip
 80022de:	08cc      	lsrs	r4, r1, #3
 80022e0:	e7b8      	b.n	8002254 <__aeabi_dsub+0x2f0>
 80022e2:	4640      	mov	r0, r8
 80022e4:	4cd3      	ldr	r4, [pc, #844]	; (8002634 <__aeabi_dsub+0x6d0>)
 80022e6:	3001      	adds	r0, #1
 80022e8:	4220      	tst	r0, r4
 80022ea:	d000      	beq.n	80022ee <__aeabi_dsub+0x38a>
 80022ec:	e0a2      	b.n	8002434 <__aeabi_dsub+0x4d0>
 80022ee:	4640      	mov	r0, r8
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d000      	beq.n	80022f6 <__aeabi_dsub+0x392>
 80022f4:	e101      	b.n	80024fa <__aeabi_dsub+0x596>
 80022f6:	4660      	mov	r0, ip
 80022f8:	4318      	orrs	r0, r3
 80022fa:	d100      	bne.n	80022fe <__aeabi_dsub+0x39a>
 80022fc:	e15e      	b.n	80025bc <__aeabi_dsub+0x658>
 80022fe:	0008      	movs	r0, r1
 8002300:	4338      	orrs	r0, r7
 8002302:	d000      	beq.n	8002306 <__aeabi_dsub+0x3a2>
 8002304:	e15f      	b.n	80025c6 <__aeabi_dsub+0x662>
 8002306:	4661      	mov	r1, ip
 8002308:	08db      	lsrs	r3, r3, #3
 800230a:	0749      	lsls	r1, r1, #29
 800230c:	430b      	orrs	r3, r1
 800230e:	4661      	mov	r1, ip
 8002310:	08cc      	lsrs	r4, r1, #3
 8002312:	e7a2      	b.n	800225a <__aeabi_dsub+0x2f6>
 8002314:	4dc8      	ldr	r5, [pc, #800]	; (8002638 <__aeabi_dsub+0x6d4>)
 8002316:	42a8      	cmp	r0, r5
 8002318:	d100      	bne.n	800231c <__aeabi_dsub+0x3b8>
 800231a:	e0cf      	b.n	80024bc <__aeabi_dsub+0x558>
 800231c:	2580      	movs	r5, #128	; 0x80
 800231e:	4664      	mov	r4, ip
 8002320:	042d      	lsls	r5, r5, #16
 8002322:	432c      	orrs	r4, r5
 8002324:	46a4      	mov	ip, r4
 8002326:	2a38      	cmp	r2, #56	; 0x38
 8002328:	dc56      	bgt.n	80023d8 <__aeabi_dsub+0x474>
 800232a:	2a1f      	cmp	r2, #31
 800232c:	dd00      	ble.n	8002330 <__aeabi_dsub+0x3cc>
 800232e:	e0d1      	b.n	80024d4 <__aeabi_dsub+0x570>
 8002330:	2520      	movs	r5, #32
 8002332:	001e      	movs	r6, r3
 8002334:	1aad      	subs	r5, r5, r2
 8002336:	4664      	mov	r4, ip
 8002338:	40ab      	lsls	r3, r5
 800233a:	40ac      	lsls	r4, r5
 800233c:	40d6      	lsrs	r6, r2
 800233e:	1e5d      	subs	r5, r3, #1
 8002340:	41ab      	sbcs	r3, r5
 8002342:	4334      	orrs	r4, r6
 8002344:	4323      	orrs	r3, r4
 8002346:	4664      	mov	r4, ip
 8002348:	40d4      	lsrs	r4, r2
 800234a:	1b09      	subs	r1, r1, r4
 800234c:	e049      	b.n	80023e2 <__aeabi_dsub+0x47e>
 800234e:	4660      	mov	r0, ip
 8002350:	1bdc      	subs	r4, r3, r7
 8002352:	1a46      	subs	r6, r0, r1
 8002354:	42a3      	cmp	r3, r4
 8002356:	4180      	sbcs	r0, r0
 8002358:	4240      	negs	r0, r0
 800235a:	4681      	mov	r9, r0
 800235c:	0030      	movs	r0, r6
 800235e:	464e      	mov	r6, r9
 8002360:	1b80      	subs	r0, r0, r6
 8002362:	4681      	mov	r9, r0
 8002364:	0200      	lsls	r0, r0, #8
 8002366:	d476      	bmi.n	8002456 <__aeabi_dsub+0x4f2>
 8002368:	464b      	mov	r3, r9
 800236a:	4323      	orrs	r3, r4
 800236c:	d000      	beq.n	8002370 <__aeabi_dsub+0x40c>
 800236e:	e652      	b.n	8002016 <__aeabi_dsub+0xb2>
 8002370:	2400      	movs	r4, #0
 8002372:	2500      	movs	r5, #0
 8002374:	e771      	b.n	800225a <__aeabi_dsub+0x2f6>
 8002376:	4339      	orrs	r1, r7
 8002378:	000c      	movs	r4, r1
 800237a:	1e62      	subs	r2, r4, #1
 800237c:	4194      	sbcs	r4, r2
 800237e:	18e4      	adds	r4, r4, r3
 8002380:	429c      	cmp	r4, r3
 8002382:	419b      	sbcs	r3, r3
 8002384:	425b      	negs	r3, r3
 8002386:	4463      	add	r3, ip
 8002388:	4699      	mov	r9, r3
 800238a:	464b      	mov	r3, r9
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	d400      	bmi.n	8002392 <__aeabi_dsub+0x42e>
 8002390:	e756      	b.n	8002240 <__aeabi_dsub+0x2dc>
 8002392:	2301      	movs	r3, #1
 8002394:	469c      	mov	ip, r3
 8002396:	4ba8      	ldr	r3, [pc, #672]	; (8002638 <__aeabi_dsub+0x6d4>)
 8002398:	44e0      	add	r8, ip
 800239a:	4598      	cmp	r8, r3
 800239c:	d038      	beq.n	8002410 <__aeabi_dsub+0x4ac>
 800239e:	464b      	mov	r3, r9
 80023a0:	48a6      	ldr	r0, [pc, #664]	; (800263c <__aeabi_dsub+0x6d8>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	4003      	ands	r3, r0
 80023a6:	0018      	movs	r0, r3
 80023a8:	0863      	lsrs	r3, r4, #1
 80023aa:	4014      	ands	r4, r2
 80023ac:	431c      	orrs	r4, r3
 80023ae:	07c3      	lsls	r3, r0, #31
 80023b0:	431c      	orrs	r4, r3
 80023b2:	0843      	lsrs	r3, r0, #1
 80023b4:	4699      	mov	r9, r3
 80023b6:	e657      	b.n	8002068 <__aeabi_dsub+0x104>
 80023b8:	0010      	movs	r0, r2
 80023ba:	000e      	movs	r6, r1
 80023bc:	3820      	subs	r0, #32
 80023be:	40c6      	lsrs	r6, r0
 80023c0:	2a20      	cmp	r2, #32
 80023c2:	d004      	beq.n	80023ce <__aeabi_dsub+0x46a>
 80023c4:	2040      	movs	r0, #64	; 0x40
 80023c6:	1a82      	subs	r2, r0, r2
 80023c8:	4091      	lsls	r1, r2
 80023ca:	430f      	orrs	r7, r1
 80023cc:	46b9      	mov	r9, r7
 80023ce:	464f      	mov	r7, r9
 80023d0:	1e7a      	subs	r2, r7, #1
 80023d2:	4197      	sbcs	r7, r2
 80023d4:	4337      	orrs	r7, r6
 80023d6:	e60f      	b.n	8001ff8 <__aeabi_dsub+0x94>
 80023d8:	4662      	mov	r2, ip
 80023da:	431a      	orrs	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	4193      	sbcs	r3, r2
 80023e2:	1afc      	subs	r4, r7, r3
 80023e4:	42a7      	cmp	r7, r4
 80023e6:	41bf      	sbcs	r7, r7
 80023e8:	427f      	negs	r7, r7
 80023ea:	1bcb      	subs	r3, r1, r7
 80023ec:	4699      	mov	r9, r3
 80023ee:	465d      	mov	r5, fp
 80023f0:	4680      	mov	r8, r0
 80023f2:	e608      	b.n	8002006 <__aeabi_dsub+0xa2>
 80023f4:	4666      	mov	r6, ip
 80023f6:	431e      	orrs	r6, r3
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x498>
 80023fa:	e0be      	b.n	800257a <__aeabi_dsub+0x616>
 80023fc:	1e56      	subs	r6, r2, #1
 80023fe:	2a01      	cmp	r2, #1
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x4a0>
 8002402:	e109      	b.n	8002618 <__aeabi_dsub+0x6b4>
 8002404:	4c8c      	ldr	r4, [pc, #560]	; (8002638 <__aeabi_dsub+0x6d4>)
 8002406:	42a2      	cmp	r2, r4
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x4a8>
 800240a:	e119      	b.n	8002640 <__aeabi_dsub+0x6dc>
 800240c:	0032      	movs	r2, r6
 800240e:	e6c1      	b.n	8002194 <__aeabi_dsub+0x230>
 8002410:	4642      	mov	r2, r8
 8002412:	2400      	movs	r4, #0
 8002414:	2300      	movs	r3, #0
 8002416:	e648      	b.n	80020aa <__aeabi_dsub+0x146>
 8002418:	2020      	movs	r0, #32
 800241a:	000c      	movs	r4, r1
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	003e      	movs	r6, r7
 8002420:	4087      	lsls	r7, r0
 8002422:	4084      	lsls	r4, r0
 8002424:	40d6      	lsrs	r6, r2
 8002426:	1e78      	subs	r0, r7, #1
 8002428:	4187      	sbcs	r7, r0
 800242a:	40d1      	lsrs	r1, r2
 800242c:	4334      	orrs	r4, r6
 800242e:	433c      	orrs	r4, r7
 8002430:	448c      	add	ip, r1
 8002432:	e7a4      	b.n	800237e <__aeabi_dsub+0x41a>
 8002434:	4a80      	ldr	r2, [pc, #512]	; (8002638 <__aeabi_dsub+0x6d4>)
 8002436:	4290      	cmp	r0, r2
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x4d8>
 800243a:	e0e9      	b.n	8002610 <__aeabi_dsub+0x6ac>
 800243c:	19df      	adds	r7, r3, r7
 800243e:	429f      	cmp	r7, r3
 8002440:	419b      	sbcs	r3, r3
 8002442:	4461      	add	r1, ip
 8002444:	425b      	negs	r3, r3
 8002446:	18c9      	adds	r1, r1, r3
 8002448:	07cc      	lsls	r4, r1, #31
 800244a:	087f      	lsrs	r7, r7, #1
 800244c:	084b      	lsrs	r3, r1, #1
 800244e:	4699      	mov	r9, r3
 8002450:	4680      	mov	r8, r0
 8002452:	433c      	orrs	r4, r7
 8002454:	e6f4      	b.n	8002240 <__aeabi_dsub+0x2dc>
 8002456:	1afc      	subs	r4, r7, r3
 8002458:	42a7      	cmp	r7, r4
 800245a:	41bf      	sbcs	r7, r7
 800245c:	4663      	mov	r3, ip
 800245e:	427f      	negs	r7, r7
 8002460:	1ac9      	subs	r1, r1, r3
 8002462:	1bcb      	subs	r3, r1, r7
 8002464:	4699      	mov	r9, r3
 8002466:	465d      	mov	r5, fp
 8002468:	e5d5      	b.n	8002016 <__aeabi_dsub+0xb2>
 800246a:	08ff      	lsrs	r7, r7, #3
 800246c:	074b      	lsls	r3, r1, #29
 800246e:	465d      	mov	r5, fp
 8002470:	433b      	orrs	r3, r7
 8002472:	08cc      	lsrs	r4, r1, #3
 8002474:	e6ee      	b.n	8002254 <__aeabi_dsub+0x2f0>
 8002476:	4662      	mov	r2, ip
 8002478:	431a      	orrs	r2, r3
 800247a:	d000      	beq.n	800247e <__aeabi_dsub+0x51a>
 800247c:	e082      	b.n	8002584 <__aeabi_dsub+0x620>
 800247e:	000b      	movs	r3, r1
 8002480:	433b      	orrs	r3, r7
 8002482:	d11b      	bne.n	80024bc <__aeabi_dsub+0x558>
 8002484:	2480      	movs	r4, #128	; 0x80
 8002486:	2500      	movs	r5, #0
 8002488:	0324      	lsls	r4, r4, #12
 800248a:	e6f9      	b.n	8002280 <__aeabi_dsub+0x31c>
 800248c:	19dc      	adds	r4, r3, r7
 800248e:	429c      	cmp	r4, r3
 8002490:	419b      	sbcs	r3, r3
 8002492:	4461      	add	r1, ip
 8002494:	4689      	mov	r9, r1
 8002496:	425b      	negs	r3, r3
 8002498:	4499      	add	r9, r3
 800249a:	464b      	mov	r3, r9
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	d444      	bmi.n	800252a <__aeabi_dsub+0x5c6>
 80024a0:	2301      	movs	r3, #1
 80024a2:	4698      	mov	r8, r3
 80024a4:	e6cc      	b.n	8002240 <__aeabi_dsub+0x2dc>
 80024a6:	1bdc      	subs	r4, r3, r7
 80024a8:	4662      	mov	r2, ip
 80024aa:	42a3      	cmp	r3, r4
 80024ac:	419b      	sbcs	r3, r3
 80024ae:	1a51      	subs	r1, r2, r1
 80024b0:	425b      	negs	r3, r3
 80024b2:	1acb      	subs	r3, r1, r3
 80024b4:	4699      	mov	r9, r3
 80024b6:	2301      	movs	r3, #1
 80024b8:	4698      	mov	r8, r3
 80024ba:	e5a4      	b.n	8002006 <__aeabi_dsub+0xa2>
 80024bc:	08ff      	lsrs	r7, r7, #3
 80024be:	074b      	lsls	r3, r1, #29
 80024c0:	465d      	mov	r5, fp
 80024c2:	433b      	orrs	r3, r7
 80024c4:	08cc      	lsrs	r4, r1, #3
 80024c6:	e6d7      	b.n	8002278 <__aeabi_dsub+0x314>
 80024c8:	4662      	mov	r2, ip
 80024ca:	431a      	orrs	r2, r3
 80024cc:	0014      	movs	r4, r2
 80024ce:	1e63      	subs	r3, r4, #1
 80024d0:	419c      	sbcs	r4, r3
 80024d2:	e679      	b.n	80021c8 <__aeabi_dsub+0x264>
 80024d4:	0015      	movs	r5, r2
 80024d6:	4664      	mov	r4, ip
 80024d8:	3d20      	subs	r5, #32
 80024da:	40ec      	lsrs	r4, r5
 80024dc:	46a0      	mov	r8, r4
 80024de:	2a20      	cmp	r2, #32
 80024e0:	d005      	beq.n	80024ee <__aeabi_dsub+0x58a>
 80024e2:	2540      	movs	r5, #64	; 0x40
 80024e4:	4664      	mov	r4, ip
 80024e6:	1aaa      	subs	r2, r5, r2
 80024e8:	4094      	lsls	r4, r2
 80024ea:	4323      	orrs	r3, r4
 80024ec:	469a      	mov	sl, r3
 80024ee:	4654      	mov	r4, sl
 80024f0:	1e63      	subs	r3, r4, #1
 80024f2:	419c      	sbcs	r4, r3
 80024f4:	4643      	mov	r3, r8
 80024f6:	4323      	orrs	r3, r4
 80024f8:	e773      	b.n	80023e2 <__aeabi_dsub+0x47e>
 80024fa:	4662      	mov	r2, ip
 80024fc:	431a      	orrs	r2, r3
 80024fe:	d023      	beq.n	8002548 <__aeabi_dsub+0x5e4>
 8002500:	000a      	movs	r2, r1
 8002502:	433a      	orrs	r2, r7
 8002504:	d000      	beq.n	8002508 <__aeabi_dsub+0x5a4>
 8002506:	e0a0      	b.n	800264a <__aeabi_dsub+0x6e6>
 8002508:	4662      	mov	r2, ip
 800250a:	08db      	lsrs	r3, r3, #3
 800250c:	0752      	lsls	r2, r2, #29
 800250e:	4313      	orrs	r3, r2
 8002510:	4662      	mov	r2, ip
 8002512:	08d4      	lsrs	r4, r2, #3
 8002514:	e6b0      	b.n	8002278 <__aeabi_dsub+0x314>
 8002516:	000b      	movs	r3, r1
 8002518:	433b      	orrs	r3, r7
 800251a:	d100      	bne.n	800251e <__aeabi_dsub+0x5ba>
 800251c:	e728      	b.n	8002370 <__aeabi_dsub+0x40c>
 800251e:	08ff      	lsrs	r7, r7, #3
 8002520:	074b      	lsls	r3, r1, #29
 8002522:	465d      	mov	r5, fp
 8002524:	433b      	orrs	r3, r7
 8002526:	08cc      	lsrs	r4, r1, #3
 8002528:	e697      	b.n	800225a <__aeabi_dsub+0x2f6>
 800252a:	2302      	movs	r3, #2
 800252c:	4698      	mov	r8, r3
 800252e:	e736      	b.n	800239e <__aeabi_dsub+0x43a>
 8002530:	1afc      	subs	r4, r7, r3
 8002532:	42a7      	cmp	r7, r4
 8002534:	41bf      	sbcs	r7, r7
 8002536:	4663      	mov	r3, ip
 8002538:	427f      	negs	r7, r7
 800253a:	1ac9      	subs	r1, r1, r3
 800253c:	1bcb      	subs	r3, r1, r7
 800253e:	4699      	mov	r9, r3
 8002540:	2301      	movs	r3, #1
 8002542:	465d      	mov	r5, fp
 8002544:	4698      	mov	r8, r3
 8002546:	e55e      	b.n	8002006 <__aeabi_dsub+0xa2>
 8002548:	074b      	lsls	r3, r1, #29
 800254a:	08ff      	lsrs	r7, r7, #3
 800254c:	433b      	orrs	r3, r7
 800254e:	08cc      	lsrs	r4, r1, #3
 8002550:	e692      	b.n	8002278 <__aeabi_dsub+0x314>
 8002552:	1bdc      	subs	r4, r3, r7
 8002554:	4660      	mov	r0, ip
 8002556:	42a3      	cmp	r3, r4
 8002558:	41b6      	sbcs	r6, r6
 800255a:	1a40      	subs	r0, r0, r1
 800255c:	4276      	negs	r6, r6
 800255e:	1b80      	subs	r0, r0, r6
 8002560:	4681      	mov	r9, r0
 8002562:	0200      	lsls	r0, r0, #8
 8002564:	d560      	bpl.n	8002628 <__aeabi_dsub+0x6c4>
 8002566:	1afc      	subs	r4, r7, r3
 8002568:	42a7      	cmp	r7, r4
 800256a:	41bf      	sbcs	r7, r7
 800256c:	4663      	mov	r3, ip
 800256e:	427f      	negs	r7, r7
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	1bcb      	subs	r3, r1, r7
 8002574:	4699      	mov	r9, r3
 8002576:	465d      	mov	r5, fp
 8002578:	e576      	b.n	8002068 <__aeabi_dsub+0x104>
 800257a:	08ff      	lsrs	r7, r7, #3
 800257c:	074b      	lsls	r3, r1, #29
 800257e:	433b      	orrs	r3, r7
 8002580:	08cc      	lsrs	r4, r1, #3
 8002582:	e667      	b.n	8002254 <__aeabi_dsub+0x2f0>
 8002584:	000a      	movs	r2, r1
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	433a      	orrs	r2, r7
 800258a:	d100      	bne.n	800258e <__aeabi_dsub+0x62a>
 800258c:	e66f      	b.n	800226e <__aeabi_dsub+0x30a>
 800258e:	4662      	mov	r2, ip
 8002590:	0752      	lsls	r2, r2, #29
 8002592:	4313      	orrs	r3, r2
 8002594:	4662      	mov	r2, ip
 8002596:	08d4      	lsrs	r4, r2, #3
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	0312      	lsls	r2, r2, #12
 800259c:	4214      	tst	r4, r2
 800259e:	d007      	beq.n	80025b0 <__aeabi_dsub+0x64c>
 80025a0:	08c8      	lsrs	r0, r1, #3
 80025a2:	4210      	tst	r0, r2
 80025a4:	d104      	bne.n	80025b0 <__aeabi_dsub+0x64c>
 80025a6:	465d      	mov	r5, fp
 80025a8:	0004      	movs	r4, r0
 80025aa:	08fb      	lsrs	r3, r7, #3
 80025ac:	0749      	lsls	r1, r1, #29
 80025ae:	430b      	orrs	r3, r1
 80025b0:	0f5a      	lsrs	r2, r3, #29
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	0752      	lsls	r2, r2, #29
 80025b8:	4313      	orrs	r3, r2
 80025ba:	e65d      	b.n	8002278 <__aeabi_dsub+0x314>
 80025bc:	074b      	lsls	r3, r1, #29
 80025be:	08ff      	lsrs	r7, r7, #3
 80025c0:	433b      	orrs	r3, r7
 80025c2:	08cc      	lsrs	r4, r1, #3
 80025c4:	e649      	b.n	800225a <__aeabi_dsub+0x2f6>
 80025c6:	19dc      	adds	r4, r3, r7
 80025c8:	429c      	cmp	r4, r3
 80025ca:	419b      	sbcs	r3, r3
 80025cc:	4461      	add	r1, ip
 80025ce:	4689      	mov	r9, r1
 80025d0:	425b      	negs	r3, r3
 80025d2:	4499      	add	r9, r3
 80025d4:	464b      	mov	r3, r9
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	d400      	bmi.n	80025dc <__aeabi_dsub+0x678>
 80025da:	e631      	b.n	8002240 <__aeabi_dsub+0x2dc>
 80025dc:	464a      	mov	r2, r9
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <__aeabi_dsub+0x6d8>)
 80025e0:	401a      	ands	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	4691      	mov	r9, r2
 80025e6:	4698      	mov	r8, r3
 80025e8:	e62a      	b.n	8002240 <__aeabi_dsub+0x2dc>
 80025ea:	0016      	movs	r6, r2
 80025ec:	4664      	mov	r4, ip
 80025ee:	3e20      	subs	r6, #32
 80025f0:	40f4      	lsrs	r4, r6
 80025f2:	46a0      	mov	r8, r4
 80025f4:	2a20      	cmp	r2, #32
 80025f6:	d005      	beq.n	8002604 <__aeabi_dsub+0x6a0>
 80025f8:	2640      	movs	r6, #64	; 0x40
 80025fa:	4664      	mov	r4, ip
 80025fc:	1ab2      	subs	r2, r6, r2
 80025fe:	4094      	lsls	r4, r2
 8002600:	4323      	orrs	r3, r4
 8002602:	469a      	mov	sl, r3
 8002604:	4654      	mov	r4, sl
 8002606:	1e63      	subs	r3, r4, #1
 8002608:	419c      	sbcs	r4, r3
 800260a:	4643      	mov	r3, r8
 800260c:	431c      	orrs	r4, r3
 800260e:	e5db      	b.n	80021c8 <__aeabi_dsub+0x264>
 8002610:	0002      	movs	r2, r0
 8002612:	2400      	movs	r4, #0
 8002614:	2300      	movs	r3, #0
 8002616:	e548      	b.n	80020aa <__aeabi_dsub+0x146>
 8002618:	19dc      	adds	r4, r3, r7
 800261a:	42bc      	cmp	r4, r7
 800261c:	41bf      	sbcs	r7, r7
 800261e:	4461      	add	r1, ip
 8002620:	4689      	mov	r9, r1
 8002622:	427f      	negs	r7, r7
 8002624:	44b9      	add	r9, r7
 8002626:	e738      	b.n	800249a <__aeabi_dsub+0x536>
 8002628:	464b      	mov	r3, r9
 800262a:	4323      	orrs	r3, r4
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x6cc>
 800262e:	e69f      	b.n	8002370 <__aeabi_dsub+0x40c>
 8002630:	e606      	b.n	8002240 <__aeabi_dsub+0x2dc>
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	000007fe 	.word	0x000007fe
 8002638:	000007ff 	.word	0x000007ff
 800263c:	ff7fffff 	.word	0xff7fffff
 8002640:	08ff      	lsrs	r7, r7, #3
 8002642:	074b      	lsls	r3, r1, #29
 8002644:	433b      	orrs	r3, r7
 8002646:	08cc      	lsrs	r4, r1, #3
 8002648:	e616      	b.n	8002278 <__aeabi_dsub+0x314>
 800264a:	4662      	mov	r2, ip
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	0752      	lsls	r2, r2, #29
 8002650:	4313      	orrs	r3, r2
 8002652:	4662      	mov	r2, ip
 8002654:	08d4      	lsrs	r4, r2, #3
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	0312      	lsls	r2, r2, #12
 800265a:	4214      	tst	r4, r2
 800265c:	d007      	beq.n	800266e <__aeabi_dsub+0x70a>
 800265e:	08c8      	lsrs	r0, r1, #3
 8002660:	4210      	tst	r0, r2
 8002662:	d104      	bne.n	800266e <__aeabi_dsub+0x70a>
 8002664:	465d      	mov	r5, fp
 8002666:	0004      	movs	r4, r0
 8002668:	08fb      	lsrs	r3, r7, #3
 800266a:	0749      	lsls	r1, r1, #29
 800266c:	430b      	orrs	r3, r1
 800266e:	0f5a      	lsrs	r2, r3, #29
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	0752      	lsls	r2, r2, #29
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	4313      	orrs	r3, r2
 8002678:	e5fe      	b.n	8002278 <__aeabi_dsub+0x314>
 800267a:	2300      	movs	r3, #0
 800267c:	4a01      	ldr	r2, [pc, #4]	; (8002684 <__aeabi_dsub+0x720>)
 800267e:	001c      	movs	r4, r3
 8002680:	e513      	b.n	80020aa <__aeabi_dsub+0x146>
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	000007ff 	.word	0x000007ff

08002688 <__aeabi_dcmpun>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	0005      	movs	r5, r0
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <__aeabi_dcmpun+0x38>)
 800268e:	031c      	lsls	r4, r3, #12
 8002690:	0016      	movs	r6, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	030a      	lsls	r2, r1, #12
 8002696:	0049      	lsls	r1, r1, #1
 8002698:	0b12      	lsrs	r2, r2, #12
 800269a:	0d49      	lsrs	r1, r1, #21
 800269c:	0b24      	lsrs	r4, r4, #12
 800269e:	0d5b      	lsrs	r3, r3, #21
 80026a0:	4281      	cmp	r1, r0
 80026a2:	d008      	beq.n	80026b6 <__aeabi_dcmpun+0x2e>
 80026a4:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <__aeabi_dcmpun+0x38>)
 80026a6:	2000      	movs	r0, #0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d103      	bne.n	80026b4 <__aeabi_dcmpun+0x2c>
 80026ac:	0020      	movs	r0, r4
 80026ae:	4330      	orrs	r0, r6
 80026b0:	1e43      	subs	r3, r0, #1
 80026b2:	4198      	sbcs	r0, r3
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
 80026b6:	2001      	movs	r0, #1
 80026b8:	432a      	orrs	r2, r5
 80026ba:	d1fb      	bne.n	80026b4 <__aeabi_dcmpun+0x2c>
 80026bc:	e7f2      	b.n	80026a4 <__aeabi_dcmpun+0x1c>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	000007ff 	.word	0x000007ff

080026c4 <__aeabi_d2iz>:
 80026c4:	000a      	movs	r2, r1
 80026c6:	b530      	push	{r4, r5, lr}
 80026c8:	4c13      	ldr	r4, [pc, #76]	; (8002718 <__aeabi_d2iz+0x54>)
 80026ca:	0053      	lsls	r3, r2, #1
 80026cc:	0309      	lsls	r1, r1, #12
 80026ce:	0005      	movs	r5, r0
 80026d0:	0b09      	lsrs	r1, r1, #12
 80026d2:	2000      	movs	r0, #0
 80026d4:	0d5b      	lsrs	r3, r3, #21
 80026d6:	0fd2      	lsrs	r2, r2, #31
 80026d8:	42a3      	cmp	r3, r4
 80026da:	dd04      	ble.n	80026e6 <__aeabi_d2iz+0x22>
 80026dc:	480f      	ldr	r0, [pc, #60]	; (800271c <__aeabi_d2iz+0x58>)
 80026de:	4283      	cmp	r3, r0
 80026e0:	dd02      	ble.n	80026e8 <__aeabi_d2iz+0x24>
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <__aeabi_d2iz+0x5c>)
 80026e4:	18d0      	adds	r0, r2, r3
 80026e6:	bd30      	pop	{r4, r5, pc}
 80026e8:	2080      	movs	r0, #128	; 0x80
 80026ea:	0340      	lsls	r0, r0, #13
 80026ec:	4301      	orrs	r1, r0
 80026ee:	480d      	ldr	r0, [pc, #52]	; (8002724 <__aeabi_d2iz+0x60>)
 80026f0:	1ac0      	subs	r0, r0, r3
 80026f2:	281f      	cmp	r0, #31
 80026f4:	dd08      	ble.n	8002708 <__aeabi_d2iz+0x44>
 80026f6:	480c      	ldr	r0, [pc, #48]	; (8002728 <__aeabi_d2iz+0x64>)
 80026f8:	1ac3      	subs	r3, r0, r3
 80026fa:	40d9      	lsrs	r1, r3
 80026fc:	000b      	movs	r3, r1
 80026fe:	4258      	negs	r0, r3
 8002700:	2a00      	cmp	r2, #0
 8002702:	d1f0      	bne.n	80026e6 <__aeabi_d2iz+0x22>
 8002704:	0018      	movs	r0, r3
 8002706:	e7ee      	b.n	80026e6 <__aeabi_d2iz+0x22>
 8002708:	4c08      	ldr	r4, [pc, #32]	; (800272c <__aeabi_d2iz+0x68>)
 800270a:	40c5      	lsrs	r5, r0
 800270c:	46a4      	mov	ip, r4
 800270e:	4463      	add	r3, ip
 8002710:	4099      	lsls	r1, r3
 8002712:	000b      	movs	r3, r1
 8002714:	432b      	orrs	r3, r5
 8002716:	e7f2      	b.n	80026fe <__aeabi_d2iz+0x3a>
 8002718:	000003fe 	.word	0x000003fe
 800271c:	0000041d 	.word	0x0000041d
 8002720:	7fffffff 	.word	0x7fffffff
 8002724:	00000433 	.word	0x00000433
 8002728:	00000413 	.word	0x00000413
 800272c:	fffffbed 	.word	0xfffffbed

08002730 <__aeabi_i2d>:
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	2800      	cmp	r0, #0
 8002734:	d016      	beq.n	8002764 <__aeabi_i2d+0x34>
 8002736:	17c3      	asrs	r3, r0, #31
 8002738:	18c5      	adds	r5, r0, r3
 800273a:	405d      	eors	r5, r3
 800273c:	0fc4      	lsrs	r4, r0, #31
 800273e:	0028      	movs	r0, r5
 8002740:	f000 f91c 	bl	800297c <__clzsi2>
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <__aeabi_i2d+0x5c>)
 8002746:	1a12      	subs	r2, r2, r0
 8002748:	280a      	cmp	r0, #10
 800274a:	dc16      	bgt.n	800277a <__aeabi_i2d+0x4a>
 800274c:	0003      	movs	r3, r0
 800274e:	002e      	movs	r6, r5
 8002750:	3315      	adds	r3, #21
 8002752:	409e      	lsls	r6, r3
 8002754:	230b      	movs	r3, #11
 8002756:	1a18      	subs	r0, r3, r0
 8002758:	40c5      	lsrs	r5, r0
 800275a:	0552      	lsls	r2, r2, #21
 800275c:	032d      	lsls	r5, r5, #12
 800275e:	0b2d      	lsrs	r5, r5, #12
 8002760:	0d53      	lsrs	r3, r2, #21
 8002762:	e003      	b.n	800276c <__aeabi_i2d+0x3c>
 8002764:	2400      	movs	r4, #0
 8002766:	2300      	movs	r3, #0
 8002768:	2500      	movs	r5, #0
 800276a:	2600      	movs	r6, #0
 800276c:	051b      	lsls	r3, r3, #20
 800276e:	432b      	orrs	r3, r5
 8002770:	07e4      	lsls	r4, r4, #31
 8002772:	4323      	orrs	r3, r4
 8002774:	0030      	movs	r0, r6
 8002776:	0019      	movs	r1, r3
 8002778:	bd70      	pop	{r4, r5, r6, pc}
 800277a:	380b      	subs	r0, #11
 800277c:	4085      	lsls	r5, r0
 800277e:	0552      	lsls	r2, r2, #21
 8002780:	032d      	lsls	r5, r5, #12
 8002782:	2600      	movs	r6, #0
 8002784:	0b2d      	lsrs	r5, r5, #12
 8002786:	0d53      	lsrs	r3, r2, #21
 8002788:	e7f0      	b.n	800276c <__aeabi_i2d+0x3c>
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	0000041e 	.word	0x0000041e

08002790 <__aeabi_ui2d>:
 8002790:	b510      	push	{r4, lr}
 8002792:	1e04      	subs	r4, r0, #0
 8002794:	d010      	beq.n	80027b8 <__aeabi_ui2d+0x28>
 8002796:	f000 f8f1 	bl	800297c <__clzsi2>
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <__aeabi_ui2d+0x48>)
 800279c:	1a1b      	subs	r3, r3, r0
 800279e:	280a      	cmp	r0, #10
 80027a0:	dc11      	bgt.n	80027c6 <__aeabi_ui2d+0x36>
 80027a2:	220b      	movs	r2, #11
 80027a4:	0021      	movs	r1, r4
 80027a6:	1a12      	subs	r2, r2, r0
 80027a8:	40d1      	lsrs	r1, r2
 80027aa:	3015      	adds	r0, #21
 80027ac:	030a      	lsls	r2, r1, #12
 80027ae:	055b      	lsls	r3, r3, #21
 80027b0:	4084      	lsls	r4, r0
 80027b2:	0b12      	lsrs	r2, r2, #12
 80027b4:	0d5b      	lsrs	r3, r3, #21
 80027b6:	e001      	b.n	80027bc <__aeabi_ui2d+0x2c>
 80027b8:	2300      	movs	r3, #0
 80027ba:	2200      	movs	r2, #0
 80027bc:	051b      	lsls	r3, r3, #20
 80027be:	4313      	orrs	r3, r2
 80027c0:	0020      	movs	r0, r4
 80027c2:	0019      	movs	r1, r3
 80027c4:	bd10      	pop	{r4, pc}
 80027c6:	0022      	movs	r2, r4
 80027c8:	380b      	subs	r0, #11
 80027ca:	4082      	lsls	r2, r0
 80027cc:	055b      	lsls	r3, r3, #21
 80027ce:	0312      	lsls	r2, r2, #12
 80027d0:	2400      	movs	r4, #0
 80027d2:	0b12      	lsrs	r2, r2, #12
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	e7f1      	b.n	80027bc <__aeabi_ui2d+0x2c>
 80027d8:	0000041e 	.word	0x0000041e

080027dc <__aeabi_f2d>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	0043      	lsls	r3, r0, #1
 80027e0:	0246      	lsls	r6, r0, #9
 80027e2:	0fc4      	lsrs	r4, r0, #31
 80027e4:	20fe      	movs	r0, #254	; 0xfe
 80027e6:	0e1b      	lsrs	r3, r3, #24
 80027e8:	1c59      	adds	r1, r3, #1
 80027ea:	0a75      	lsrs	r5, r6, #9
 80027ec:	4208      	tst	r0, r1
 80027ee:	d00c      	beq.n	800280a <__aeabi_f2d+0x2e>
 80027f0:	22e0      	movs	r2, #224	; 0xe0
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	4694      	mov	ip, r2
 80027f6:	076d      	lsls	r5, r5, #29
 80027f8:	0b36      	lsrs	r6, r6, #12
 80027fa:	4463      	add	r3, ip
 80027fc:	051b      	lsls	r3, r3, #20
 80027fe:	4333      	orrs	r3, r6
 8002800:	07e4      	lsls	r4, r4, #31
 8002802:	4323      	orrs	r3, r4
 8002804:	0028      	movs	r0, r5
 8002806:	0019      	movs	r1, r3
 8002808:	bd70      	pop	{r4, r5, r6, pc}
 800280a:	2b00      	cmp	r3, #0
 800280c:	d114      	bne.n	8002838 <__aeabi_f2d+0x5c>
 800280e:	2d00      	cmp	r5, #0
 8002810:	d01b      	beq.n	800284a <__aeabi_f2d+0x6e>
 8002812:	0028      	movs	r0, r5
 8002814:	f000 f8b2 	bl	800297c <__clzsi2>
 8002818:	280a      	cmp	r0, #10
 800281a:	dc1c      	bgt.n	8002856 <__aeabi_f2d+0x7a>
 800281c:	230b      	movs	r3, #11
 800281e:	002e      	movs	r6, r5
 8002820:	1a1b      	subs	r3, r3, r0
 8002822:	40de      	lsrs	r6, r3
 8002824:	0003      	movs	r3, r0
 8002826:	3315      	adds	r3, #21
 8002828:	409d      	lsls	r5, r3
 800282a:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <__aeabi_f2d+0x88>)
 800282c:	0336      	lsls	r6, r6, #12
 800282e:	1a12      	subs	r2, r2, r0
 8002830:	0552      	lsls	r2, r2, #21
 8002832:	0b36      	lsrs	r6, r6, #12
 8002834:	0d53      	lsrs	r3, r2, #21
 8002836:	e7e1      	b.n	80027fc <__aeabi_f2d+0x20>
 8002838:	2d00      	cmp	r5, #0
 800283a:	d009      	beq.n	8002850 <__aeabi_f2d+0x74>
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	0b36      	lsrs	r6, r6, #12
 8002840:	0312      	lsls	r2, r2, #12
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <__aeabi_f2d+0x8c>)
 8002844:	076d      	lsls	r5, r5, #29
 8002846:	4316      	orrs	r6, r2
 8002848:	e7d8      	b.n	80027fc <__aeabi_f2d+0x20>
 800284a:	2300      	movs	r3, #0
 800284c:	2600      	movs	r6, #0
 800284e:	e7d5      	b.n	80027fc <__aeabi_f2d+0x20>
 8002850:	2600      	movs	r6, #0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <__aeabi_f2d+0x8c>)
 8002854:	e7d2      	b.n	80027fc <__aeabi_f2d+0x20>
 8002856:	0003      	movs	r3, r0
 8002858:	3b0b      	subs	r3, #11
 800285a:	409d      	lsls	r5, r3
 800285c:	002e      	movs	r6, r5
 800285e:	2500      	movs	r5, #0
 8002860:	e7e3      	b.n	800282a <__aeabi_f2d+0x4e>
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	00000389 	.word	0x00000389
 8002868:	000007ff 	.word	0x000007ff

0800286c <__aeabi_d2f>:
 800286c:	0002      	movs	r2, r0
 800286e:	004b      	lsls	r3, r1, #1
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	0d5b      	lsrs	r3, r3, #21
 8002874:	030c      	lsls	r4, r1, #12
 8002876:	4e3d      	ldr	r6, [pc, #244]	; (800296c <__aeabi_d2f+0x100>)
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f40      	lsrs	r0, r0, #29
 800287c:	1c5f      	adds	r7, r3, #1
 800287e:	0fc9      	lsrs	r1, r1, #31
 8002880:	4304      	orrs	r4, r0
 8002882:	00d5      	lsls	r5, r2, #3
 8002884:	4237      	tst	r7, r6
 8002886:	d00a      	beq.n	800289e <__aeabi_d2f+0x32>
 8002888:	4839      	ldr	r0, [pc, #228]	; (8002970 <__aeabi_d2f+0x104>)
 800288a:	181e      	adds	r6, r3, r0
 800288c:	2efe      	cmp	r6, #254	; 0xfe
 800288e:	dd16      	ble.n	80028be <__aeabi_d2f+0x52>
 8002890:	20ff      	movs	r0, #255	; 0xff
 8002892:	2400      	movs	r4, #0
 8002894:	05c0      	lsls	r0, r0, #23
 8002896:	4320      	orrs	r0, r4
 8002898:	07c9      	lsls	r1, r1, #31
 800289a:	4308      	orrs	r0, r1
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <__aeabi_d2f+0x44>
 80028a2:	432c      	orrs	r4, r5
 80028a4:	d026      	beq.n	80028f4 <__aeabi_d2f+0x88>
 80028a6:	2205      	movs	r2, #5
 80028a8:	0192      	lsls	r2, r2, #6
 80028aa:	0a54      	lsrs	r4, r2, #9
 80028ac:	b2d8      	uxtb	r0, r3
 80028ae:	e7f1      	b.n	8002894 <__aeabi_d2f+0x28>
 80028b0:	4325      	orrs	r5, r4
 80028b2:	d0ed      	beq.n	8002890 <__aeabi_d2f+0x24>
 80028b4:	2080      	movs	r0, #128	; 0x80
 80028b6:	03c0      	lsls	r0, r0, #15
 80028b8:	4304      	orrs	r4, r0
 80028ba:	20ff      	movs	r0, #255	; 0xff
 80028bc:	e7ea      	b.n	8002894 <__aeabi_d2f+0x28>
 80028be:	2e00      	cmp	r6, #0
 80028c0:	dd1b      	ble.n	80028fa <__aeabi_d2f+0x8e>
 80028c2:	0192      	lsls	r2, r2, #6
 80028c4:	1e53      	subs	r3, r2, #1
 80028c6:	419a      	sbcs	r2, r3
 80028c8:	00e4      	lsls	r4, r4, #3
 80028ca:	0f6d      	lsrs	r5, r5, #29
 80028cc:	4322      	orrs	r2, r4
 80028ce:	432a      	orrs	r2, r5
 80028d0:	0753      	lsls	r3, r2, #29
 80028d2:	d048      	beq.n	8002966 <__aeabi_d2f+0xfa>
 80028d4:	230f      	movs	r3, #15
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d000      	beq.n	80028de <__aeabi_d2f+0x72>
 80028dc:	3204      	adds	r2, #4
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	04db      	lsls	r3, r3, #19
 80028e2:	4013      	ands	r3, r2
 80028e4:	d03f      	beq.n	8002966 <__aeabi_d2f+0xfa>
 80028e6:	1c70      	adds	r0, r6, #1
 80028e8:	2efe      	cmp	r6, #254	; 0xfe
 80028ea:	d0d1      	beq.n	8002890 <__aeabi_d2f+0x24>
 80028ec:	0192      	lsls	r2, r2, #6
 80028ee:	0a54      	lsrs	r4, r2, #9
 80028f0:	b2c0      	uxtb	r0, r0
 80028f2:	e7cf      	b.n	8002894 <__aeabi_d2f+0x28>
 80028f4:	2000      	movs	r0, #0
 80028f6:	2400      	movs	r4, #0
 80028f8:	e7cc      	b.n	8002894 <__aeabi_d2f+0x28>
 80028fa:	0032      	movs	r2, r6
 80028fc:	3217      	adds	r2, #23
 80028fe:	db22      	blt.n	8002946 <__aeabi_d2f+0xda>
 8002900:	2080      	movs	r0, #128	; 0x80
 8002902:	0400      	lsls	r0, r0, #16
 8002904:	4320      	orrs	r0, r4
 8002906:	241e      	movs	r4, #30
 8002908:	1ba4      	subs	r4, r4, r6
 800290a:	2c1f      	cmp	r4, #31
 800290c:	dd1d      	ble.n	800294a <__aeabi_d2f+0xde>
 800290e:	2202      	movs	r2, #2
 8002910:	4252      	negs	r2, r2
 8002912:	1b96      	subs	r6, r2, r6
 8002914:	0002      	movs	r2, r0
 8002916:	40f2      	lsrs	r2, r6
 8002918:	0016      	movs	r6, r2
 800291a:	2c20      	cmp	r4, #32
 800291c:	d004      	beq.n	8002928 <__aeabi_d2f+0xbc>
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <__aeabi_d2f+0x108>)
 8002920:	4694      	mov	ip, r2
 8002922:	4463      	add	r3, ip
 8002924:	4098      	lsls	r0, r3
 8002926:	4305      	orrs	r5, r0
 8002928:	002a      	movs	r2, r5
 800292a:	1e53      	subs	r3, r2, #1
 800292c:	419a      	sbcs	r2, r3
 800292e:	4332      	orrs	r2, r6
 8002930:	2600      	movs	r6, #0
 8002932:	0753      	lsls	r3, r2, #29
 8002934:	d1ce      	bne.n	80028d4 <__aeabi_d2f+0x68>
 8002936:	2480      	movs	r4, #128	; 0x80
 8002938:	0013      	movs	r3, r2
 800293a:	04e4      	lsls	r4, r4, #19
 800293c:	2001      	movs	r0, #1
 800293e:	4023      	ands	r3, r4
 8002940:	4222      	tst	r2, r4
 8002942:	d1d3      	bne.n	80028ec <__aeabi_d2f+0x80>
 8002944:	e7b0      	b.n	80028a8 <__aeabi_d2f+0x3c>
 8002946:	2300      	movs	r3, #0
 8002948:	e7ad      	b.n	80028a6 <__aeabi_d2f+0x3a>
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <__aeabi_d2f+0x10c>)
 800294c:	4694      	mov	ip, r2
 800294e:	002a      	movs	r2, r5
 8002950:	40e2      	lsrs	r2, r4
 8002952:	0014      	movs	r4, r2
 8002954:	002a      	movs	r2, r5
 8002956:	4463      	add	r3, ip
 8002958:	409a      	lsls	r2, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	1e55      	subs	r5, r2, #1
 800295e:	41aa      	sbcs	r2, r5
 8002960:	4302      	orrs	r2, r0
 8002962:	4322      	orrs	r2, r4
 8002964:	e7e4      	b.n	8002930 <__aeabi_d2f+0xc4>
 8002966:	0033      	movs	r3, r6
 8002968:	e79e      	b.n	80028a8 <__aeabi_d2f+0x3c>
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	000007fe 	.word	0x000007fe
 8002970:	fffffc80 	.word	0xfffffc80
 8002974:	fffffca2 	.word	0xfffffca2
 8002978:	fffffc82 	.word	0xfffffc82

0800297c <__clzsi2>:
 800297c:	211c      	movs	r1, #28
 800297e:	2301      	movs	r3, #1
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	4298      	cmp	r0, r3
 8002984:	d301      	bcc.n	800298a <__clzsi2+0xe>
 8002986:	0c00      	lsrs	r0, r0, #16
 8002988:	3910      	subs	r1, #16
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	4298      	cmp	r0, r3
 800298e:	d301      	bcc.n	8002994 <__clzsi2+0x18>
 8002990:	0a00      	lsrs	r0, r0, #8
 8002992:	3908      	subs	r1, #8
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	4298      	cmp	r0, r3
 8002998:	d301      	bcc.n	800299e <__clzsi2+0x22>
 800299a:	0900      	lsrs	r0, r0, #4
 800299c:	3904      	subs	r1, #4
 800299e:	a202      	add	r2, pc, #8	; (adr r2, 80029a8 <__clzsi2+0x2c>)
 80029a0:	5c10      	ldrb	r0, [r2, r0]
 80029a2:	1840      	adds	r0, r0, r1
 80029a4:	4770      	bx	lr
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	02020304 	.word	0x02020304
 80029ac:	01010101 	.word	0x01010101
	...

080029b8 <btn_progress_loop>:
#include "button.h"

void btn_progress_loop(button_t *btn, uint8_t status)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b08b      	sub	sp, #44	; 0x2c
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	000a      	movs	r2, r1
 80029c2:	1cfb      	adds	r3, r7, #3
 80029c4:	701a      	strb	r2, [r3, #0]
	uint8_t check_stt;

	check_stt = status;
 80029c6:	2127      	movs	r1, #39	; 0x27
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	1cfa      	adds	r2, r7, #3
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	701a      	strb	r2, [r3, #0]
	if (btn->pinStt)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <btn_progress_loop+0x2c>
	{
		check_stt = btn->pinStt();
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	187c      	adds	r4, r7, r1
 80029de:	4798      	blx	r3
 80029e0:	0003      	movs	r3, r0
 80029e2:	7023      	strb	r3, [r4, #0]
	}

	if (check_stt)
 80029e4:	2327      	movs	r3, #39	; 0x27
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d100      	bne.n	80029f0 <btn_progress_loop+0x38>
 80029ee:	e091      	b.n	8002b14 <btn_progress_loop+0x15c>
	{
		switch (btn->state)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	d900      	bls.n	80029fa <btn_progress_loop+0x42>
 80029f8:	e080      	b.n	8002afc <btn_progress_loop+0x144>
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <btn_progress_loop+0x274>)
 80029fe:	18d3      	adds	r3, r2, r3
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	469f      	mov	pc, r3
		{
		case _BTN_null:
			btn->state = _BTN_init;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIME_INIT_PRESS);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	2132      	movs	r1, #50	; 0x32
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 fb6f 	bl	80030f4 <timer_set>
			btn->process._timeBeginHold = timer_getTick();
 8002a16:	f000 fb55 	bl	80030c4 <timer_getTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8002a20:	e077      	b.n	8002b12 <btn_progress_loop+0x15a>

		case _BTN_init:
			if (timer_expired(&btn->process._timeout))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3314      	adds	r3, #20
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fb8e 	bl	8003148 <timer_expired>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d067      	beq.n	8002b00 <btn_progress_loop+0x148>
				btn->state = _BTN_isPress;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	701a      	strb	r2, [r3, #0]
			break;
 8002a36:	e063      	b.n	8002b00 <btn_progress_loop+0x148>

		case _BTN_isPress:
			btn->state = _BTN_wait_hold;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIME_HOLD_ACTIVE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3314      	adds	r3, #20
 8002a42:	22fa      	movs	r2, #250	; 0xfa
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 fb53 	bl	80030f4 <timer_set>

			// callback Press
			if (btn->cb_function)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d056      	beq.n	8002b04 <btn_progress_loop+0x14c>
			{
				bt_typeArg_t ArgValue;
				ArgValue.event = BUTTON_PRESS;
 8002a56:	2320      	movs	r3, #32
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]

				btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	8910      	ldrh	r0, [r2, #8]
 8002a66:	6a3a      	ldr	r2, [r7, #32]
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4798      	blx	r3
			}

			break;
 8002a6c:	e04a      	b.n	8002b04 <btn_progress_loop+0x14c>

		case _BTN_wait_hold:
			if (timer_expired(&btn->process._timeout))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3314      	adds	r3, #20
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fb68 	bl	8003148 <timer_expired>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d045      	beq.n	8002b08 <btn_progress_loop+0x150>
			{
				btn->state = _BTN_isHold;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	701a      	strb	r2, [r3, #0]
				// callbak hold Release
				if (btn->cb_function)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d03e      	beq.n	8002b08 <btn_progress_loop+0x150>
				{
					bt_typeArg_t ArgValue;
					ArgValue.event = BUTTON_HOLD_PRESS;
 8002a8a:	231c      	movs	r3, #28
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2204      	movs	r2, #4
 8002a90:	701a      	strb	r2, [r3, #0]
					btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	8910      	ldrh	r0, [r2, #8]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4798      	blx	r3
				}
			}
			break;
 8002aa0:	e032      	b.n	8002b08 <btn_progress_loop+0x150>

		case _BTN_wait_clrMultiClick:
			// restart init ...
			if (!timer_expired(&btn->process._timeout))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fb4e 	bl	8003148 <timer_expired>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d12d      	bne.n	8002b0c <btn_progress_loop+0x154>
			{
				btn->state = _BTN_init;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
				timer_set(&btn->process._timeout, _TIME_INIT_PRESS);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3314      	adds	r3, #20
 8002aba:	2132      	movs	r1, #50	; 0x32
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 fb19 	bl	80030f4 <timer_set>
				btn->process._timeBeginHold = timer_getTick();
 8002ac2:	f000 faff 	bl	80030c4 <timer_getTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
 8002acc:	e01e      	b.n	8002b0c <btn_progress_loop+0x154>

		case _BTN_isHold:
			btn->timeHold = timer_getTick() - btn->process._timeBeginHold;
 8002ace:	f000 faf9 	bl	80030c4 <timer_getTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]

			// callback Hold on
			if (btn->cb_function)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d014      	beq.n	8002b10 <btn_progress_loop+0x158>
			{
				bt_typeArg_t ArgValue;
				ArgValue.holdInterval_ms = btn->timeHold;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
				btn->cb_function(btn->ID, _BUTTON_FUNC_HOLD, ArgValue);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	8910      	ldrh	r0, [r2, #8]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	2102      	movs	r1, #2
 8002af8:	4798      	blx	r3
			}

			break;
 8002afa:	e009      	b.n	8002b10 <btn_progress_loop+0x158>

		default:
			break;
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	e091      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	e08f      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	e08d      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	e08b      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	e089      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b10:	46c0      	nop			; (mov r8, r8)
		}
		return;
 8002b12:	e087      	b.n	8002c24 <btn_progress_loop+0x26c>
	}
	// is release
	else
	{
		switch (btn->state)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d900      	bls.n	8002b20 <btn_progress_loop+0x168>
 8002b1e:	e078      	b.n	8002c12 <btn_progress_loop+0x25a>
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <btn_progress_loop+0x278>)
 8002b24:	18d3      	adds	r3, r2, r3
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	469f      	mov	pc, r3
		{
		case _BTN_wait_hold:
			btn->state = _BTN_isRelease;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIME_INIT_RELEASE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3314      	adds	r3, #20
 8002b34:	2132      	movs	r1, #50	; 0x32
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 fadc 	bl	80030f4 <timer_set>
			break;
 8002b3c:	e072      	b.n	8002c24 <btn_progress_loop+0x26c>

		case _BTN_isRelease:
			if (timer_expired(&btn->process._timeout))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3314      	adds	r3, #20
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 fb00 	bl	8003148 <timer_expired>
 8002b48:	1e03      	subs	r3, r0, #0
 8002b4a:	d066      	beq.n	8002c1a <btn_progress_loop+0x262>
			{
				btn->state = _BTN_isClick;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2206      	movs	r2, #6
 8002b50:	701a      	strb	r2, [r3, #0]
				btn->multiClick++;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	705a      	strb	r2, [r3, #1]

				// callback every click
				if (btn->cb_function)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <btn_progress_loop+0x1c4>
				{
					bt_typeArg_t ArgValue;
					ArgValue.event = BUTTON_ONECLICK;
 8002b66:	2314      	movs	r3, #20
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	701a      	strb	r2, [r3, #0]
					btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	8910      	ldrh	r0, [r2, #8]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4798      	blx	r3
				}

				// callback multiClick
				if (btn->cb_function)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d04a      	beq.n	8002c1a <btn_progress_loop+0x262>
				{
					bt_typeArg_t ArgValue;
					ArgValue.numClick = btn->multiClick;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	785a      	ldrb	r2, [r3, #1]
 8002b88:	2310      	movs	r3, #16
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	701a      	strb	r2, [r3, #0]
					// if( btn->multiClick > 2)
					btn->cb_function(btn->ID, _BUTTON_FUNC_MULCLICK, ArgValue);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	8910      	ldrh	r0, [r2, #8]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4798      	blx	r3
				}
			}

			break;
 8002b9c:	e03d      	b.n	8002c1a <btn_progress_loop+0x262>

		case _BTN_isHold:
			btn->state = _BTN_hold_pass;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2209      	movs	r2, #9
 8002ba2:	701a      	strb	r2, [r3, #0]
			timer_stop(&btn->process._timeout);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 faf3 	bl	8003194 <timer_stop>
			btn->multiClick = 0;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	705a      	strb	r2, [r3, #1]

			// callbak hold Release
			if (btn->cb_function)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d030      	beq.n	8002c1e <btn_progress_loop+0x266>
			{
				bt_typeArg_t ArgValue;
				ArgValue.event = BUTTON_HOLD_RELEASE;
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	701a      	strb	r2, [r3, #0]
				btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	8910      	ldrh	r0, [r2, #8]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4798      	blx	r3
			}

			break;
 8002bd2:	e024      	b.n	8002c1e <btn_progress_loop+0x266>

		case _BTN_isClick:
			btn->state = _BTN_wait_clrMultiClick;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIMEOUT_MULTICLICK);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	22fa      	movs	r2, #250	; 0xfa
 8002be0:	0052      	lsls	r2, r2, #1
 8002be2:	0011      	movs	r1, r2
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 fa85 	bl	80030f4 <timer_set>

			break;
 8002bea:	e01b      	b.n	8002c24 <btn_progress_loop+0x26c>

		case _BTN_wait_clrMultiClick:
			if (timer_expired(&btn->process._timeout))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3314      	adds	r3, #20
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f000 faa9 	bl	8003148 <timer_expired>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d013      	beq.n	8002c22 <btn_progress_loop+0x26a>
			{
				btn->state = _BTN_null;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
				timer_stop(&btn->process._timeout);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3314      	adds	r3, #20
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 fac5 	bl	8003194 <timer_stop>
				btn->multiClick = 0;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	705a      	strb	r2, [r3, #1]
			}
			break;
 8002c10:	e007      	b.n	8002c22 <btn_progress_loop+0x26a>

		default:
			btn->state = _BTN_null;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e004      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	e002      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	e000      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002c22:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b00b      	add	sp, #44	; 0x2c
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	08010084 	.word	0x08010084
 8002c30:	080100a4 	.word	0x080100a4

08002c34 <OUTPUT_configInit>:
#include "output.h"

void OUTPUT_configInit(OUTPUT_t *tmp, __OutBaseCtrl pinBaseCtrl, __OutEventBlinkCallBack cb_evenOutput)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	tmp->pinBaseCtrl = pinBaseCtrl;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24
	tmp->cb_eventFunction = cb_evenOutput;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <OUTPUT_setOff>:

void OUTPUT_setOff(OUTPUT_t *tmp, clock_time_t delayBegin_ms)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
	if (tmp->pinBaseCtrl)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d028      	beq.n	8002cb8 <OUTPUT_setOff+0x64>
	{
		tmp->mode = OUT_MODE_OFF;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
		if (delayBegin_ms)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <OUTPUT_setOff+0x34>
		{
			tmp->state = OUT_STATE_WAIT_START;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	705a      	strb	r2, [r3, #1]
			timer_set(&tmp->_timeOut, delayBegin_ms);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3314      	adds	r3, #20
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 fa37 	bl	80030f4 <timer_set>
			{
				tmp->cb_eventFunction(OUT_EVENT_OFF_AFTER, 0);
			}
		}
	}
}
 8002c86:	e017      	b.n	8002cb8 <OUTPUT_setOff+0x64>
			tmp->state = OUT_state_finished;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	705a      	strb	r2, [r3, #1]
			tmp->pinBaseCtrl(0);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2000      	movs	r0, #0
 8002c94:	4798      	blx	r3
			timer_stop(&tmp->_timeOut);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3314      	adds	r3, #20
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 fa7a 	bl	8003194 <timer_stop>
			tmp->val_timeLine = 0;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
			if (tmp->cb_eventFunction)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <OUTPUT_setOff+0x64>
				tmp->cb_eventFunction(OUT_EVENT_OFF_AFTER, 0);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	4798      	blx	r3
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <OUTPUT_setOn>:

/**
 * This function controls OFF
 */
void OUTPUT_setOn(OUTPUT_t *tmp, clock_time_t delayBegin_ms)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	if (tmp->pinBaseCtrl)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d028      	beq.n	8002d24 <OUTPUT_setOn+0x64>
	{
		tmp->mode = OUT_MODE_ON;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
		if (delayBegin_ms)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <OUTPUT_setOn+0x34>
		{
			tmp->state = OUT_STATE_WAIT_START;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	705a      	strb	r2, [r3, #1]
			timer_set(&tmp->_timeOut, delayBegin_ms);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3314      	adds	r3, #20
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	0011      	movs	r1, r2
 8002cec:	0018      	movs	r0, r3
 8002cee:	f000 fa01 	bl	80030f4 <timer_set>
			{
				tmp->cb_eventFunction(OUT_EVENT_ON_AFTER, 0);
			}
		}
	}
}
 8002cf2:	e017      	b.n	8002d24 <OUTPUT_setOn+0x64>
			tmp->state = OUT_state_finished;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	705a      	strb	r2, [r3, #1]
			tmp->pinBaseCtrl(1);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2001      	movs	r0, #1
 8002d00:	4798      	blx	r3
			timer_stop(&tmp->_timeOut);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3314      	adds	r3, #20
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 fa44 	bl	8003194 <timer_stop>
			tmp->val_timeLine = 0;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
			if (tmp->cb_eventFunction)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <OUTPUT_setOn+0x64>
				tmp->cb_eventFunction(OUT_EVENT_ON_AFTER, 0);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2000      	movs	r0, #0
 8002d22:	4798      	blx	r3
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <OUTPUT_setBlink>:

void OUTPUT_setBlink(OUTPUT_t *tmp, uint8_t repeat, clock_time_t dutyON_ms, clock_time_t perriod_ms, uint8_t nonStop)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	240b      	movs	r4, #11
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	1c0a      	adds	r2, r1, #0
 8002d3e:	701a      	strb	r2, [r3, #0]

	if (tmp->pinBaseCtrl)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d044      	beq.n	8002dd2 <OUTPUT_setBlink+0xa6>
	{
		// Wrong parameter
		if (repeat == 0)
 8002d48:	193b      	adds	r3, r7, r4
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03b      	beq.n	8002dc8 <OUTPUT_setBlink+0x9c>
			return;
		if (dutyON_ms == 0)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d03a      	beq.n	8002dcc <OUTPUT_setBlink+0xa0>
			return;
		if (perriod_ms <= dutyON_ms)
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d938      	bls.n	8002dd0 <OUTPUT_setBlink+0xa4>
			return;

		tmp->pinBaseCtrl(1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2001      	movs	r0, #1
 8002d64:	4798      	blx	r3
		tmp->mode = OUT_MODE_BLINK;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	701a      	strb	r2, [r3, #0]
		tmp->state = OUT_STATE_ON;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	705a      	strb	r2, [r3, #1]
		tmp->ena_nonStop = nonStop;
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	2318      	movs	r3, #24
 8002d76:	2108      	movs	r1, #8
 8002d78:	185b      	adds	r3, r3, r1
 8002d7a:	19db      	adds	r3, r3, r7
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	7093      	strb	r3, [r2, #2]
		tmp->repeat_num = repeat;
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	809a      	strh	r2, [r3, #4]
		tmp->repeat_cnt = 0;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	80da      	strh	r2, [r3, #6]
		tmp->val_Duty = dutyON_ms;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	609a      	str	r2, [r3, #8]
		tmp->val_perriod = perriod_ms;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
		timer_set(&tmp->_timeOut, tmp->val_Duty);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3314      	adds	r3, #20
 8002da0:	001a      	movs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	0019      	movs	r1, r3
 8002da8:	0010      	movs	r0, r2
 8002daa:	f000 f9a3 	bl	80030f4 <timer_set>
		tmp->val_timeLine = 0;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	611a      	str	r2, [r3, #16]
		// callback event ON when start blink
		if (tmp->cb_eventFunction)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <OUTPUT_setBlink+0xa6>
		{
			tmp->cb_eventFunction(OUT_EVENT_ON_AFTER, 0);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	4798      	blx	r3
 8002dc6:	e004      	b.n	8002dd2 <OUTPUT_setBlink+0xa6>
			return;
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	e002      	b.n	8002dd2 <OUTPUT_setBlink+0xa6>
			return;
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	e000      	b.n	8002dd2 <OUTPUT_setBlink+0xa6>
			return;
 8002dd0:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b005      	add	sp, #20
 8002dd6:	bd90      	pop	{r4, r7, pc}

08002dd8 <OUTPUT_blinkHandle>:

void OUTPUT_blinkHandle(OUTPUT_t *tmp)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

	if (tmp->pinBaseCtrl)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d100      	bne.n	8002dea <OUTPUT_blinkHandle+0x12>
 8002de8:	e10f      	b.n	800300a <OUTPUT_blinkHandle+0x232>
	{
		if (tmp->mode != OUT_MODE_NO_CONTROL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <OUTPUT_blinkHandle+0x24>
			tmp->val_timeLine++;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	611a      	str	r2, [r3, #16]

		switch (tmp->mode)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d05b      	beq.n	8002ebc <OUTPUT_blinkHandle+0xe4>
 8002e04:	dd00      	ble.n	8002e08 <OUTPUT_blinkHandle+0x30>
 8002e06:	e0f7      	b.n	8002ff8 <OUTPUT_blinkHandle+0x220>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <OUTPUT_blinkHandle+0x3a>
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d028      	beq.n	8002e62 <OUTPUT_blinkHandle+0x8a>
				break;
			} // end switch check state of mode blink
			break;

		default:
			break;
 8002e10:	e0f2      	b.n	8002ff8 <OUTPUT_blinkHandle+0x220>
			if (timer_expired(&tmp->_timeOut))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3314      	adds	r3, #20
 8002e16:	0018      	movs	r0, r3
 8002e18:	f000 f996 	bl	8003148 <timer_expired>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d00e      	beq.n	8002e3e <OUTPUT_blinkHandle+0x66>
				timer_stop(&tmp->_timeOut);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3314      	adds	r3, #20
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 f9b5 	bl	8003194 <timer_stop>
				tmp->state = OUT_state_finished;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	705a      	strb	r2, [r3, #1]
				tmp->pinBaseCtrl(0);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2000      	movs	r0, #0
 8002e36:	4798      	blx	r3
				tmp->val_timeLine = 0;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
			if (tmp->cb_eventFunction)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d100      	bne.n	8002e48 <OUTPUT_blinkHandle+0x70>
 8002e46:	e0d9      	b.n	8002ffc <OUTPUT_blinkHandle+0x224>
				if (tmp->state != OUT_STATE_WAIT_START)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d100      	bne.n	8002e52 <OUTPUT_blinkHandle+0x7a>
 8002e50:	e0d4      	b.n	8002ffc <OUTPUT_blinkHandle+0x224>
					tmp->cb_eventFunction(OUT_EVENT_OFF_AFTER, tmp->val_timeLine);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	4790      	blx	r2
			break;
 8002e60:	e0cc      	b.n	8002ffc <OUTPUT_blinkHandle+0x224>
			if (timer_expired(&tmp->_timeOut))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3314      	adds	r3, #20
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 f96e 	bl	8003148 <timer_expired>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d00e      	beq.n	8002e8e <OUTPUT_blinkHandle+0xb6>
				timer_stop(&tmp->_timeOut);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3314      	adds	r3, #20
 8002e74:	0018      	movs	r0, r3
 8002e76:	f000 f98d 	bl	8003194 <timer_stop>
				tmp->state = OUT_STATE_ON;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	705a      	strb	r2, [r3, #1]
				tmp->pinBaseCtrl(1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2001      	movs	r0, #1
 8002e86:	4798      	blx	r3
				tmp->val_timeLine = 0;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
			if (tmp->state == OUT_STATE_WAIT_START)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	785b      	ldrb	r3, [r3, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d100      	bne.n	8002e98 <OUTPUT_blinkHandle+0xc0>
 8002e96:	e0b3      	b.n	8003000 <OUTPUT_blinkHandle+0x228>
			if (tmp->cb_eventFunction)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d100      	bne.n	8002ea2 <OUTPUT_blinkHandle+0xca>
 8002ea0:	e0b0      	b.n	8003004 <OUTPUT_blinkHandle+0x22c>
				if (tmp->state != OUT_STATE_WAIT_START)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	785b      	ldrb	r3, [r3, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d100      	bne.n	8002eac <OUTPUT_blinkHandle+0xd4>
 8002eaa:	e0ab      	b.n	8003004 <OUTPUT_blinkHandle+0x22c>
					tmp->cb_eventFunction(OUT_EVENT_ON_AFTER, tmp->val_timeLine);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	4790      	blx	r2
			break;
 8002eba:	e0a3      	b.n	8003004 <OUTPUT_blinkHandle+0x22c>
			switch (tmp->state)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d002      	beq.n	8002eca <OUTPUT_blinkHandle+0xf2>
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d032      	beq.n	8002f2e <OUTPUT_blinkHandle+0x156>
				break;
 8002ec8:	e095      	b.n	8002ff6 <OUTPUT_blinkHandle+0x21e>
				if (timer_expired(&tmp->_timeOut))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3314      	adds	r3, #20
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 f93a 	bl	8003148 <timer_expired>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d014      	beq.n	8002f02 <OUTPUT_blinkHandle+0x12a>
					tmp->state = OUT_state_finished;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	705a      	strb	r2, [r3, #1]
					tmp->pinBaseCtrl(0);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	4798      	blx	r3
					timer_set(&tmp->_timeOut, (tmp->val_perriod - tmp->val_Duty));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3314      	adds	r3, #20
 8002eea:	0018      	movs	r0, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	f000 f8fc 	bl	80030f4 <timer_set>
					tmp->val_timeLine = 0;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
				if (tmp->cb_eventFunction)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d100      	bne.n	8002f0c <OUTPUT_blinkHandle+0x134>
 8002f0a:	e071      	b.n	8002ff0 <OUTPUT_blinkHandle+0x218>
					event = (tmp->val_timeLine) ? OUT_EVENT_ON_AFTER : OUT_EVENT_OFF_AFTER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	425a      	negs	r2, r3
 8002f12:	4153      	adcs	r3, r2
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	200e      	movs	r0, #14
 8002f18:	183b      	adds	r3, r7, r0
 8002f1a:	701a      	strb	r2, [r3, #0]
					tmp->cb_eventFunction(event, tmp->val_timeLine);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6919      	ldr	r1, [r3, #16]
 8002f24:	183b      	adds	r3, r7, r0
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	4790      	blx	r2
				break;
 8002f2c:	e060      	b.n	8002ff0 <OUTPUT_blinkHandle+0x218>
				if (timer_expired(&tmp->_timeOut))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3314      	adds	r3, #20
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 f908 	bl	8003148 <timer_expired>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d044      	beq.n	8002fc6 <OUTPUT_blinkHandle+0x1ee>
					if (tmp->ena_nonStop)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	789b      	ldrb	r3, [r3, #2]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <OUTPUT_blinkHandle+0x174>
						tmp->repeat_cnt = 0;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	80da      	strh	r2, [r3, #6]
 8002f4a:	e005      	b.n	8002f58 <OUTPUT_blinkHandle+0x180>
						tmp->repeat_cnt++;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	88db      	ldrh	r3, [r3, #6]
 8002f50:	3301      	adds	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	80da      	strh	r2, [r3, #6]
					if (tmp->repeat_cnt == tmp->repeat_num)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	88da      	ldrh	r2, [r3, #6]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	889b      	ldrh	r3, [r3, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d11d      	bne.n	8002fa0 <OUTPUT_blinkHandle+0x1c8>
						tmp->mode = OUT_MODE_NO_CONTROL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
						tmp->state = OUT_state_finished;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	705a      	strb	r2, [r3, #1]
						tmp->pinBaseCtrl(0);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2000      	movs	r0, #0
 8002f76:	4798      	blx	r3
						timer_stop(&tmp->_timeOut);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3314      	adds	r3, #20
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f909 	bl	8003194 <timer_stop>
						tmp->val_timeLine = 0;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
						if (tmp->cb_eventFunction)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d03b      	beq.n	8003008 <OUTPUT_blinkHandle+0x230>
							tmp->cb_eventFunction(OUT_EVENT_END_BLINK, tmp->val_timeLine);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	0019      	movs	r1, r3
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	4790      	blx	r2
						return;
 8002f9e:	e033      	b.n	8003008 <OUTPUT_blinkHandle+0x230>
						tmp->state = OUT_STATE_ON;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	705a      	strb	r2, [r3, #1]
						tmp->pinBaseCtrl(1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	2001      	movs	r0, #1
 8002fac:	4798      	blx	r3
						timer_set(&tmp->_timeOut, tmp->val_Duty);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3314      	adds	r3, #20
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	0019      	movs	r1, r3
 8002fba:	0010      	movs	r0, r2
 8002fbc:	f000 f89a 	bl	80030f4 <timer_set>
						tmp->val_timeLine = 0;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
				if (tmp->cb_eventFunction)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d012      	beq.n	8002ff4 <OUTPUT_blinkHandle+0x21c>
					event = (tmp->val_timeLine) ? OUT_EVENT_OFF_AFTER : OUT_EVENT_ON_AFTER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	4193      	sbcs	r3, r2
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	200f      	movs	r0, #15
 8002fda:	183b      	adds	r3, r7, r0
 8002fdc:	701a      	strb	r2, [r3, #0]
					tmp->cb_eventFunction(event, tmp->val_timeLine);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	183b      	adds	r3, r7, r0
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	0018      	movs	r0, r3
 8002fec:	4790      	blx	r2
				break;
 8002fee:	e001      	b.n	8002ff4 <OUTPUT_blinkHandle+0x21c>
				break;
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	e00a      	b.n	800300a <OUTPUT_blinkHandle+0x232>
				break;
 8002ff4:	46c0      	nop			; (mov r8, r8)
			break;
 8002ff6:	e008      	b.n	800300a <OUTPUT_blinkHandle+0x232>
			break;
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	e006      	b.n	800300a <OUTPUT_blinkHandle+0x232>
			break;
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	e004      	b.n	800300a <OUTPUT_blinkHandle+0x232>
				return;
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	e002      	b.n	800300a <OUTPUT_blinkHandle+0x232>
			break;
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	e000      	b.n	800300a <OUTPUT_blinkHandle+0x232>
						return;
 8003008:	46c0      	nop			; (mov r8, r8)
		} // end switch check mode
	}	  // check Pointer
}
 800300a:	46bd      	mov	sp, r7
 800300c:	b004      	add	sp, #16
 800300e:	bd80      	pop	{r7, pc}

08003010 <INPUT_readHanlde>:

uint8_t INPUT_readHanlde(uint8_t inputPinStt,uint16_t *inputValTmp, uint16_t *lowCnt_ms, int16_t lowSample_ms, uint16_t *highCnt_ms, uint16_t highSample_ms)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	0019      	movs	r1, r3
 800301c:	240f      	movs	r4, #15
 800301e:	193b      	adds	r3, r7, r4
 8003020:	1c02      	adds	r2, r0, #0
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	230c      	movs	r3, #12
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	1c0a      	adds	r2, r1, #0
 800302a:	801a      	strh	r2, [r3, #0]
	// Khởi tạo giá trị ban đầu giống với inputStt
	if (*inputValTmp == 0xFF)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d107      	bne.n	8003044 <INPUT_readHanlde+0x34>
	{
		*inputValTmp = (inputPinStt) ? 1 : 0;
 8003034:	193b      	adds	r3, r7, r4
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	1e5a      	subs	r2, r3, #1
 800303a:	4193      	sbcs	r3, r2
 800303c:	b2db      	uxtb	r3, r3
 800303e:	b29a      	uxth	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	801a      	strh	r2, [r3, #0]
	}

	if(inputPinStt==0){
 8003044:	230f      	movs	r3, #15
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d118      	bne.n	8003080 <INPUT_readHanlde+0x70>
		*highCnt_ms = 0;
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2200      	movs	r2, #0
 8003052:	801a      	strh	r2, [r3, #0]
		if (++(*lowCnt_ms) >= lowSample_ms)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	801a      	strh	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	001a      	movs	r2, r3
 8003066:	230c      	movs	r3, #12
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2100      	movs	r1, #0
 800306c:	5e5b      	ldrsh	r3, [r3, r1]
 800306e:	429a      	cmp	r2, r3
 8003070:	db21      	blt.n	80030b6 <INPUT_readHanlde+0xa6>
		{
			*lowCnt_ms = 0;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]
			*inputValTmp = 0;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2200      	movs	r2, #0
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	e01a      	b.n	80030b6 <INPUT_readHanlde+0xa6>
		}
	}
	else
	{
		*lowCnt_ms = 0;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	801a      	strh	r2, [r3, #0]
		if (++(*highCnt_ms) >= highSample_ms)
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	221c      	movs	r2, #28
 8003098:	2108      	movs	r1, #8
 800309a:	1852      	adds	r2, r2, r1
 800309c:	19d2      	adds	r2, r2, r7
 800309e:	8812      	ldrh	r2, [r2, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d808      	bhi.n	80030b6 <INPUT_readHanlde+0xa6>
		{
			*highCnt_ms = 0;
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	2200      	movs	r2, #0
 80030a8:	801a      	strh	r2, [r3, #0]
			*inputValTmp = inputPinStt;
 80030aa:	230f      	movs	r3, #15
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	801a      	strh	r2, [r3, #0]
		}
	}

	//*inputValTmp;
	return (uint8_t)(*inputValTmp);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b2db      	uxtb	r3, r3
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b005      	add	sp, #20
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <timer_getTick>:
/*---------------------------------------------------------------------------*/
/**
 * get uTick of my timer system.
 */
clock_time_t timer_getTick(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  return _unitTick;
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <timer_getTick+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	2000028c 	.word	0x2000028c

080030d8 <timer_periodic_poll>:
/**
 * count the uTick .
 * This function is must be call in a timer interrupt
 */
void timer_periodic_poll(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  _unitTick += _INTERVAL_TICK;
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <timer_periodic_poll+0x18>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330a      	adds	r3, #10
 80030e2:	001a      	movs	r2, r3
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <timer_periodic_poll+0x18>)
 80030e6:	601a      	str	r2, [r3, #0]
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	2000028c 	.word	0x2000028c

080030f4 <timer_set>:
 * \param t A pointer to the timer
 * \param interval The interval before the timer expires.
 *
 */
void timer_set(timer_virtual_t *t, clock_time_t interval)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  t->status = _timer_on;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
  t->start = _unitTick;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <timer_set+0x2c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]
  t->interval = interval;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	609a      	str	r2, [r3, #8]
  t->left_time = 0;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	60da      	str	r2, [r3, #12]
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}
 8003120:	2000028c 	.word	0x2000028c

08003124 <timer_restart>:
 * \param t A pointer to the timer.
 *
 * \sa timer_reset()
 */
void timer_restart(timer_virtual_t *t)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  t->start = _unitTick;
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <timer_restart+0x20>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	605a      	str	r2, [r3, #4]
  t->status = _timer_on;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b002      	add	sp, #8
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	2000028c 	.word	0x2000028c

08003148 <timer_expired>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
uint8_t timer_expired(timer_virtual_t *t)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if (t->status == _timer_off)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <timer_expired+0x14>
    return 0;
 8003158:	2300      	movs	r3, #0
 800315a:	e014      	b.n	8003186 <timer_expired+0x3e>
  if (t->status == _timer_over)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d101      	bne.n	8003168 <timer_expired+0x20>
    return 1;
 8003164:	2301      	movs	r3, #1
 8003166:	e00e      	b.n	8003186 <timer_expired+0x3e>

  if ((clock_time_t)(_unitTick - t->start) >= (clock_time_t)t->interval)
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <timer_expired+0x48>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	1ad2      	subs	r2, r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	d304      	bcc.n	8003184 <timer_expired+0x3c>
  {
    t->status = _timer_over;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	701a      	strb	r2, [r3, #0]
    return 1;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <timer_expired+0x3e>
  }
  return 0;
 8003184:	2300      	movs	r3, #0
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b002      	add	sp, #8
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	2000028c 	.word	0x2000028c

08003194 <timer_stop>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
void timer_stop(timer_virtual_t *t)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  t->status = _timer_off;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
  t->left_time = 0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <CapSS_TxSignal_SetOut>:

static CheckSensor_State_t Check_State;
static timer_virtual_t _timer_wait_sensor;

void CapSS_TxSignal_SetOut(uint8_t select_IO_Cap)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	0002      	movs	r2, r0
 80031b8:	1dfb      	adds	r3, r7, #7
 80031ba:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	240c      	movs	r4, #12
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	0018      	movs	r0, r3
 80031c2:	2314      	movs	r3, #20
 80031c4:	001a      	movs	r2, r3
 80031c6:	2100      	movs	r1, #0
 80031c8:	f009 fde1 	bl	800cd8e <memset>

	// Out Push-pull , Res Pull-up
	GPIO_InitStruct.Pin = SSWATER_SIGNAL_Pin;
 80031cc:	0021      	movs	r1, r4
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	0052      	lsls	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	2201      	movs	r2, #1
 80031da:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	2201      	movs	r2, #1
 80031e0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	2201      	movs	r2, #1
 80031e6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SSWATER_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <CapSS_TxSignal_SetOut+0x4c>)
 80031ec:	0019      	movs	r1, r3
 80031ee:	0010      	movs	r0, r2
 80031f0:	f005 fc40 	bl	8008a74 <HAL_GPIO_Init>
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b009      	add	sp, #36	; 0x24
 80031fa:	bd90      	pop	{r4, r7, pc}
 80031fc:	50000400 	.word	0x50000400

08003200 <CapSS_TxSignal_SetIn>:

void CapSS_TxSignal_SetIn(uint8_t select_IO_Cap)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	0002      	movs	r2, r0
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	240c      	movs	r4, #12
 800320e:	193b      	adds	r3, r7, r4
 8003210:	0018      	movs	r0, r3
 8003212:	2314      	movs	r3, #20
 8003214:	001a      	movs	r2, r3
 8003216:	2100      	movs	r1, #0
 8003218:	f009 fdb9 	bl	800cd8e <memset>

	// Input : Res Pull-up
	GPIO_InitStruct.Pin = SSWATER_SIGNAL_Pin;
 800321c:	0021      	movs	r1, r4
 800321e:	187b      	adds	r3, r7, r1
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	0052      	lsls	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003226:	187b      	adds	r3, r7, r1
 8003228:	2200      	movs	r2, #0
 800322a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800322c:	187b      	adds	r3, r7, r1
 800322e:	2201      	movs	r2, #1
 8003230:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003232:	187b      	adds	r3, r7, r1
 8003234:	2201      	movs	r2, #1
 8003236:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SSWATER_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8003238:	187b      	adds	r3, r7, r1
 800323a:	4a04      	ldr	r2, [pc, #16]	; (800324c <CapSS_TxSignal_SetIn+0x4c>)
 800323c:	0019      	movs	r1, r3
 800323e:	0010      	movs	r0, r2
 8003240:	f005 fc18 	bl	8008a74 <HAL_GPIO_Init>
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b009      	add	sp, #36	; 0x24
 800324a:	bd90      	pop	{r4, r7, pc}
 800324c:	50000400 	.word	0x50000400

08003250 <CapSS_Start>:
/*======================== CapSS_Start  ====================================================
 * Action :	Execuse all Drain Command
 * Param: AF struct
 * */
void CapSS_Start(CapSen_Struct_t *Sensor_Tmp, uint8_t cmd)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	000a      	movs	r2, r1
 800325a:	1cfb      	adds	r3, r7, #3
 800325c:	701a      	strb	r2, [r3, #0]

	if (cmd == _SS_CHECKSTT_BYTE)
 800325e:	1cfb      	adds	r3, r7, #3
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b6f      	cmp	r3, #111	; 0x6f
 8003264:	d103      	bne.n	800326e <CapSS_Start+0x1e>
	{
		Sensor_Tmp->retry_connect = RETRY_NUM_CHECKSTT; // debug_msg("%u-CheckStt",CapSS_selected);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2206      	movs	r2, #6
 800326a:	715a      	strb	r2, [r3, #5]
 800326c:	e006      	b.n	800327c <CapSS_Start+0x2c>
	}
	else if (cmd == _SS_CALIB_BYTE)
 800326e:	1cfb      	adds	r3, r7, #3
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b60      	cmp	r3, #96	; 0x60
 8003274:	d10e      	bne.n	8003294 <CapSS_Start+0x44>
	{
		Sensor_Tmp->retry_connect = RETRY_NUM_CALIB; // debug_msg("%u-Calib",CapSS_selected);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2203      	movs	r2, #3
 800327a:	715a      	strb	r2, [r3, #5]
	}
	else
		return;

	Sensor_Tmp->state = _SENSOR_SENT_START;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
	Sensor_Tmp->command = cmd;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1cfa      	adds	r2, r7, #3
 8003286:	7812      	ldrb	r2, [r2, #0]
 8003288:	711a      	strb	r2, [r3, #4]
	timer_stop(&_timer_wait_sensor);
 800328a:	4b04      	ldr	r3, [pc, #16]	; (800329c <CapSS_Start+0x4c>)
 800328c:	0018      	movs	r0, r3
 800328e:	f7ff ff81 	bl	8003194 <timer_stop>
 8003292:	e000      	b.n	8003296 <CapSS_Start+0x46>
		return;
 8003294:	46c0      	nop			; (mov r8, r8)
}
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200002a0 	.word	0x200002a0

080032a0 <CapSS_Task>:

void CapSS_Task(CapSen_Struct_t *Sensor_Tmp)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	uint16_t CheckSumByte;
	static uint8_t string_cmd[Max_Index];
	static uint8_t Condition_nummer;
	static uint32_t count_systick;

	switch (Sensor_Tmp->state)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d064      	beq.n	800337a <CapSS_Task+0xda>
 80032b0:	dd00      	ble.n	80032b4 <CapSS_Task+0x14>
 80032b2:	e0ad      	b.n	8003410 <CapSS_Task+0x170>
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d002      	beq.n	80032be <CapSS_Task+0x1e>
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d04d      	beq.n	8003358 <CapSS_Task+0xb8>
															// debug_msg("%u-Retry=%u",CapSS_selected,Sensor_Tmp->retry_connect);
			}
		}
		break;
	default:
		break;
 80032bc:	e0a8      	b.n	8003410 <CapSS_Task+0x170>
		Check_State = _CHECK_CLEAR;
 80032be:	4b5b      	ldr	r3, [pc, #364]	; (800342c <CapSS_Task+0x18c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
		string_cmd[Stx_Index] = 0x1E;
 80032c4:	4b5a      	ldr	r3, [pc, #360]	; (8003430 <CapSS_Task+0x190>)
 80032c6:	221e      	movs	r2, #30
 80032c8:	701a      	strb	r2, [r3, #0]
		string_cmd[Add_Index] = 0x05;
 80032ca:	4b59      	ldr	r3, [pc, #356]	; (8003430 <CapSS_Task+0x190>)
 80032cc:	2205      	movs	r2, #5
 80032ce:	705a      	strb	r2, [r3, #1]
		string_cmd[Cmd_Index] = Sensor_Tmp->command;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	791a      	ldrb	r2, [r3, #4]
 80032d4:	4b56      	ldr	r3, [pc, #344]	; (8003430 <CapSS_Task+0x190>)
 80032d6:	709a      	strb	r2, [r3, #2]
		CheckSumByte = string_cmd[Stx_Index] + string_cmd[Add_Index] + string_cmd[Cmd_Index];
 80032d8:	4b55      	ldr	r3, [pc, #340]	; (8003430 <CapSS_Task+0x190>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	4b54      	ldr	r3, [pc, #336]	; (8003430 <CapSS_Task+0x190>)
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	18d3      	adds	r3, r2, r3
 80032e6:	b299      	uxth	r1, r3
 80032e8:	4b51      	ldr	r3, [pc, #324]	; (8003430 <CapSS_Task+0x190>)
 80032ea:	789b      	ldrb	r3, [r3, #2]
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	200e      	movs	r0, #14
 80032f0:	183b      	adds	r3, r7, r0
 80032f2:	188a      	adds	r2, r1, r2
 80032f4:	801a      	strh	r2, [r3, #0]
		string_cmd[Data_Index] = CheckSumByte & 0xFF;
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b4c      	ldr	r3, [pc, #304]	; (8003430 <CapSS_Task+0x190>)
 80032fe:	70da      	strb	r2, [r3, #3]
		string_cmd[Etx_Index] = 0x1F;
 8003300:	4b4b      	ldr	r3, [pc, #300]	; (8003430 <CapSS_Task+0x190>)
 8003302:	221f      	movs	r2, #31
 8003304:	711a      	strb	r2, [r3, #4]
		Sensor_Tmp->pulseCnt = 0;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	705a      	strb	r2, [r3, #1]
		CapSS_TxSignal_SetOut(0);
 800330c:	2000      	movs	r0, #0
 800330e:	f7ff ff4f 	bl	80031b0 <CapSS_TxSignal_SetOut>
		count_systick = HAL_GetTick();
 8003312:	f003 fc3d 	bl	8006b90 <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	4b46      	ldr	r3, [pc, #280]	; (8003434 <CapSS_Task+0x194>)
 800331a:	601a      	str	r2, [r3, #0]
		UV_CAPSS_putArr(string_cmd, Max_Index);
 800331c:	4b44      	ldr	r3, [pc, #272]	; (8003430 <CapSS_Task+0x190>)
 800331e:	2105      	movs	r1, #5
 8003320:	0018      	movs	r0, r3
 8003322:	f000 fa0d 	bl	8003740 <UV_CAPSS_putArr>
		if (Sensor_Tmp->command == _SS_CHECKSTT_BYTE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	791b      	ldrb	r3, [r3, #4]
 800332a:	2b6f      	cmp	r3, #111	; 0x6f
 800332c:	d105      	bne.n	800333a <CapSS_Task+0x9a>
			timer_set(&_timer_wait_sensor, 250); // it nhat 100 ms
 800332e:	4b42      	ldr	r3, [pc, #264]	; (8003438 <CapSS_Task+0x198>)
 8003330:	21fa      	movs	r1, #250	; 0xfa
 8003332:	0018      	movs	r0, r3
 8003334:	f7ff fede 	bl	80030f4 <timer_set>
 8003338:	e00a      	b.n	8003350 <CapSS_Task+0xb0>
		else if (Sensor_Tmp->command == _SS_CALIB_BYTE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	2b60      	cmp	r3, #96	; 0x60
 8003340:	d106      	bne.n	8003350 <CapSS_Task+0xb0>
			timer_set(&_timer_wait_sensor, 400); // it nhat 400 ms => vi Calib tra loi cham
 8003342:	23c8      	movs	r3, #200	; 0xc8
 8003344:	005a      	lsls	r2, r3, #1
 8003346:	4b3c      	ldr	r3, [pc, #240]	; (8003438 <CapSS_Task+0x198>)
 8003348:	0011      	movs	r1, r2
 800334a:	0018      	movs	r0, r3
 800334c:	f7ff fed2 	bl	80030f4 <timer_set>
		Sensor_Tmp->state = _SENSOR_SENT_DONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	701a      	strb	r2, [r3, #0]
		break;
 8003356:	e060      	b.n	800341a <CapSS_Task+0x17a>
		if ((HAL_GetTick() - count_systick) > 15 /*ms*/)
 8003358:	f003 fc1a 	bl	8006b90 <HAL_GetTick>
 800335c:	0002      	movs	r2, r0
 800335e:	4b35      	ldr	r3, [pc, #212]	; (8003434 <CapSS_Task+0x194>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d955      	bls.n	8003414 <CapSS_Task+0x174>
			Sensor_Tmp->state = _SENSOR_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2203      	movs	r2, #3
 800336c:	701a      	strb	r2, [r3, #0]
			CapSS_TxSignal_SetIn(CapSS_selected);
 800336e:	4b33      	ldr	r3, [pc, #204]	; (800343c <CapSS_Task+0x19c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	0018      	movs	r0, r3
 8003374:	f7ff ff44 	bl	8003200 <CapSS_TxSignal_SetIn>
		break;
 8003378:	e04c      	b.n	8003414 <CapSS_Task+0x174>
		if (timer_expired(&_timer_wait_sensor))
 800337a:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <CapSS_Task+0x198>)
 800337c:	0018      	movs	r0, r3
 800337e:	f7ff fee3 	bl	8003148 <timer_expired>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d048      	beq.n	8003418 <CapSS_Task+0x178>
			timer_stop(&_timer_wait_sensor);
 8003386:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <CapSS_Task+0x198>)
 8003388:	0018      	movs	r0, r3
 800338a:	f7ff ff03 	bl	8003194 <timer_stop>
			if (Sensor_Tmp->command == _SS_CALIB_BYTE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	2b60      	cmp	r3, #96	; 0x60
 8003394:	d103      	bne.n	800339e <CapSS_Task+0xfe>
				Condition_nummer = _CAL_PULSE_NUM;
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <CapSS_Task+0x1a0>)
 8003398:	220a      	movs	r2, #10
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e006      	b.n	80033ac <CapSS_Task+0x10c>
			else if (Sensor_Tmp->command == _SS_CHECKSTT_BYTE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	791b      	ldrb	r3, [r3, #4]
 80033a2:	2b6f      	cmp	r3, #111	; 0x6f
 80033a4:	d102      	bne.n	80033ac <CapSS_Task+0x10c>
				Condition_nummer = _CHECKSTT_PULSE_NUM;
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <CapSS_Task+0x1a0>)
 80033a8:	2205      	movs	r2, #5
 80033aa:	701a      	strb	r2, [r3, #0]
			if (_LIMIT(Sensor_Tmp->pulseCnt, Condition_nummer - 4, Condition_nummer + 4))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	001a      	movs	r2, r3
 80033b4:	4b22      	ldr	r3, [pc, #136]	; (8003440 <CapSS_Task+0x1a0>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	3b04      	subs	r3, #4
 80033ba:	429a      	cmp	r2, r3
 80033bc:	db0f      	blt.n	80033de <CapSS_Task+0x13e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	785b      	ldrb	r3, [r3, #1]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	001a      	movs	r2, r3
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <CapSS_Task+0x1a0>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	3304      	adds	r3, #4
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dc06      	bgt.n	80033de <CapSS_Task+0x13e>
				Sensor_Tmp->state = _SENSOR_SUCESS;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2205      	movs	r2, #5
 80033d4:	701a      	strb	r2, [r3, #0]
				Sensor_Tmp->connectStt = _PASS;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	709a      	strb	r2, [r3, #2]
		break;
 80033dc:	e01c      	b.n	8003418 <CapSS_Task+0x178>
				if (--Sensor_Tmp->retry_connect == 0)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	795b      	ldrb	r3, [r3, #5]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	715a      	strb	r2, [r3, #5]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	795b      	ldrb	r3, [r3, #5]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <CapSS_Task+0x168>
					Sensor_Tmp->state = _SENSOR_FAIL; // must Clear then continous
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2204      	movs	r2, #4
 80033f6:	701a      	strb	r2, [r3, #0]
					if (Sensor_Tmp->command == _SS_CHECKSTT_BYTE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	791b      	ldrb	r3, [r3, #4]
 80033fc:	2b6f      	cmp	r3, #111	; 0x6f
 80033fe:	d10b      	bne.n	8003418 <CapSS_Task+0x178>
						Sensor_Tmp->connectStt = _FAIL; // debug_msg("=>FAIL");
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	709a      	strb	r2, [r3, #2]
		break;
 8003406:	e007      	b.n	8003418 <CapSS_Task+0x178>
					Sensor_Tmp->state = _SENSOR_SENT_START; // must Clear then continous
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
		break;
 800340e:	e003      	b.n	8003418 <CapSS_Task+0x178>
		break;
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	e002      	b.n	800341a <CapSS_Task+0x17a>
		break;
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	e000      	b.n	800341a <CapSS_Task+0x17a>
		break;
 8003418:	46c0      	nop			; (mov r8, r8)
	}

	CapSS_Get_Result(Sensor_Tmp);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	0018      	movs	r0, r3
 800341e:	f000 f811 	bl	8003444 <CapSS_Get_Result>
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	2000029e 	.word	0x2000029e
 8003430:	200002b8 	.word	0x200002b8
 8003434:	200002c0 	.word	0x200002c0
 8003438:	200002a0 	.word	0x200002a0
 800343c:	2000029c 	.word	0x2000029c
 8003440:	200002c4 	.word	0x200002c4

08003444 <CapSS_Get_Result>:

void CapSS_Get_Result(CapSen_Struct_t *Sensor_Tmp)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	if (!_LIMIT(Sensor_Tmp->state, _SENSOR_FAIL, _SENSOR_SUCESS))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d955      	bls.n	8003500 <CapSS_Get_Result+0xbc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d851      	bhi.n	8003500 <CapSS_Get_Result+0xbc>
		return;

	switch (Sensor_Tmp->command)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	791b      	ldrb	r3, [r3, #4]
 8003460:	2b60      	cmp	r3, #96	; 0x60
 8003462:	d011      	beq.n	8003488 <CapSS_Get_Result+0x44>
 8003464:	2b6f      	cmp	r3, #111	; 0x6f
 8003466:	d13f      	bne.n	80034e8 <CapSS_Get_Result+0xa4>
	{
	case _SS_CHECKSTT_BYTE:
		if (Sensor_Tmp->state == _SENSOR_SUCESS)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d103      	bne.n	8003478 <CapSS_Get_Result+0x34>
			Sensor_Tmp->connectStt = _PASS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	709a      	strb	r2, [r3, #2]
		else if (Sensor_Tmp->state == _SENSOR_FAIL)
			Sensor_Tmp->connectStt = _FAIL;
		break;
 8003476:	e039      	b.n	80034ec <CapSS_Get_Result+0xa8>
		else if (Sensor_Tmp->state == _SENSOR_FAIL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d135      	bne.n	80034ec <CapSS_Get_Result+0xa8>
			Sensor_Tmp->connectStt = _FAIL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	709a      	strb	r2, [r3, #2]
		break;
 8003486:	e031      	b.n	80034ec <CapSS_Get_Result+0xa8>
	case _SS_CALIB_BYTE:

		if (Sensor_Tmp->state == _SENSOR_SUCESS)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b05      	cmp	r3, #5
 800348e:	d111      	bne.n	80034b4 <CapSS_Get_Result+0x70>
		{
			CapSS_CalibSucess++;
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <CapSS_Get_Result+0xc4>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <CapSS_Get_Result+0xc4>)
 800349a:	701a      	strb	r2, [r3, #0]
			if(Sensor_Tmp->_cb_calibResult){
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d016      	beq.n	80034d2 <CapSS_Get_Result+0x8e>
			  Sensor_Tmp->_cb_calibResult(_PASS);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2001      	movs	r0, #1
 80034aa:	4798      	blx	r3
			  Sensor_Tmp->connectStt = _PASS;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	709a      	strb	r2, [r3, #2]
 80034b2:	e00e      	b.n	80034d2 <CapSS_Get_Result+0x8e>
			}
		}
		else if (Sensor_Tmp->state == _SENSOR_FAIL){
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10a      	bne.n	80034d2 <CapSS_Get_Result+0x8e>
			if(Sensor_Tmp->_cb_calibResult){
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d006      	beq.n	80034d2 <CapSS_Get_Result+0x8e>
			  Sensor_Tmp->_cb_calibResult(_FAIL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2000      	movs	r0, #0
 80034ca:	4798      	blx	r3
			  Sensor_Tmp->connectStt = _FAIL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	709a      	strb	r2, [r3, #2]
			}
		}

		// Khi Gap Sensor cuoi cung
		if (CapSS_selected == (_CAPSS_ID_TOTAL - 1))
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <CapSS_Get_Result+0xc8>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <CapSS_Get_Result+0xac>
			else
			{
			    //calib fail
				//LED1_Blink_CALIBSS_OK();
			}
			CapSS_CalibSucess = 0;
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <CapSS_Get_Result+0xc4>)
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
			CapSS_selected = 0;
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <CapSS_Get_Result+0xc8>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
		else
		{
			//CapSS_selected++;
		}

		break;
 80034e6:	e003      	b.n	80034f0 <CapSS_Get_Result+0xac>
	default:
		break;
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	e002      	b.n	80034f2 <CapSS_Get_Result+0xae>
		break;
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	e000      	b.n	80034f2 <CapSS_Get_Result+0xae>
		break;
 80034f0:	46c0      	nop			; (mov r8, r8)
	}
	Sensor_Tmp->command = 0x00;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	711a      	strb	r2, [r3, #4]
	Sensor_Tmp->state = _SENSOR_CLEAR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
	return;
 80034fe:	e000      	b.n	8003502 <CapSS_Get_Result+0xbe>
		return;
 8003500:	46c0      	nop			; (mov r8, r8)
}
 8003502:	46bd      	mov	sp, r7
 8003504:	b002      	add	sp, #8
 8003506:	bd80      	pop	{r7, pc}
 8003508:	2000029d 	.word	0x2000029d
 800350c:	2000029c 	.word	0x2000029c

08003510 <CapSS_CheckPulse_Systick>:

void CapSS_CheckPulse_Systick(uint8_t Pin_stt, CapSen_Struct_t *Sensor_Tmp)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	0002      	movs	r2, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	701a      	strb	r2, [r3, #0]
	static uint8_t Pin_stt_old;
	static uint32_t tickstart;

	if (Sensor_Tmp->state != _SENSOR_BUSY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d004      	beq.n	8003530 <CapSS_CheckPulse_Systick+0x20>
	{
		Pin_stt_old = Pin_stt;
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <CapSS_CheckPulse_Systick+0x10c>)
 8003528:	1dfa      	adds	r2, r7, #7
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	701a      	strb	r2, [r3, #0]
		return;
 800352e:	e071      	b.n	8003614 <CapSS_CheckPulse_Systick+0x104>
	}

	if (Pin_stt == 0 && Pin_stt_old == 1)
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d120      	bne.n	800357a <CapSS_CheckPulse_Systick+0x6a>
 8003538:	4b38      	ldr	r3, [pc, #224]	; (800361c <CapSS_CheckPulse_Systick+0x10c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d11c      	bne.n	800357a <CapSS_CheckPulse_Systick+0x6a>
	{
		// falling
		if (Check_State == _CHECK_CLEAR)
 8003540:	4b37      	ldr	r3, [pc, #220]	; (8003620 <CapSS_CheckPulse_Systick+0x110>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d108      	bne.n	800355a <CapSS_CheckPulse_Systick+0x4a>
		{
			tickstart = HAL_GetTick();
 8003548:	f003 fb22 	bl	8006b90 <HAL_GetTick>
 800354c:	0002      	movs	r2, r0
 800354e:	4b35      	ldr	r3, [pc, #212]	; (8003624 <CapSS_CheckPulse_Systick+0x114>)
 8003550:	601a      	str	r2, [r3, #0]
			Check_State = _CHECK_LO;
 8003552:	4b33      	ldr	r3, [pc, #204]	; (8003620 <CapSS_CheckPulse_Systick+0x110>)
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
		if (Check_State == _CHECK_CLEAR)
 8003558:	e057      	b.n	800360a <CapSS_CheckPulse_Systick+0xfa>
		}
		else if (Check_State == _CHECK_HI)
 800355a:	4b31      	ldr	r3, [pc, #196]	; (8003620 <CapSS_CheckPulse_Systick+0x110>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d153      	bne.n	800360a <CapSS_CheckPulse_Systick+0xfa>
		{
			if ((HAL_GetTick() - tickstart) < 3)
 8003562:	f003 fb15 	bl	8006b90 <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <CapSS_CheckPulse_Systick+0x114>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d84b      	bhi.n	800360a <CapSS_CheckPulse_Systick+0xfa>
				Check_State = _CHECK_CLEAR; // bo qua
 8003572:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <CapSS_CheckPulse_Systick+0x110>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
		if (Check_State == _CHECK_CLEAR)
 8003578:	e047      	b.n	800360a <CapSS_CheckPulse_Systick+0xfa>
		}
	}
	else if (Pin_stt == 1 && Pin_stt_old == 0)
 800357a:	1dfb      	adds	r3, r7, #7
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d124      	bne.n	80035cc <CapSS_CheckPulse_Systick+0xbc>
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <CapSS_CheckPulse_Systick+0x10c>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d120      	bne.n	80035cc <CapSS_CheckPulse_Systick+0xbc>
	{
		// rising
		if (Check_State == _CHECK_LO)
 800358a:	4b25      	ldr	r3, [pc, #148]	; (8003620 <CapSS_CheckPulse_Systick+0x110>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d13c      	bne.n	800360c <CapSS_CheckPulse_Systick+0xfc>
		{
			if (_LIMIT((HAL_GetTick() - tickstart), 3 /*ms*/, 7 /*ms*/))
 8003592:	f003 fafd 	bl	8006b90 <HAL_GetTick>
 8003596:	0002      	movs	r2, r0
 8003598:	4b22      	ldr	r3, [pc, #136]	; (8003624 <CapSS_CheckPulse_Systick+0x114>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d910      	bls.n	80035c4 <CapSS_CheckPulse_Systick+0xb4>
 80035a2:	f003 faf5 	bl	8006b90 <HAL_GetTick>
 80035a6:	0002      	movs	r2, r0
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <CapSS_CheckPulse_Systick+0x114>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b07      	cmp	r3, #7
 80035b0:	d808      	bhi.n	80035c4 <CapSS_CheckPulse_Systick+0xb4>
			{
				tickstart = HAL_GetTick();
 80035b2:	f003 faed 	bl	8006b90 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <CapSS_CheckPulse_Systick+0x114>)
 80035ba:	601a      	str	r2, [r3, #0]
				Check_State = _CHECK_HI;
 80035bc:	4b18      	ldr	r3, [pc, #96]	; (8003620 <CapSS_CheckPulse_Systick+0x110>)
 80035be:	2202      	movs	r2, #2
 80035c0:	701a      	strb	r2, [r3, #0]
		if (Check_State == _CHECK_LO)
 80035c2:	e023      	b.n	800360c <CapSS_CheckPulse_Systick+0xfc>
			}
			else
			{
				Check_State = _CHECK_CLEAR;
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <CapSS_CheckPulse_Systick+0x110>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
		if (Check_State == _CHECK_LO)
 80035ca:	e01f      	b.n	800360c <CapSS_CheckPulse_Systick+0xfc>
			}
		}
	}
	else if (Pin_stt == 1 && Pin_stt_old == 1)
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d11b      	bne.n	800360c <CapSS_CheckPulse_Systick+0xfc>
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <CapSS_CheckPulse_Systick+0x10c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d117      	bne.n	800360c <CapSS_CheckPulse_Systick+0xfc>
	{
		if (Check_State == _CHECK_HI)
 80035dc:	4b10      	ldr	r3, [pc, #64]	; (8003620 <CapSS_CheckPulse_Systick+0x110>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d113      	bne.n	800360c <CapSS_CheckPulse_Systick+0xfc>
		{
			if (((HAL_GetTick() - tickstart) >= 3))
 80035e4:	f003 fad4 	bl	8006b90 <HAL_GetTick>
 80035e8:	0002      	movs	r2, r0
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <CapSS_CheckPulse_Systick+0x114>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d90b      	bls.n	800360c <CapSS_CheckPulse_Systick+0xfc>
			{
				Sensor_Tmp->pulseCnt++;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	705a      	strb	r2, [r3, #1]
				Check_State = _CHECK_CLEAR;
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <CapSS_CheckPulse_Systick+0x110>)
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e000      	b.n	800360c <CapSS_CheckPulse_Systick+0xfc>
		if (Check_State == _CHECK_CLEAR)
 800360a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	Pin_stt_old = Pin_stt;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <CapSS_CheckPulse_Systick+0x10c>)
 800360e:	1dfa      	adds	r2, r7, #7
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	701a      	strb	r2, [r3, #0]
}
 8003614:	46bd      	mov	sp, r7
 8003616:	b002      	add	sp, #8
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	200002c5 	.word	0x200002c5
 8003620:	2000029e 	.word	0x2000029e
 8003624:	200002c8 	.word	0x200002c8

08003628 <CapSS_periodic_poll>:



uint16_t SenLogicCnt[3];
void CapSS_periodic_poll(CapSen_Struct_t *Sensor_Tmp)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af02      	add	r7, sp, #8
 800362e:	6078      	str	r0, [r7, #4]
    CapSS_CheckPulse_Systick(WATERSS_SIGNAL_STT, Sensor_Tmp);
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4a12      	ldr	r2, [pc, #72]	; (8003680 <CapSS_periodic_poll+0x58>)
 8003636:	0019      	movs	r1, r3
 8003638:	0010      	movs	r0, r2
 800363a:	f005 fb7f 	bl	8008d3c <HAL_GPIO_ReadPin>
 800363e:	0003      	movs	r3, r0
 8003640:	001a      	movs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	0019      	movs	r1, r3
 8003646:	0010      	movs	r0, r2
 8003648:	f7ff ff62 	bl	8003510 <CapSS_CheckPulse_Systick>
    Sensor_Tmp->logicStt = INPUT_readHanlde(SSWATER_Logic_PinStt,&SenLogicCnt[0],&SenLogicCnt[1],20,&SenLogicCnt[2],20);
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <CapSS_periodic_poll+0x5c>)
 8003652:	0019      	movs	r1, r3
 8003654:	0010      	movs	r0, r2
 8003656:	f005 fb71 	bl	8008d3c <HAL_GPIO_ReadPin>
 800365a:	0003      	movs	r3, r0
 800365c:	0018      	movs	r0, r3
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <CapSS_periodic_poll+0x60>)
 8003660:	490a      	ldr	r1, [pc, #40]	; (800368c <CapSS_periodic_poll+0x64>)
 8003662:	2314      	movs	r3, #20
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <CapSS_periodic_poll+0x68>)
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2314      	movs	r3, #20
 800366c:	f7ff fcd0 	bl	8003010 <INPUT_readHanlde>
 8003670:	0003      	movs	r3, r0
 8003672:	001a      	movs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	70da      	strb	r2, [r3, #3]
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}
 8003680:	50000400 	.word	0x50000400
 8003684:	50000800 	.word	0x50000800
 8003688:	200002b2 	.word	0x200002b2
 800368c:	200002b0 	.word	0x200002b0
 8003690:	200002b4 	.word	0x200002b4

08003694 <UV_CAPSS_putc>:
		_UV_CAPSS_TIMER_STOP();
	}
}

void UV_CAPSS_putc(char c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	0002      	movs	r2, r0
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	701a      	strb	r2, [r3, #0]
	uint32_t start_stick;

	start_stick = HAL_GetTick();
 80036a0:	f003 fa76 	bl	8006b90 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	60fb      	str	r3, [r7, #12]
	while (Capuv_status & (1 << _UV_CAPSS_TX_BUSYV))
 80036a8:	e006      	b.n	80036b8 <UV_CAPSS_putc+0x24>
	{
		if ((HAL_GetTick() - start_stick) > 100 /*ms*/)
 80036aa:	f003 fa71 	bl	8006b90 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b64      	cmp	r3, #100	; 0x64
 80036b6:	d832      	bhi.n	800371e <UV_CAPSS_putc+0x8a>
	while (Capuv_status & (1 << _UV_CAPSS_TX_BUSYV))
 80036b8:	4b1c      	ldr	r3, [pc, #112]	; (800372c <UV_CAPSS_putc+0x98>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	001a      	movs	r2, r3
 80036be:	2340      	movs	r3, #64	; 0x40
 80036c0:	4013      	ands	r3, r2
 80036c2:	d1f2      	bne.n	80036aa <UV_CAPSS_putc+0x16>
			return;
	} // wait while UV_CAPSS is busy with sending
	/************************/
	Capuv_status = (1 << _UV_CAPSS_TX_BUSYV); // set TX busy flag (clear all others)
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <UV_CAPSS_putc+0x98>)
 80036c6:	2240      	movs	r2, #64	; 0x40
 80036c8:	701a      	strb	r2, [r3, #0]
	Capuv_buffer = c;						  // copy data to buffer
 80036ca:	4b19      	ldr	r3, [pc, #100]	; (8003730 <UV_CAPSS_putc+0x9c>)
 80036cc:	1dfa      	adds	r2, r7, #7
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	701a      	strb	r2, [r3, #0]
	Capuv_bit_nbr = 0xFF;					  // erase bit counter (set all bits)
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <UV_CAPSS_putc+0xa0>)
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	701a      	strb	r2, [r3, #0]
	//  Interrupt_TC2_ClearPending();
	_UV_CAPSS_TIMER_RESET_CNT();
 80036d8:	4b17      	ldr	r3, [pc, #92]	; (8003738 <UV_CAPSS_putc+0xa4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	625a      	str	r2, [r3, #36]	; 0x24
	// Set Priority !!
	_UV_CAPSS_TIMER_SET();
 80036e0:	4b15      	ldr	r3, [pc, #84]	; (8003738 <UV_CAPSS_putc+0xa4>)
 80036e2:	0018      	movs	r0, r3
 80036e4:	f007 f9cc 	bl	800aa80 <HAL_TIM_Base_Start_IT>

	TX_V_PRINT_WATER(0); // logic 1 (high level = STOP TX)
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4813      	ldr	r0, [pc, #76]	; (800373c <UV_CAPSS_putc+0xa8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	0019      	movs	r1, r3
 80036f2:	f005 fb40 	bl	8008d76 <HAL_GPIO_WritePin>

	start_stick = HAL_GetTick();
 80036f6:	f003 fa4b 	bl	8006b90 <HAL_GetTick>
 80036fa:	0003      	movs	r3, r0
 80036fc:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_IT_SOURCE(&_UV_CAPSS_TIMER, TIM_IT_UPDATE) == SET)
 80036fe:	e006      	b.n	800370e <UV_CAPSS_putc+0x7a>
	{
		if ((HAL_GetTick() - start_stick) > 100 /*ms*/)
 8003700:	f003 fa46 	bl	8006b90 <HAL_GetTick>
 8003704:	0002      	movs	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	; 0x64
 800370c:	d809      	bhi.n	8003722 <UV_CAPSS_putc+0x8e>
	while (__HAL_TIM_GET_IT_SOURCE(&_UV_CAPSS_TIMER, TIM_IT_UPDATE) == SET)
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <UV_CAPSS_putc+0xa4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	4013      	ands	r3, r2
 8003718:	2b01      	cmp	r3, #1
 800371a:	d0f1      	beq.n	8003700 <UV_CAPSS_putc+0x6c>
 800371c:	e002      	b.n	8003724 <UV_CAPSS_putc+0x90>
			return;
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	e000      	b.n	8003724 <UV_CAPSS_putc+0x90>
			return;
 8003722:	46c0      	nop			; (mov r8, r8)
	}
}
 8003724:	46bd      	mov	sp, r7
 8003726:	b004      	add	sp, #16
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	200002ce 	.word	0x200002ce
 8003730:	200002cc 	.word	0x200002cc
 8003734:	200002cd 	.word	0x200002cd
 8003738:	200006a8 	.word	0x200006a8
 800373c:	50000400 	.word	0x50000400

08003740 <UV_CAPSS_putArr>:
			return;
	}
}

void UV_CAPSS_putArr(unsigned char array[], unsigned int byteCount)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
	unsigned char arrayIndex;

	for (arrayIndex = 0u; arrayIndex < byteCount; arrayIndex++)
 800374a:	230f      	movs	r3, #15
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e00d      	b.n	8003770 <UV_CAPSS_putArr+0x30>
	{
		UV_CAPSS_putc(array[arrayIndex]);
 8003754:	240f      	movs	r4, #15
 8003756:	193b      	adds	r3, r7, r4
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff ff97 	bl	8003694 <UV_CAPSS_putc>
	for (arrayIndex = 0u; arrayIndex < byteCount; arrayIndex++)
 8003766:	193b      	adds	r3, r7, r4
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	193b      	adds	r3, r7, r4
 800376c:	3201      	adds	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	230f      	movs	r3, #15
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d8eb      	bhi.n	8003754 <UV_CAPSS_putArr+0x14>
	}
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b005      	add	sp, #20
 8003784:	bd90      	pop	{r4, r7, pc}
	...

08003788 <UV_CAPSS_periodic_poll>:

void UV_CAPSS_periodic_poll(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
	Capuv_bit_nbr++;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <UV_CAPSS_periodic_poll+0x74>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	3301      	adds	r3, #1
 8003792:	b2da      	uxtb	r2, r3
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <UV_CAPSS_periodic_poll+0x74>)
 8003796:	701a      	strb	r2, [r3, #0]
	/*** check what are we doing: send or receive ? ***/
	if (Capuv_status & (1 << _UV_CAPSS_TX_BUSYV)) // transmit process
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <UV_CAPSS_periodic_poll+0x78>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	001a      	movs	r2, r3
 800379e:	2340      	movs	r3, #64	; 0x40
 80037a0:	4013      	ands	r3, r2
 80037a2:	d027      	beq.n	80037f4 <UV_CAPSS_periodic_poll+0x6c>
	{
		if (Capuv_bit_nbr < 8) // data bits (bit 0...7)
 80037a4:	4b15      	ldr	r3, [pc, #84]	; (80037fc <UV_CAPSS_periodic_poll+0x74>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b07      	cmp	r3, #7
 80037aa:	d811      	bhi.n	80037d0 <UV_CAPSS_periodic_poll+0x48>
		{
			TX_V_PRINT_WATER(Capuv_buffer & 0x01);
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <UV_CAPSS_periodic_poll+0x7c>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2201      	movs	r2, #1
 80037b2:	4013      	ands	r3, r2
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4813      	ldr	r0, [pc, #76]	; (8003808 <UV_CAPSS_periodic_poll+0x80>)
 80037bc:	0019      	movs	r1, r3
 80037be:	f005 fada 	bl	8008d76 <HAL_GPIO_WritePin>
			Capuv_buffer >>= 1; // next bit, please !
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <UV_CAPSS_periodic_poll+0x7c>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <UV_CAPSS_periodic_poll+0x7c>)
 80037cc:	701a      	strb	r2, [r3, #0]
				_UV_CAPSS_TIMER_STOP();
				Capuv_status = 0x00; // clear UV_CAPSS status register
			}
		}
	}
}
 80037ce:	e011      	b.n	80037f4 <UV_CAPSS_periodic_poll+0x6c>
			TX_V_PRINT_WATER(1);
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	480c      	ldr	r0, [pc, #48]	; (8003808 <UV_CAPSS_periodic_poll+0x80>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	0019      	movs	r1, r3
 80037da:	f005 facc 	bl	8008d76 <HAL_GPIO_WritePin>
			if (Capuv_bit_nbr >= _UV_CAPSS_STOP) // ready! stop bit(s) sent
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <UV_CAPSS_periodic_poll+0x74>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d906      	bls.n	80037f4 <UV_CAPSS_periodic_poll+0x6c>
				_UV_CAPSS_TIMER_STOP();
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <UV_CAPSS_periodic_poll+0x84>)
 80037e8:	0018      	movs	r0, r3
 80037ea:	f007 f99f 	bl	800ab2c <HAL_TIM_Base_Stop_IT>
				Capuv_status = 0x00; // clear UV_CAPSS status register
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <UV_CAPSS_periodic_poll+0x78>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	200002cd 	.word	0x200002cd
 8003800:	200002ce 	.word	0x200002ce
 8003804:	200002cc 	.word	0x200002cc
 8003808:	50000400 	.word	0x50000400
 800380c:	200006a8 	.word	0x200006a8

08003810 <delay_ms>:
#include "myHeader.h"

#define WRD() HAL_IWDG_Refresh(&hiwdg)

void delay_ms(uint32_t ms)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  WRD();
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <delay_ms+0x20>)
 800381a:	0018      	movs	r0, r3
 800381c:	f006 fa8e 	bl	8009d3c <HAL_IWDG_Refresh>
  HAL_Delay(ms);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f003 f9be 	bl	8006ba4 <HAL_Delay>
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}
 8003830:	2000064c 	.word	0x2000064c

08003834 <Get_Edge>:
  } while ((str2[i] != 0) && (++i < n));
  str1[i] = 0;
}

Edge_ReturnStatus Get_Edge(uint8_t Pin_stt,uint8_t *PinOlder_stt)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	0002      	movs	r2, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	1dfb      	adds	r3, r7, #7
 8003840:	701a      	strb	r2, [r3, #0]
  uint8_t result;

  if (Pin_stt == *PinOlder_stt)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	1dfa      	adds	r2, r7, #7
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d101      	bne.n	8003852 <Get_Edge+0x1e>
    return _NONE;
 800384e:	2300      	movs	r3, #0
 8003850:	e013      	b.n	800387a <Get_Edge+0x46>

  if (Pin_stt == 0)
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <Get_Edge+0x30>
    result = _FALLING;
 800385a:	230f      	movs	r3, #15
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2202      	movs	r2, #2
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e003      	b.n	800386c <Get_Edge+0x38>
  else
    result = _RISING;
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]

  *PinOlder_stt = Pin_stt;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	1dfa      	adds	r2, r7, #7
 8003870:	7812      	ldrb	r2, [r2, #0]
 8003872:	701a      	strb	r2, [r3, #0]
  return result;
 8003874:	230f      	movs	r3, #15
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	781b      	ldrb	r3, [r3, #0]
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b004      	add	sp, #16
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <Systick_ReadInput_poll>:

//==================================== HAM Input Co ban ==================================================================
LogicStatus Systick_ReadInput_poll(uint8_t InputIndex, GPIO_PinState Input, uint16_t LowSample_ms, uint16_t HighSample_ms)
{
 8003884:	b5b0      	push	{r4, r5, r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	0005      	movs	r5, r0
 800388c:	000c      	movs	r4, r1
 800388e:	0010      	movs	r0, r2
 8003890:	0019      	movs	r1, r3
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	1c2a      	adds	r2, r5, #0
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	1dbb      	adds	r3, r7, #6
 800389a:	1c22      	adds	r2, r4, #0
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	1c02      	adds	r2, r0, #0
 80038a2:	801a      	strh	r2, [r3, #0]
 80038a4:	1cbb      	adds	r3, r7, #2
 80038a6:	1c0a      	adds	r2, r1, #0
 80038a8:	801a      	strh	r2, [r3, #0]
  static uint16_t Input_HighCnt[_IN_MAX] = {0};
  static uint16_t Input_LowCnt[_IN_MAX] = {0};
  static LogicStatus ReturnVal[_IN_MAX] = {_HIGH};

  if (Input == GPIO_PIN_RESET)
 80038aa:	1dbb      	adds	r3, r7, #6
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d122      	bne.n	80038f8 <Systick_ReadInput_poll+0x74>
  {
    Input_HighCnt[InputIndex] = 0;
 80038b2:	1dfb      	adds	r3, r7, #7
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	4b27      	ldr	r3, [pc, #156]	; (8003954 <Systick_ReadInput_poll+0xd0>)
 80038b8:	0052      	lsls	r2, r2, #1
 80038ba:	2100      	movs	r1, #0
 80038bc:	52d1      	strh	r1, [r2, r3]
    if (++Input_LowCnt[InputIndex] >= LowSample_ms)
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	4a25      	ldr	r2, [pc, #148]	; (8003958 <Systick_ReadInput_poll+0xd4>)
 80038c4:	0059      	lsls	r1, r3, #1
 80038c6:	5a8a      	ldrh	r2, [r1, r2]
 80038c8:	3201      	adds	r2, #1
 80038ca:	b290      	uxth	r0, r2
 80038cc:	4a22      	ldr	r2, [pc, #136]	; (8003958 <Systick_ReadInput_poll+0xd4>)
 80038ce:	0059      	lsls	r1, r3, #1
 80038d0:	5288      	strh	r0, [r1, r2]
 80038d2:	4a21      	ldr	r2, [pc, #132]	; (8003958 <Systick_ReadInput_poll+0xd4>)
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	5a9b      	ldrh	r3, [r3, r2]
 80038d8:	1d3a      	adds	r2, r7, #4
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d831      	bhi.n	8003944 <Systick_ReadInput_poll+0xc0>
    {
      Input_LowCnt[InputIndex] = 0;
 80038e0:	1dfb      	adds	r3, r7, #7
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <Systick_ReadInput_poll+0xd4>)
 80038e6:	0052      	lsls	r2, r2, #1
 80038e8:	2100      	movs	r1, #0
 80038ea:	52d1      	strh	r1, [r2, r3]
      ReturnVal[InputIndex] = _LOW;
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	4a1a      	ldr	r2, [pc, #104]	; (800395c <Systick_ReadInput_poll+0xd8>)
 80038f2:	2100      	movs	r1, #0
 80038f4:	54d1      	strb	r1, [r2, r3]
 80038f6:	e025      	b.n	8003944 <Systick_ReadInput_poll+0xc0>
    }
  }
  else if (Input == GPIO_PIN_SET)
 80038f8:	1dbb      	adds	r3, r7, #6
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d121      	bne.n	8003944 <Systick_ReadInput_poll+0xc0>
  {
    Input_LowCnt[InputIndex] = 0;
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <Systick_ReadInput_poll+0xd4>)
 8003906:	0052      	lsls	r2, r2, #1
 8003908:	2100      	movs	r1, #0
 800390a:	52d1      	strh	r1, [r2, r3]
    if (++Input_HighCnt[InputIndex] >= HighSample_ms)
 800390c:	1dfb      	adds	r3, r7, #7
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	4a10      	ldr	r2, [pc, #64]	; (8003954 <Systick_ReadInput_poll+0xd0>)
 8003912:	0059      	lsls	r1, r3, #1
 8003914:	5a8a      	ldrh	r2, [r1, r2]
 8003916:	3201      	adds	r2, #1
 8003918:	b290      	uxth	r0, r2
 800391a:	4a0e      	ldr	r2, [pc, #56]	; (8003954 <Systick_ReadInput_poll+0xd0>)
 800391c:	0059      	lsls	r1, r3, #1
 800391e:	5288      	strh	r0, [r1, r2]
 8003920:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <Systick_ReadInput_poll+0xd0>)
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	5a9b      	ldrh	r3, [r3, r2]
 8003926:	1cba      	adds	r2, r7, #2
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d80a      	bhi.n	8003944 <Systick_ReadInput_poll+0xc0>
    {
      Input_HighCnt[InputIndex] = 0;
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <Systick_ReadInput_poll+0xd0>)
 8003934:	0052      	lsls	r2, r2, #1
 8003936:	2100      	movs	r1, #0
 8003938:	52d1      	strh	r1, [r2, r3]
      ReturnVal[InputIndex] = _HIGH;
 800393a:	1dfb      	adds	r3, r7, #7
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	4a07      	ldr	r2, [pc, #28]	; (800395c <Systick_ReadInput_poll+0xd8>)
 8003940:	2101      	movs	r1, #1
 8003942:	54d1      	strb	r1, [r2, r3]
    }
  }
  return ReturnVal[InputIndex];
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	4a04      	ldr	r2, [pc, #16]	; (800395c <Systick_ReadInput_poll+0xd8>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b002      	add	sp, #8
 8003952:	bdb0      	pop	{r4, r5, r7, pc}
 8003954:	200002d0 	.word	0x200002d0
 8003958:	200002dc 	.word	0x200002dc
 800395c:	20000000 	.word	0x20000000

08003960 <Flash_ReadDWord>:
	Value = *(__IO uint32_t *)ADR;
	return Value;
}

uint64_t Flash_ReadDWord(uint32_t ADR)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	uint64_t Value;
	Value = *(__IO uint64_t *)ADR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60ba      	str	r2, [r7, #8]
 8003970:	60fb      	str	r3, [r7, #12]
	return Value;
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	68fb      	ldr	r3, [r7, #12]
}
 8003976:	0010      	movs	r0, r2
 8003978:	0019      	movs	r1, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}

08003980 <Flash_WriteDWord>:

ResultStatus Flash_WriteDWord(uint64_t data64, uint32_t ADR_StartPage)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60b8      	str	r0, [r7, #8]
 8003988:	60f9      	str	r1, [r7, #12]
 800398a:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t eraseStt;
	int8_t	result;

	HAL_FLASH_Unlock();
 800398c:	f004 ff20 	bl	80087d0 <HAL_FLASH_Unlock>
	// Erase this page
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003990:	2114      	movs	r1, #20
 8003992:	187b      	adds	r3, r7, r1
 8003994:	2202      	movs	r2, #2
 8003996:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(ADR_StartPage); //=63
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	22f8      	movs	r2, #248	; 0xf8
 800399c:	0612      	lsls	r2, r2, #24
 800399e:	4694      	mov	ip, r2
 80039a0:	4463      	add	r3, ip
 80039a2:	0ada      	lsrs	r2, r3, #11
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	2201      	movs	r2, #1
 80039ac:	60da      	str	r2, [r3, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &eraseStt) == HAL_OK)
 80039ae:	2310      	movs	r3, #16
 80039b0:	18fa      	adds	r2, r7, r3
 80039b2:	187b      	adds	r3, r7, r1
 80039b4:	0011      	movs	r1, r2
 80039b6:	0018      	movs	r0, r3
 80039b8:	f004 ffb8 	bl	800892c <HAL_FLASHEx_Erase>
 80039bc:	1e03      	subs	r3, r0, #0
 80039be:	d10b      	bne.n	80039d8 <Flash_WriteDWord+0x58>
	{
		/*debug_msg("\nErase OK");*/
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,ADR_StartPage, data64) == HAL_OK)
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	2001      	movs	r0, #1
 80039c8:	f004 feb4 	bl	8008734 <HAL_FLASH_Program>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d103      	bne.n	80039d8 <Flash_WriteDWord+0x58>
			result = _TRUE;
 80039d0:	2327      	movs	r3, #39	; 0x27
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
	}
	HAL_FLASH_Lock();
 80039d8:	f004 ff1e 	bl	8008818 <HAL_FLASH_Lock>
	result = _FALSE;
 80039dc:	2127      	movs	r1, #39	; 0x27
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
	return result;
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	781b      	ldrb	r3, [r3, #0]
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b00a      	add	sp, #40	; 0x28
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <wireWriteRegister>:
/*!
    @brief  Sends a single command byte over I2C => ghi
*/
/**************************************************************************/
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af04      	add	r7, sp, #16
 80039f6:	0002      	movs	r2, r0
 80039f8:	1dfb      	adds	r3, r7, #7
 80039fa:	701a      	strb	r2, [r3, #0]
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	1c0a      	adds	r2, r1, #0
 8003a00:	801a      	strh	r2, [r3, #0]
	uint8_t i2c_temp[2];
	i2c_temp[0] = value>>8;
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	210c      	movs	r1, #12
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	701a      	strb	r2, [r3, #0]
	i2c_temp[1] = value;
 8003a12:	1d3b      	adds	r3, r7, #4
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Mem_Write(&_USER_DEFINE_I2C_INA219, INA219_ADDRESS<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 8003a1c:	1dfb      	adds	r3, r7, #7
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	4809      	ldr	r0, [pc, #36]	; (8003a48 <wireWriteRegister+0x58>)
 8003a24:	2301      	movs	r3, #1
 8003a26:	425b      	negs	r3, r3
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	187b      	adds	r3, r7, r1
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2301      	movs	r3, #1
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	f005 fb59 	bl	80090ec <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f003 f8b2 	bl	8006ba4 <HAL_Delay>
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b004      	add	sp, #16
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200005f8 	.word	0x200005f8

08003a4c <wireReadRegister>:
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af04      	add	r7, sp, #16
 8003a52:	0002      	movs	r2, r0
 8003a54:	6039      	str	r1, [r7, #0]
 8003a56:	1dfb      	adds	r3, r7, #7
 8003a58:	701a      	strb	r2, [r3, #0]
	uint8_t i2c_temp[2];
	HAL_I2C_Mem_Read(&_USER_DEFINE_I2C_INA219, INA219_ADDRESS<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 8003a5a:	1dfb      	adds	r3, r7, #7
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	4810      	ldr	r0, [pc, #64]	; (8003aa4 <wireReadRegister+0x58>)
 8003a62:	2301      	movs	r3, #1
 8003a64:	425b      	negs	r3, r3
 8003a66:	9302      	str	r3, [sp, #8]
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	240c      	movs	r4, #12
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2301      	movs	r3, #1
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	f005 fc67 	bl	8009348 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f003 f892 	bl	8006ba4 <HAL_Delay>
	*value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 8003a80:	0021      	movs	r1, r4
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	b21a      	sxth	r2, r3
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	b21b      	sxth	r3, r3
 8003a90:	4313      	orrs	r3, r2
 8003a92:	b21b      	sxth	r3, r3
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	801a      	strh	r2, [r3, #0]
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b005      	add	sp, #20
 8003aa0:	bd90      	pop	{r4, r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	200005f8 	.word	0x200005f8

08003aa8 <setCalibration_16V_400mA>:
    @brief set device to calibration which uses the highest precision for
      current measurement (0.1mA), at the expense of
      only supporting 16V at 400mA max.
*/
/**************************************************************************/
void setCalibration_16V_400mA(void) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0

  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 8192 (0x2000)

  ina219_calValue = 8192;
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <setCalibration_16V_400mA+0x44>)
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	0192      	lsls	r2, r2, #6
 8003ab4:	601a      	str	r2, [r3, #0]
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <setCalibration_16V_400mA+0x48>)
 8003ab8:	2214      	movs	r2, #20
 8003aba:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <setCalibration_16V_400mA+0x4c>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <setCalibration_16V_400mA+0x44>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	0019      	movs	r1, r3
 8003aca:	2005      	movs	r0, #5
 8003acc:	f7ff ff90 	bl	80039f0 <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8003ad0:	1dbb      	adds	r3, r7, #6
 8003ad2:	22a0      	movs	r2, #160	; 0xa0
 8003ad4:	32ff      	adds	r2, #255	; 0xff
 8003ad6:	801a      	strh	r2, [r3, #0]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	0019      	movs	r1, r3
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f7ff ff86 	bl	80039f0 <wireWriteRegister>
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	200002f0 	.word	0x200002f0
 8003af0:	200002e8 	.word	0x200002e8
 8003af4:	200002ec 	.word	0x200002ec

08003af8 <getvoltage_raw>:
/*!
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
    @return the raw bus voltage reading
*/
/**************************************************************************/
int16_t getvoltage_raw() {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_voltage, &value);
 8003afe:	1dbb      	adds	r3, r7, #6
 8003b00:	0019      	movs	r1, r3
 8003b02:	2002      	movs	r0, #2
 8003b04:	f7ff ffa2 	bl	8003a4c <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 8003b08:	1dbb      	adds	r3, r7, #6
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	08db      	lsrs	r3, r3, #3
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b21b      	sxth	r3, r3
}
 8003b16:	0018      	movs	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b002      	add	sp, #8
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <getCurrent_raw>:
/*!
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
    @return the raw current reading
*/
/**************************************************************************/
int16_t getCurrent_raw() {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <getCurrent_raw+0x2c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	2005      	movs	r0, #5
 8003b30:	f7ff ff5e 	bl	80039f0 <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 8003b34:	1dbb      	adds	r3, r7, #6
 8003b36:	0019      	movs	r1, r3
 8003b38:	2004      	movs	r0, #4
 8003b3a:	f7ff ff87 	bl	8003a4c <wireReadRegister>

  return (int16_t)value;
 8003b3e:	1dbb      	adds	r3, r7, #6
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	b21b      	sxth	r3, r3
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b002      	add	sp, #8
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200002f0 	.word	0x200002f0

08003b50 <getPower_raw>:
/*!
    @brief  Gets the raw power value (16-bit signed integer, so +-32767)
    @return raw power reading
*/
/**************************************************************************/
int16_t getPower_raw() {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <getPower_raw+0x2c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	2005      	movs	r0, #5
 8003b60:	f7ff ff46 	bl	80039f0 <wireWriteRegister>

  // Now we can safely read the POWER register!
  wireReadRegister(INA219_REG_POWER, &value);
 8003b64:	1dbb      	adds	r3, r7, #6
 8003b66:	0019      	movs	r1, r3
 8003b68:	2003      	movs	r0, #3
 8003b6a:	f7ff ff6f 	bl	8003a4c <wireReadRegister>

  return (int16_t)value;
 8003b6e:	1dbb      	adds	r3, r7, #6
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b21b      	sxth	r3, r3
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	200002f0 	.word	0x200002f0

08003b80 <getvoltage_V>:
/*!
    @brief  Gets the shunt voltage in volts
    @return the bus voltage converted to volts
*/
/**************************************************************************/
float getvoltage_V() {
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
  int16_t value = getvoltage_raw();
 8003b86:	1dbc      	adds	r4, r7, #6
 8003b88:	f7ff ffb6 	bl	8003af8 <getvoltage_raw>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	8023      	strh	r3, [r4, #0]
  return value * 0.001;
 8003b90:	1dbb      	adds	r3, r7, #6
 8003b92:	2200      	movs	r2, #0
 8003b94:	5e9b      	ldrsh	r3, [r3, r2]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7fe fdca 	bl	8002730 <__aeabi_i2d>
 8003b9c:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <getvoltage_V+0x3c>)
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <getvoltage_V+0x40>)
 8003ba0:	f7fd ff74 	bl	8001a8c <__aeabi_dmul>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	000b      	movs	r3, r1
 8003ba8:	0010      	movs	r0, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	f7fe fe5e 	bl	800286c <__aeabi_d2f>
 8003bb0:	1c03      	adds	r3, r0, #0
}
 8003bb2:	1c18      	adds	r0, r3, #0
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b003      	add	sp, #12
 8003bb8:	bd90      	pop	{r4, r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	d2f1a9fc 	.word	0xd2f1a9fc
 8003bc0:	3f50624d 	.word	0x3f50624d

08003bc4 <getCurrent_mA>:
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
    @return the current reading convereted to milliamps
*/
/**************************************************************************/
float getCurrent_mA() {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 8003bca:	f7ff ffa9 	bl	8003b20 <getCurrent_raw>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7fc ff8d 	bl	8000af0 <__aeabi_i2f>
 8003bd6:	1c03      	adds	r3, r0, #0
 8003bd8:	607b      	str	r3, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <getCurrent_mA+0x38>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7fc ffd4 	bl	8000b8c <__aeabi_ui2f>
 8003be4:	1c03      	adds	r3, r0, #0
 8003be6:	1c19      	adds	r1, r3, #0
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fc fc93 	bl	8000514 <__aeabi_fdiv>
 8003bee:	1c03      	adds	r3, r0, #0
 8003bf0:	607b      	str	r3, [r7, #4]
  return valueDec;
 8003bf2:	687b      	ldr	r3, [r7, #4]
}
 8003bf4:	1c18      	adds	r0, r3, #0
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200002e8 	.word	0x200002e8

08003c00 <getPower_mW>:
    @brief  Gets the power value in mW, taking into account the
            config settings and current LSB
    @return power reading converted to milliwatts
*/
/**************************************************************************/
float getPower_mW() {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
  float valueDec = getPower_raw();
 8003c06:	f7ff ffa3 	bl	8003b50 <getPower_raw>
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7fc ff6f 	bl	8000af0 <__aeabi_i2f>
 8003c12:	1c03      	adds	r3, r0, #0
 8003c14:	607b      	str	r3, [r7, #4]
  valueDec *= ina219_powerMultiplier_mW;
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <getPower_mW+0x38>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f7fc ffb6 	bl	8000b8c <__aeabi_ui2f>
 8003c20:	1c03      	adds	r3, r0, #0
 8003c22:	1c19      	adds	r1, r3, #0
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fc fe3d 	bl	80008a4 <__aeabi_fmul>
 8003c2a:	1c03      	adds	r3, r0, #0
 8003c2c:	607b      	str	r3, [r7, #4]
  return valueDec;
 8003c2e:	687b      	ldr	r3, [r7, #4]
}
 8003c30:	1c18      	adds	r0, r3, #0
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b002      	add	sp, #8
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	200002ec 	.word	0x200002ec

08003c3c <LEDG_BaseCtrl>:
	else
		LED2_OFF;
}

void LEDG_BaseCtrl(uint8_t ON_OFF)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	0002      	movs	r2, r0
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 8003c48:	1dfb      	adds	r3, r7, #7
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <LEDG_BaseCtrl+0x22>
		LEDG_ON;
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <LEDG_BaseCtrl+0x38>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	2120      	movs	r1, #32
 8003c56:	0018      	movs	r0, r3
 8003c58:	f005 f88d 	bl	8008d76 <HAL_GPIO_WritePin>
	else
		LEDG_OFF;
}
 8003c5c:	e005      	b.n	8003c6a <LEDG_BaseCtrl+0x2e>
		LEDG_OFF;
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <LEDG_BaseCtrl+0x38>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	2120      	movs	r1, #32
 8003c64:	0018      	movs	r0, r3
 8003c66:	f005 f886 	bl	8008d76 <HAL_GPIO_WritePin>
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	50000400 	.word	0x50000400

08003c78 <LEDB_BaseCtrl>:

void LEDB_BaseCtrl(uint8_t ON_OFF)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	0002      	movs	r2, r0
 8003c80:	1dfb      	adds	r3, r7, #7
 8003c82:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d006      	beq.n	8003c9a <LEDB_BaseCtrl+0x22>
		LEDB_ON;
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <LEDB_BaseCtrl+0x38>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2110      	movs	r1, #16
 8003c92:	0018      	movs	r0, r3
 8003c94:	f005 f86f 	bl	8008d76 <HAL_GPIO_WritePin>
	else
		LEDB_OFF;
}
 8003c98:	e005      	b.n	8003ca6 <LEDB_BaseCtrl+0x2e>
		LEDB_OFF;
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <LEDB_BaseCtrl+0x38>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	2110      	movs	r1, #16
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f005 f868 	bl	8008d76 <HAL_GPIO_WritePin>
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b002      	add	sp, #8
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	50000400 	.word	0x50000400

08003cb4 <BUZ_BaseCtrl>:

void BUZ_BaseCtrl(uint8_t ON_OFF)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	0002      	movs	r2, r0
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 8003cc0:	1dfb      	adds	r3, r7, #7
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <BUZ_BaseCtrl+0x24>
	  FAN_ON;
 8003cc8:	23a0      	movs	r3, #160	; 0xa0
 8003cca:	05db      	lsls	r3, r3, #23
 8003ccc:	2201      	movs	r2, #1
 8003cce:	2140      	movs	r1, #64	; 0x40
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f005 f850 	bl	8008d76 <HAL_GPIO_WritePin>
	else
	  FAN_OFF;
}
 8003cd6:	e006      	b.n	8003ce6 <BUZ_BaseCtrl+0x32>
	  FAN_OFF;
 8003cd8:	23a0      	movs	r3, #160	; 0xa0
 8003cda:	05db      	lsls	r3, r3, #23
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2140      	movs	r1, #64	; 0x40
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f005 f848 	bl	8008d76 <HAL_GPIO_WritePin>
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <RLSOL_BaseCtrl>:
	else
		SS_5V_CTRL_ON;
}

void RLSOL_BaseCtrl(uint8_t ON_OFF)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	1dfb      	adds	r3, r7, #7
 8003cfa:	701a      	strb	r2, [r3, #0]
    if (ON_OFF)
 8003cfc:	1dfb      	adds	r3, r7, #7
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d006      	beq.n	8003d12 <RLSOL_BaseCtrl+0x22>
      RL_SOL_COM_ON;
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <RLSOL_BaseCtrl+0x38>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f005 f833 	bl	8008d76 <HAL_GPIO_WritePin>
    else
      RL_SOL_COM_OFF;
}
 8003d10:	e005      	b.n	8003d1e <RLSOL_BaseCtrl+0x2e>
      RL_SOL_COM_OFF;
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <RLSOL_BaseCtrl+0x38>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	2140      	movs	r1, #64	; 0x40
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f005 f82c 	bl	8008d76 <HAL_GPIO_WritePin>
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	50000400 	.word	0x50000400

08003d2c <HAL_UART_TxCpltCallback>:
  #endif

}

//CallBack Interrupt when Tx buffer completed
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

  #ifdef _INIT_USE_UART1
       if(huart->Instance == huart1.Instance){
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <HAL_UART_TxCpltCallback+0x60>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d106      	bne.n	8003d4e <HAL_UART_TxCpltCallback+0x22>
	   if(callbackTxCptUart1IrqHandle)
 8003d40:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <HAL_UART_TxCpltCallback+0x64>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_UART_TxCpltCallback+0x22>
	     callbackTxCptUart1IrqHandle();
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_UART_TxCpltCallback+0x64>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4798      	blx	r3
       }
  #endif

  #ifdef _INIT_USE_UART2
       if(huart->Instance == huart2.Instance){
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_UART_TxCpltCallback+0x68>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d106      	bne.n	8003d68 <HAL_UART_TxCpltCallback+0x3c>
	     if(callbackTxCptUart2IrqHandle)
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <HAL_UART_TxCpltCallback+0x6c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_UART_TxCpltCallback+0x3c>
	       callbackTxCptUart2IrqHandle();
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <HAL_UART_TxCpltCallback+0x6c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4798      	blx	r3
		 callbackTxCptUart3IrqHandle();
       }
  #endif

#ifdef _INIT_USE_UART4
     if(huart->Instance == huart4.Instance){
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_UART_TxCpltCallback+0x70>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d106      	bne.n	8003d82 <HAL_UART_TxCpltCallback+0x56>
	       if(callbackTxCptUart4IrqHandle)
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <HAL_UART_TxCpltCallback+0x74>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_UART_TxCpltCallback+0x56>
		 callbackTxCptUart4IrqHandle();
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_UART_TxCpltCallback+0x74>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4798      	blx	r3
     }
#endif
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b002      	add	sp, #8
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	20000740 	.word	0x20000740
 8003d90:	200002f8 	.word	0x200002f8
 8003d94:	200007d4 	.word	0x200007d4
 8003d98:	200002fc 	.word	0x200002fc
 8003d9c:	200008fc 	.word	0x200008fc
 8003da0:	20000300 	.word	0x20000300

08003da4 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadcX){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  //80-120us
  if (hadcX->Instance == hadc1.Instance){

  }

}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim3.Instance)
  {

  }

  if (htim->Instance == htim6.Instance)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d101      	bne.n	8003dcc <HAL_TIM_PeriodElapsedCallback+0x18>
  {
//      if(callbackTimer6IrqHandle)
//	callbackTimer6IrqHandle();
      UV_CAPSS_periodic_poll();
 8003dc8:	f7ff fcde 	bl	8003788 <UV_CAPSS_periodic_poll>
  }

  //1ms
  if (htim->Instance == htim7.Instance)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d106      	bne.n	8003de6 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
      if(callbackTimer7IrqHandle)
 8003dd8:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_TIM_PeriodElapsedCallback+0x32>
	callbackTimer7IrqHandle();
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4798      	blx	r3
  //103 uS
  if (htim->Instance == htim14.Instance)
  {

  }
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b002      	add	sp, #8
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	200006a8 	.word	0x200006a8
 8003df4:	200006f4 	.word	0x200006f4
 8003df8:	200002f4 	.word	0x200002f4

08003dfc <HAL_SYSTICK_Callback>:

/**
  * @brief  SYSTICK callback.
  * @retval None
  */
void HAL_SYSTICK_Callback(void){
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  if(callbackSystickHandle)
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <HAL_SYSTICK_Callback+0x18>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <HAL_SYSTICK_Callback+0x12>
    callbackSystickHandle();
 8003e08:	4b02      	ldr	r3, [pc, #8]	; (8003e14 <HAL_SYSTICK_Callback+0x18>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4798      	blx	r3
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000008 	.word	0x20000008

08003e18 <CLCD_Delay>:

CLCD_I2C_Name LCD1;

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	0002      	movs	r2, r0
 8003e20:	1dbb      	adds	r3, r7, #6
 8003e22:	801a      	strh	r2, [r3, #0]
	HAL_Delay(Time);
 8003e24:	1dbb      	adds	r3, r7, #6
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f002 febb 	bl	8006ba4 <HAL_Delay>
}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b002      	add	sp, #8
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8003e36:	b5b0      	push	{r4, r5, r7, lr}
 8003e38:	b086      	sub	sp, #24
 8003e3a:	af02      	add	r7, sp, #8
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	0008      	movs	r0, r1
 8003e40:	0011      	movs	r1, r2
 8003e42:	1cfb      	adds	r3, r7, #3
 8003e44:	1c02      	adds	r2, r0, #0
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	1cbb      	adds	r3, r7, #2
 8003e4a:	1c0a      	adds	r2, r1, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8003e4e:	200f      	movs	r0, #15
 8003e50:	183b      	adds	r3, r7, r0
 8003e52:	1cfa      	adds	r2, r7, #3
 8003e54:	7812      	ldrb	r2, [r2, #0]
 8003e56:	210f      	movs	r1, #15
 8003e58:	438a      	bics	r2, r1
 8003e5a:	701a      	strb	r2, [r3, #0]
	Data_L = (Data<<4)&0xF0;
 8003e5c:	1cfb      	adds	r3, r7, #3
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	011a      	lsls	r2, r3, #4
 8003e62:	240e      	movs	r4, #14
 8003e64:	193b      	adds	r3, r7, r4
 8003e66:	701a      	strb	r2, [r3, #0]
	if(LCD->BACKLIGHT)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7adb      	ldrb	r3, [r3, #11]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <CLCD_WriteI2C+0x52>
	{
		Data_H |= LCD_BACKLIGHT;
 8003e70:	183b      	adds	r3, r7, r0
 8003e72:	183a      	adds	r2, r7, r0
 8003e74:	7812      	ldrb	r2, [r2, #0]
 8003e76:	2108      	movs	r1, #8
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	701a      	strb	r2, [r3, #0]
		Data_L |= LCD_BACKLIGHT;
 8003e7c:	193b      	adds	r3, r7, r4
 8003e7e:	193a      	adds	r2, r7, r4
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	2108      	movs	r1, #8
 8003e84:	430a      	orrs	r2, r1
 8003e86:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == CLCD_DATA)
 8003e88:	1cbb      	adds	r3, r7, #2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d10e      	bne.n	8003eae <CLCD_WriteI2C+0x78>
	{
		Data_H |= LCD_RS;
 8003e90:	220f      	movs	r2, #15
 8003e92:	18bb      	adds	r3, r7, r2
 8003e94:	18ba      	adds	r2, r7, r2
 8003e96:	7812      	ldrb	r2, [r2, #0]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	701a      	strb	r2, [r3, #0]
		Data_L |= LCD_RS;
 8003e9e:	220e      	movs	r2, #14
 8003ea0:	18bb      	adds	r3, r7, r2
 8003ea2:	18ba      	adds	r2, r7, r2
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e011      	b.n	8003ed2 <CLCD_WriteI2C+0x9c>
	}
	else if(Mode == CLCD_COMMAND)
 8003eae:	1cbb      	adds	r3, r7, #2
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10d      	bne.n	8003ed2 <CLCD_WriteI2C+0x9c>
	{
		Data_H &= ~LCD_RS;
 8003eb6:	220f      	movs	r2, #15
 8003eb8:	18bb      	adds	r3, r7, r2
 8003eba:	18ba      	adds	r2, r7, r2
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	438a      	bics	r2, r1
 8003ec2:	701a      	strb	r2, [r3, #0]
		Data_L &= ~LCD_RS;
 8003ec4:	220e      	movs	r2, #14
 8003ec6:	18bb      	adds	r3, r7, r2
 8003ec8:	18ba      	adds	r2, r7, r2
 8003eca:	7812      	ldrb	r2, [r2, #0]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	438a      	bics	r2, r1
 8003ed0:	701a      	strb	r2, [r3, #0]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8003ed2:	250f      	movs	r5, #15
 8003ed4:	197b      	adds	r3, r7, r5
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	2408      	movs	r4, #8
 8003ee0:	193b      	adds	r3, r7, r4
 8003ee2:	701a      	strb	r2, [r3, #0]
	CLCD_Delay(1);
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7ff ff97 	bl	8003e18 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8003eea:	0021      	movs	r1, r4
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	197a      	adds	r2, r7, r5
 8003ef0:	7812      	ldrb	r2, [r2, #0]
 8003ef2:	705a      	strb	r2, [r3, #1]
	Data_I2C[2] = Data_L|LCD_EN;
 8003ef4:	250e      	movs	r5, #14
 8003ef6:	197b      	adds	r3, r7, r5
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2204      	movs	r2, #4
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	000c      	movs	r4, r1
 8003f02:	193b      	adds	r3, r7, r4
 8003f04:	709a      	strb	r2, [r3, #2]
	CLCD_Delay(1);
 8003f06:	2001      	movs	r0, #1
 8003f08:	f7ff ff86 	bl	8003e18 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8003f0c:	193b      	adds	r3, r7, r4
 8003f0e:	197a      	adds	r2, r7, r5
 8003f10:	7812      	ldrb	r2, [r2, #0]
 8003f12:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	791b      	ldrb	r3, [r3, #4]
 8003f1c:	b299      	uxth	r1, r3
 8003f1e:	193a      	adds	r2, r7, r4
 8003f20:	23fa      	movs	r3, #250	; 0xfa
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2304      	movs	r3, #4
 8003f28:	f004 ffd8 	bl	8008edc <HAL_I2C_Master_Transmit>
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b004      	add	sp, #16
 8003f32:	bdb0      	pop	{r4, r5, r7, pc}

08003f34 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	0019      	movs	r1, r3
 8003f40:	1dfb      	adds	r3, r7, #7
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	1dbb      	adds	r3, r7, #6
 8003f46:	1c0a      	adds	r2, r1, #0
 8003f48:	701a      	strb	r2, [r3, #0]
	LCD->I2C = hi2c_CLCD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1dfa      	adds	r2, r7, #7
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1dba      	adds	r2, r7, #6
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	2318      	movs	r3, #24
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	7193      	strb	r3, [r2, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2228      	movs	r2, #40	; 0x28
 8003f6e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2206      	movs	r2, #6
 8003f74:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	220c      	movs	r2, #12
 8003f7a:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2214      	movs	r2, #20
 8003f80:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2208      	movs	r2, #8
 8003f86:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(200);
 8003f88:	20c8      	movs	r0, #200	; 0xc8
 8003f8a:	f7ff ff45 	bl	8003e18 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2133      	movs	r1, #51	; 0x33
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7ff ff4e 	bl	8003e36 <CLCD_WriteI2C>
	CLCD_Delay(20);
 8003f9a:	2014      	movs	r0, #20
 8003f9c:	f7ff ff3c 	bl	8003e18 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2133      	movs	r1, #51	; 0x33
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7ff ff45 	bl	8003e36 <CLCD_WriteI2C>
	CLCD_Delay(20);
 8003fac:	2014      	movs	r0, #20
 8003fae:	f7ff ff33 	bl	8003e18 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2132      	movs	r1, #50	; 0x32
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7ff ff3c 	bl	8003e36 <CLCD_WriteI2C>
	CLCD_Delay(20);
 8003fbe:	2014      	movs	r0, #20
 8003fc0:	f7ff ff2a 	bl	8003e18 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2120      	movs	r1, #32
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7ff ff33 	bl	8003e36 <CLCD_WriteI2C>
	CLCD_Delay(20);
 8003fd0:	2014      	movs	r0, #20
 8003fd2:	f7ff ff21 	bl	8003e18 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	79d9      	ldrb	r1, [r3, #7]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7ff ff29 	bl	8003e36 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	7a19      	ldrb	r1, [r3, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff ff22 	bl	8003e36 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	7a59      	ldrb	r1, [r3, #9]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f7ff ff1b 	bl	8003e36 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	7a99      	ldrb	r1, [r3, #10]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff ff14 	bl	8003e36 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	2101      	movs	r1, #1
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff ff0e 	bl	8003e36 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	2102      	movs	r1, #2
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff ff08 	bl	8003e36 <CLCD_WriteI2C>
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b004      	add	sp, #16
 800402c:	bd80      	pop	{r7, pc}

0800402e <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	0008      	movs	r0, r1
 8004038:	0011      	movs	r1, r2
 800403a:	1cfb      	adds	r3, r7, #3
 800403c:	1c02      	adds	r2, r0, #0
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	1cbb      	adds	r3, r7, #2
 8004042:	1c0a      	adds	r2, r1, #0
 8004044:	701a      	strb	r2, [r3, #0]
	uint8_t DRAM_ADDRESS = 0x00;
 8004046:	230f      	movs	r3, #15
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
	if(Xpos >= LCD->COLUMS)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	795b      	ldrb	r3, [r3, #5]
 8004052:	1cfa      	adds	r2, r7, #3
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d304      	bcc.n	8004064 <CLCD_I2C_SetCursor+0x36>
	{
		Xpos = LCD->COLUMS - 1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	795a      	ldrb	r2, [r3, #5]
 800405e:	1cfb      	adds	r3, r7, #3
 8004060:	3a01      	subs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
	}
	if(Ypos >= LCD->ROWS)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	799b      	ldrb	r3, [r3, #6]
 8004068:	1cba      	adds	r2, r7, #2
 800406a:	7812      	ldrb	r2, [r2, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d304      	bcc.n	800407a <CLCD_I2C_SetCursor+0x4c>
	{
		Ypos = LCD->ROWS -1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	799a      	ldrb	r2, [r3, #6]
 8004074:	1cbb      	adds	r3, r7, #2
 8004076:	3a01      	subs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
	}
	if(Ypos == 0)
 800407a:	1cbb      	adds	r3, r7, #2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8004082:	230f      	movs	r3, #15
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	1cfa      	adds	r2, r7, #3
 8004088:	7812      	ldrb	r2, [r2, #0]
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e01f      	b.n	80040ce <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 1)
 800408e:	1cbb      	adds	r3, r7, #2
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d106      	bne.n	80040a4 <CLCD_I2C_SetCursor+0x76>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8004096:	230f      	movs	r3, #15
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	1cfa      	adds	r2, r7, #3
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	3240      	adds	r2, #64	; 0x40
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e014      	b.n	80040ce <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 2)
 80040a4:	1cbb      	adds	r3, r7, #2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d106      	bne.n	80040ba <CLCD_I2C_SetCursor+0x8c>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 80040ac:	230f      	movs	r3, #15
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	1cfa      	adds	r2, r7, #3
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	3214      	adds	r2, #20
 80040b6:	701a      	strb	r2, [r3, #0]
 80040b8:	e009      	b.n	80040ce <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 3)
 80040ba:	1cbb      	adds	r3, r7, #2
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d105      	bne.n	80040ce <CLCD_I2C_SetCursor+0xa0>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 80040c2:	230f      	movs	r3, #15
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	1cfa      	adds	r2, r7, #3
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	3254      	adds	r2, #84	; 0x54
 80040cc:	701a      	strb	r2, [r3, #0]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 80040ce:	230f      	movs	r3, #15
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2280      	movs	r2, #128	; 0x80
 80040d6:	4252      	negs	r2, r2
 80040d8:	4313      	orrs	r3, r2
 80040da:	b2d9      	uxtb	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7ff fea8 	bl	8003e36 <CLCD_WriteI2C>
}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b004      	add	sp, #16
 80040ec:	bd80      	pop	{r7, pc}

080040ee <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	000a      	movs	r2, r1
 80040f8:	1cfb      	adds	r3, r7, #3
 80040fa:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80040fc:	1cfb      	adds	r3, r7, #3
 80040fe:	7819      	ldrb	r1, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	0018      	movs	r0, r3
 8004106:	f7ff fe96 	bl	8003e36 <CLCD_WriteI2C>
}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	46bd      	mov	sp, r7
 800410e:	b002      	add	sp, #8
 8004110:	bd80      	pop	{r7, pc}

08004112 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 800411c:	e008      	b.n	8004130 <CLCD_I2C_WriteString+0x1e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	603a      	str	r2, [r7, #0]
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0011      	movs	r1, r2
 800412a:	0018      	movs	r0, r3
 800412c:	f7ff ffdf 	bl	80040ee <CLCD_I2C_WriteChar>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f2      	bne.n	800411e <CLCD_I2C_WriteString+0xc>
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b002      	add	sp, #8
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <ShowLCD_String>:
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}

void ShowLCD_String(char *str, uint8_t col, uint8_t row)
{
 8004144:	b5b0      	push	{r4, r5, r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	0008      	movs	r0, r1
 800414e:	0011      	movs	r1, r2
 8004150:	1cfb      	adds	r3, r7, #3
 8004152:	1c02      	adds	r2, r0, #0
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	1cbb      	adds	r3, r7, #2
 8004158:	1c0a      	adds	r2, r1, #0
 800415a:	701a      	strb	r2, [r3, #0]
	char buffer[_USER_TEXT_LCD_NUM_COL];

	if (row >= _USER_TEXT_LCD_NUM_ROW)
 800415c:	1cbb      	adds	r3, r7, #2
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d842      	bhi.n	80041ea <ShowLCD_String+0xa6>
		return;
	for (uint8_t i = 0; i <= _USER_TEXT_LCD_NUM_COL; i++)
 8004164:	231f      	movs	r3, #31
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	e021      	b.n	80041b2 <ShowLCD_String+0x6e>
	{
		if (i < strlen(str))
 800416e:	251f      	movs	r5, #31
 8004170:	197b      	adds	r3, r7, r5
 8004172:	781c      	ldrb	r4, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0018      	movs	r0, r3
 8004178:	f7fb ffc2 	bl	8000100 <strlen>
 800417c:	0003      	movs	r3, r0
 800417e:	429c      	cmp	r4, r3
 8004180:	d20a      	bcs.n	8004198 <ShowLCD_String+0x54>
			buffer[i] = str[i];
 8004182:	197b      	adds	r3, r7, r5
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	18d2      	adds	r2, r2, r3
 800418a:	197b      	adds	r3, r7, r5
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	7811      	ldrb	r1, [r2, #0]
 8004190:	220c      	movs	r2, #12
 8004192:	18ba      	adds	r2, r7, r2
 8004194:	54d1      	strb	r1, [r2, r3]
 8004196:	e006      	b.n	80041a6 <ShowLCD_String+0x62>
		else
			buffer[i] = ' ';
 8004198:	231f      	movs	r3, #31
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	220c      	movs	r2, #12
 80041a0:	18ba      	adds	r2, r7, r2
 80041a2:	2120      	movs	r1, #32
 80041a4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i <= _USER_TEXT_LCD_NUM_COL; i++)
 80041a6:	211f      	movs	r1, #31
 80041a8:	187b      	adds	r3, r7, r1
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	3201      	adds	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	231f      	movs	r3, #31
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d9d8      	bls.n	800416e <ShowLCD_String+0x2a>
	}
	buffer[_USER_TEXT_LCD_NUM_COL-col] = 0;
 80041bc:	1cfb      	adds	r3, r7, #3
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2210      	movs	r2, #16
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	240c      	movs	r4, #12
 80041c6:	193a      	adds	r2, r7, r4
 80041c8:	2100      	movs	r1, #0
 80041ca:	54d1      	strb	r1, [r2, r3]

	CLCD_I2C_SetCursor(&LCD1, col, row);
 80041cc:	1cbb      	adds	r3, r7, #2
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	1cfb      	adds	r3, r7, #3
 80041d2:	7819      	ldrb	r1, [r3, #0]
 80041d4:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <ShowLCD_String+0xb0>)
 80041d6:	0018      	movs	r0, r3
 80041d8:	f7ff ff29 	bl	800402e <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, buffer);
 80041dc:	193a      	adds	r2, r7, r4
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <ShowLCD_String+0xb0>)
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7ff ff95 	bl	8004112 <CLCD_I2C_WriteString>
 80041e8:	e000      	b.n	80041ec <ShowLCD_String+0xa8>
		return;
 80041ea:	46c0      	nop			; (mov r8, r8)
}
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b008      	add	sp, #32
 80041f0:	bdb0      	pop	{r4, r5, r7, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	20000304 	.word	0x20000304

080041f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041fc:	f3bf 8f4f 	dsb	sy
}
 8004200:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <__NVIC_SystemReset+0x1c>)
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <__NVIC_SystemReset+0x20>)
 8004206:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004208:	f3bf 8f4f 	dsb	sy
}
 800420c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	e7fd      	b.n	800420e <__NVIC_SystemReset+0x16>
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	e000ed00 	.word	0xe000ed00
 8004218:	05fa0004 	.word	0x05fa0004

0800421c <getBright>:
void updateKalmanADC();
void callback_calibGetResult(CheckStatus True_false);
void gotoFinished(TestResultStt success_error);
void callback_btnConfigHandle(uint16_t ID, bt_eventFunc_t eventFunc, bt_typeArg_t agr);

PhotoCell_Status getBright(){
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
  uint16_t SaiSo_toi;

  if(TOOL.adcLightStart < 400){
 8004222:	4b70      	ldr	r3, [pc, #448]	; (80043e4 <getBright+0x1c8>)
 8004224:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8004226:	23c8      	movs	r3, #200	; 0xc8
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	429a      	cmp	r2, r3
 800422c:	d20b      	bcs.n	8004246 <getBright+0x2a>
      TOOL.dkAnhSang=_AS_QuaSang_ERROR;
 800422e:	4b6d      	ldr	r3, [pc, #436]	; (80043e4 <getBright+0x1c8>)
 8004230:	2232      	movs	r2, #50	; 0x32
 8004232:	2100      	movs	r1, #0
 8004234:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_QUASANG_LOI);
 8004236:	4a6c      	ldr	r2, [pc, #432]	; (80043e8 <getBright+0x1cc>)
 8004238:	4b6c      	ldr	r3, [pc, #432]	; (80043ec <getBright+0x1d0>)
 800423a:	0011      	movs	r1, r2
 800423c:	0018      	movs	r0, r3
 800423e:	f009 fb11 	bl	800d864 <siprintf>
      return _PhotoCell_other;
 8004242:	2304      	movs	r3, #4
 8004244:	e0c9      	b.n	80043da <getBright+0x1be>
  }
  else if(_LIMIT(TOOL.adcLightStart,401,1300)){
 8004246:	4b67      	ldr	r3, [pc, #412]	; (80043e4 <getBright+0x1c8>)
 8004248:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800424a:	23c8      	movs	r3, #200	; 0xc8
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	429a      	cmp	r2, r3
 8004250:	d912      	bls.n	8004278 <getBright+0x5c>
 8004252:	4b64      	ldr	r3, [pc, #400]	; (80043e4 <getBright+0x1c8>)
 8004254:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004256:	4a66      	ldr	r2, [pc, #408]	; (80043f0 <getBright+0x1d4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d80d      	bhi.n	8004278 <getBright+0x5c>
      TOOL.dkAnhSang=_AS_QuaSang_OK;
 800425c:	4b61      	ldr	r3, [pc, #388]	; (80043e4 <getBright+0x1c8>)
 800425e:	2232      	movs	r2, #50	; 0x32
 8004260:	2101      	movs	r1, #1
 8004262:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_QUASANG_OK);
 8004264:	4a63      	ldr	r2, [pc, #396]	; (80043f4 <getBright+0x1d8>)
 8004266:	4b61      	ldr	r3, [pc, #388]	; (80043ec <getBright+0x1d0>)
 8004268:	0011      	movs	r1, r2
 800426a:	0018      	movs	r0, r3
 800426c:	f009 fafa 	bl	800d864 <siprintf>
      SaiSo_toi=1500;
 8004270:	1dbb      	adds	r3, r7, #6
 8004272:	4a61      	ldr	r2, [pc, #388]	; (80043f8 <getBright+0x1dc>)
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	e076      	b.n	8004366 <getBright+0x14a>
  }
  else if(_LIMIT(TOOL.adcLightStart,1301,2000)){
 8004278:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <getBright+0x1c8>)
 800427a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800427c:	4a5c      	ldr	r2, [pc, #368]	; (80043f0 <getBright+0x1d4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d913      	bls.n	80042aa <getBright+0x8e>
 8004282:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <getBright+0x1c8>)
 8004284:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8004286:	23fa      	movs	r3, #250	; 0xfa
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	429a      	cmp	r2, r3
 800428c:	d80d      	bhi.n	80042aa <getBright+0x8e>
      TOOL.dkAnhSang=_AS_HoiSang_OK;
 800428e:	4b55      	ldr	r3, [pc, #340]	; (80043e4 <getBright+0x1c8>)
 8004290:	2232      	movs	r2, #50	; 0x32
 8004292:	2102      	movs	r1, #2
 8004294:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_HOISANG_OK);
 8004296:	4a59      	ldr	r2, [pc, #356]	; (80043fc <getBright+0x1e0>)
 8004298:	4b54      	ldr	r3, [pc, #336]	; (80043ec <getBright+0x1d0>)
 800429a:	0011      	movs	r1, r2
 800429c:	0018      	movs	r0, r3
 800429e:	f009 fae1 	bl	800d864 <siprintf>
      SaiSo_toi=1300;
 80042a2:	1dbb      	adds	r3, r7, #6
 80042a4:	4a52      	ldr	r2, [pc, #328]	; (80043f0 <getBright+0x1d4>)
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	e05d      	b.n	8004366 <getBright+0x14a>
  }
  else if(_LIMIT(TOOL.adcLightStart,2001,2800)){
 80042aa:	4b4e      	ldr	r3, [pc, #312]	; (80043e4 <getBright+0x1c8>)
 80042ac:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80042ae:	23fa      	movs	r3, #250	; 0xfa
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d914      	bls.n	80042e0 <getBright+0xc4>
 80042b6:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <getBright+0x1c8>)
 80042b8:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80042ba:	23af      	movs	r3, #175	; 0xaf
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	429a      	cmp	r2, r3
 80042c0:	d80e      	bhi.n	80042e0 <getBright+0xc4>
      TOOL.dkAnhSang=_AS_SangBt_OK;
 80042c2:	4b48      	ldr	r3, [pc, #288]	; (80043e4 <getBright+0x1c8>)
 80042c4:	2232      	movs	r2, #50	; 0x32
 80042c6:	2103      	movs	r1, #3
 80042c8:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_SANGBT_OK);
 80042ca:	4a4d      	ldr	r2, [pc, #308]	; (8004400 <getBright+0x1e4>)
 80042cc:	4b47      	ldr	r3, [pc, #284]	; (80043ec <getBright+0x1d0>)
 80042ce:	0011      	movs	r1, r2
 80042d0:	0018      	movs	r0, r3
 80042d2:	f009 fac7 	bl	800d864 <siprintf>
      SaiSo_toi=700;
 80042d6:	1dbb      	adds	r3, r7, #6
 80042d8:	22af      	movs	r2, #175	; 0xaf
 80042da:	0092      	lsls	r2, r2, #2
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	e042      	b.n	8004366 <getBright+0x14a>
  }
  else if(_LIMIT(TOOL.adcLightStart,2801,3000)){
 80042e0:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <getBright+0x1c8>)
 80042e2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80042e4:	23af      	movs	r3, #175	; 0xaf
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d913      	bls.n	8004314 <getBright+0xf8>
 80042ec:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <getBright+0x1c8>)
 80042ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80042f0:	4a44      	ldr	r2, [pc, #272]	; (8004404 <getBright+0x1e8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d80e      	bhi.n	8004314 <getBright+0xf8>
      TOOL.dkAnhSang=_AS_HoiToi_OK;
 80042f6:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <getBright+0x1c8>)
 80042f8:	2232      	movs	r2, #50	; 0x32
 80042fa:	2104      	movs	r1, #4
 80042fc:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_HOITOI_OK);
 80042fe:	4a42      	ldr	r2, [pc, #264]	; (8004408 <getBright+0x1ec>)
 8004300:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <getBright+0x1d0>)
 8004302:	0011      	movs	r1, r2
 8004304:	0018      	movs	r0, r3
 8004306:	f009 faad 	bl	800d864 <siprintf>
      SaiSo_toi=600;
 800430a:	1dbb      	adds	r3, r7, #6
 800430c:	2296      	movs	r2, #150	; 0x96
 800430e:	0092      	lsls	r2, r2, #2
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e028      	b.n	8004366 <getBright+0x14a>
  }
  else if(_LIMIT(TOOL.adcLightStart,3001,3500)){
 8004314:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <getBright+0x1c8>)
 8004316:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004318:	4a3a      	ldr	r2, [pc, #232]	; (8004404 <getBright+0x1e8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d912      	bls.n	8004344 <getBright+0x128>
 800431e:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <getBright+0x1c8>)
 8004320:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004322:	4a3a      	ldr	r2, [pc, #232]	; (800440c <getBright+0x1f0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d80d      	bhi.n	8004344 <getBright+0x128>
      TOOL.dkAnhSang=_AS_ToiBt_OK;
 8004328:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <getBright+0x1c8>)
 800432a:	2232      	movs	r2, #50	; 0x32
 800432c:	2105      	movs	r1, #5
 800432e:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_TOIBT_OK);
 8004330:	4a37      	ldr	r2, [pc, #220]	; (8004410 <getBright+0x1f4>)
 8004332:	4b2e      	ldr	r3, [pc, #184]	; (80043ec <getBright+0x1d0>)
 8004334:	0011      	movs	r1, r2
 8004336:	0018      	movs	r0, r3
 8004338:	f009 fa94 	bl	800d864 <siprintf>
      SaiSo_toi=200;
 800433c:	1dbb      	adds	r3, r7, #6
 800433e:	22c8      	movs	r2, #200	; 0xc8
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	e010      	b.n	8004366 <getBright+0x14a>
  }
  else if(TOOL.adcLightStart > 3500){
 8004344:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <getBright+0x1c8>)
 8004346:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004348:	4a30      	ldr	r2, [pc, #192]	; (800440c <getBright+0x1f0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d90b      	bls.n	8004366 <getBright+0x14a>
      TOOL.dkAnhSang=_AS_QuaToi_ERROR;
 800434e:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <getBright+0x1c8>)
 8004350:	2232      	movs	r2, #50	; 0x32
 8004352:	2106      	movs	r1, #6
 8004354:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_QUATOI_LOI);
 8004356:	4a2f      	ldr	r2, [pc, #188]	; (8004414 <getBright+0x1f8>)
 8004358:	4b24      	ldr	r3, [pc, #144]	; (80043ec <getBright+0x1d0>)
 800435a:	0011      	movs	r1, r2
 800435c:	0018      	movs	r0, r3
 800435e:	f009 fa81 	bl	800d864 <siprintf>
      return _PhotoCell_other;
 8004362:	2304      	movs	r3, #4
 8004364:	e039      	b.n	80043da <getBright+0x1be>
  }

  if(ADC_Arr[_ID_ADC_ptcHsink]==0)
 8004366:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <getBright+0x1fc>)
 8004368:	885b      	ldrh	r3, [r3, #2]
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <getBright+0x158>
    return _PhotoCell_noInit;
 8004370:	2300      	movs	r3, #0
 8004372:	e032      	b.n	80043da <getBright+0x1be>
  else if(_LIMIT(ADC_Arr[_ID_ADC_ptcHsink],100,910))//cu 900
 8004374:	4b28      	ldr	r3, [pc, #160]	; (8004418 <getBright+0x1fc>)
 8004376:	885b      	ldrh	r3, [r3, #2]
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b63      	cmp	r3, #99	; 0x63
 800437c:	d907      	bls.n	800438e <getBright+0x172>
 800437e:	4b26      	ldr	r3, [pc, #152]	; (8004418 <getBright+0x1fc>)
 8004380:	885b      	ldrh	r3, [r3, #2]
 8004382:	b29b      	uxth	r3, r3
 8004384:	4a25      	ldr	r2, [pc, #148]	; (800441c <getBright+0x200>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d801      	bhi.n	800438e <getBright+0x172>
      return _PhotoCell_LedGreenOn;
 800438a:	2301      	movs	r3, #1
 800438c:	e025      	b.n	80043da <getBright+0x1be>
  else if(_LIMIT(ADC_Arr[_ID_ADC_ptcHsink],911,3800-SaiSo_toi))
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <getBright+0x1fc>)
 8004390:	885b      	ldrh	r3, [r3, #2]
 8004392:	b29b      	uxth	r3, r3
 8004394:	4a21      	ldr	r2, [pc, #132]	; (800441c <getBright+0x200>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d90b      	bls.n	80043b2 <getBright+0x196>
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <getBright+0x1fc>)
 800439c:	885b      	ldrh	r3, [r3, #2]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	0019      	movs	r1, r3
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <getBright+0x204>)
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	4299      	cmp	r1, r3
 80043ac:	dc01      	bgt.n	80043b2 <getBright+0x196>
    return _PhotoCell_uncovered;
 80043ae:	2302      	movs	r3, #2
 80043b0:	e013      	b.n	80043da <getBright+0x1be>
  else if(_LIMIT(ADC_Arr[_ID_ADC_ptcHsink],3800-SaiSo_toi,4000))
 80043b2:	4b19      	ldr	r3, [pc, #100]	; (8004418 <getBright+0x1fc>)
 80043b4:	885b      	ldrh	r3, [r3, #2]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	0019      	movs	r1, r3
 80043ba:	1dbb      	adds	r3, r7, #6
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	4a18      	ldr	r2, [pc, #96]	; (8004420 <getBright+0x204>)
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	4299      	cmp	r1, r3
 80043c4:	db08      	blt.n	80043d8 <getBright+0x1bc>
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <getBright+0x1fc>)
 80043c8:	885b      	ldrh	r3, [r3, #2]
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	23fa      	movs	r3, #250	; 0xfa
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d801      	bhi.n	80043d8 <getBright+0x1bc>
    return _PhotoCell_covered;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e000      	b.n	80043da <getBright+0x1be>
  else
    return _PhotoCell_other;
 80043d8:	2304      	movs	r3, #4
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b002      	add	sp, #8
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	20000448 	.word	0x20000448
 80043e8:	0800fcd8 	.word	0x0800fcd8
 80043ec:	200004f4 	.word	0x200004f4
 80043f0:	00000514 	.word	0x00000514
 80043f4:	0800fce4 	.word	0x0800fce4
 80043f8:	000005dc 	.word	0x000005dc
 80043fc:	0800fcf0 	.word	0x0800fcf0
 8004400:	0800fcfc 	.word	0x0800fcfc
 8004404:	00000bb8 	.word	0x00000bb8
 8004408:	0800fd08 	.word	0x0800fd08
 800440c:	00000dac 	.word	0x00000dac
 8004410:	0800fd14 	.word	0x0800fd14
 8004414:	0800fd20 	.word	0x0800fd20
 8004418:	20000440 	.word	0x20000440
 800441c:	0000038e 	.word	0x0000038e
 8004420:	00000ed8 	.word	0x00000ed8

08004424 <updateLcd>:

/*Functions*/
void updateLcd(){
 8004424:	b5b0      	push	{r4, r5, r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af02      	add	r7, sp, #8
  static char str_cmp0[_STRING_BUFFER_SIZE],
	      str_cmp1[_STRING_BUFFER_SIZE];
  uint8_t result1, result2;

  if(!timer_expired(&_timer_updateLCD))
 800442a:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <updateLcd+0x13c>)
 800442c:	0018      	movs	r0, r3
 800442e:	f7fe fe8b 	bl	8003148 <timer_expired>
 8004432:	1e03      	subs	r3, r0, #0
 8004434:	d100      	bne.n	8004438 <updateLcd+0x14>
 8004436:	e08c      	b.n	8004552 <updateLcd+0x12e>
    return;
  timer_set(&_timer_updateLCD, 250);
 8004438:	4b49      	ldr	r3, [pc, #292]	; (8004560 <updateLcd+0x13c>)
 800443a:	21fa      	movs	r1, #250	; 0xfa
 800443c:	0018      	movs	r0, r3
 800443e:	f7fe fe59 	bl	80030f4 <timer_set>

  //Hien hien LCD theo mode
  if(TOOL.Lcd_id==_DISPLAY_MAIN)
 8004442:	4b48      	ldr	r3, [pc, #288]	; (8004564 <updateLcd+0x140>)
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10d      	bne.n	8004466 <updateLcd+0x42>
  {
      if(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE)sprintf(TOOL.LcdStr_row[1],"LOI:%4u OK:%4u",TOOL.FailNum,TOOL.PassNum);
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <updateLcd+0x144>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d146      	bne.n	80044e0 <updateLcd+0xbc>
 8004452:	4b44      	ldr	r3, [pc, #272]	; (8004564 <updateLcd+0x140>)
 8004454:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004456:	001a      	movs	r2, r3
 8004458:	4b42      	ldr	r3, [pc, #264]	; (8004564 <updateLcd+0x140>)
 800445a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800445c:	4943      	ldr	r1, [pc, #268]	; (800456c <updateLcd+0x148>)
 800445e:	4844      	ldr	r0, [pc, #272]	; (8004570 <updateLcd+0x14c>)
 8004460:	f009 fa00 	bl	800d864 <siprintf>
 8004464:	e03c      	b.n	80044e0 <updateLcd+0xbc>
  }
  else if(TOOL.Lcd_id==_DISPLAY_PHOTOCELL)
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <updateLcd+0x140>)
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d108      	bne.n	8004480 <updateLcd+0x5c>
  {
      sprintf(TOOL.LcdStr_row[1],"%s=%4u",stringBuffer,ADC_Arr[_ID_ADC_ptcHsink]);
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <updateLcd+0x150>)
 8004470:	885b      	ldrh	r3, [r3, #2]
 8004472:	b29b      	uxth	r3, r3
 8004474:	4a40      	ldr	r2, [pc, #256]	; (8004578 <updateLcd+0x154>)
 8004476:	4941      	ldr	r1, [pc, #260]	; (800457c <updateLcd+0x158>)
 8004478:	483d      	ldr	r0, [pc, #244]	; (8004570 <updateLcd+0x14c>)
 800447a:	f009 f9f3 	bl	800d864 <siprintf>
 800447e:	e02f      	b.n	80044e0 <updateLcd+0xbc>
  }
  else if(TOOL.Lcd_id==_DISPLAY_POWER)
 8004480:	4b38      	ldr	r3, [pc, #224]	; (8004564 <updateLcd+0x140>)
 8004482:	785b      	ldrb	r3, [r3, #1]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d116      	bne.n	80044b6 <updateLcd+0x92>
  {
      sprintf(TOOL.LcdStr_row[1],"%4.01fV %5.01fmA",TOOL.voltage, TOOL.current);
 8004488:	4b36      	ldr	r3, [pc, #216]	; (8004564 <updateLcd+0x140>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	1c18      	adds	r0, r3, #0
 800448e:	f7fe f9a5 	bl	80027dc <__aeabi_f2d>
 8004492:	0004      	movs	r4, r0
 8004494:	000d      	movs	r5, r1
 8004496:	4b33      	ldr	r3, [pc, #204]	; (8004564 <updateLcd+0x140>)
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	1c18      	adds	r0, r3, #0
 800449c:	f7fe f99e 	bl	80027dc <__aeabi_f2d>
 80044a0:	0002      	movs	r2, r0
 80044a2:	000b      	movs	r3, r1
 80044a4:	4936      	ldr	r1, [pc, #216]	; (8004580 <updateLcd+0x15c>)
 80044a6:	4832      	ldr	r0, [pc, #200]	; (8004570 <updateLcd+0x14c>)
 80044a8:	9200      	str	r2, [sp, #0]
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	0022      	movs	r2, r4
 80044ae:	002b      	movs	r3, r5
 80044b0:	f009 f9d8 	bl	800d864 <siprintf>
 80044b4:	e014      	b.n	80044e0 <updateLcd+0xbc>
  }
  else if(TOOL.Lcd_id==_DISPLAY_PHANLOAISENSOR){
 80044b6:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <updateLcd+0x140>)
 80044b8:	785b      	ldrb	r3, [r3, #1]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d110      	bne.n	80044e0 <updateLcd+0xbc>
      if(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE) sprintf(TOOL.LcdStr_row[1],"Bat Phan Loai");
 80044be:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <updateLcd+0x144>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d106      	bne.n	80044d4 <updateLcd+0xb0>
 80044c6:	4a2f      	ldr	r2, [pc, #188]	; (8004584 <updateLcd+0x160>)
 80044c8:	4b29      	ldr	r3, [pc, #164]	; (8004570 <updateLcd+0x14c>)
 80044ca:	0011      	movs	r1, r2
 80044cc:	0018      	movs	r0, r3
 80044ce:	f009 f9c9 	bl	800d864 <siprintf>
 80044d2:	e005      	b.n	80044e0 <updateLcd+0xbc>
      else sprintf(TOOL.LcdStr_row[1],"Tat Phan Loai");
 80044d4:	4a2c      	ldr	r2, [pc, #176]	; (8004588 <updateLcd+0x164>)
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <updateLcd+0x14c>)
 80044d8:	0011      	movs	r1, r2
 80044da:	0018      	movs	r0, r3
 80044dc:	f009 f9c2 	bl	800d864 <siprintf>
  }


  //Nếu chuỗi không thay đổi thì return
  result1 = memcmp(TOOL.LcdStr_row[0], str_cmp0, _STRING_BUFFER_SIZE);
 80044e0:	492a      	ldr	r1, [pc, #168]	; (800458c <updateLcd+0x168>)
 80044e2:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <updateLcd+0x16c>)
 80044e4:	2211      	movs	r2, #17
 80044e6:	0018      	movs	r0, r3
 80044e8:	f008 fc3a 	bl	800cd60 <memcmp>
 80044ec:	0002      	movs	r2, r0
 80044ee:	1dfb      	adds	r3, r7, #7
 80044f0:	701a      	strb	r2, [r3, #0]
  result2 = memcmp(TOOL.LcdStr_row[1], str_cmp1, _STRING_BUFFER_SIZE);
 80044f2:	4928      	ldr	r1, [pc, #160]	; (8004594 <updateLcd+0x170>)
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <updateLcd+0x14c>)
 80044f6:	2211      	movs	r2, #17
 80044f8:	0018      	movs	r0, r3
 80044fa:	f008 fc31 	bl	800cd60 <memcmp>
 80044fe:	0002      	movs	r2, r0
 8004500:	1dbb      	adds	r3, r7, #6
 8004502:	701a      	strb	r2, [r3, #0]
  if(result1 == 0 && result2==0)return;
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d103      	bne.n	8004514 <updateLcd+0xf0>
 800450c:	1dbb      	adds	r3, r7, #6
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <updateLcd+0x132>

  //Cập nhật dữ liệu mới lên LCD
  //CLCD_I2C_Clear(&LCD1);
  ShowLCD_String(TOOL.LcdStr_row[0], 0, 0);
 8004514:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <updateLcd+0x16c>)
 8004516:	2200      	movs	r2, #0
 8004518:	2100      	movs	r1, #0
 800451a:	0018      	movs	r0, r3
 800451c:	f7ff fe12 	bl	8004144 <ShowLCD_String>
  ShowLCD_String(TOOL.LcdStr_row[1], 0, 1);
 8004520:	4b13      	ldr	r3, [pc, #76]	; (8004570 <updateLcd+0x14c>)
 8004522:	2201      	movs	r2, #1
 8004524:	2100      	movs	r1, #0
 8004526:	0018      	movs	r0, r3
 8004528:	f7ff fe0c 	bl	8004144 <ShowLCD_String>

  memcpy(str_cmp0, TOOL.LcdStr_row[0], _STRING_BUFFER_SIZE);
 800452c:	4917      	ldr	r1, [pc, #92]	; (800458c <updateLcd+0x168>)
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <updateLcd+0x140>)
 8004530:	2202      	movs	r2, #2
 8004532:	0008      	movs	r0, r1
 8004534:	189b      	adds	r3, r3, r2
 8004536:	2211      	movs	r2, #17
 8004538:	0019      	movs	r1, r3
 800453a:	f008 fc1f 	bl	800cd7c <memcpy>
  memcpy(str_cmp1, TOOL.LcdStr_row[1], _STRING_BUFFER_SIZE);
 800453e:	4915      	ldr	r1, [pc, #84]	; (8004594 <updateLcd+0x170>)
 8004540:	4b08      	ldr	r3, [pc, #32]	; (8004564 <updateLcd+0x140>)
 8004542:	2213      	movs	r2, #19
 8004544:	0008      	movs	r0, r1
 8004546:	189b      	adds	r3, r3, r2
 8004548:	2211      	movs	r2, #17
 800454a:	0019      	movs	r1, r3
 800454c:	f008 fc16 	bl	800cd7c <memcpy>
 8004550:	e002      	b.n	8004558 <updateLcd+0x134>
    return;
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	e000      	b.n	8004558 <updateLcd+0x134>
  if(result1 == 0 && result2==0)return;
 8004556:	46c0      	nop			; (mov r8, r8)
}
 8004558:	46bd      	mov	sp, r7
 800455a:	b002      	add	sp, #8
 800455c:	bdb0      	pop	{r4, r5, r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	200004e0 	.word	0x200004e0
 8004564:	20000448 	.word	0x20000448
 8004568:	20000488 	.word	0x20000488
 800456c:	0800fd2c 	.word	0x0800fd2c
 8004570:	2000045b 	.word	0x2000045b
 8004574:	20000440 	.word	0x20000440
 8004578:	200004f4 	.word	0x200004f4
 800457c:	0800fd3c 	.word	0x0800fd3c
 8004580:	0800fd44 	.word	0x0800fd44
 8004584:	0800fd58 	.word	0x0800fd58
 8004588:	0800fd68 	.word	0x0800fd68
 800458c:	20000510 	.word	0x20000510
 8004590:	2000044a 	.word	0x2000044a
 8004594:	20000524 	.word	0x20000524

08004598 <updateIna219>:

void updateIna219(){
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  if(!timer_expired(&_timer_updateIna219))
 800459c:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <updateIna219+0x40>)
 800459e:	0018      	movs	r0, r3
 80045a0:	f7fe fdd2 	bl	8003148 <timer_expired>
 80045a4:	1e03      	subs	r3, r0, #0
 80045a6:	d013      	beq.n	80045d0 <updateIna219+0x38>
    return;
  timer_restart(&_timer_updateIna219);
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <updateIna219+0x40>)
 80045aa:	0018      	movs	r0, r3
 80045ac:	f7fe fdba 	bl	8003124 <timer_restart>

  TOOL.current = getCurrent_mA();
 80045b0:	f7ff fb08 	bl	8003bc4 <getCurrent_mA>
 80045b4:	1c02      	adds	r2, r0, #0
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <updateIna219+0x44>)
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24
  TOOL.voltage = getvoltage_V();
 80045ba:	f7ff fae1 	bl	8003b80 <getvoltage_V>
 80045be:	1c02      	adds	r2, r0, #0
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <updateIna219+0x44>)
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
  TOOL.power = getPower_mW();
 80045c4:	f7ff fb1c 	bl	8003c00 <getPower_mW>
 80045c8:	1c02      	adds	r2, r0, #0
 80045ca:	4b04      	ldr	r3, [pc, #16]	; (80045dc <updateIna219+0x44>)
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80045ce:	e000      	b.n	80045d2 <updateIna219+0x3a>
    return;
 80045d0:	46c0      	nop			; (mov r8, r8)
}
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	200004d0 	.word	0x200004d0
 80045dc:	20000448 	.word	0x20000448

080045e0 <updateKalmanADC>:

void updateKalmanADC(){
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
//    for(uint8_t i=0; i<_ID_ADC_TOTAL; i++){
//	ADC_Arr[i] = (uint16_t) (km_process(&Kalman_ADC[i], (float) ADC_Arr[i]));
//    }
//    f_readKalmanAdc=0;
//  }
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <callback_calibGetResult>:

void callback_calibGetResult(CheckStatus True_false){
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	0002      	movs	r2, r0
 80045f4:	1dfb      	adds	r3, r7, #7
 80045f6:	701a      	strb	r2, [r3, #0]
  if(True_false==0){
 80045f8:	1dfb      	adds	r3, r7, #7
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <callback_calibGetResult+0x28>
      OUTPUT_setBlink(&_ctrlOutput[_LED1],10,200,400,0);
 8004600:	23c8      	movs	r3, #200	; 0xc8
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	480a      	ldr	r0, [pc, #40]	; (8004630 <callback_calibGetResult+0x44>)
 8004606:	2200      	movs	r2, #0
 8004608:	9200      	str	r2, [sp, #0]
 800460a:	22c8      	movs	r2, #200	; 0xc8
 800460c:	210a      	movs	r1, #10
 800460e:	f7fe fb8d 	bl	8002d2c <OUTPUT_setBlink>
  }
  else
  {
      OUTPUT_setBlink(&_ctrlOutput[_LED1],10,3000,3500,0);
  }
}
 8004612:	e008      	b.n	8004626 <callback_calibGetResult+0x3a>
      OUTPUT_setBlink(&_ctrlOutput[_LED1],10,3000,3500,0);
 8004614:	4907      	ldr	r1, [pc, #28]	; (8004634 <callback_calibGetResult+0x48>)
 8004616:	4a08      	ldr	r2, [pc, #32]	; (8004638 <callback_calibGetResult+0x4c>)
 8004618:	4805      	ldr	r0, [pc, #20]	; (8004630 <callback_calibGetResult+0x44>)
 800461a:	2300      	movs	r3, #0
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	000b      	movs	r3, r1
 8004620:	210a      	movs	r1, #10
 8004622:	f7fe fb83 	bl	8002d2c <OUTPUT_setBlink>
}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	20000310 	.word	0x20000310
 8004634:	00000dac 	.word	0x00000dac
 8004638:	00000bb8 	.word	0x00000bb8

0800463c <gotoFinished>:

void gotoFinished(TestResultStt success_error){
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af02      	add	r7, sp, #8
 8004642:	0002      	movs	r2, r0
 8004644:	1dfb      	adds	r3, r7, #7
 8004646:	701a      	strb	r2, [r3, #0]
  TOOL.resultTesting=success_error;
 8004648:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <gotoFinished+0x9c>)
 800464a:	1dfa      	adds	r2, r7, #7
 800464c:	213c      	movs	r1, #60	; 0x3c
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	545a      	strb	r2, [r3, r1]
  if(success_error==_TEST_ERROR){
 8004652:	1dfb      	adds	r3, r7, #7
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d119      	bne.n	800468e <gotoFinished+0x52>
      MotorGotoPosition(&TWMOTOR,_POS_RIGHT,_TIMEOUT_MOTOR);
 800465a:	4a20      	ldr	r2, [pc, #128]	; (80046dc <gotoFinished+0xa0>)
 800465c:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <gotoFinished+0xa4>)
 800465e:	2103      	movs	r1, #3
 8004660:	0018      	movs	r0, r3
 8004662:	f002 f97d 	bl	8006960 <MotorGotoPosition>
      if(flashDataInfor.Byte_t.f_phanLoaiSensor==_DISABLE)OUTPUT_setBlink(&_ctrlOutput[_BUZ],1,100,200,1);
 8004666:	4b1f      	ldr	r3, [pc, #124]	; (80046e4 <gotoFinished+0xa8>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <gotoFinished+0x42>
 800466e:	481e      	ldr	r0, [pc, #120]	; (80046e8 <gotoFinished+0xac>)
 8004670:	2301      	movs	r3, #1
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	23c8      	movs	r3, #200	; 0xc8
 8004676:	2264      	movs	r2, #100	; 0x64
 8004678:	2101      	movs	r1, #1
 800467a:	f7fe fb57 	bl	8002d2c <OUTPUT_setBlink>
      OUTPUT_setOn(&_ctrlOutput[_LED_ERROR],0);
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <gotoFinished+0xb0>)
 8004680:	2100      	movs	r1, #0
 8004682:	0018      	movs	r0, r3
 8004684:	f7fe fb1c 	bl	8002cc0 <OUTPUT_setOn>
      TOOL.state=_test_finished;
 8004688:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <gotoFinished+0x9c>)
 800468a:	2206      	movs	r2, #6
 800468c:	701a      	strb	r2, [r3, #0]
  }if(success_error==_TEST_SUCCESS){
 800468e:	1dfb      	adds	r3, r7, #7
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d11b      	bne.n	80046ce <gotoFinished+0x92>
      MotorGotoPosition(&TWMOTOR,_POS_LEFT,_TIMEOUT_MOTOR);
 8004696:	4a11      	ldr	r2, [pc, #68]	; (80046dc <gotoFinished+0xa0>)
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <gotoFinished+0xa4>)
 800469a:	2101      	movs	r1, #1
 800469c:	0018      	movs	r0, r3
 800469e:	f002 f95f 	bl	8006960 <MotorGotoPosition>
      if(flashDataInfor.Byte_t.f_phanLoaiSensor==_DISABLE)OUTPUT_setBlink(&_ctrlOutput[_BUZ],1,1000,1200,0);
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <gotoFinished+0xa8>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <gotoFinished+0x82>
 80046aa:	2396      	movs	r3, #150	; 0x96
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	22fa      	movs	r2, #250	; 0xfa
 80046b0:	0092      	lsls	r2, r2, #2
 80046b2:	480d      	ldr	r0, [pc, #52]	; (80046e8 <gotoFinished+0xac>)
 80046b4:	2100      	movs	r1, #0
 80046b6:	9100      	str	r1, [sp, #0]
 80046b8:	2101      	movs	r1, #1
 80046ba:	f7fe fb37 	bl	8002d2c <OUTPUT_setBlink>
      OUTPUT_setOn(&_ctrlOutput[_LED_OK],0);
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <gotoFinished+0xb4>)
 80046c0:	2100      	movs	r1, #0
 80046c2:	0018      	movs	r0, r3
 80046c4:	f7fe fafc 	bl	8002cc0 <OUTPUT_setOn>
      TOOL.state=_test_finished;
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <gotoFinished+0x9c>)
 80046ca:	2206      	movs	r2, #6
 80046cc:	701a      	strb	r2, [r3, #0]
  }
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	20000448 	.word	0x20000448
 80046dc:	00000bb8 	.word	0x00000bb8
 80046e0:	20000994 	.word	0x20000994
 80046e4:	20000488 	.word	0x20000488
 80046e8:	200003ec 	.word	0x200003ec
 80046ec:	20000394 	.word	0x20000394
 80046f0:	20000368 	.word	0x20000368

080046f4 <callback_btnConfigHandle>:

uint8_t f_changeDisplay;
void callback_btnConfigHandle(uint16_t ID, bt_eventFunc_t eventFunc, bt_typeArg_t agr){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	603a      	str	r2, [r7, #0]
 80046fc:	1dbb      	adds	r3, r7, #6
 80046fe:	1c02      	adds	r2, r0, #0
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	1d7b      	adds	r3, r7, #5
 8004704:	1c0a      	adds	r2, r1, #0
 8004706:	701a      	strb	r2, [r3, #0]
  //if(ID!=1)return;
  switch(eventFunc){
 8004708:	1d7b      	adds	r3, r7, #5
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d02a      	beq.n	8004766 <callback_btnConfigHandle+0x72>
 8004710:	dc4b      	bgt.n	80047aa <callback_btnConfigHandle+0xb6>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <callback_btnConfigHandle+0x28>
 8004716:	2b01      	cmp	r3, #1
 8004718:	d049      	beq.n	80047ae <callback_btnConfigHandle+0xba>
//      else
//	f_changeDisplay=0;

      break;

    default:break;
 800471a:	e046      	b.n	80047aa <callback_btnConfigHandle+0xb6>
      if(agr.event == BUTTON_ONECLICK){
 800471c:	003b      	movs	r3, r7
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d146      	bne.n	80047b2 <callback_btnConfigHandle+0xbe>
	  if(TOOL.Lcd_id==_DISPLAY_PHANLOAISENSOR){
 8004724:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <callback_btnConfigHandle+0xcc>)
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11a      	bne.n	8004762 <callback_btnConfigHandle+0x6e>
	      flashDataInfor.Byte_t.f_phanLoaiSensor=(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE)?_DISABLE:_ENABLE;
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <callback_btnConfigHandle+0xd0>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	3b01      	subs	r3, #1
 8004732:	1e5a      	subs	r2, r3, #1
 8004734:	4193      	sbcs	r3, r2
 8004736:	b2db      	uxtb	r3, r3
 8004738:	001a      	movs	r2, r3
 800473a:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <callback_btnConfigHandle+0xd0>)
 800473c:	701a      	strb	r2, [r3, #0]
	      if(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE){
 800473e:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <callback_btnConfigHandle+0xd0>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d105      	bne.n	8004752 <callback_btnConfigHandle+0x5e>
		  flashDataInfor.HalfWord_t.countPassSensor=0;
 8004746:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <callback_btnConfigHandle+0xd0>)
 8004748:	2200      	movs	r2, #0
 800474a:	809a      	strh	r2, [r3, #4]
		  flashDataInfor.HalfWord_t.countFailSensor=0;
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <callback_btnConfigHandle+0xd0>)
 800474e:	2200      	movs	r2, #0
 8004750:	80da      	strh	r2, [r3, #6]
	      Flash_WriteDWord(flashDataInfor.Dword, FLASH_ADDRESS_START);
 8004752:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <callback_btnConfigHandle+0xd0>)
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <callback_btnConfigHandle+0xd4>)
 800475a:	001a      	movs	r2, r3
 800475c:	f7ff f910 	bl	8003980 <Flash_WriteDWord>
      break;
 8004760:	e027      	b.n	80047b2 <callback_btnConfigHandle+0xbe>
	  else NVIC_SystemReset();
 8004762:	f7ff fd49 	bl	80041f8 <__NVIC_SystemReset>
      if(agr.holdInterval_ms%1000==0){
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	22fa      	movs	r2, #250	; 0xfa
 800476a:	0091      	lsls	r1, r2, #2
 800476c:	0018      	movs	r0, r3
 800476e:	f7fb fd69 	bl	8000244 <__aeabi_uidivmod>
 8004772:	1e0b      	subs	r3, r1, #0
 8004774:	d107      	bne.n	8004786 <callback_btnConfigHandle+0x92>
	  OUTPUT_setBlink(&_ctrlOutput[_BUZ], 1, 100, 200,0);
 8004776:	4815      	ldr	r0, [pc, #84]	; (80047cc <callback_btnConfigHandle+0xd8>)
 8004778:	2300      	movs	r3, #0
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	23c8      	movs	r3, #200	; 0xc8
 800477e:	2264      	movs	r2, #100	; 0x64
 8004780:	2101      	movs	r1, #1
 8004782:	f7fe fad3 	bl	8002d2c <OUTPUT_setBlink>
      if(agr.holdInterval_ms == 5000){
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	4a11      	ldr	r2, [pc, #68]	; (80047d0 <callback_btnConfigHandle+0xdc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d113      	bne.n	80047b6 <callback_btnConfigHandle+0xc2>
	  if(++TOOL.Lcd_id >=_DISPLAYMAX)
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <callback_btnConfigHandle+0xcc>)
 8004790:	785b      	ldrb	r3, [r3, #1]
 8004792:	3301      	adds	r3, #1
 8004794:	b2da      	uxtb	r2, r3
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <callback_btnConfigHandle+0xcc>)
 8004798:	705a      	strb	r2, [r3, #1]
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <callback_btnConfigHandle+0xcc>)
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d909      	bls.n	80047b6 <callback_btnConfigHandle+0xc2>
	    TOOL.Lcd_id=0;
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <callback_btnConfigHandle+0xcc>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	705a      	strb	r2, [r3, #1]
      break;
 80047a8:	e005      	b.n	80047b6 <callback_btnConfigHandle+0xc2>
    default:break;
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	e004      	b.n	80047b8 <callback_btnConfigHandle+0xc4>
      break;
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	e002      	b.n	80047b8 <callback_btnConfigHandle+0xc4>
      break;
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	e000      	b.n	80047b8 <callback_btnConfigHandle+0xc4>
      break;
 80047b6:	46c0      	nop			; (mov r8, r8)
  }
}
 80047b8:	46c0      	nop			; (mov r8, r8)
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b002      	add	sp, #8
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000448 	.word	0x20000448
 80047c4:	20000488 	.word	0x20000488
 80047c8:	0801f800 	.word	0x0801f800
 80047cc:	200003ec 	.word	0x200003ec
 80047d0:	00001388 	.word	0x00001388

080047d4 <testWaterSensorInit>:

void testWaterSensorInit(){
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af02      	add	r7, sp, #8

  /*Init DMA ADC */
  //Init DMA_ADC of MCU
  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 80047da:	4b5c      	ldr	r3, [pc, #368]	; (800494c <testWaterSensorInit+0x178>)
 80047dc:	0018      	movs	r0, r3
 80047de:	f003 faaf 	bl	8007d40 <HAL_ADCEx_Calibration_Start>
 80047e2:	1e03      	subs	r3, r0, #0
 80047e4:	d001      	beq.n	80047ea <testWaterSensorInit+0x16>
	  Error_Handler();
 80047e6:	f001 fabd 	bl	8005d64 <Error_Handler>

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Arr, _ID_ADC_TOTAL) != HAL_OK)
 80047ea:	4959      	ldr	r1, [pc, #356]	; (8004950 <testWaterSensorInit+0x17c>)
 80047ec:	4b57      	ldr	r3, [pc, #348]	; (800494c <testWaterSensorInit+0x178>)
 80047ee:	2204      	movs	r2, #4
 80047f0:	0018      	movs	r0, r3
 80047f2:	f002 fd1d 	bl	8007230 <HAL_ADC_Start_DMA>
 80047f6:	1e03      	subs	r3, r0, #0
 80047f8:	d001      	beq.n	80047fe <testWaterSensorInit+0x2a>
	  Error_Handler();
 80047fa:	f001 fab3 	bl	8005d64 <Error_Handler>
//  //Init Kalman Adc filter
//  for(uint8_t i=0;i<_ID_ADC_TOTAL; i++){
//      km_init(&Kalman_ADC[i], 0.01, 20, 4050);
//  }
  //setCalibration_32V_1A();
  setCalibration_16V_400mA();
 80047fe:	f7ff f953 	bl	8003aa8 <setCalibration_16V_400mA>
  /*Init i2c2 for LCD and Ina219 */
  HAL_I2C_Init(&_USER_DEFINE_I2C_LCD);
 8004802:	4b54      	ldr	r3, [pc, #336]	; (8004954 <testWaterSensorInit+0x180>)
 8004804:	0018      	movs	r0, r3
 8004806:	f004 fad3 	bl	8008db0 <HAL_I2C_Init>
  CLCD_I2C_Init(&LCD1, &_USER_DEFINE_I2C_LCD, 0x4e, 20, 4);
 800480a:	4952      	ldr	r1, [pc, #328]	; (8004954 <testWaterSensorInit+0x180>)
 800480c:	4852      	ldr	r0, [pc, #328]	; (8004958 <testWaterSensorInit+0x184>)
 800480e:	2304      	movs	r3, #4
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2314      	movs	r3, #20
 8004814:	224e      	movs	r2, #78	; 0x4e
 8004816:	f7ff fb8d 	bl	8003f34 <CLCD_I2C_Init>

  /*Init Timer7*/
  HAL_TIM_Base_Start_IT(&htim7);
 800481a:	4b50      	ldr	r3, [pc, #320]	; (800495c <testWaterSensorInit+0x188>)
 800481c:	0018      	movs	r0, r3
 800481e:	f006 f92f 	bl	800aa80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&_UV_CAPSS_TIMER);
 8004822:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <testWaterSensorInit+0x18c>)
 8004824:	0018      	movs	r0, r3
 8004826:	f006 f92b 	bl	800aa80 <HAL_TIM_Base_Start_IT>

  CAPSENSOR[_CAPSS_ID_WATER]._cb_calibResult = &callback_calibGetResult;
 800482a:	4b4e      	ldr	r3, [pc, #312]	; (8004964 <testWaterSensorInit+0x190>)
 800482c:	4a4e      	ldr	r2, [pc, #312]	; (8004968 <testWaterSensorInit+0x194>)
 800482e:	609a      	str	r2, [r3, #8]
  _btnConfig.cb_function = &callback_btnConfigHandle;
 8004830:	4b4e      	ldr	r3, [pc, #312]	; (800496c <testWaterSensorInit+0x198>)
 8004832:	4a4f      	ldr	r2, [pc, #316]	; (8004970 <testWaterSensorInit+0x19c>)
 8004834:	60da      	str	r2, [r3, #12]

  /*Init Outputs Control*/
  OUTPUT_configInit(&_ctrlOutput[_LED_OK], LEDG_BaseCtrl, 0);
 8004836:	494f      	ldr	r1, [pc, #316]	; (8004974 <testWaterSensorInit+0x1a0>)
 8004838:	4b4f      	ldr	r3, [pc, #316]	; (8004978 <testWaterSensorInit+0x1a4>)
 800483a:	2200      	movs	r2, #0
 800483c:	0018      	movs	r0, r3
 800483e:	f7fe f9f9 	bl	8002c34 <OUTPUT_configInit>
  OUTPUT_configInit(&_ctrlOutput[_LED_ERROR], LEDB_BaseCtrl, 0);
 8004842:	494e      	ldr	r1, [pc, #312]	; (800497c <testWaterSensorInit+0x1a8>)
 8004844:	4b4e      	ldr	r3, [pc, #312]	; (8004980 <testWaterSensorInit+0x1ac>)
 8004846:	2200      	movs	r2, #0
 8004848:	0018      	movs	r0, r3
 800484a:	f7fe f9f3 	bl	8002c34 <OUTPUT_configInit>
  OUTPUT_configInit(&_ctrlOutput[_RL_PAD], RLSOL_BaseCtrl, 0);
 800484e:	494d      	ldr	r1, [pc, #308]	; (8004984 <testWaterSensorInit+0x1b0>)
 8004850:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <testWaterSensorInit+0x1b4>)
 8004852:	2200      	movs	r2, #0
 8004854:	0018      	movs	r0, r3
 8004856:	f7fe f9ed 	bl	8002c34 <OUTPUT_configInit>
  OUTPUT_configInit(&_ctrlOutput[_BUZ], BUZ_BaseCtrl, 0);
 800485a:	494c      	ldr	r1, [pc, #304]	; (800498c <testWaterSensorInit+0x1b8>)
 800485c:	4b4c      	ldr	r3, [pc, #304]	; (8004990 <testWaterSensorInit+0x1bc>)
 800485e:	2200      	movs	r2, #0
 8004860:	0018      	movs	r0, r3
 8004862:	f7fe f9e7 	bl	8002c34 <OUTPUT_configInit>

  OUTPUT_setOff(&_ctrlOutput[_LED_OK],0);
 8004866:	4b44      	ldr	r3, [pc, #272]	; (8004978 <testWaterSensorInit+0x1a4>)
 8004868:	2100      	movs	r1, #0
 800486a:	0018      	movs	r0, r3
 800486c:	f7fe f9f2 	bl	8002c54 <OUTPUT_setOff>
  OUTPUT_setOff(&_ctrlOutput[_LED_ERROR],0);
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <testWaterSensorInit+0x1ac>)
 8004872:	2100      	movs	r1, #0
 8004874:	0018      	movs	r0, r3
 8004876:	f7fe f9ed 	bl	8002c54 <OUTPUT_setOff>
//  OUTPUT_setBlink(&_ctrlOutput[_LED_OK],7,200,400,0);
//  OUTPUT_setBlink(&_ctrlOutput[_LED_ERROR],5,300,600,0);
  OUTPUT_setBlink(&_ctrlOutput[_BUZ],1,200,400,0);
 800487a:	23c8      	movs	r3, #200	; 0xc8
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4844      	ldr	r0, [pc, #272]	; (8004990 <testWaterSensorInit+0x1bc>)
 8004880:	2200      	movs	r2, #0
 8004882:	9200      	str	r2, [sp, #0]
 8004884:	22c8      	movs	r2, #200	; 0xc8
 8004886:	2101      	movs	r1, #1
 8004888:	f7fe fa50 	bl	8002d2c <OUTPUT_setBlink>

  //Load data
  flashDataInfor.Dword = Flash_ReadDWord(FLASH_ADDRESS_START);
 800488c:	4b41      	ldr	r3, [pc, #260]	; (8004994 <testWaterSensorInit+0x1c0>)
 800488e:	0018      	movs	r0, r3
 8004890:	f7ff f866 	bl	8003960 <Flash_ReadDWord>
 8004894:	0002      	movs	r2, r0
 8004896:	000b      	movs	r3, r1
 8004898:	493f      	ldr	r1, [pc, #252]	; (8004998 <testWaterSensorInit+0x1c4>)
 800489a:	600a      	str	r2, [r1, #0]
 800489c:	604b      	str	r3, [r1, #4]
  flashDataInfor.Byte_t.f_phanLoaiSensor=(flashDataInfor.Byte_t.f_phanLoaiSensor==0)?_DISABLE:_ENABLE;
 800489e:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <testWaterSensorInit+0x1c4>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	1e5a      	subs	r2, r3, #1
 80048a4:	4193      	sbcs	r3, r2
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	001a      	movs	r2, r3
 80048aa:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <testWaterSensorInit+0x1c4>)
 80048ac:	701a      	strb	r2, [r3, #0]
  TOOL.PassNum = (flashDataInfor.HalfWord_t.countPassSensor == 0xffff)?(260):(flashDataInfor.HalfWord_t.countPassSensor);
 80048ae:	4b3a      	ldr	r3, [pc, #232]	; (8004998 <testWaterSensorInit+0x1c4>)
 80048b0:	889b      	ldrh	r3, [r3, #4]
 80048b2:	4a3a      	ldr	r2, [pc, #232]	; (800499c <testWaterSensorInit+0x1c8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d002      	beq.n	80048be <testWaterSensorInit+0xea>
 80048b8:	4b37      	ldr	r3, [pc, #220]	; (8004998 <testWaterSensorInit+0x1c4>)
 80048ba:	889b      	ldrh	r3, [r3, #4]
 80048bc:	e001      	b.n	80048c2 <testWaterSensorInit+0xee>
 80048be:	2382      	movs	r3, #130	; 0x82
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4a37      	ldr	r2, [pc, #220]	; (80049a0 <testWaterSensorInit+0x1cc>)
 80048c4:	8713      	strh	r3, [r2, #56]	; 0x38
  TOOL.FailNum = (flashDataInfor.HalfWord_t.countFailSensor == 0xffff)?(260):(flashDataInfor.HalfWord_t.countFailSensor);
 80048c6:	4b34      	ldr	r3, [pc, #208]	; (8004998 <testWaterSensorInit+0x1c4>)
 80048c8:	88db      	ldrh	r3, [r3, #6]
 80048ca:	4a34      	ldr	r2, [pc, #208]	; (800499c <testWaterSensorInit+0x1c8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d002      	beq.n	80048d6 <testWaterSensorInit+0x102>
 80048d0:	4b31      	ldr	r3, [pc, #196]	; (8004998 <testWaterSensorInit+0x1c4>)
 80048d2:	88db      	ldrh	r3, [r3, #6]
 80048d4:	e001      	b.n	80048da <testWaterSensorInit+0x106>
 80048d6:	2382      	movs	r3, #130	; 0x82
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4a31      	ldr	r2, [pc, #196]	; (80049a0 <testWaterSensorInit+0x1cc>)
 80048dc:	8753      	strh	r3, [r2, #58]	; 0x3a
//  if(flashDataInfor.Byte_t.countPassSensor==0xff)flashDataInfor.Byte_t.countPassSensor=0;
//  if(flashDataInfor.Byte_t.countFailSensor==0xff)flashDataInfor.Byte_t.countFailSensor=0;

  //clear all error
  memset(&TOOL.error,1,sizeof(TOOL.error));
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <testWaterSensorInit+0x1d0>)
 80048e0:	2204      	movs	r2, #4
 80048e2:	2101      	movs	r1, #1
 80048e4:	0018      	movs	r0, r3
 80048e6:	f008 fa52 	bl	800cd8e <memset>
  TOOL.state = _test_null;
 80048ea:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <testWaterSensorInit+0x1cc>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]
  TOOL.adcLightStart=0;
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <testWaterSensorInit+0x1cc>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	861a      	strh	r2, [r3, #48]	; 0x30
  TOOL.Lcd_id=_DISPLAY_MAIN;
 80048f6:	4b2a      	ldr	r3, [pc, #168]	; (80049a0 <testWaterSensorInit+0x1cc>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	705a      	strb	r2, [r3, #1]
  ledRedTog=0;
 80048fc:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <testWaterSensorInit+0x1d4>)
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]

  timer_set(&_timer_updateIna219, 50);
 8004902:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <testWaterSensorInit+0x1d8>)
 8004904:	2132      	movs	r1, #50	; 0x32
 8004906:	0018      	movs	r0, r3
 8004908:	f7fe fbf4 	bl	80030f4 <timer_set>
  timer_set(&_timer_updateLCD, 2000);
 800490c:	23fa      	movs	r3, #250	; 0xfa
 800490e:	00da      	lsls	r2, r3, #3
 8004910:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <testWaterSensorInit+0x1dc>)
 8004912:	0011      	movs	r1, r2
 8004914:	0018      	movs	r0, r3
 8004916:	f7fe fbed 	bl	80030f4 <timer_set>
  timer_set(&_timeoutCheckState, 20);
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <testWaterSensorInit+0x1e0>)
 800491c:	2114      	movs	r1, #20
 800491e:	0018      	movs	r0, r3
 8004920:	f7fe fbe8 	bl	80030f4 <timer_set>

  ShowLCD_String("    BO TEST", 0, 0);
 8004924:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <testWaterSensorInit+0x1e4>)
 8004926:	2200      	movs	r2, #0
 8004928:	2100      	movs	r1, #0
 800492a:	0018      	movs	r0, r3
 800492c:	f7ff fc0a 	bl	8004144 <ShowLCD_String>
  ShowLCD_String("  WATER SENSOR", 0, 1);
 8004930:	4b22      	ldr	r3, [pc, #136]	; (80049bc <testWaterSensorInit+0x1e8>)
 8004932:	2201      	movs	r2, #1
 8004934:	2100      	movs	r1, #0
 8004936:	0018      	movs	r0, r3
 8004938:	f7ff fc04 	bl	8004144 <ShowLCD_String>

  MotorTestWaterSensorInit(&TWMOTOR);
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <testWaterSensorInit+0x1ec>)
 800493e:	0018      	movs	r0, r3
 8004940:	f001 ffa8 	bl	8006894 <MotorTestWaterSensorInit>
}
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	20000538 	.word	0x20000538
 8004950:	20000440 	.word	0x20000440
 8004954:	200005f8 	.word	0x200005f8
 8004958:	20000304 	.word	0x20000304
 800495c:	200006f4 	.word	0x200006f4
 8004960:	200006a8 	.word	0x200006a8
 8004964:	20000290 	.word	0x20000290
 8004968:	080045ed 	.word	0x080045ed
 800496c:	20000418 	.word	0x20000418
 8004970:	080046f5 	.word	0x080046f5
 8004974:	08003c3d 	.word	0x08003c3d
 8004978:	20000368 	.word	0x20000368
 800497c:	08003c79 	.word	0x08003c79
 8004980:	20000394 	.word	0x20000394
 8004984:	08003cf1 	.word	0x08003cf1
 8004988:	200003c0 	.word	0x200003c0
 800498c:	08003cb5 	.word	0x08003cb5
 8004990:	200003ec 	.word	0x200003ec
 8004994:	0801f800 	.word	0x0801f800
 8004998:	20000488 	.word	0x20000488
 800499c:	0000ffff 	.word	0x0000ffff
 80049a0:	20000448 	.word	0x20000448
 80049a4:	2000047c 	.word	0x2000047c
 80049a8:	20000502 	.word	0x20000502
 80049ac:	200004d0 	.word	0x200004d0
 80049b0:	200004e0 	.word	0x200004e0
 80049b4:	20000490 	.word	0x20000490
 80049b8:	0800fd78 	.word	0x0800fd78
 80049bc:	0800fd84 	.word	0x0800fd84
 80049c0:	20000994 	.word	0x20000994

080049c4 <testWaterSensor_1msIrqHandle>:

void testWaterSensor_1msIrqHandle(){
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
  static uint8_t tx10;

  /*1ms check poll*/
  if(f_readKalmanAdc==0)
 80049ca:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <testWaterSensor_1msIrqHandle+0x98>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <testWaterSensor_1msIrqHandle+0x14>
    f_readKalmanAdc=1;
 80049d2:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <testWaterSensor_1msIrqHandle+0x98>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]

  testMotorSystickIrq1ms(&TWMOTOR);
 80049d8:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <testWaterSensor_1msIrqHandle+0x9c>)
 80049da:	0018      	movs	r0, r3
 80049dc:	f001 fe60 	bl	80066a0 <testMotorSystickIrq1ms>
  CapSS_periodic_poll(&CAPSENSOR[0]);
 80049e0:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <testWaterSensor_1msIrqHandle+0xa0>)
 80049e2:	0018      	movs	r0, r3
 80049e4:	f7fe fe20 	bl	8003628 <CapSS_periodic_poll>
  //Outputs
  for(uint8_t i=0; i<_MAX_OUTPUT; i++)
 80049e8:	1dfb      	adds	r3, r7, #7
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	e00d      	b.n	8004a0c <testWaterSensor_1msIrqHandle+0x48>
      OUTPUT_blinkHandle(&_ctrlOutput[i]);
 80049f0:	1dfb      	adds	r3, r7, #7
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	222c      	movs	r2, #44	; 0x2c
 80049f6:	435a      	muls	r2, r3
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <testWaterSensor_1msIrqHandle+0xa4>)
 80049fa:	18d3      	adds	r3, r2, r3
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7fe f9eb 	bl	8002dd8 <OUTPUT_blinkHandle>
  for(uint8_t i=0; i<_MAX_OUTPUT; i++)
 8004a02:	1dfb      	adds	r3, r7, #7
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	1dfb      	adds	r3, r7, #7
 8004a08:	3201      	adds	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	1dfb      	adds	r3, r7, #7
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d9ed      	bls.n	80049f0 <testWaterSensor_1msIrqHandle+0x2c>

  /*10ms check poll*/
  if(++tx10 >= 10){
 8004a14:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <testWaterSensor_1msIrqHandle+0xa8>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <testWaterSensor_1msIrqHandle+0xa8>)
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <testWaterSensor_1msIrqHandle+0xa8>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b09      	cmp	r3, #9
 8004a26:	d915      	bls.n	8004a54 <testWaterSensor_1msIrqHandle+0x90>
     tx10 = 0;
 8004a28:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <testWaterSensor_1msIrqHandle+0xa8>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
     timer_periodic_poll();
 8004a2e:	f7fe fb53 	bl	80030d8 <timer_periodic_poll>
     btn_progress_loop(&_btnConfig,BUTTON_PinStt);
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <testWaterSensor_1msIrqHandle+0xac>)
 8004a38:	0019      	movs	r1, r3
 8004a3a:	0010      	movs	r0, r2
 8004a3c:	f004 f97e 	bl	8008d3c <HAL_GPIO_ReadPin>
 8004a40:	0003      	movs	r3, r0
 8004a42:	425a      	negs	r2, r3
 8004a44:	4153      	adcs	r3, r2
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	001a      	movs	r2, r3
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <testWaterSensor_1msIrqHandle+0xb0>)
 8004a4c:	0011      	movs	r1, r2
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f7fd ffb2 	bl	80029b8 <btn_progress_loop>
  }
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	200004f0 	.word	0x200004f0
 8004a60:	20000994 	.word	0x20000994
 8004a64:	20000290 	.word	0x20000290
 8004a68:	20000310 	.word	0x20000310
 8004a6c:	20000535 	.word	0x20000535
 8004a70:	50000400 	.word	0x50000400
 8004a74:	20000418 	.word	0x20000418

08004a78 <testWaterSensorTask>:
static uint8_t retryReadLedGreenOn=0;
uint8_t retryCalib=0;

void testWaterSensorTask();
void testWaterSensorTask()
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af02      	add	r7, sp, #8
  static uint8_t irLeftOlderStt,irRightOlderStt;

  //Phát hiện that nhanh
  if(TOOL.state==_test_countSensor){
 8004a7e:	4bd5      	ldr	r3, [pc, #852]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b07      	cmp	r3, #7
 8004a84:	d000      	beq.n	8004a88 <testWaterSensorTask+0x10>
 8004a86:	e07d      	b.n	8004b84 <testWaterSensorTask+0x10c>
      //Nếu motor ở bên trái là ô bên phải được mở : Sensor Pass
      if(TWMOTOR.atPosition==_POS_LEFT){
 8004a88:	4bd3      	ldr	r3, [pc, #844]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004a8a:	789b      	ldrb	r3, [r3, #2]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d137      	bne.n	8004b00 <testWaterSensorTask+0x88>
	  if(Get_Edge(TWMOTOR.SWTS.Bit.RIGHT_IR,&irRightOlderStt)==_FALLING){
 8004a90:	4bd1      	ldr	r3, [pc, #836]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	0fdb      	lsrs	r3, r3, #31
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	4bcf      	ldr	r3, [pc, #828]	; (8004ddc <testWaterSensorTask+0x364>)
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	0010      	movs	r0, r2
 8004aa2:	f7fe fec7 	bl	8003834 <Get_Edge>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d164      	bne.n	8004b76 <testWaterSensorTask+0xfe>
	      TOOL.PassNum++;
 8004aac:	4bc9      	ldr	r3, [pc, #804]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004aae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	4bc7      	ldr	r3, [pc, #796]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004ab6:	871a      	strh	r2, [r3, #56]	; 0x38
	      flashDataInfor.HalfWord_t.countPassSensor=TOOL.PassNum;
 8004ab8:	4bc6      	ldr	r3, [pc, #792]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004aba:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004abc:	4bc8      	ldr	r3, [pc, #800]	; (8004de0 <testWaterSensorTask+0x368>)
 8004abe:	809a      	strh	r2, [r3, #4]
	      TOOL.state=_test_null;
 8004ac0:	4bc4      	ldr	r3, [pc, #784]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
	      OUTPUT_setOff(&_ctrlOutput[_LED_OK],0);
 8004ac6:	4bc7      	ldr	r3, [pc, #796]	; (8004de4 <testWaterSensorTask+0x36c>)
 8004ac8:	2100      	movs	r1, #0
 8004aca:	0018      	movs	r0, r3
 8004acc:	f7fe f8c2 	bl	8002c54 <OUTPUT_setOff>
	      OUTPUT_setOff(&_ctrlOutput[_LED_ERROR],0);
 8004ad0:	4bc5      	ldr	r3, [pc, #788]	; (8004de8 <testWaterSensorTask+0x370>)
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7fe f8bd 	bl	8002c54 <OUTPUT_setOff>
	      delay_ms(500);
 8004ada:	23fa      	movs	r3, #250	; 0xfa
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f7fe fe96 	bl	8003810 <delay_ms>
	      if(TWMOTOR.SWTS.Bit.RIGHT_IR)MotorGotoPosition(&TWMOTOR,_POS_MID,_TIMEOUT_MOTOR);
 8004ae4:	4bbc      	ldr	r3, [pc, #752]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	4013      	ands	r3, r2
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d041      	beq.n	8004b76 <testWaterSensorTask+0xfe>
 8004af2:	4abe      	ldr	r2, [pc, #760]	; (8004dec <testWaterSensorTask+0x374>)
 8004af4:	4bb8      	ldr	r3, [pc, #736]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004af6:	2102      	movs	r1, #2
 8004af8:	0018      	movs	r0, r3
 8004afa:	f001 ff31 	bl	8006960 <MotorGotoPosition>
 8004afe:	e03a      	b.n	8004b76 <testWaterSensorTask+0xfe>
	  }
      }
      //Ngược lại : Sensor Fail
      else if(TWMOTOR.atPosition==_POS_RIGHT){
 8004b00:	4bb5      	ldr	r3, [pc, #724]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004b02:	789b      	ldrb	r3, [r3, #2]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d136      	bne.n	8004b76 <testWaterSensorTask+0xfe>
	  if(Get_Edge(TWMOTOR.SWTS.Bit.LEFT_IR,&irLeftOlderStt)==_FALLING){
 8004b08:	4bb3      	ldr	r3, [pc, #716]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	06db      	lsls	r3, r3, #27
 8004b0e:	0fdb      	lsrs	r3, r3, #31
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	001a      	movs	r2, r3
 8004b14:	4bb6      	ldr	r3, [pc, #728]	; (8004df0 <testWaterSensorTask+0x378>)
 8004b16:	0019      	movs	r1, r3
 8004b18:	0010      	movs	r0, r2
 8004b1a:	f7fe fe8b 	bl	8003834 <Get_Edge>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d128      	bne.n	8004b76 <testWaterSensorTask+0xfe>
	      TOOL.FailNum++;
 8004b24:	4bab      	ldr	r3, [pc, #684]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004b26:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004b28:	3301      	adds	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	4ba9      	ldr	r3, [pc, #676]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004b2e:	875a      	strh	r2, [r3, #58]	; 0x3a
	      flashDataInfor.HalfWord_t.countFailSensor=TOOL.FailNum;
 8004b30:	4ba8      	ldr	r3, [pc, #672]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004b32:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8004b34:	4baa      	ldr	r3, [pc, #680]	; (8004de0 <testWaterSensorTask+0x368>)
 8004b36:	80da      	strh	r2, [r3, #6]
	      TOOL.state=_test_null;
 8004b38:	4ba6      	ldr	r3, [pc, #664]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
	      OUTPUT_setOff(&_ctrlOutput[_LED_OK],0);
 8004b3e:	4ba9      	ldr	r3, [pc, #676]	; (8004de4 <testWaterSensorTask+0x36c>)
 8004b40:	2100      	movs	r1, #0
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fe f886 	bl	8002c54 <OUTPUT_setOff>
	      OUTPUT_setOff(&_ctrlOutput[_LED_ERROR],0);
 8004b48:	4ba7      	ldr	r3, [pc, #668]	; (8004de8 <testWaterSensorTask+0x370>)
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7fe f881 	bl	8002c54 <OUTPUT_setOff>
	      delay_ms(500);
 8004b52:	23fa      	movs	r3, #250	; 0xfa
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	0018      	movs	r0, r3
 8004b58:	f7fe fe5a 	bl	8003810 <delay_ms>
	      if(TWMOTOR.SWTS.Bit.LEFT_IR)MotorGotoPosition(&TWMOTOR,_POS_MID,_TIMEOUT_MOTOR);
 8004b5c:	4b9e      	ldr	r3, [pc, #632]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2210      	movs	r2, #16
 8004b62:	4013      	ands	r3, r2
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <testWaterSensorTask+0xfe>
 8004b6a:	4aa0      	ldr	r2, [pc, #640]	; (8004dec <testWaterSensorTask+0x374>)
 8004b6c:	4b9a      	ldr	r3, [pc, #616]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004b6e:	2102      	movs	r1, #2
 8004b70:	0018      	movs	r0, r3
 8004b72:	f001 fef5 	bl	8006960 <MotorGotoPosition>
	  }
      }
      Flash_WriteDWord(flashDataInfor.Dword, FLASH_ADDRESS_START);
 8004b76:	4b9a      	ldr	r3, [pc, #616]	; (8004de0 <testWaterSensorTask+0x368>)
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	4b9d      	ldr	r3, [pc, #628]	; (8004df4 <testWaterSensorTask+0x37c>)
 8004b7e:	001a      	movs	r2, r3
 8004b80:	f7fe fefe 	bl	8003980 <Flash_WriteDWord>
  }

  if(!timer_expired(&_timeoutCheckState))
 8004b84:	4b9c      	ldr	r3, [pc, #624]	; (8004df8 <testWaterSensorTask+0x380>)
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7fe fade 	bl	8003148 <timer_expired>
 8004b8c:	1e03      	subs	r3, r0, #0
 8004b8e:	d100      	bne.n	8004b92 <testWaterSensorTask+0x11a>
 8004b90:	e364      	b.n	800525c <testWaterSensorTask+0x7e4>
	return;

  //Đọc trạng thái của Ánh sánh
  TOOL.lightStt = getBright();
 8004b92:	f7ff fb43 	bl	800421c <getBright>
 8004b96:	0003      	movs	r3, r0
 8004b98:	0019      	movs	r1, r3
 8004b9a:	4b8e      	ldr	r3, [pc, #568]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004b9c:	2233      	movs	r2, #51	; 0x33
 8004b9e:	5499      	strb	r1, [r3, r2]

  //check led đỏ thì ko reset timer
  if(TOOL.state!=_test_ledRedBlink)
 8004ba0:	4b8c      	ldr	r3, [pc, #560]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d003      	beq.n	8004bb0 <testWaterSensorTask+0x138>
    timer_restart(&_timeoutCheckState);
 8004ba8:	4b93      	ldr	r3, [pc, #588]	; (8004df8 <testWaterSensorTask+0x380>)
 8004baa:	0018      	movs	r0, r3
 8004bac:	f7fe faba 	bl	8003124 <timer_restart>

  //Học giá trị Ánh sáng của môi trường
  if(TOOL.adcLightStart==0){
 8004bb0:	4b88      	ldr	r3, [pc, #544]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004bb2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <testWaterSensorTask+0x156>
    TOOL.adcLightStart = ADC_Arr[_ID_ADC_ptcHsink];
 8004bb8:	4b90      	ldr	r3, [pc, #576]	; (8004dfc <testWaterSensorTask+0x384>)
 8004bba:	885b      	ldrh	r3, [r3, #2]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	4b85      	ldr	r3, [pc, #532]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004bc0:	861a      	strh	r2, [r3, #48]	; 0x30
    timer_set(&_timeoutCheckState, 20);
 8004bc2:	4b8d      	ldr	r3, [pc, #564]	; (8004df8 <testWaterSensorTask+0x380>)
 8004bc4:	2114      	movs	r1, #20
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f7fe fa94 	bl	80030f4 <timer_set>
    return;
 8004bcc:	e355      	b.n	800527a <testWaterSensorTask+0x802>
  }

  //Switch case
  switch(TOOL.state)
 8004bce:	4b81      	ldr	r3, [pc, #516]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b06      	cmp	r3, #6
 8004bd4:	d900      	bls.n	8004bd8 <testWaterSensorTask+0x160>
 8004bd6:	e343      	b.n	8005260 <testWaterSensorTask+0x7e8>
 8004bd8:	009a      	lsls	r2, r3, #2
 8004bda:	4b89      	ldr	r3, [pc, #548]	; (8004e00 <testWaterSensorTask+0x388>)
 8004bdc:	18d3      	adds	r3, r2, r3
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	469f      	mov	pc, r3
  {
    case _test_null:
      //reset ket qua
      gotoFinished(_TEST_NULL);
 8004be2:	2000      	movs	r0, #0
 8004be4:	f7ff fd2a 	bl	800463c <gotoFinished>
      //Kiem tra dien ap
      if(TOOL.voltage < 4)
 8004be8:	4b7a      	ldr	r3, [pc, #488]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	2181      	movs	r1, #129	; 0x81
 8004bee:	05c9      	lsls	r1, r1, #23
 8004bf0:	1c18      	adds	r0, r3, #0
 8004bf2:	f7fb fc67 	bl	80004c4 <__aeabi_fcmplt>
 8004bf6:	1e03      	subs	r3, r0, #0
 8004bf8:	d009      	beq.n	8004c0e <testWaterSensorTask+0x196>
      {
        sprintf(TOOL.LcdStr_row[0],D0_SUTAP_LOI);
 8004bfa:	4a82      	ldr	r2, [pc, #520]	; (8004e04 <testWaterSensorTask+0x38c>)
 8004bfc:	4b82      	ldr	r3, [pc, #520]	; (8004e08 <testWaterSensorTask+0x390>)
 8004bfe:	0011      	movs	r1, r2
 8004c00:	0018      	movs	r0, r3
 8004c02:	f008 fe2f 	bl	800d864 <siprintf>
        TOOL.state=_test_null;
 8004c06:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
        return;
 8004c0c:	e335      	b.n	800527a <testWaterSensorTask+0x802>
      }
      //kiểm tra dòng điện
      TOOL.current = getCurrent_mA();
 8004c0e:	f7fe ffd9 	bl	8003bc4 <getCurrent_mA>
 8004c12:	1c02      	adds	r2, r0, #0
 8004c14:	4b6f      	ldr	r3, [pc, #444]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24
      //Phát hiện bắt đầu ghim connector
      if(TOOL.current <= 0.4)
 8004c18:	4b6e      	ldr	r3, [pc, #440]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	1c18      	adds	r0, r3, #0
 8004c1e:	f7fd fddd 	bl	80027dc <__aeabi_f2d>
 8004c22:	4a7a      	ldr	r2, [pc, #488]	; (8004e0c <testWaterSensorTask+0x394>)
 8004c24:	4b7a      	ldr	r3, [pc, #488]	; (8004e10 <testWaterSensorTask+0x398>)
 8004c26:	f7fb fc1d 	bl	8000464 <__aeabi_dcmple>
 8004c2a:	1e03      	subs	r3, r0, #0
 8004c2c:	d009      	beq.n	8004c42 <testWaterSensorTask+0x1ca>
      {
	  sprintf(TOOL.LcdStr_row[0],D0_GHIM_CONNECTOR);
 8004c2e:	4a79      	ldr	r2, [pc, #484]	; (8004e14 <testWaterSensorTask+0x39c>)
 8004c30:	4b75      	ldr	r3, [pc, #468]	; (8004e08 <testWaterSensorTask+0x390>)
 8004c32:	0011      	movs	r1, r2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f008 fe15 	bl	800d864 <siprintf>
	  retryReadLedGreenOn=0;
 8004c3a:	4b77      	ldr	r3, [pc, #476]	; (8004e18 <testWaterSensorTask+0x3a0>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
      //Lỗi chập khi mới gắn điện
      else
      {
	sprintf(TOOL.LcdStr_row[0],D0_QUADONG_LOI);
      }
      break;
 8004c40:	e31b      	b.n	800527a <testWaterSensorTask+0x802>
      else if(TOOL.current > 0.4 && TOOL.current < 50)
 8004c42:	4b64      	ldr	r3, [pc, #400]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	1c18      	adds	r0, r3, #0
 8004c48:	f7fd fdc8 	bl	80027dc <__aeabi_f2d>
 8004c4c:	4a6f      	ldr	r2, [pc, #444]	; (8004e0c <testWaterSensorTask+0x394>)
 8004c4e:	4b70      	ldr	r3, [pc, #448]	; (8004e10 <testWaterSensorTask+0x398>)
 8004c50:	f7fb fc12 	bl	8000478 <__aeabi_dcmpgt>
 8004c54:	1e03      	subs	r3, r0, #0
 8004c56:	d042      	beq.n	8004cde <testWaterSensorTask+0x266>
 8004c58:	4b5e      	ldr	r3, [pc, #376]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	496f      	ldr	r1, [pc, #444]	; (8004e1c <testWaterSensorTask+0x3a4>)
 8004c5e:	1c18      	adds	r0, r3, #0
 8004c60:	f7fb fc30 	bl	80004c4 <__aeabi_fcmplt>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d03a      	beq.n	8004cde <testWaterSensorTask+0x266>
	  if(TOOL.lightStt == _PhotoCell_covered){
 8004c68:	4b5a      	ldr	r3, [pc, #360]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004c6a:	2233      	movs	r2, #51	; 0x33
 8004c6c:	5c9b      	ldrb	r3, [r3, r2]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d12e      	bne.n	8004cd0 <testWaterSensorTask+0x258>
	    if(TWMOTOR.SWTS.Bit.LEFT_IR==0 && TWMOTOR.SWTS.Bit.RIGHT_IR==0){
 8004c72:	4b59      	ldr	r3, [pc, #356]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2210      	movs	r2, #16
 8004c78:	4013      	ands	r3, r2
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10d      	bne.n	8004c9c <testWaterSensorTask+0x224>
 8004c80:	4b55      	ldr	r3, [pc, #340]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2208      	movs	r2, #8
 8004c86:	4013      	ands	r3, r2
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <testWaterSensorTask+0x224>
		sprintf(TOOL.LcdStr_row[0]," Bi Ket Di Vat");
 8004c8e:	4a64      	ldr	r2, [pc, #400]	; (8004e20 <testWaterSensorTask+0x3a8>)
 8004c90:	4b5d      	ldr	r3, [pc, #372]	; (8004e08 <testWaterSensorTask+0x390>)
 8004c92:	0011      	movs	r1, r2
 8004c94:	0018      	movs	r0, r3
 8004c96:	f008 fde5 	bl	800d864 <siprintf>
		return;
 8004c9a:	e2ee      	b.n	800527a <testWaterSensorTask+0x802>
		MotorGotoPosition(&TWMOTOR,_POS_MID,_TIMEOUT_MOTOR);
 8004c9c:	4a53      	ldr	r2, [pc, #332]	; (8004dec <testWaterSensorTask+0x374>)
 8004c9e:	4b4e      	ldr	r3, [pc, #312]	; (8004dd8 <testWaterSensorTask+0x360>)
 8004ca0:	2102      	movs	r1, #2
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f001 fe5c 	bl	8006960 <MotorGotoPosition>
		sprintf(TOOL.LcdStr_row[0],"Dang Khoi Dong");
 8004ca8:	4a5e      	ldr	r2, [pc, #376]	; (8004e24 <testWaterSensorTask+0x3ac>)
 8004caa:	4b57      	ldr	r3, [pc, #348]	; (8004e08 <testWaterSensorTask+0x390>)
 8004cac:	0011      	movs	r1, r2
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f008 fdd8 	bl	800d864 <siprintf>
		TOOL.state=_test_start;
 8004cb4:	4b47      	ldr	r3, [pc, #284]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	701a      	strb	r2, [r3, #0]
		retryCalib=0;
 8004cba:	4b5b      	ldr	r3, [pc, #364]	; (8004e28 <testWaterSensorTask+0x3b0>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
		timer_set(&_timeoutCheckState, 2000);//cũ là 1000 vẫn lỗi
 8004cc0:	23fa      	movs	r3, #250	; 0xfa
 8004cc2:	00da      	lsls	r2, r3, #3
 8004cc4:	4b4c      	ldr	r3, [pc, #304]	; (8004df8 <testWaterSensorTask+0x380>)
 8004cc6:	0011      	movs	r1, r2
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f7fe fa13 	bl	80030f4 <timer_set>
	  if(TOOL.lightStt == _PhotoCell_covered){
 8004cce:	e00d      	b.n	8004cec <testWaterSensorTask+0x274>
	    sprintf(TOOL.LcdStr_row[0],"Chua Ghim Sensor");
 8004cd0:	4a56      	ldr	r2, [pc, #344]	; (8004e2c <testWaterSensorTask+0x3b4>)
 8004cd2:	4b4d      	ldr	r3, [pc, #308]	; (8004e08 <testWaterSensorTask+0x390>)
 8004cd4:	0011      	movs	r1, r2
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f008 fdc4 	bl	800d864 <siprintf>
	  if(TOOL.lightStt == _PhotoCell_covered){
 8004cdc:	e006      	b.n	8004cec <testWaterSensorTask+0x274>
	sprintf(TOOL.LcdStr_row[0],D0_QUADONG_LOI);
 8004cde:	4a54      	ldr	r2, [pc, #336]	; (8004e30 <testWaterSensorTask+0x3b8>)
 8004ce0:	4b49      	ldr	r3, [pc, #292]	; (8004e08 <testWaterSensorTask+0x390>)
 8004ce2:	0011      	movs	r1, r2
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f008 fdbd 	bl	800d864 <siprintf>
      break;
 8004cea:	e2c6      	b.n	800527a <testWaterSensorTask+0x802>
 8004cec:	e2c5      	b.n	800527a <testWaterSensorTask+0x802>

    case _test_start:
      //gửi lệnh calib sensor
      CapSS_Start(&CAPSENSOR[_CAPSS_ID_WATER], _SS_CALIB_BYTE);
 8004cee:	4b51      	ldr	r3, [pc, #324]	; (8004e34 <testWaterSensorTask+0x3bc>)
 8004cf0:	2160      	movs	r1, #96	; 0x60
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f7fe faac 	bl	8003250 <CapSS_Start>
      timer_set(&_timeoutCheckState, 1100);
 8004cf8:	4a4f      	ldr	r2, [pc, #316]	; (8004e38 <testWaterSensorTask+0x3c0>)
 8004cfa:	4b3f      	ldr	r3, [pc, #252]	; (8004df8 <testWaterSensorTask+0x380>)
 8004cfc:	0011      	movs	r1, r2
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7fe f9f8 	bl	80030f4 <timer_set>
      TOOL.state=_test_ledCalib;
 8004d04:	4b33      	ldr	r3, [pc, #204]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004d06:	2203      	movs	r2, #3
 8004d08:	701a      	strb	r2, [r3, #0]
      break;
 8004d0a:	e2b6      	b.n	800527a <testWaterSensorTask+0x802>

    case _test_ledCalib:
      if(CAPSENSOR[_CAPSS_ID_WATER].connectStt==_PASS)
 8004d0c:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <testWaterSensorTask+0x3bc>)
 8004d0e:	789b      	ldrb	r3, [r3, #2]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d110      	bne.n	8004d38 <testWaterSensorTask+0x2c0>
      {
	  sprintf(TOOL.LcdStr_row[0],D0_CALIB_OK);
 8004d16:	4a49      	ldr	r2, [pc, #292]	; (8004e3c <testWaterSensorTask+0x3c4>)
 8004d18:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <testWaterSensorTask+0x390>)
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f008 fda1 	bl	800d864 <siprintf>
	  timer_set(&_timeoutCheckState, 300);
 8004d22:	2396      	movs	r3, #150	; 0x96
 8004d24:	005a      	lsls	r2, r3, #1
 8004d26:	4b34      	ldr	r3, [pc, #208]	; (8004df8 <testWaterSensorTask+0x380>)
 8004d28:	0011      	movs	r1, r2
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f7fe f9e2 	bl	80030f4 <timer_set>
	  TOOL.state=_test_ledGreenOn;
 8004d30:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004d32:	2204      	movs	r2, #4
 8004d34:	701a      	strb	r2, [r3, #0]
	    TOOL.state=_test_start;
	    timer_set(&_timeoutCheckState, 500);
	    return;
	  }
      }
      break;
 8004d36:	e295      	b.n	8005264 <testWaterSensorTask+0x7ec>
      else if(CAPSENSOR[_CAPSS_ID_WATER].connectStt==_FAIL)
 8004d38:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <testWaterSensorTask+0x3bc>)
 8004d3a:	789b      	ldrb	r3, [r3, #2]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d000      	beq.n	8004d44 <testWaterSensorTask+0x2cc>
 8004d42:	e28f      	b.n	8005264 <testWaterSensorTask+0x7ec>
	  if(++retryCalib > 2){
 8004d44:	4b38      	ldr	r3, [pc, #224]	; (8004e28 <testWaterSensorTask+0x3b0>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <testWaterSensorTask+0x3b0>)
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	4b35      	ldr	r3, [pc, #212]	; (8004e28 <testWaterSensorTask+0x3b0>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d909      	bls.n	8004d6c <testWaterSensorTask+0x2f4>
	      sprintf(TOOL.LcdStr_row[0],D0_CALIB_LOI);
 8004d58:	4a39      	ldr	r2, [pc, #228]	; (8004e40 <testWaterSensorTask+0x3c8>)
 8004d5a:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <testWaterSensorTask+0x390>)
 8004d5c:	0011      	movs	r1, r2
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f008 fd80 	bl	800d864 <siprintf>
	      gotoFinished(_TEST_ERROR);
 8004d64:	2001      	movs	r0, #1
 8004d66:	f7ff fc69 	bl	800463c <gotoFinished>
      break;
 8004d6a:	e27b      	b.n	8005264 <testWaterSensorTask+0x7ec>
	    TOOL.state=_test_start;
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	701a      	strb	r2, [r3, #0]
	    timer_set(&_timeoutCheckState, 500);
 8004d72:	23fa      	movs	r3, #250	; 0xfa
 8004d74:	005a      	lsls	r2, r3, #1
 8004d76:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <testWaterSensorTask+0x380>)
 8004d78:	0011      	movs	r1, r2
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7fe f9ba 	bl	80030f4 <timer_set>
	    return;
 8004d80:	e27b      	b.n	800527a <testWaterSensorTask+0x802>

    case _test_ledGreenOn:
      if(TOOL.lightStt == _PhotoCell_LedGreenOn)
 8004d82:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004d84:	2233      	movs	r2, #51	; 0x33
 8004d86:	5c9b      	ldrb	r3, [r3, r2]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d163      	bne.n	8004e54 <testWaterSensorTask+0x3dc>
      {
	if(CAPSENSOR[0].logicStt == _LOW)
 8004d8c:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <testWaterSensorTask+0x3bc>)
 8004d8e:	78db      	ldrb	r3, [r3, #3]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d116      	bne.n	8004dc4 <testWaterSensorTask+0x34c>
	{
	  sprintf(TOOL.LcdStr_row[0],D0_LEDGREEN_SANG);
 8004d96:	4a2b      	ldr	r2, [pc, #172]	; (8004e44 <testWaterSensorTask+0x3cc>)
 8004d98:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <testWaterSensorTask+0x390>)
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f008 fd61 	bl	800d864 <siprintf>
	  TOOL.state=_test_ledGreenOff;
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <testWaterSensorTask+0x35c>)
 8004da4:	2205      	movs	r2, #5
 8004da6:	701a      	strb	r2, [r3, #0]
	  timer_set(&_timeoutCheckLedGreenOff,3500);
 8004da8:	4a27      	ldr	r2, [pc, #156]	; (8004e48 <testWaterSensorTask+0x3d0>)
 8004daa:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <testWaterSensorTask+0x3d4>)
 8004dac:	0011      	movs	r1, r2
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fe f9a0 	bl	80030f4 <timer_set>
	  timer_set(&_timeoutCheckState,500);
 8004db4:	23fa      	movs	r3, #250	; 0xfa
 8004db6:	005a      	lsls	r2, r3, #1
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <testWaterSensorTask+0x380>)
 8004dba:	0011      	movs	r1, r2
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7fe f999 	bl	80030f4 <timer_set>
	  return;
 8004dc2:	e25a      	b.n	800527a <testWaterSensorTask+0x802>
	}
	else
	{
	  sprintf(TOOL.LcdStr_row[0],D0_DAYLOGIC_LUON1_LOI);
 8004dc4:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <testWaterSensorTask+0x3d8>)
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <testWaterSensorTask+0x390>)
 8004dc8:	0011      	movs	r1, r2
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f008 fd4a 	bl	800d864 <siprintf>
 8004dd0:	e046      	b.n	8004e60 <testWaterSensorTask+0x3e8>
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	20000448 	.word	0x20000448
 8004dd8:	20000994 	.word	0x20000994
 8004ddc:	20000536 	.word	0x20000536
 8004de0:	20000488 	.word	0x20000488
 8004de4:	20000368 	.word	0x20000368
 8004de8:	20000394 	.word	0x20000394
 8004dec:	00000bb8 	.word	0x00000bb8
 8004df0:	20000537 	.word	0x20000537
 8004df4:	0801f800 	.word	0x0801f800
 8004df8:	20000490 	.word	0x20000490
 8004dfc:	20000440 	.word	0x20000440
 8004e00:	080100b8 	.word	0x080100b8
 8004e04:	0800fd94 	.word	0x0800fd94
 8004e08:	2000044a 	.word	0x2000044a
 8004e0c:	9999999a 	.word	0x9999999a
 8004e10:	3fd99999 	.word	0x3fd99999
 8004e14:	0800fda8 	.word	0x0800fda8
 8004e18:	2000050c 	.word	0x2000050c
 8004e1c:	42480000 	.word	0x42480000
 8004e20:	0800fdbc 	.word	0x0800fdbc
 8004e24:	0800fdcc 	.word	0x0800fdcc
 8004e28:	2000050d 	.word	0x2000050d
 8004e2c:	0800fddc 	.word	0x0800fddc
 8004e30:	0800fdf0 	.word	0x0800fdf0
 8004e34:	20000290 	.word	0x20000290
 8004e38:	0000044c 	.word	0x0000044c
 8004e3c:	0800fe04 	.word	0x0800fe04
 8004e40:	0800fe14 	.word	0x0800fe14
 8004e44:	0800fe28 	.word	0x0800fe28
 8004e48:	00000dac 	.word	0x00000dac
 8004e4c:	200004c0 	.word	0x200004c0
 8004e50:	0800fe38 	.word	0x0800fe38
	}
      }
      else
      {
	  sprintf(TOOL.LcdStr_row[0],D0_LEDGREEN_LUON0_LOI);
 8004e54:	4ad3      	ldr	r2, [pc, #844]	; (80051a4 <testWaterSensorTask+0x72c>)
 8004e56:	4bd4      	ldr	r3, [pc, #848]	; (80051a8 <testWaterSensorTask+0x730>)
 8004e58:	0011      	movs	r1, r2
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f008 fd02 	bl	800d864 <siprintf>

      }

      if(++retryReadLedGreenOn > 10)
 8004e60:	4bd2      	ldr	r3, [pc, #840]	; (80051ac <testWaterSensorTask+0x734>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	4bd0      	ldr	r3, [pc, #832]	; (80051ac <testWaterSensorTask+0x734>)
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	4bcf      	ldr	r3, [pc, #828]	; (80051ac <testWaterSensorTask+0x734>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b0a      	cmp	r3, #10
 8004e72:	d800      	bhi.n	8004e76 <testWaterSensorTask+0x3fe>
 8004e74:	e1f8      	b.n	8005268 <testWaterSensorTask+0x7f0>
      {
	  retryReadLedGreenOn=0;
 8004e76:	4bcd      	ldr	r3, [pc, #820]	; (80051ac <testWaterSensorTask+0x734>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
	  gotoFinished(_TEST_ERROR);
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f7ff fbdd 	bl	800463c <gotoFinished>
      }
      break;
 8004e82:	e1f1      	b.n	8005268 <testWaterSensorTask+0x7f0>

    case _test_ledGreenOff:

      if(TOOL.lightStt == _PhotoCell_covered)
 8004e84:	4bca      	ldr	r3, [pc, #808]	; (80051b0 <testWaterSensorTask+0x738>)
 8004e86:	2233      	movs	r2, #51	; 0x33
 8004e88:	5c9b      	ldrb	r3, [r3, r2]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d12b      	bne.n	8004ee6 <testWaterSensorTask+0x46e>
      {
	if(CAPSENSOR[0].logicStt)
 8004e8e:	4bc9      	ldr	r3, [pc, #804]	; (80051b4 <testWaterSensorTask+0x73c>)
 8004e90:	78db      	ldrb	r3, [r3, #3]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d018      	beq.n	8004eca <testWaterSensorTask+0x452>
	{
	  sprintf(TOOL.LcdStr_row[0],D0_CHECK_LED_RED);
 8004e98:	4ac7      	ldr	r2, [pc, #796]	; (80051b8 <testWaterSensorTask+0x740>)
 8004e9a:	4bc3      	ldr	r3, [pc, #780]	; (80051a8 <testWaterSensorTask+0x730>)
 8004e9c:	0011      	movs	r1, r2
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f008 fce0 	bl	800d864 <siprintf>
	  timer_stop(&_timeoutCheckLedGreenOff);
 8004ea4:	4bc5      	ldr	r3, [pc, #788]	; (80051bc <testWaterSensorTask+0x744>)
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7fe f974 	bl	8003194 <timer_stop>
	  timer_set(&_timeoutCheckLedRed, 2500);
 8004eac:	4ac4      	ldr	r2, [pc, #784]	; (80051c0 <testWaterSensorTask+0x748>)
 8004eae:	4bc5      	ldr	r3, [pc, #788]	; (80051c4 <testWaterSensorTask+0x74c>)
 8004eb0:	0011      	movs	r1, r2
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f7fe f91e 	bl	80030f4 <timer_set>
	  timer_set(&_timeoutCheckState,20);
 8004eb8:	4bc3      	ldr	r3, [pc, #780]	; (80051c8 <testWaterSensorTask+0x750>)
 8004eba:	2114      	movs	r1, #20
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f7fe f919 	bl	80030f4 <timer_set>
	  TOOL.state=_test_ledRedBlink;
 8004ec2:	4bbb      	ldr	r3, [pc, #748]	; (80051b0 <testWaterSensorTask+0x738>)
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	701a      	strb	r2, [r3, #0]
	  return;
 8004ec8:	e1d7      	b.n	800527a <testWaterSensorTask+0x802>
	}
	else
	{
	  sprintf(TOOL.LcdStr_row[0],D0_DAYLOGIC_LUON0_LOI);
 8004eca:	4ac0      	ldr	r2, [pc, #768]	; (80051cc <testWaterSensorTask+0x754>)
 8004ecc:	4bb6      	ldr	r3, [pc, #728]	; (80051a8 <testWaterSensorTask+0x730>)
 8004ece:	0011      	movs	r1, r2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f008 fcc7 	bl	800d864 <siprintf>
	  timer_stop(&_timeoutCheckLedGreenOff);
 8004ed6:	4bb9      	ldr	r3, [pc, #740]	; (80051bc <testWaterSensorTask+0x744>)
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7fe f95b 	bl	8003194 <timer_stop>
	  gotoFinished(_TEST_ERROR);
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f7ff fbac 	bl	800463c <gotoFinished>
	  return;
 8004ee4:	e1c9      	b.n	800527a <testWaterSensorTask+0x802>
	}
      }
      else
	f_checkLedXanh=1;
 8004ee6:	4bba      	ldr	r3, [pc, #744]	; (80051d0 <testWaterSensorTask+0x758>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	701a      	strb	r2, [r3, #0]

      if(timer_expired(&_timeoutCheckLedGreenOff))
 8004eec:	4bb3      	ldr	r3, [pc, #716]	; (80051bc <testWaterSensorTask+0x744>)
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f7fe f92a 	bl	8003148 <timer_expired>
 8004ef4:	1e03      	subs	r3, r0, #0
 8004ef6:	d100      	bne.n	8004efa <testWaterSensorTask+0x482>
 8004ef8:	e1b8      	b.n	800526c <testWaterSensorTask+0x7f4>
      {
	sprintf(TOOL.LcdStr_row[0],D0_LEDGREEN_LUON1_LOI);
 8004efa:	4ab6      	ldr	r2, [pc, #728]	; (80051d4 <testWaterSensorTask+0x75c>)
 8004efc:	4baa      	ldr	r3, [pc, #680]	; (80051a8 <testWaterSensorTask+0x730>)
 8004efe:	0011      	movs	r1, r2
 8004f00:	0018      	movs	r0, r3
 8004f02:	f008 fcaf 	bl	800d864 <siprintf>
	timer_stop(&_timeoutCheckLedGreenOff);
 8004f06:	4bad      	ldr	r3, [pc, #692]	; (80051bc <testWaterSensorTask+0x744>)
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7fe f943 	bl	8003194 <timer_stop>
	gotoFinished(_TEST_ERROR);
 8004f0e:	2001      	movs	r0, #1
 8004f10:	f7ff fb94 	bl	800463c <gotoFinished>
	return;
 8004f14:	e1b1      	b.n	800527a <testWaterSensorTask+0x802>
      }
      break;

    case _test_ledRedBlink:
      if(timer_expired(&_timeoutCheckLedRed))
 8004f16:	4bab      	ldr	r3, [pc, #684]	; (80051c4 <testWaterSensorTask+0x74c>)
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7fe f915 	bl	8003148 <timer_expired>
 8004f1e:	1e03      	subs	r3, r0, #0
 8004f20:	d028      	beq.n	8004f74 <testWaterSensorTask+0x4fc>
      {
	if(TOOL.lightStt == _PhotoCell_LedGreenOn || f_checkLedXanh==1)
 8004f22:	4ba3      	ldr	r3, [pc, #652]	; (80051b0 <testWaterSensorTask+0x738>)
 8004f24:	2233      	movs	r2, #51	; 0x33
 8004f26:	5c9b      	ldrb	r3, [r3, r2]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d003      	beq.n	8004f34 <testWaterSensorTask+0x4bc>
 8004f2c:	4ba8      	ldr	r3, [pc, #672]	; (80051d0 <testWaterSensorTask+0x758>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d106      	bne.n	8004f42 <testWaterSensorTask+0x4ca>
	  sprintf(TOOL.LcdStr_row[0],D0_LEDGREEN_LUONSANG_LOI);
 8004f34:	4aa8      	ldr	r2, [pc, #672]	; (80051d8 <testWaterSensorTask+0x760>)
 8004f36:	4b9c      	ldr	r3, [pc, #624]	; (80051a8 <testWaterSensorTask+0x730>)
 8004f38:	0011      	movs	r1, r2
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f008 fc92 	bl	800d864 <siprintf>
 8004f40:	e014      	b.n	8004f6c <testWaterSensorTask+0x4f4>
	else if(TOOL.current > 30/*mA*/)
 8004f42:	4b9b      	ldr	r3, [pc, #620]	; (80051b0 <testWaterSensorTask+0x738>)
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	49a5      	ldr	r1, [pc, #660]	; (80051dc <testWaterSensorTask+0x764>)
 8004f48:	1c18      	adds	r0, r3, #0
 8004f4a:	f7fb facf 	bl	80004ec <__aeabi_fcmpgt>
 8004f4e:	1e03      	subs	r3, r0, #0
 8004f50:	d006      	beq.n	8004f60 <testWaterSensorTask+0x4e8>
	{
		sprintf(TOOL.LcdStr_row[0],D0_LED_LOI_QUADONG);
 8004f52:	4aa3      	ldr	r2, [pc, #652]	; (80051e0 <testWaterSensorTask+0x768>)
 8004f54:	4b94      	ldr	r3, [pc, #592]	; (80051a8 <testWaterSensorTask+0x730>)
 8004f56:	0011      	movs	r1, r2
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f008 fc83 	bl	800d864 <siprintf>
 8004f5e:	e005      	b.n	8004f6c <testWaterSensorTask+0x4f4>
	}
	else
	  sprintf(TOOL.LcdStr_row[0],D0_LED_RED_LOI);
 8004f60:	4aa0      	ldr	r2, [pc, #640]	; (80051e4 <testWaterSensorTask+0x76c>)
 8004f62:	4b91      	ldr	r3, [pc, #580]	; (80051a8 <testWaterSensorTask+0x730>)
 8004f64:	0011      	movs	r1, r2
 8004f66:	0018      	movs	r0, r3
 8004f68:	f008 fc7c 	bl	800d864 <siprintf>

	gotoFinished(_TEST_ERROR);
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	f7ff fb65 	bl	800463c <gotoFinished>
	return;
 8004f72:	e182      	b.n	800527a <testWaterSensorTask+0x802>
      }

      //Không kiểm tra Led đỏ khi Led xanh sáng
      if(TOOL.lightStt == _PhotoCell_LedGreenOn)
 8004f74:	4b8e      	ldr	r3, [pc, #568]	; (80051b0 <testWaterSensorTask+0x738>)
 8004f76:	2233      	movs	r2, #51	; 0x33
 8004f78:	5c9b      	ldrb	r3, [r3, r2]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d100      	bne.n	8004f80 <testWaterSensorTask+0x508>
 8004f7e:	e177      	b.n	8005270 <testWaterSensorTask+0x7f8>
	return;
      else
	f_checkLedXanh=0;
 8004f80:	4b93      	ldr	r3, [pc, #588]	; (80051d0 <testWaterSensorTask+0x758>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]

      //Đo dòng điện
      TOOL.current = getCurrent_mA();
 8004f86:	f7fe fe1d 	bl	8003bc4 <getCurrent_mA>
 8004f8a:	1c02      	adds	r2, r0, #0
 8004f8c:	4b88      	ldr	r3, [pc, #544]	; (80051b0 <testWaterSensorTask+0x738>)
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24
      //Kiểm tra led đỏ nhấp nháy
      if((ledRedTog%2==0) && _LIMIT(TOOL.current,0.8,6))
 8004f90:	4b95      	ldr	r3, [pc, #596]	; (80051e8 <testWaterSensorTask+0x770>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2201      	movs	r2, #1
 8004f96:	4013      	ands	r3, r2
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d11d      	bne.n	8004fda <testWaterSensorTask+0x562>
 8004f9e:	4b84      	ldr	r3, [pc, #528]	; (80051b0 <testWaterSensorTask+0x738>)
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	1c18      	adds	r0, r3, #0
 8004fa4:	f7fd fc1a 	bl	80027dc <__aeabi_f2d>
 8004fa8:	4a90      	ldr	r2, [pc, #576]	; (80051ec <testWaterSensorTask+0x774>)
 8004faa:	4b91      	ldr	r3, [pc, #580]	; (80051f0 <testWaterSensorTask+0x778>)
 8004fac:	f7fb fa6e 	bl	800048c <__aeabi_dcmpge>
 8004fb0:	1e03      	subs	r3, r0, #0
 8004fb2:	d012      	beq.n	8004fda <testWaterSensorTask+0x562>
 8004fb4:	4b7e      	ldr	r3, [pc, #504]	; (80051b0 <testWaterSensorTask+0x738>)
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	498e      	ldr	r1, [pc, #568]	; (80051f4 <testWaterSensorTask+0x77c>)
 8004fba:	1c18      	adds	r0, r3, #0
 8004fbc:	f7fb fa8c 	bl	80004d8 <__aeabi_fcmple>
 8004fc0:	1e03      	subs	r3, r0, #0
 8004fc2:	d00a      	beq.n	8004fda <testWaterSensorTask+0x562>
      {
	ledRedTog++;
 8004fc4:	4b88      	ldr	r3, [pc, #544]	; (80051e8 <testWaterSensorTask+0x770>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	4b86      	ldr	r3, [pc, #536]	; (80051e8 <testWaterSensorTask+0x770>)
 8004fce:	701a      	strb	r2, [r3, #0]
	curLedRedOff = TOOL.current;
 8004fd0:	4b77      	ldr	r3, [pc, #476]	; (80051b0 <testWaterSensorTask+0x738>)
 8004fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fd4:	4b88      	ldr	r3, [pc, #544]	; (80051f8 <testWaterSensorTask+0x780>)
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e020      	b.n	800501c <testWaterSensorTask+0x5a4>
      }
      else if((ledRedTog%2==1) && _LIMIT(TOOL.current,10,20))
 8004fda:	4b83      	ldr	r3, [pc, #524]	; (80051e8 <testWaterSensorTask+0x770>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d019      	beq.n	800501c <testWaterSensorTask+0x5a4>
 8004fe8:	4b71      	ldr	r3, [pc, #452]	; (80051b0 <testWaterSensorTask+0x738>)
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	4983      	ldr	r1, [pc, #524]	; (80051fc <testWaterSensorTask+0x784>)
 8004fee:	1c18      	adds	r0, r3, #0
 8004ff0:	f7fb fa86 	bl	8000500 <__aeabi_fcmpge>
 8004ff4:	1e03      	subs	r3, r0, #0
 8004ff6:	d011      	beq.n	800501c <testWaterSensorTask+0x5a4>
 8004ff8:	4b6d      	ldr	r3, [pc, #436]	; (80051b0 <testWaterSensorTask+0x738>)
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	4980      	ldr	r1, [pc, #512]	; (8005200 <testWaterSensorTask+0x788>)
 8004ffe:	1c18      	adds	r0, r3, #0
 8005000:	f7fb fa6a 	bl	80004d8 <__aeabi_fcmple>
 8005004:	1e03      	subs	r3, r0, #0
 8005006:	d009      	beq.n	800501c <testWaterSensorTask+0x5a4>
      {
	ledRedTog++;
 8005008:	4b77      	ldr	r3, [pc, #476]	; (80051e8 <testWaterSensorTask+0x770>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	b2da      	uxtb	r2, r3
 8005010:	4b75      	ldr	r3, [pc, #468]	; (80051e8 <testWaterSensorTask+0x770>)
 8005012:	701a      	strb	r2, [r3, #0]
	curLedRedOn =  TOOL.current;
 8005014:	4b66      	ldr	r3, [pc, #408]	; (80051b0 <testWaterSensorTask+0x738>)
 8005016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005018:	4b7a      	ldr	r3, [pc, #488]	; (8005204 <testWaterSensorTask+0x78c>)
 800501a:	601a      	str	r2, [r3, #0]
      }

      //OK
      if(ledRedTog>2)
 800501c:	4b72      	ldr	r3, [pc, #456]	; (80051e8 <testWaterSensorTask+0x770>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d800      	bhi.n	8005026 <testWaterSensorTask+0x5ae>
 8005024:	e126      	b.n	8005274 <testWaterSensorTask+0x7fc>
      {
	  if(_LIMIT(curLedRedOff,0.8,1.5))//&&_LIMIT(curLedRedOn,9,15.5))
 8005026:	4b74      	ldr	r3, [pc, #464]	; (80051f8 <testWaterSensorTask+0x780>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	1c18      	adds	r0, r3, #0
 800502c:	f7fd fbd6 	bl	80027dc <__aeabi_f2d>
 8005030:	4a6e      	ldr	r2, [pc, #440]	; (80051ec <testWaterSensorTask+0x774>)
 8005032:	4b6f      	ldr	r3, [pc, #444]	; (80051f0 <testWaterSensorTask+0x778>)
 8005034:	f7fb fa2a 	bl	800048c <__aeabi_dcmpge>
 8005038:	1e03      	subs	r3, r0, #0
 800503a:	d00f      	beq.n	800505c <testWaterSensorTask+0x5e4>
 800503c:	4b6e      	ldr	r3, [pc, #440]	; (80051f8 <testWaterSensorTask+0x780>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	21ff      	movs	r1, #255	; 0xff
 8005042:	0589      	lsls	r1, r1, #22
 8005044:	1c18      	adds	r0, r3, #0
 8005046:	f7fb fa47 	bl	80004d8 <__aeabi_fcmple>
 800504a:	1e03      	subs	r3, r0, #0
 800504c:	d006      	beq.n	800505c <testWaterSensorTask+0x5e4>
		sprintf(TOOL.LcdStr_row[0],D0_LED_RED_SANG_OK);
 800504e:	4a6e      	ldr	r2, [pc, #440]	; (8005208 <testWaterSensorTask+0x790>)
 8005050:	4b55      	ldr	r3, [pc, #340]	; (80051a8 <testWaterSensorTask+0x730>)
 8005052:	0011      	movs	r1, r2
 8005054:	0018      	movs	r0, r3
 8005056:	f008 fc05 	bl	800d864 <siprintf>
 800505a:	e01d      	b.n	8005098 <testWaterSensorTask+0x620>
	  else if(_LIMIT(curLedRedOff,4,6))//&&_LIMIT(curLedRedOn,15.6,19))
 800505c:	4b66      	ldr	r3, [pc, #408]	; (80051f8 <testWaterSensorTask+0x780>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2181      	movs	r1, #129	; 0x81
 8005062:	05c9      	lsls	r1, r1, #23
 8005064:	1c18      	adds	r0, r3, #0
 8005066:	f7fb fa4b 	bl	8000500 <__aeabi_fcmpge>
 800506a:	1e03      	subs	r3, r0, #0
 800506c:	d00e      	beq.n	800508c <testWaterSensorTask+0x614>
 800506e:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <testWaterSensorTask+0x780>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4960      	ldr	r1, [pc, #384]	; (80051f4 <testWaterSensorTask+0x77c>)
 8005074:	1c18      	adds	r0, r3, #0
 8005076:	f7fb fa2f 	bl	80004d8 <__aeabi_fcmple>
 800507a:	1e03      	subs	r3, r0, #0
 800507c:	d006      	beq.n	800508c <testWaterSensorTask+0x614>
		sprintf(TOOL.LcdStr_row[0],D0_LED_RED_TAT_OK);
 800507e:	4a63      	ldr	r2, [pc, #396]	; (800520c <testWaterSensorTask+0x794>)
 8005080:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <testWaterSensorTask+0x730>)
 8005082:	0011      	movs	r1, r2
 8005084:	0018      	movs	r0, r3
 8005086:	f008 fbed 	bl	800d864 <siprintf>
 800508a:	e005      	b.n	8005098 <testWaterSensorTask+0x620>
	  else
	  {
		sprintf(TOOL.LcdStr_row[0],D0_LED_RED_X_OK);
 800508c:	4a60      	ldr	r2, [pc, #384]	; (8005210 <testWaterSensorTask+0x798>)
 800508e:	4b46      	ldr	r3, [pc, #280]	; (80051a8 <testWaterSensorTask+0x730>)
 8005090:	0011      	movs	r1, r2
 8005092:	0018      	movs	r0, r3
 8005094:	f008 fbe6 	bl	800d864 <siprintf>
	  }
	  timer_set(&_timeoutCheckState,500);
 8005098:	23fa      	movs	r3, #250	; 0xfa
 800509a:	005a      	lsls	r2, r3, #1
 800509c:	4b4a      	ldr	r3, [pc, #296]	; (80051c8 <testWaterSensorTask+0x750>)
 800509e:	0011      	movs	r1, r2
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fe f827 	bl	80030f4 <timer_set>
	  sprintf(TOOL.LcdStr_row[0],D0_SENSOR_OK);
 80050a6:	4a5b      	ldr	r2, [pc, #364]	; (8005214 <testWaterSensorTask+0x79c>)
 80050a8:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <testWaterSensorTask+0x730>)
 80050aa:	0011      	movs	r1, r2
 80050ac:	0018      	movs	r0, r3
 80050ae:	f008 fbd9 	bl	800d864 <siprintf>
	  gotoFinished(_TEST_SUCCESS);
 80050b2:	2002      	movs	r0, #2
 80050b4:	f7ff fac2 	bl	800463c <gotoFinished>
	  return;
 80050b8:	e0df      	b.n	800527a <testWaterSensorTask+0x802>
      }
      break;

    case _test_finished:
      timer_set(&_timeoutCheckState,5);
 80050ba:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <testWaterSensorTask+0x750>)
 80050bc:	2105      	movs	r1, #5
 80050be:	0018      	movs	r0, r3
 80050c0:	f7fe f818 	bl	80030f4 <timer_set>
      TOOL.current = getCurrent_mA();
 80050c4:	f7fe fd7e 	bl	8003bc4 <getCurrent_mA>
 80050c8:	1c02      	adds	r2, r0, #0
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <testWaterSensorTask+0x738>)
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24
      //if(TOOL.current <= 0.4 || TOOL.lightStt==_PhotoCell_uncovered){
      if(TOOL.current <= 0.4){
 80050ce:	4b38      	ldr	r3, [pc, #224]	; (80051b0 <testWaterSensorTask+0x738>)
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	1c18      	adds	r0, r3, #0
 80050d4:	f7fd fb82 	bl	80027dc <__aeabi_f2d>
 80050d8:	4a44      	ldr	r2, [pc, #272]	; (80051ec <testWaterSensorTask+0x774>)
 80050da:	4b4f      	ldr	r3, [pc, #316]	; (8005218 <testWaterSensorTask+0x7a0>)
 80050dc:	f7fb f9c2 	bl	8000464 <__aeabi_dcmple>
 80050e0:	1e03      	subs	r3, r0, #0
 80050e2:	d03c      	beq.n	800515e <testWaterSensorTask+0x6e6>
	  //Rut Sensor ra moi mo nap phan loai => quá châmj
//	  if(TOOL.resultTesting==_TEST_ERROR)
//	    MotorGotoPosition(&TWMOTOR,_POS_RIGHT,_TIMEOUT_MOTOR);
//	  else if(TOOL.resultTesting==_TEST_SUCCESS)
//	    MotorGotoPosition(&TWMOTOR,_POS_LEFT,_TIMEOUT_MOTOR);
	  if(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE){
 80050e4:	4b4d      	ldr	r3, [pc, #308]	; (800521c <testWaterSensorTask+0x7a4>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d109      	bne.n	8005100 <testWaterSensorTask+0x688>
	      TOOL.state=_test_countSensor;
 80050ec:	4b30      	ldr	r3, [pc, #192]	; (80051b0 <testWaterSensorTask+0x738>)
 80050ee:	2207      	movs	r2, #7
 80050f0:	701a      	strb	r2, [r3, #0]
	      sprintf(TOOL.LcdStr_row[0],"Phan Loai Sensor");
 80050f2:	4a4b      	ldr	r2, [pc, #300]	; (8005220 <testWaterSensorTask+0x7a8>)
 80050f4:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <testWaterSensorTask+0x730>)
 80050f6:	0011      	movs	r1, r2
 80050f8:	0018      	movs	r0, r3
 80050fa:	f008 fbb3 	bl	800d864 <siprintf>
 80050fe:	e012      	b.n	8005126 <testWaterSensorTask+0x6ae>
	  }
	  else {
	      TOOL.state = _test_null;
 8005100:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <testWaterSensorTask+0x738>)
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
	      sprintf(TOOL.LcdStr_row[0],"Tiep Tuc Test..");
 8005106:	4a47      	ldr	r2, [pc, #284]	; (8005224 <testWaterSensorTask+0x7ac>)
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <testWaterSensorTask+0x730>)
 800510a:	0011      	movs	r1, r2
 800510c:	0018      	movs	r0, r3
 800510e:	f008 fba9 	bl	800d864 <siprintf>
	      OUTPUT_setOff(&_ctrlOutput[_LED_OK],0);
 8005112:	4b45      	ldr	r3, [pc, #276]	; (8005228 <testWaterSensorTask+0x7b0>)
 8005114:	2100      	movs	r1, #0
 8005116:	0018      	movs	r0, r3
 8005118:	f7fd fd9c 	bl	8002c54 <OUTPUT_setOff>
	      OUTPUT_setOff(&_ctrlOutput[_LED_ERROR],0);
 800511c:	4b43      	ldr	r3, [pc, #268]	; (800522c <testWaterSensorTask+0x7b4>)
 800511e:	2100      	movs	r1, #0
 8005120:	0018      	movs	r0, r3
 8005122:	f7fd fd97 	bl	8002c54 <OUTPUT_setOff>
	  }

	  OUTPUT_setOff(&_ctrlOutput[_BUZ],0);
 8005126:	4b42      	ldr	r3, [pc, #264]	; (8005230 <testWaterSensorTask+0x7b8>)
 8005128:	2100      	movs	r1, #0
 800512a:	0018      	movs	r0, r3
 800512c:	f7fd fd92 	bl	8002c54 <OUTPUT_setOff>
	  timer_stop(&_timeoutCheckLedRed);
 8005130:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <testWaterSensorTask+0x74c>)
 8005132:	0018      	movs	r0, r3
 8005134:	f7fe f82e 	bl	8003194 <timer_stop>
	  timer_stop(&_timeoutCheckCalib);
 8005138:	4b3e      	ldr	r3, [pc, #248]	; (8005234 <testWaterSensorTask+0x7bc>)
 800513a:	0018      	movs	r0, r3
 800513c:	f7fe f82a 	bl	8003194 <timer_stop>
	  timer_stop(&_timeoutCheckLedGreenOff);
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <testWaterSensorTask+0x744>)
 8005142:	0018      	movs	r0, r3
 8005144:	f7fe f826 	bl	8003194 <timer_stop>
	  timer_set(&_timeoutCheckState,500);
 8005148:	23fa      	movs	r3, #250	; 0xfa
 800514a:	005a      	lsls	r2, r3, #1
 800514c:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <testWaterSensorTask+0x750>)
 800514e:	0011      	movs	r1, r2
 8005150:	0018      	movs	r0, r3
 8005152:	f7fd ffcf 	bl	80030f4 <timer_set>
	  ledRedTog=0;
 8005156:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <testWaterSensorTask+0x770>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
	if(TWMOTOR.SWTS.Bit.LEFT_IR==0 && TWMOTOR.SWTS.Bit.RIGHT_IR==0 && getCurrent_mA()<0.4){
	  OUTPUT_setBlink(&_ctrlOutput[_BUZ],200,250,500,0);
	  sprintf(TOOL.LcdStr_row[0],"Au Qua Roi Nha");
	}
      }
      break;
 800515c:	e08c      	b.n	8005278 <testWaterSensorTask+0x800>
	timer_set(&_timeoutCheckState,5);
 800515e:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <testWaterSensorTask+0x750>)
 8005160:	2105      	movs	r1, #5
 8005162:	0018      	movs	r0, r3
 8005164:	f7fd ffc6 	bl	80030f4 <timer_set>
	if(TWMOTOR.SWTS.Bit.LEFT_IR==0 && TWMOTOR.SWTS.Bit.RIGHT_IR==0 && getCurrent_mA()<0.4){
 8005168:	4b33      	ldr	r3, [pc, #204]	; (8005238 <testWaterSensorTask+0x7c0>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2210      	movs	r2, #16
 800516e:	4013      	ands	r3, r2
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d000      	beq.n	8005178 <testWaterSensorTask+0x700>
 8005176:	e07f      	b.n	8005278 <testWaterSensorTask+0x800>
 8005178:	4b2f      	ldr	r3, [pc, #188]	; (8005238 <testWaterSensorTask+0x7c0>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2208      	movs	r2, #8
 800517e:	4013      	ands	r3, r2
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d000      	beq.n	8005188 <testWaterSensorTask+0x710>
 8005186:	e077      	b.n	8005278 <testWaterSensorTask+0x800>
 8005188:	f7fe fd1c 	bl	8003bc4 <getCurrent_mA>
 800518c:	1c03      	adds	r3, r0, #0
 800518e:	1c18      	adds	r0, r3, #0
 8005190:	f7fd fb24 	bl	80027dc <__aeabi_f2d>
 8005194:	4a15      	ldr	r2, [pc, #84]	; (80051ec <testWaterSensorTask+0x774>)
 8005196:	4b20      	ldr	r3, [pc, #128]	; (8005218 <testWaterSensorTask+0x7a0>)
 8005198:	f7fb f95a 	bl	8000450 <__aeabi_dcmplt>
 800519c:	1e03      	subs	r3, r0, #0
 800519e:	d14d      	bne.n	800523c <testWaterSensorTask+0x7c4>
      break;
 80051a0:	e06a      	b.n	8005278 <testWaterSensorTask+0x800>
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	0800fe48 	.word	0x0800fe48
 80051a8:	2000044a 	.word	0x2000044a
 80051ac:	2000050c 	.word	0x2000050c
 80051b0:	20000448 	.word	0x20000448
 80051b4:	20000290 	.word	0x20000290
 80051b8:	0800fe5c 	.word	0x0800fe5c
 80051bc:	200004c0 	.word	0x200004c0
 80051c0:	000009c4 	.word	0x000009c4
 80051c4:	200004a0 	.word	0x200004a0
 80051c8:	20000490 	.word	0x20000490
 80051cc:	0800fe70 	.word	0x0800fe70
 80051d0:	20000501 	.word	0x20000501
 80051d4:	0800fe80 	.word	0x0800fe80
 80051d8:	0800fe94 	.word	0x0800fe94
 80051dc:	41f00000 	.word	0x41f00000
 80051e0:	0800fea8 	.word	0x0800fea8
 80051e4:	0800febc 	.word	0x0800febc
 80051e8:	20000502 	.word	0x20000502
 80051ec:	9999999a 	.word	0x9999999a
 80051f0:	3fe99999 	.word	0x3fe99999
 80051f4:	40c00000 	.word	0x40c00000
 80051f8:	20000504 	.word	0x20000504
 80051fc:	41200000 	.word	0x41200000
 8005200:	41a00000 	.word	0x41a00000
 8005204:	20000508 	.word	0x20000508
 8005208:	0800fed0 	.word	0x0800fed0
 800520c:	0800fee0 	.word	0x0800fee0
 8005210:	0800fef0 	.word	0x0800fef0
 8005214:	0800ff00 	.word	0x0800ff00
 8005218:	3fd99999 	.word	0x3fd99999
 800521c:	20000488 	.word	0x20000488
 8005220:	0800ff10 	.word	0x0800ff10
 8005224:	0800ff24 	.word	0x0800ff24
 8005228:	20000368 	.word	0x20000368
 800522c:	20000394 	.word	0x20000394
 8005230:	200003ec 	.word	0x200003ec
 8005234:	200004b0 	.word	0x200004b0
 8005238:	20000994 	.word	0x20000994
	  OUTPUT_setBlink(&_ctrlOutput[_BUZ],200,250,500,0);
 800523c:	23fa      	movs	r3, #250	; 0xfa
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	480f      	ldr	r0, [pc, #60]	; (8005280 <testWaterSensorTask+0x808>)
 8005242:	2200      	movs	r2, #0
 8005244:	9200      	str	r2, [sp, #0]
 8005246:	22fa      	movs	r2, #250	; 0xfa
 8005248:	21c8      	movs	r1, #200	; 0xc8
 800524a:	f7fd fd6f 	bl	8002d2c <OUTPUT_setBlink>
	  sprintf(TOOL.LcdStr_row[0],"Au Qua Roi Nha");
 800524e:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <testWaterSensorTask+0x80c>)
 8005250:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <testWaterSensorTask+0x810>)
 8005252:	0011      	movs	r1, r2
 8005254:	0018      	movs	r0, r3
 8005256:	f008 fb05 	bl	800d864 <siprintf>
      break;
 800525a:	e00d      	b.n	8005278 <testWaterSensorTask+0x800>
	return;
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	e00c      	b.n	800527a <testWaterSensorTask+0x802>
    default:break;
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	e00a      	b.n	800527a <testWaterSensorTask+0x802>
      break;
 8005264:	46c0      	nop			; (mov r8, r8)
 8005266:	e008      	b.n	800527a <testWaterSensorTask+0x802>
      break;
 8005268:	46c0      	nop			; (mov r8, r8)
 800526a:	e006      	b.n	800527a <testWaterSensorTask+0x802>
      break;
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	e004      	b.n	800527a <testWaterSensorTask+0x802>
	return;
 8005270:	46c0      	nop			; (mov r8, r8)
 8005272:	e002      	b.n	800527a <testWaterSensorTask+0x802>
      break;
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	e000      	b.n	800527a <testWaterSensorTask+0x802>
      break;
 8005278:	46c0      	nop			; (mov r8, r8)
   }
}
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	200003ec 	.word	0x200003ec
 8005284:	0800ff34 	.word	0x0800ff34
 8005288:	2000044a 	.word	0x2000044a

0800528c <testWaterSensorLoop>:

void testWaterSensorLoop(){
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  updateLcd();
 8005290:	f7ff f8c8 	bl	8004424 <updateLcd>
  updateIna219();
 8005294:	f7ff f980 	bl	8004598 <updateIna219>
  updateKalmanADC();
 8005298:	f7ff f9a2 	bl	80045e0 <updateKalmanADC>
  CapSS_Task(&CAPSENSOR[0]);
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <testWaterSensorLoop+0x2c>)
 800529e:	0018      	movs	r0, r3
 80052a0:	f7fd fffe 	bl	80032a0 <CapSS_Task>

  testWaterSensorTask();
 80052a4:	f7ff fbe8 	bl	8004a78 <testWaterSensorTask>
  MotorTestWaterSensorLoop(&TWMOTOR);
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <testWaterSensorLoop+0x30>)
 80052aa:	0018      	movs	r0, r3
 80052ac:	f001 fb08 	bl	80068c0 <MotorTestWaterSensorLoop>
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	20000290 	.word	0x20000290
 80052bc:	20000994 	.word	0x20000994

080052c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80052c4:	f001 fbe8 	bl	8006a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80052c8:	f000 f828 	bl	800531c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052cc:	f000 fbb2 	bl	8005a34 <MX_GPIO_Init>
  MX_DMA_Init();
 80052d0:	f000 fb92 	bl	80059f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80052d4:	f000 f880 	bl	80053d8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80052d8:	f000 f97e 	bl	80055d8 <MX_TIM3_Init>
  MX_TIM6_Init();
 80052dc:	f000 fa12 	bl	8005704 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80052e0:	f000 fad4 	bl	800588c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80052e4:	f000 fb20 	bl	8005928 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 80052e8:	f000 fb52 	bl	8005990 <MX_USART4_UART_Init>
  MX_IWDG_Init();
 80052ec:	f000 f954 	bl	8005598 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 80052f0:	f000 fa7e 	bl	80057f0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80052f4:	f000 f910 	bl	8005518 <MX_I2C2_Init>
  MX_TIM7_Init();
 80052f8:	f000 fa3e 	bl	8005778 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  testWaterSensorInit();
 80052fc:	f7ff fa6a 	bl	80047d4 <testWaterSensorInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_IWDG_Init(&hiwdg);
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <main+0x58>)
 8005302:	0018      	movs	r0, r3
 8005304:	f004 fcc8 	bl	8009c98 <HAL_IWDG_Init>
  while (1)
  {
      HAL_IWDG_Refresh(&hiwdg);
 8005308:	4b03      	ldr	r3, [pc, #12]	; (8005318 <main+0x58>)
 800530a:	0018      	movs	r0, r3
 800530c:	f004 fd16 	bl	8009d3c <HAL_IWDG_Refresh>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      testWaterSensorLoop();
 8005310:	f7ff ffbc 	bl	800528c <testWaterSensorLoop>
      HAL_IWDG_Refresh(&hiwdg);
 8005314:	e7f8      	b.n	8005308 <main+0x48>
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	2000064c 	.word	0x2000064c

0800531c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800531c:	b590      	push	{r4, r7, lr}
 800531e:	b093      	sub	sp, #76	; 0x4c
 8005320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005322:	2414      	movs	r4, #20
 8005324:	193b      	adds	r3, r7, r4
 8005326:	0018      	movs	r0, r3
 8005328:	2334      	movs	r3, #52	; 0x34
 800532a:	001a      	movs	r2, r3
 800532c:	2100      	movs	r1, #0
 800532e:	f007 fd2e 	bl	800cd8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005332:	1d3b      	adds	r3, r7, #4
 8005334:	0018      	movs	r0, r3
 8005336:	2310      	movs	r3, #16
 8005338:	001a      	movs	r2, r3
 800533a:	2100      	movs	r1, #0
 800533c:	f007 fd27 	bl	800cd8e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	0018      	movs	r0, r3
 8005346:	f004 fd09 	bl	8009d5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800534a:	193b      	adds	r3, r7, r4
 800534c:	220a      	movs	r2, #10
 800534e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005350:	193b      	adds	r3, r7, r4
 8005352:	2280      	movs	r2, #128	; 0x80
 8005354:	0052      	lsls	r2, r2, #1
 8005356:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005358:	0021      	movs	r1, r4
 800535a:	187b      	adds	r3, r7, r1
 800535c:	2200      	movs	r2, #0
 800535e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005360:	187b      	adds	r3, r7, r1
 8005362:	2240      	movs	r2, #64	; 0x40
 8005364:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005366:	187b      	adds	r3, r7, r1
 8005368:	2201      	movs	r2, #1
 800536a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800536c:	187b      	adds	r3, r7, r1
 800536e:	2202      	movs	r2, #2
 8005370:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005372:	187b      	adds	r3, r7, r1
 8005374:	2202      	movs	r2, #2
 8005376:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005378:	187b      	adds	r3, r7, r1
 800537a:	2200      	movs	r2, #0
 800537c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800537e:	187b      	adds	r3, r7, r1
 8005380:	2208      	movs	r2, #8
 8005382:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005384:	187b      	adds	r3, r7, r1
 8005386:	2280      	movs	r2, #128	; 0x80
 8005388:	0292      	lsls	r2, r2, #10
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800538c:	187b      	adds	r3, r7, r1
 800538e:	2280      	movs	r2, #128	; 0x80
 8005390:	0592      	lsls	r2, r2, #22
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005394:	187b      	adds	r3, r7, r1
 8005396:	0018      	movs	r0, r3
 8005398:	f004 fd2c 	bl	8009df4 <HAL_RCC_OscConfig>
 800539c:	1e03      	subs	r3, r0, #0
 800539e:	d001      	beq.n	80053a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80053a0:	f000 fce0 	bl	8005d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053a4:	1d3b      	adds	r3, r7, #4
 80053a6:	2207      	movs	r2, #7
 80053a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	2202      	movs	r2, #2
 80053ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	2200      	movs	r2, #0
 80053ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80053bc:	1d3b      	adds	r3, r7, #4
 80053be:	2102      	movs	r1, #2
 80053c0:	0018      	movs	r0, r3
 80053c2:	f005 f827 	bl	800a414 <HAL_RCC_ClockConfig>
 80053c6:	1e03      	subs	r3, r0, #0
 80053c8:	d001      	beq.n	80053ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80053ca:	f000 fccb 	bl	8005d64 <Error_Handler>
  }
}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b013      	add	sp, #76	; 0x4c
 80053d4:	bd90      	pop	{r4, r7, pc}
	...

080053d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	0018      	movs	r0, r3
 80053e2:	230c      	movs	r3, #12
 80053e4:	001a      	movs	r2, r3
 80053e6:	2100      	movs	r1, #0
 80053e8:	f007 fcd1 	bl	800cd8e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80053ec:	4b44      	ldr	r3, [pc, #272]	; (8005500 <MX_ADC1_Init+0x128>)
 80053ee:	4a45      	ldr	r2, [pc, #276]	; (8005504 <MX_ADC1_Init+0x12c>)
 80053f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80053f2:	4b43      	ldr	r3, [pc, #268]	; (8005500 <MX_ADC1_Init+0x128>)
 80053f4:	2280      	movs	r2, #128	; 0x80
 80053f6:	0312      	lsls	r2, r2, #12
 80053f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80053fa:	4b41      	ldr	r3, [pc, #260]	; (8005500 <MX_ADC1_Init+0x128>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005400:	4b3f      	ldr	r3, [pc, #252]	; (8005500 <MX_ADC1_Init+0x128>)
 8005402:	2200      	movs	r2, #0
 8005404:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005406:	4b3e      	ldr	r3, [pc, #248]	; (8005500 <MX_ADC1_Init+0x128>)
 8005408:	2280      	movs	r2, #128	; 0x80
 800540a:	0392      	lsls	r2, r2, #14
 800540c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800540e:	4b3c      	ldr	r3, [pc, #240]	; (8005500 <MX_ADC1_Init+0x128>)
 8005410:	2204      	movs	r2, #4
 8005412:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005414:	4b3a      	ldr	r3, [pc, #232]	; (8005500 <MX_ADC1_Init+0x128>)
 8005416:	2200      	movs	r2, #0
 8005418:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800541a:	4b39      	ldr	r3, [pc, #228]	; (8005500 <MX_ADC1_Init+0x128>)
 800541c:	2200      	movs	r2, #0
 800541e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005420:	4b37      	ldr	r3, [pc, #220]	; (8005500 <MX_ADC1_Init+0x128>)
 8005422:	2201      	movs	r2, #1
 8005424:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8005426:	4b36      	ldr	r3, [pc, #216]	; (8005500 <MX_ADC1_Init+0x128>)
 8005428:	2204      	movs	r2, #4
 800542a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800542c:	4b34      	ldr	r3, [pc, #208]	; (8005500 <MX_ADC1_Init+0x128>)
 800542e:	2200      	movs	r2, #0
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005432:	4b33      	ldr	r3, [pc, #204]	; (8005500 <MX_ADC1_Init+0x128>)
 8005434:	2200      	movs	r2, #0
 8005436:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005438:	4b31      	ldr	r3, [pc, #196]	; (8005500 <MX_ADC1_Init+0x128>)
 800543a:	222c      	movs	r2, #44	; 0x2c
 800543c:	2101      	movs	r1, #1
 800543e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005440:	4b2f      	ldr	r3, [pc, #188]	; (8005500 <MX_ADC1_Init+0x128>)
 8005442:	2200      	movs	r2, #0
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8005446:	4b2e      	ldr	r3, [pc, #184]	; (8005500 <MX_ADC1_Init+0x128>)
 8005448:	2207      	movs	r2, #7
 800544a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800544c:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <MX_ADC1_Init+0x128>)
 800544e:	2207      	movs	r2, #7
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8005452:	4b2b      	ldr	r3, [pc, #172]	; (8005500 <MX_ADC1_Init+0x128>)
 8005454:	223c      	movs	r2, #60	; 0x3c
 8005456:	2100      	movs	r1, #0
 8005458:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800545a:	4b29      	ldr	r3, [pc, #164]	; (8005500 <MX_ADC1_Init+0x128>)
 800545c:	2200      	movs	r2, #0
 800545e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005460:	4b27      	ldr	r3, [pc, #156]	; (8005500 <MX_ADC1_Init+0x128>)
 8005462:	0018      	movs	r0, r3
 8005464:	f001 fd3c 	bl	8006ee0 <HAL_ADC_Init>
 8005468:	1e03      	subs	r3, r0, #0
 800546a:	d001      	beq.n	8005470 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800546c:	f000 fc7a 	bl	8005d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	4a25      	ldr	r2, [pc, #148]	; (8005508 <MX_ADC1_Init+0x130>)
 8005474:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	2200      	movs	r2, #0
 800547a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800547c:	1d3b      	adds	r3, r7, #4
 800547e:	2200      	movs	r2, #0
 8005480:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005482:	1d3a      	adds	r2, r7, #4
 8005484:	4b1e      	ldr	r3, [pc, #120]	; (8005500 <MX_ADC1_Init+0x128>)
 8005486:	0011      	movs	r1, r2
 8005488:	0018      	movs	r0, r3
 800548a:	f002 f88f 	bl	80075ac <HAL_ADC_ConfigChannel>
 800548e:	1e03      	subs	r3, r0, #0
 8005490:	d001      	beq.n	8005496 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8005492:	f000 fc67 	bl	8005d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005496:	1d3b      	adds	r3, r7, #4
 8005498:	4a1c      	ldr	r2, [pc, #112]	; (800550c <MX_ADC1_Init+0x134>)
 800549a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800549c:	1d3b      	adds	r3, r7, #4
 800549e:	2204      	movs	r2, #4
 80054a0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054a2:	1d3a      	adds	r2, r7, #4
 80054a4:	4b16      	ldr	r3, [pc, #88]	; (8005500 <MX_ADC1_Init+0x128>)
 80054a6:	0011      	movs	r1, r2
 80054a8:	0018      	movs	r0, r3
 80054aa:	f002 f87f 	bl	80075ac <HAL_ADC_ConfigChannel>
 80054ae:	1e03      	subs	r3, r0, #0
 80054b0:	d001      	beq.n	80054b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80054b2:	f000 fc57 	bl	8005d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <MX_ADC1_Init+0x138>)
 80054ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	2208      	movs	r2, #8
 80054c0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054c2:	1d3a      	adds	r2, r7, #4
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <MX_ADC1_Init+0x128>)
 80054c6:	0011      	movs	r1, r2
 80054c8:	0018      	movs	r0, r3
 80054ca:	f002 f86f 	bl	80075ac <HAL_ADC_ConfigChannel>
 80054ce:	1e03      	subs	r3, r0, #0
 80054d0:	d001      	beq.n	80054d6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80054d2:	f000 fc47 	bl	8005d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	4a0e      	ldr	r2, [pc, #56]	; (8005514 <MX_ADC1_Init+0x13c>)
 80054da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80054dc:	1d3b      	adds	r3, r7, #4
 80054de:	220c      	movs	r2, #12
 80054e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054e2:	1d3a      	adds	r2, r7, #4
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <MX_ADC1_Init+0x128>)
 80054e6:	0011      	movs	r1, r2
 80054e8:	0018      	movs	r0, r3
 80054ea:	f002 f85f 	bl	80075ac <HAL_ADC_ConfigChannel>
 80054ee:	1e03      	subs	r3, r0, #0
 80054f0:	d001      	beq.n	80054f6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80054f2:	f000 fc37 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b004      	add	sp, #16
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	20000538 	.word	0x20000538
 8005504:	40012400 	.word	0x40012400
 8005508:	08000004 	.word	0x08000004
 800550c:	0c000008 	.word	0x0c000008
 8005510:	10000010 	.word	0x10000010
 8005514:	14000020 	.word	0x14000020

08005518 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800551c:	4b1b      	ldr	r3, [pc, #108]	; (800558c <MX_I2C2_Init+0x74>)
 800551e:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <MX_I2C2_Init+0x78>)
 8005520:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8005522:	4b1a      	ldr	r3, [pc, #104]	; (800558c <MX_I2C2_Init+0x74>)
 8005524:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <MX_I2C2_Init+0x7c>)
 8005526:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005528:	4b18      	ldr	r3, [pc, #96]	; (800558c <MX_I2C2_Init+0x74>)
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800552e:	4b17      	ldr	r3, [pc, #92]	; (800558c <MX_I2C2_Init+0x74>)
 8005530:	2201      	movs	r2, #1
 8005532:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005534:	4b15      	ldr	r3, [pc, #84]	; (800558c <MX_I2C2_Init+0x74>)
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <MX_I2C2_Init+0x74>)
 800553c:	2200      	movs	r2, #0
 800553e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005540:	4b12      	ldr	r3, [pc, #72]	; (800558c <MX_I2C2_Init+0x74>)
 8005542:	2200      	movs	r2, #0
 8005544:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005546:	4b11      	ldr	r3, [pc, #68]	; (800558c <MX_I2C2_Init+0x74>)
 8005548:	2200      	movs	r2, #0
 800554a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800554c:	4b0f      	ldr	r3, [pc, #60]	; (800558c <MX_I2C2_Init+0x74>)
 800554e:	2200      	movs	r2, #0
 8005550:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005552:	4b0e      	ldr	r3, [pc, #56]	; (800558c <MX_I2C2_Init+0x74>)
 8005554:	0018      	movs	r0, r3
 8005556:	f003 fc2b 	bl	8008db0 <HAL_I2C_Init>
 800555a:	1e03      	subs	r3, r0, #0
 800555c:	d001      	beq.n	8005562 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800555e:	f000 fc01 	bl	8005d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005562:	4b0a      	ldr	r3, [pc, #40]	; (800558c <MX_I2C2_Init+0x74>)
 8005564:	2100      	movs	r1, #0
 8005566:	0018      	movs	r0, r3
 8005568:	f004 fafe 	bl	8009b68 <HAL_I2CEx_ConfigAnalogFilter>
 800556c:	1e03      	subs	r3, r0, #0
 800556e:	d001      	beq.n	8005574 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005570:	f000 fbf8 	bl	8005d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <MX_I2C2_Init+0x74>)
 8005576:	2100      	movs	r1, #0
 8005578:	0018      	movs	r0, r3
 800557a:	f004 fb41 	bl	8009c00 <HAL_I2CEx_ConfigDigitalFilter>
 800557e:	1e03      	subs	r3, r0, #0
 8005580:	d001      	beq.n	8005586 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005582:	f000 fbef 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200005f8 	.word	0x200005f8
 8005590:	40005800 	.word	0x40005800
 8005594:	10707dbc 	.word	0x10707dbc

08005598 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <MX_IWDG_Init+0x34>)
 800559e:	4a0c      	ldr	r2, [pc, #48]	; (80055d0 <MX_IWDG_Init+0x38>)
 80055a0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <MX_IWDG_Init+0x34>)
 80055a4:	2203      	movs	r2, #3
 80055a6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <MX_IWDG_Init+0x34>)
 80055aa:	4a0a      	ldr	r2, [pc, #40]	; (80055d4 <MX_IWDG_Init+0x3c>)
 80055ac:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <MX_IWDG_Init+0x34>)
 80055b0:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <MX_IWDG_Init+0x3c>)
 80055b2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <MX_IWDG_Init+0x34>)
 80055b6:	0018      	movs	r0, r3
 80055b8:	f004 fb6e 	bl	8009c98 <HAL_IWDG_Init>
 80055bc:	1e03      	subs	r3, r0, #0
 80055be:	d001      	beq.n	80055c4 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80055c0:	f000 fbd0 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80055c4:	46c0      	nop			; (mov r8, r8)
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	2000064c 	.word	0x2000064c
 80055d0:	40003000 	.word	0x40003000
 80055d4:	00000fff 	.word	0x00000fff

080055d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08e      	sub	sp, #56	; 0x38
 80055dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055de:	2328      	movs	r3, #40	; 0x28
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	0018      	movs	r0, r3
 80055e4:	2310      	movs	r3, #16
 80055e6:	001a      	movs	r2, r3
 80055e8:	2100      	movs	r1, #0
 80055ea:	f007 fbd0 	bl	800cd8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ee:	231c      	movs	r3, #28
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	0018      	movs	r0, r3
 80055f4:	230c      	movs	r3, #12
 80055f6:	001a      	movs	r2, r3
 80055f8:	2100      	movs	r1, #0
 80055fa:	f007 fbc8 	bl	800cd8e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055fe:	003b      	movs	r3, r7
 8005600:	0018      	movs	r0, r3
 8005602:	231c      	movs	r3, #28
 8005604:	001a      	movs	r2, r3
 8005606:	2100      	movs	r1, #0
 8005608:	f007 fbc1 	bl	800cd8e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800560c:	4b3a      	ldr	r3, [pc, #232]	; (80056f8 <MX_TIM3_Init+0x120>)
 800560e:	4a3b      	ldr	r2, [pc, #236]	; (80056fc <MX_TIM3_Init+0x124>)
 8005610:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8005612:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <MX_TIM3_Init+0x120>)
 8005614:	2205      	movs	r2, #5
 8005616:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005618:	4b37      	ldr	r3, [pc, #220]	; (80056f8 <MX_TIM3_Init+0x120>)
 800561a:	2200      	movs	r2, #0
 800561c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 38000;
 800561e:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <MX_TIM3_Init+0x120>)
 8005620:	4a37      	ldr	r2, [pc, #220]	; (8005700 <MX_TIM3_Init+0x128>)
 8005622:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005624:	4b34      	ldr	r3, [pc, #208]	; (80056f8 <MX_TIM3_Init+0x120>)
 8005626:	2200      	movs	r2, #0
 8005628:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800562a:	4b33      	ldr	r3, [pc, #204]	; (80056f8 <MX_TIM3_Init+0x120>)
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005630:	4b31      	ldr	r3, [pc, #196]	; (80056f8 <MX_TIM3_Init+0x120>)
 8005632:	0018      	movs	r0, r3
 8005634:	f005 f9cc 	bl	800a9d0 <HAL_TIM_Base_Init>
 8005638:	1e03      	subs	r3, r0, #0
 800563a:	d001      	beq.n	8005640 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800563c:	f000 fb92 	bl	8005d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005640:	2128      	movs	r1, #40	; 0x28
 8005642:	187b      	adds	r3, r7, r1
 8005644:	2280      	movs	r2, #128	; 0x80
 8005646:	0152      	lsls	r2, r2, #5
 8005648:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800564a:	187a      	adds	r2, r7, r1
 800564c:	4b2a      	ldr	r3, [pc, #168]	; (80056f8 <MX_TIM3_Init+0x120>)
 800564e:	0011      	movs	r1, r2
 8005650:	0018      	movs	r0, r3
 8005652:	f005 fd2b 	bl	800b0ac <HAL_TIM_ConfigClockSource>
 8005656:	1e03      	subs	r3, r0, #0
 8005658:	d001      	beq.n	800565e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800565a:	f000 fb83 	bl	8005d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800565e:	4b26      	ldr	r3, [pc, #152]	; (80056f8 <MX_TIM3_Init+0x120>)
 8005660:	0018      	movs	r0, r3
 8005662:	f005 fa91 	bl	800ab88 <HAL_TIM_PWM_Init>
 8005666:	1e03      	subs	r3, r0, #0
 8005668:	d001      	beq.n	800566e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800566a:	f000 fb7b 	bl	8005d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800566e:	211c      	movs	r1, #28
 8005670:	187b      	adds	r3, r7, r1
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005676:	187b      	adds	r3, r7, r1
 8005678:	2200      	movs	r2, #0
 800567a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800567c:	187a      	adds	r2, r7, r1
 800567e:	4b1e      	ldr	r3, [pc, #120]	; (80056f8 <MX_TIM3_Init+0x120>)
 8005680:	0011      	movs	r1, r2
 8005682:	0018      	movs	r0, r3
 8005684:	f006 f9de 	bl	800ba44 <HAL_TIMEx_MasterConfigSynchronization>
 8005688:	1e03      	subs	r3, r0, #0
 800568a:	d001      	beq.n	8005690 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800568c:	f000 fb6a 	bl	8005d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005690:	003b      	movs	r3, r7
 8005692:	2260      	movs	r2, #96	; 0x60
 8005694:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005696:	003b      	movs	r3, r7
 8005698:	2200      	movs	r2, #0
 800569a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800569c:	003b      	movs	r3, r7
 800569e:	2202      	movs	r2, #2
 80056a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80056a2:	003b      	movs	r3, r7
 80056a4:	2204      	movs	r2, #4
 80056a6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056a8:	0039      	movs	r1, r7
 80056aa:	4b13      	ldr	r3, [pc, #76]	; (80056f8 <MX_TIM3_Init+0x120>)
 80056ac:	2208      	movs	r2, #8
 80056ae:	0018      	movs	r0, r3
 80056b0:	f005 fbfc 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 80056b4:	1e03      	subs	r3, r0, #0
 80056b6:	d001      	beq.n	80056bc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80056b8:	f000 fb54 	bl	8005d64 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <MX_TIM3_Init+0x120>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69da      	ldr	r2, [r3, #28]
 80056c2:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <MX_TIM3_Init+0x120>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2108      	movs	r1, #8
 80056c8:	438a      	bics	r2, r1
 80056ca:	61da      	str	r2, [r3, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056cc:	003b      	movs	r3, r7
 80056ce:	2200      	movs	r2, #0
 80056d0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80056d2:	0039      	movs	r1, r7
 80056d4:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <MX_TIM3_Init+0x120>)
 80056d6:	220c      	movs	r2, #12
 80056d8:	0018      	movs	r0, r3
 80056da:	f005 fbe7 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 80056de:	1e03      	subs	r3, r0, #0
 80056e0:	d001      	beq.n	80056e6 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 80056e2:	f000 fb3f 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80056e6:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <MX_TIM3_Init+0x120>)
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 fc9d 	bl	8006028 <HAL_TIM_MspPostInit>

}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b00e      	add	sp, #56	; 0x38
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	2000065c 	.word	0x2000065c
 80056fc:	40000400 	.word	0x40000400
 8005700:	00009470 	.word	0x00009470

08005704 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800570a:	1d3b      	adds	r3, r7, #4
 800570c:	0018      	movs	r0, r3
 800570e:	230c      	movs	r3, #12
 8005710:	001a      	movs	r2, r3
 8005712:	2100      	movs	r1, #0
 8005714:	f007 fb3b 	bl	800cd8e <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <MX_TIM6_Init+0x6c>)
 800571a:	4a16      	ldr	r2, [pc, #88]	; (8005774 <MX_TIM6_Init+0x70>)
 800571c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 800571e:	4b14      	ldr	r3, [pc, #80]	; (8005770 <MX_TIM6_Init+0x6c>)
 8005720:	2240      	movs	r2, #64	; 0x40
 8005722:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <MX_TIM6_Init+0x6c>)
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 104;
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <MX_TIM6_Init+0x6c>)
 800572c:	2268      	movs	r2, #104	; 0x68
 800572e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005730:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <MX_TIM6_Init+0x6c>)
 8005732:	2200      	movs	r2, #0
 8005734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005736:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <MX_TIM6_Init+0x6c>)
 8005738:	0018      	movs	r0, r3
 800573a:	f005 f949 	bl	800a9d0 <HAL_TIM_Base_Init>
 800573e:	1e03      	subs	r3, r0, #0
 8005740:	d001      	beq.n	8005746 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005742:	f000 fb0f 	bl	8005d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	2200      	movs	r2, #0
 8005750:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005752:	1d3a      	adds	r2, r7, #4
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <MX_TIM6_Init+0x6c>)
 8005756:	0011      	movs	r1, r2
 8005758:	0018      	movs	r0, r3
 800575a:	f006 f973 	bl	800ba44 <HAL_TIMEx_MasterConfigSynchronization>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d001      	beq.n	8005766 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8005762:	f000 faff 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	b004      	add	sp, #16
 800576c:	bd80      	pop	{r7, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	200006a8 	.word	0x200006a8
 8005774:	40001000 	.word	0x40001000

08005778 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	0018      	movs	r0, r3
 8005782:	230c      	movs	r3, #12
 8005784:	001a      	movs	r2, r3
 8005786:	2100      	movs	r1, #0
 8005788:	f007 fb01 	bl	800cd8e <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800578c:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <MX_TIM7_Init+0x6c>)
 800578e:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <MX_TIM7_Init+0x70>)
 8005790:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64;
 8005792:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <MX_TIM7_Init+0x6c>)
 8005794:	2240      	movs	r2, #64	; 0x40
 8005796:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <MX_TIM7_Init+0x6c>)
 800579a:	2200      	movs	r2, #0
 800579c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800579e:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <MX_TIM7_Init+0x6c>)
 80057a0:	4a12      	ldr	r2, [pc, #72]	; (80057ec <MX_TIM7_Init+0x74>)
 80057a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057a4:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <MX_TIM7_Init+0x6c>)
 80057a6:	2280      	movs	r2, #128	; 0x80
 80057a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80057aa:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <MX_TIM7_Init+0x6c>)
 80057ac:	0018      	movs	r0, r3
 80057ae:	f005 f90f 	bl	800a9d0 <HAL_TIM_Base_Init>
 80057b2:	1e03      	subs	r3, r0, #0
 80057b4:	d001      	beq.n	80057ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80057b6:	f000 fad5 	bl	8005d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057ba:	1d3b      	adds	r3, r7, #4
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	2200      	movs	r2, #0
 80057c4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80057c6:	1d3a      	adds	r2, r7, #4
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <MX_TIM7_Init+0x6c>)
 80057ca:	0011      	movs	r1, r2
 80057cc:	0018      	movs	r0, r3
 80057ce:	f006 f939 	bl	800ba44 <HAL_TIMEx_MasterConfigSynchronization>
 80057d2:	1e03      	subs	r3, r0, #0
 80057d4:	d001      	beq.n	80057da <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80057d6:	f000 fac5 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b004      	add	sp, #16
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	200006f4 	.word	0x200006f4
 80057e8:	40001400 	.word	0x40001400
 80057ec:	000003e7 	.word	0x000003e7

080057f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80057f4:	4b23      	ldr	r3, [pc, #140]	; (8005884 <MX_USART1_UART_Init+0x94>)
 80057f6:	4a24      	ldr	r2, [pc, #144]	; (8005888 <MX_USART1_UART_Init+0x98>)
 80057f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80057fa:	4b22      	ldr	r3, [pc, #136]	; (8005884 <MX_USART1_UART_Init+0x94>)
 80057fc:	22e1      	movs	r2, #225	; 0xe1
 80057fe:	0252      	lsls	r2, r2, #9
 8005800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005802:	4b20      	ldr	r3, [pc, #128]	; (8005884 <MX_USART1_UART_Init+0x94>)
 8005804:	2200      	movs	r2, #0
 8005806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005808:	4b1e      	ldr	r3, [pc, #120]	; (8005884 <MX_USART1_UART_Init+0x94>)
 800580a:	2200      	movs	r2, #0
 800580c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800580e:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <MX_USART1_UART_Init+0x94>)
 8005810:	2200      	movs	r2, #0
 8005812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005814:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <MX_USART1_UART_Init+0x94>)
 8005816:	220c      	movs	r2, #12
 8005818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800581a:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <MX_USART1_UART_Init+0x94>)
 800581c:	2200      	movs	r2, #0
 800581e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005820:	4b18      	ldr	r3, [pc, #96]	; (8005884 <MX_USART1_UART_Init+0x94>)
 8005822:	2200      	movs	r2, #0
 8005824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005826:	4b17      	ldr	r3, [pc, #92]	; (8005884 <MX_USART1_UART_Init+0x94>)
 8005828:	2200      	movs	r2, #0
 800582a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800582c:	4b15      	ldr	r3, [pc, #84]	; (8005884 <MX_USART1_UART_Init+0x94>)
 800582e:	2200      	movs	r2, #0
 8005830:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005832:	4b14      	ldr	r3, [pc, #80]	; (8005884 <MX_USART1_UART_Init+0x94>)
 8005834:	2200      	movs	r2, #0
 8005836:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005838:	4b12      	ldr	r3, [pc, #72]	; (8005884 <MX_USART1_UART_Init+0x94>)
 800583a:	0018      	movs	r0, r3
 800583c:	f006 f982 	bl	800bb44 <HAL_UART_Init>
 8005840:	1e03      	subs	r3, r0, #0
 8005842:	d001      	beq.n	8005848 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005844:	f000 fa8e 	bl	8005d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <MX_USART1_UART_Init+0x94>)
 800584a:	2100      	movs	r1, #0
 800584c:	0018      	movs	r0, r3
 800584e:	f007 f973 	bl	800cb38 <HAL_UARTEx_SetTxFifoThreshold>
 8005852:	1e03      	subs	r3, r0, #0
 8005854:	d001      	beq.n	800585a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005856:	f000 fa85 	bl	8005d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800585a:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <MX_USART1_UART_Init+0x94>)
 800585c:	2100      	movs	r1, #0
 800585e:	0018      	movs	r0, r3
 8005860:	f007 f9aa 	bl	800cbb8 <HAL_UARTEx_SetRxFifoThreshold>
 8005864:	1e03      	subs	r3, r0, #0
 8005866:	d001      	beq.n	800586c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005868:	f000 fa7c 	bl	8005d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <MX_USART1_UART_Init+0x94>)
 800586e:	0018      	movs	r0, r3
 8005870:	f007 f928 	bl	800cac4 <HAL_UARTEx_DisableFifoMode>
 8005874:	1e03      	subs	r3, r0, #0
 8005876:	d001      	beq.n	800587c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005878:	f000 fa74 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	20000740 	.word	0x20000740
 8005888:	40013800 	.word	0x40013800

0800588c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005890:	4b23      	ldr	r3, [pc, #140]	; (8005920 <MX_USART2_UART_Init+0x94>)
 8005892:	4a24      	ldr	r2, [pc, #144]	; (8005924 <MX_USART2_UART_Init+0x98>)
 8005894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005896:	4b22      	ldr	r3, [pc, #136]	; (8005920 <MX_USART2_UART_Init+0x94>)
 8005898:	2296      	movs	r2, #150	; 0x96
 800589a:	0192      	lsls	r2, r2, #6
 800589c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800589e:	4b20      	ldr	r3, [pc, #128]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80058a4:	4b1e      	ldr	r3, [pc, #120]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80058aa:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058b2:	220c      	movs	r2, #12
 80058b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058b6:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80058bc:	4b18      	ldr	r3, [pc, #96]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058be:	2200      	movs	r2, #0
 80058c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058c2:	4b17      	ldr	r3, [pc, #92]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80058c8:	4b15      	ldr	r3, [pc, #84]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058ce:	4b14      	ldr	r3, [pc, #80]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80058d4:	4b12      	ldr	r3, [pc, #72]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058d6:	0018      	movs	r0, r3
 80058d8:	f006 f934 	bl	800bb44 <HAL_UART_Init>
 80058dc:	1e03      	subs	r3, r0, #0
 80058de:	d001      	beq.n	80058e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80058e0:	f000 fa40 	bl	8005d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058e4:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058e6:	2100      	movs	r1, #0
 80058e8:	0018      	movs	r0, r3
 80058ea:	f007 f925 	bl	800cb38 <HAL_UARTEx_SetTxFifoThreshold>
 80058ee:	1e03      	subs	r3, r0, #0
 80058f0:	d001      	beq.n	80058f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80058f2:	f000 fa37 	bl	8005d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <MX_USART2_UART_Init+0x94>)
 80058f8:	2100      	movs	r1, #0
 80058fa:	0018      	movs	r0, r3
 80058fc:	f007 f95c 	bl	800cbb8 <HAL_UARTEx_SetRxFifoThreshold>
 8005900:	1e03      	subs	r3, r0, #0
 8005902:	d001      	beq.n	8005908 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005904:	f000 fa2e 	bl	8005d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <MX_USART2_UART_Init+0x94>)
 800590a:	0018      	movs	r0, r3
 800590c:	f007 f8da 	bl	800cac4 <HAL_UARTEx_DisableFifoMode>
 8005910:	1e03      	subs	r3, r0, #0
 8005912:	d001      	beq.n	8005918 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005914:	f000 fa26 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005918:	46c0      	nop			; (mov r8, r8)
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	200007d4 	.word	0x200007d4
 8005924:	40004400 	.word	0x40004400

08005928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800592c:	4b16      	ldr	r3, [pc, #88]	; (8005988 <MX_USART3_UART_Init+0x60>)
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <MX_USART3_UART_Init+0x64>)
 8005930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005932:	4b15      	ldr	r3, [pc, #84]	; (8005988 <MX_USART3_UART_Init+0x60>)
 8005934:	2296      	movs	r2, #150	; 0x96
 8005936:	0192      	lsls	r2, r2, #6
 8005938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800593a:	4b13      	ldr	r3, [pc, #76]	; (8005988 <MX_USART3_UART_Init+0x60>)
 800593c:	2200      	movs	r2, #0
 800593e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005940:	4b11      	ldr	r3, [pc, #68]	; (8005988 <MX_USART3_UART_Init+0x60>)
 8005942:	2200      	movs	r2, #0
 8005944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005946:	4b10      	ldr	r3, [pc, #64]	; (8005988 <MX_USART3_UART_Init+0x60>)
 8005948:	2200      	movs	r2, #0
 800594a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <MX_USART3_UART_Init+0x60>)
 800594e:	220c      	movs	r2, #12
 8005950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005952:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <MX_USART3_UART_Init+0x60>)
 8005954:	2200      	movs	r2, #0
 8005956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <MX_USART3_UART_Init+0x60>)
 800595a:	2200      	movs	r2, #0
 800595c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800595e:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <MX_USART3_UART_Init+0x60>)
 8005960:	2200      	movs	r2, #0
 8005962:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005964:	4b08      	ldr	r3, [pc, #32]	; (8005988 <MX_USART3_UART_Init+0x60>)
 8005966:	2200      	movs	r2, #0
 8005968:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800596a:	4b07      	ldr	r3, [pc, #28]	; (8005988 <MX_USART3_UART_Init+0x60>)
 800596c:	2200      	movs	r2, #0
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <MX_USART3_UART_Init+0x60>)
 8005972:	0018      	movs	r0, r3
 8005974:	f006 f8e6 	bl	800bb44 <HAL_UART_Init>
 8005978:	1e03      	subs	r3, r0, #0
 800597a:	d001      	beq.n	8005980 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800597c:	f000 f9f2 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005980:	46c0      	nop			; (mov r8, r8)
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	20000868 	.word	0x20000868
 800598c:	40004800 	.word	0x40004800

08005990 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8005994:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 8005996:	4a17      	ldr	r2, [pc, #92]	; (80059f4 <MX_USART4_UART_Init+0x64>)
 8005998:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800599a:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 800599c:	2296      	movs	r2, #150	; 0x96
 800599e:	0192      	lsls	r2, r2, #6
 80059a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80059a2:	4b13      	ldr	r3, [pc, #76]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80059a8:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80059ae:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80059b4:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059b6:	220c      	movs	r2, #12
 80059b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059ba:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059bc:	2200      	movs	r2, #0
 80059be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80059cc:	4b08      	ldr	r3, [pc, #32]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <MX_USART4_UART_Init+0x60>)
 80059da:	0018      	movs	r0, r3
 80059dc:	f006 f8b2 	bl	800bb44 <HAL_UART_Init>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d001      	beq.n	80059e8 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80059e4:	f000 f9be 	bl	8005d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80059e8:	46c0      	nop			; (mov r8, r8)
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	200008fc 	.word	0x200008fc
 80059f4:	40004c00 	.word	0x40004c00

080059f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <MX_DMA_Init+0x38>)
 8005a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a02:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <MX_DMA_Init+0x38>)
 8005a04:	2101      	movs	r1, #1
 8005a06:	430a      	orrs	r2, r1
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
 8005a0a:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <MX_DMA_Init+0x38>)
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4013      	ands	r3, r2
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005a16:	2200      	movs	r2, #0
 8005a18:	2100      	movs	r1, #0
 8005a1a:	2009      	movs	r0, #9
 8005a1c:	f002 fb32 	bl	8008084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005a20:	2009      	movs	r0, #9
 8005a22:	f002 fb44 	bl	80080ae <HAL_NVIC_EnableIRQ>

}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	b002      	add	sp, #8
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	40021000 	.word	0x40021000

08005a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a34:	b590      	push	{r4, r7, lr}
 8005a36:	b08b      	sub	sp, #44	; 0x2c
 8005a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a3a:	2414      	movs	r4, #20
 8005a3c:	193b      	adds	r3, r7, r4
 8005a3e:	0018      	movs	r0, r3
 8005a40:	2314      	movs	r3, #20
 8005a42:	001a      	movs	r2, r3
 8005a44:	2100      	movs	r1, #0
 8005a46:	f007 f9a2 	bl	800cd8e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a4a:	4bbc      	ldr	r3, [pc, #752]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a4e:	4bbb      	ldr	r3, [pc, #748]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a50:	2104      	movs	r1, #4
 8005a52:	430a      	orrs	r2, r1
 8005a54:	635a      	str	r2, [r3, #52]	; 0x34
 8005a56:	4bb9      	ldr	r3, [pc, #740]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a62:	4bb6      	ldr	r3, [pc, #728]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a66:	4bb5      	ldr	r3, [pc, #724]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a68:	2101      	movs	r1, #1
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8005a6e:	4bb3      	ldr	r3, [pc, #716]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	2201      	movs	r2, #1
 8005a74:	4013      	ands	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a7a:	4bb0      	ldr	r3, [pc, #704]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a7e:	4baf      	ldr	r3, [pc, #700]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a80:	2102      	movs	r1, #2
 8005a82:	430a      	orrs	r2, r1
 8005a84:	635a      	str	r2, [r3, #52]	; 0x34
 8005a86:	4bad      	ldr	r3, [pc, #692]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a92:	4baa      	ldr	r3, [pc, #680]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a96:	4ba9      	ldr	r3, [pc, #676]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005a98:	2108      	movs	r1, #8
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8005a9e:	4ba7      	ldr	r3, [pc, #668]	; (8005d3c <MX_GPIO_Init+0x308>)
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	607b      	str	r3, [r7, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC14_Pin|LED2_BL_Pin|BUZ_Pin|LED1_YE_Pin
 8005aaa:	49a5      	ldr	r1, [pc, #660]	; (8005d40 <MX_GPIO_Init+0x30c>)
 8005aac:	4ba5      	ldr	r3, [pc, #660]	; (8005d44 <MX_GPIO_Init+0x310>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f003 f960 	bl	8008d76 <HAL_GPIO_WritePin>
                          |DIM_TRIAC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_5V_CTRL_GPIO_Port, SS_5V_CTRL_Pin, GPIO_PIN_SET);
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	48a2      	ldr	r0, [pc, #648]	; (8005d44 <MX_GPIO_Init+0x310>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	0019      	movs	r1, r3
 8005ac0:	f003 f959 	bl	8008d76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FAN_Pin|RL_SS_STEAM_Pin|TO_MASS_Pin|BLE_EN_Pin
 8005ac4:	49a0      	ldr	r1, [pc, #640]	; (8005d48 <MX_GPIO_Init+0x314>)
 8005ac6:	23a0      	movs	r3, #160	; 0xa0
 8005ac8:	05db      	lsls	r3, r3, #23
 8005aca:	2200      	movs	r2, #0
 8005acc:	0018      	movs	r0, r3
 8005ace:	f003 f952 	bl	8008d76 <HAL_GPIO_WritePin>
                          |MOTOR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RL_DRAIN_Pin|RL_WHIRL_Pin|RL_AIR_Pin|RL_STEAM100_Pin
 8005ad2:	499e      	ldr	r1, [pc, #632]	; (8005d4c <MX_GPIO_Init+0x318>)
 8005ad4:	4b9e      	ldr	r3, [pc, #632]	; (8005d50 <MX_GPIO_Init+0x31c>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f003 f94c 	bl	8008d76 <HAL_GPIO_WritePin>
                          |RL_STEAM50_Pin|RL_COM_Pin|BUG_IO_Pin|PB3_Pin
                          |RL_SOL_COM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8005ade:	4b9d      	ldr	r3, [pc, #628]	; (8005d54 <MX_GPIO_Init+0x320>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f003 f946 	bl	8008d76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FET_DOME_LIGHT_Pin|FET_SOL_AF_Pin|FET_SOL_STEAM_Pin, GPIO_PIN_SET);
 8005aea:	4b9a      	ldr	r3, [pc, #616]	; (8005d54 <MX_GPIO_Init+0x320>)
 8005aec:	2201      	movs	r2, #1
 8005aee:	211a      	movs	r1, #26
 8005af0:	0018      	movs	r0, r3
 8005af2:	f003 f940 	bl	8008d76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED24V_BLUE_Pin|LED24V_GREEN_Pin|SSWATER_SIGNAL_Pin, GPIO_PIN_SET);
 8005af6:	2398      	movs	r3, #152	; 0x98
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	4895      	ldr	r0, [pc, #596]	; (8005d50 <MX_GPIO_Init+0x31c>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	0019      	movs	r1, r3
 8005b00:	f003 f939 	bl	8008d76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SSDRAIN_LOGIC_Pin SSDRAIN_SIGNAL_Pin IN_SAFETY_Pin BLE_STATE_Pin
                           SSWATER_LOGIC_Pin */
  GPIO_InitStruct.Pin = SSDRAIN_LOGIC_Pin|SSDRAIN_SIGNAL_Pin|IN_SAFETY_Pin|BLE_STATE_Pin
 8005b04:	193b      	adds	r3, r7, r4
 8005b06:	22f2      	movs	r2, #242	; 0xf2
 8005b08:	0192      	lsls	r2, r2, #6
 8005b0a:	601a      	str	r2, [r3, #0]
                          |SSWATER_LOGIC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b0c:	193b      	adds	r3, r7, r4
 8005b0e:	2200      	movs	r2, #0
 8005b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b12:	193b      	adds	r3, r7, r4
 8005b14:	2201      	movs	r2, #1
 8005b16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	4a8a      	ldr	r2, [pc, #552]	; (8005d44 <MX_GPIO_Init+0x310>)
 8005b1c:	0019      	movs	r1, r3
 8005b1e:	0010      	movs	r0, r2
 8005b20:	f002 ffa8 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14_Pin LED2_BL_Pin LED1_YE_Pin */
  GPIO_InitStruct.Pin = PC14_Pin|LED2_BL_Pin|LED1_YE_Pin;
 8005b24:	193b      	adds	r3, r7, r4
 8005b26:	4a8c      	ldr	r2, [pc, #560]	; (8005d58 <MX_GPIO_Init+0x324>)
 8005b28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b2a:	193b      	adds	r3, r7, r4
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b30:	193b      	adds	r3, r7, r4
 8005b32:	2200      	movs	r2, #0
 8005b34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b36:	193b      	adds	r3, r7, r4
 8005b38:	2200      	movs	r2, #0
 8005b3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b3c:	193b      	adds	r3, r7, r4
 8005b3e:	4a81      	ldr	r2, [pc, #516]	; (8005d44 <MX_GPIO_Init+0x310>)
 8005b40:	0019      	movs	r1, r3
 8005b42:	0010      	movs	r0, r2
 8005b44:	f002 ff96 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_5V_CTRL_Pin */
  GPIO_InitStruct.Pin = SS_5V_CTRL_Pin;
 8005b48:	0021      	movs	r1, r4
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	2280      	movs	r2, #128	; 0x80
 8005b4e:	0212      	lsls	r2, r2, #8
 8005b50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b52:	000c      	movs	r4, r1
 8005b54:	193b      	adds	r3, r7, r4
 8005b56:	2201      	movs	r2, #1
 8005b58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b5a:	193b      	adds	r3, r7, r4
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b60:	193b      	adds	r3, r7, r4
 8005b62:	2200      	movs	r2, #0
 8005b64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SS_5V_CTRL_GPIO_Port, &GPIO_InitStruct);
 8005b66:	193b      	adds	r3, r7, r4
 8005b68:	4a76      	ldr	r2, [pc, #472]	; (8005d44 <MX_GPIO_Init+0x310>)
 8005b6a:	0019      	movs	r1, r3
 8005b6c:	0010      	movs	r0, r2
 8005b6e:	f002 ff81 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8005b72:	193b      	adds	r3, r7, r4
 8005b74:	2204      	movs	r2, #4
 8005b76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b78:	193b      	adds	r3, r7, r4
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b7e:	193b      	adds	r3, r7, r4
 8005b80:	2202      	movs	r2, #2
 8005b82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b84:	193b      	adds	r3, r7, r4
 8005b86:	2200      	movs	r2, #0
 8005b88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8005b8a:	193b      	adds	r3, r7, r4
 8005b8c:	4a6d      	ldr	r2, [pc, #436]	; (8005d44 <MX_GPIO_Init+0x310>)
 8005b8e:	0019      	movs	r1, r3
 8005b90:	0010      	movs	r0, r2
 8005b92:	f002 ff6f 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_Pin RL_SS_STEAM_Pin TO_MASS_Pin BLE_EN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin|RL_SS_STEAM_Pin|TO_MASS_Pin|BLE_EN_Pin;
 8005b96:	0021      	movs	r1, r4
 8005b98:	187b      	adds	r3, r7, r1
 8005b9a:	22b8      	movs	r2, #184	; 0xb8
 8005b9c:	00d2      	lsls	r2, r2, #3
 8005b9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ba0:	000c      	movs	r4, r1
 8005ba2:	193b      	adds	r3, r7, r4
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005ba8:	193b      	adds	r3, r7, r4
 8005baa:	2202      	movs	r2, #2
 8005bac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bae:	193b      	adds	r3, r7, r4
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bb4:	193a      	adds	r2, r7, r4
 8005bb6:	23a0      	movs	r3, #160	; 0xa0
 8005bb8:	05db      	lsls	r3, r3, #23
 8005bba:	0011      	movs	r1, r2
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f002 ff59 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RL_DRAIN_Pin RL_WHIRL_Pin RL_AIR_Pin RL_STEAM100_Pin
                           RL_STEAM50_Pin RL_COM_Pin RL_SOL_COM_Pin */
  GPIO_InitStruct.Pin = RL_DRAIN_Pin|RL_WHIRL_Pin|RL_AIR_Pin|RL_STEAM100_Pin
 8005bc2:	193b      	adds	r3, r7, r4
 8005bc4:	4a65      	ldr	r2, [pc, #404]	; (8005d5c <MX_GPIO_Init+0x328>)
 8005bc6:	601a      	str	r2, [r3, #0]
                          |RL_STEAM50_Pin|RL_COM_Pin|RL_SOL_COM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bc8:	193b      	adds	r3, r7, r4
 8005bca:	2201      	movs	r2, #1
 8005bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005bce:	193b      	adds	r3, r7, r4
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bd4:	193b      	adds	r3, r7, r4
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bda:	193b      	adds	r3, r7, r4
 8005bdc:	4a5c      	ldr	r2, [pc, #368]	; (8005d50 <MX_GPIO_Init+0x31c>)
 8005bde:	0019      	movs	r1, r3
 8005be0:	0010      	movs	r0, r2
 8005be2:	f002 ff47 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUG_IO_Pin */
  GPIO_InitStruct.Pin = BUG_IO_Pin;
 8005be6:	0021      	movs	r1, r4
 8005be8:	187b      	adds	r3, r7, r1
 8005bea:	2280      	movs	r2, #128	; 0x80
 8005bec:	0192      	lsls	r2, r2, #6
 8005bee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bf0:	000c      	movs	r4, r1
 8005bf2:	193b      	adds	r3, r7, r4
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bf8:	193b      	adds	r3, r7, r4
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bfe:	193b      	adds	r3, r7, r4
 8005c00:	2203      	movs	r2, #3
 8005c02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUG_IO_GPIO_Port, &GPIO_InitStruct);
 8005c04:	193b      	adds	r3, r7, r4
 8005c06:	4a52      	ldr	r2, [pc, #328]	; (8005d50 <MX_GPIO_Init+0x31c>)
 8005c08:	0019      	movs	r1, r3
 8005c0a:	0010      	movs	r0, r2
 8005c0c:	f002 ff32 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_BUTTON_Pin IN_EN_DEBUG_Pin IN_JETSW_Pin IN_DRAINSW_Pin */
  GPIO_InitStruct.Pin = IN_BUTTON_Pin|IN_EN_DEBUG_Pin|IN_JETSW_Pin|IN_DRAINSW_Pin;
 8005c10:	193b      	adds	r3, r7, r4
 8005c12:	4a53      	ldr	r2, [pc, #332]	; (8005d60 <MX_GPIO_Init+0x32c>)
 8005c14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c16:	193b      	adds	r3, r7, r4
 8005c18:	2200      	movs	r2, #0
 8005c1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c1c:	193b      	adds	r3, r7, r4
 8005c1e:	2201      	movs	r2, #1
 8005c20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c22:	193b      	adds	r3, r7, r4
 8005c24:	4a4a      	ldr	r2, [pc, #296]	; (8005d50 <MX_GPIO_Init+0x31c>)
 8005c26:	0019      	movs	r1, r3
 8005c28:	0010      	movs	r0, r2
 8005c2a:	f002 ff23 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_EL814_Pin */
  GPIO_InitStruct.Pin = IN_EL814_Pin;
 8005c2e:	193b      	adds	r3, r7, r4
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	0092      	lsls	r2, r2, #2
 8005c34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c36:	193b      	adds	r3, r7, r4
 8005c38:	2200      	movs	r2, #0
 8005c3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c3c:	193b      	adds	r3, r7, r4
 8005c3e:	2201      	movs	r2, #1
 8005c40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IN_EL814_GPIO_Port, &GPIO_InitStruct);
 8005c42:	193a      	adds	r2, r7, r4
 8005c44:	23a0      	movs	r3, #160	; 0xa0
 8005c46:	05db      	lsls	r3, r3, #23
 8005c48:	0011      	movs	r1, r2
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f002 ff12 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIM_TRIAC_Pin */
  GPIO_InitStruct.Pin = DIM_TRIAC_Pin;
 8005c50:	193b      	adds	r3, r7, r4
 8005c52:	2240      	movs	r2, #64	; 0x40
 8005c54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c56:	193b      	adds	r3, r7, r4
 8005c58:	2201      	movs	r2, #1
 8005c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005c5c:	193b      	adds	r3, r7, r4
 8005c5e:	2202      	movs	r2, #2
 8005c60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c62:	193b      	adds	r3, r7, r4
 8005c64:	2202      	movs	r2, #2
 8005c66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIM_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8005c68:	193b      	adds	r3, r7, r4
 8005c6a:	4a36      	ldr	r2, [pc, #216]	; (8005d44 <MX_GPIO_Init+0x310>)
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	0010      	movs	r0, r2
 8005c70:	f002 ff00 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin;
 8005c74:	0021      	movs	r1, r4
 8005c76:	187b      	adds	r3, r7, r1
 8005c78:	2280      	movs	r2, #128	; 0x80
 8005c7a:	0212      	lsls	r2, r2, #8
 8005c7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c7e:	000c      	movs	r4, r1
 8005c80:	193b      	adds	r3, r7, r4
 8005c82:	2201      	movs	r2, #1
 8005c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c86:	193b      	adds	r3, r7, r4
 8005c88:	2200      	movs	r2, #0
 8005c8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c8c:	193b      	adds	r3, r7, r4
 8005c8e:	2200      	movs	r2, #0
 8005c90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_IN2_GPIO_Port, &GPIO_InitStruct);
 8005c92:	193a      	adds	r2, r7, r4
 8005c94:	23a0      	movs	r3, #160	; 0xa0
 8005c96:	05db      	lsls	r3, r3, #23
 8005c98:	0011      	movs	r1, r2
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f002 feea 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN1_Pin;
 8005ca0:	193b      	adds	r3, r7, r4
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ca6:	193b      	adds	r3, r7, r4
 8005ca8:	2201      	movs	r2, #1
 8005caa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cac:	193b      	adds	r3, r7, r4
 8005cae:	2200      	movs	r2, #0
 8005cb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cb2:	193b      	adds	r3, r7, r4
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_IN1_GPIO_Port, &GPIO_InitStruct);
 8005cb8:	193b      	adds	r3, r7, r4
 8005cba:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <MX_GPIO_Init+0x320>)
 8005cbc:	0019      	movs	r1, r3
 8005cbe:	0010      	movs	r0, r2
 8005cc0:	f002 fed8 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : FET_DOME_LIGHT_Pin FET_SOL_AF_Pin FET_SOL_STEAM_Pin */
  GPIO_InitStruct.Pin = FET_DOME_LIGHT_Pin|FET_SOL_AF_Pin|FET_SOL_STEAM_Pin;
 8005cc4:	193b      	adds	r3, r7, r4
 8005cc6:	221a      	movs	r2, #26
 8005cc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cca:	193b      	adds	r3, r7, r4
 8005ccc:	2201      	movs	r2, #1
 8005cce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005cd0:	193b      	adds	r3, r7, r4
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cd6:	193b      	adds	r3, r7, r4
 8005cd8:	2200      	movs	r2, #0
 8005cda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cdc:	193b      	adds	r3, r7, r4
 8005cde:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <MX_GPIO_Init+0x320>)
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	0010      	movs	r0, r2
 8005ce4:	f002 fec6 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_Pin */
  GPIO_InitStruct.Pin = PB3_Pin;
 8005ce8:	193b      	adds	r3, r7, r4
 8005cea:	2208      	movs	r2, #8
 8005cec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cee:	193b      	adds	r3, r7, r4
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf4:	193b      	adds	r3, r7, r4
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cfa:	193b      	adds	r3, r7, r4
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 8005d00:	193b      	adds	r3, r7, r4
 8005d02:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <MX_GPIO_Init+0x31c>)
 8005d04:	0019      	movs	r1, r3
 8005d06:	0010      	movs	r0, r2
 8005d08:	f002 feb4 	bl	8008a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED24V_BLUE_Pin LED24V_GREEN_Pin SSWATER_SIGNAL_Pin */
  GPIO_InitStruct.Pin = LED24V_BLUE_Pin|LED24V_GREEN_Pin|SSWATER_SIGNAL_Pin;
 8005d0c:	0021      	movs	r1, r4
 8005d0e:	187b      	adds	r3, r7, r1
 8005d10:	2298      	movs	r2, #152	; 0x98
 8005d12:	0052      	lsls	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d16:	187b      	adds	r3, r7, r1
 8005d18:	2201      	movs	r2, #1
 8005d1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d1c:	187b      	adds	r3, r7, r1
 8005d1e:	2201      	movs	r2, #1
 8005d20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d22:	187b      	adds	r3, r7, r1
 8005d24:	2200      	movs	r2, #0
 8005d26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d28:	187b      	adds	r3, r7, r1
 8005d2a:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <MX_GPIO_Init+0x31c>)
 8005d2c:	0019      	movs	r1, r3
 8005d2e:	0010      	movs	r0, r2
 8005d30:	f002 fea0 	bl	8008a74 <HAL_GPIO_Init>

}
 8005d34:	46c0      	nop			; (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b00b      	add	sp, #44	; 0x2c
 8005d3a:	bd90      	pop	{r4, r7, pc}
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	0000404e 	.word	0x0000404e
 8005d44:	50000800 	.word	0x50000800
 8005d48:	000085c0 	.word	0x000085c0
 8005d4c:	00003c4f 	.word	0x00003c4f
 8005d50:	50000400 	.word	0x50000400
 8005d54:	50000c00 	.word	0x50000c00
 8005d58:	0000400a 	.word	0x0000400a
 8005d5c:	00001c47 	.word	0x00001c47
 8005d60:	0000c280 	.word	0x0000c280

08005d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005d68:	b672      	cpsid	i
}
 8005d6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d6c:	e7fe      	b.n	8005d6c <Error_Handler+0x8>
	...

08005d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d76:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <HAL_MspInit+0x4c>)
 8005d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <HAL_MspInit+0x4c>)
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
 8005d82:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <HAL_MspInit+0x4c>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	2201      	movs	r2, #1
 8005d88:	4013      	ands	r3, r2
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_MspInit+0x4c>)
 8005d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d92:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <HAL_MspInit+0x4c>)
 8005d94:	2180      	movs	r1, #128	; 0x80
 8005d96:	0549      	lsls	r1, r1, #21
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d9c:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <HAL_MspInit+0x4c>)
 8005d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da0:	2380      	movs	r3, #128	; 0x80
 8005da2:	055b      	lsls	r3, r3, #21
 8005da4:	4013      	ands	r3, r2
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8005daa:	23c0      	movs	r3, #192	; 0xc0
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	0018      	movs	r0, r3
 8005db0:	f000 ff1c 	bl	8006bec <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005db4:	46c0      	nop			; (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b002      	add	sp, #8
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40021000 	.word	0x40021000

08005dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b091      	sub	sp, #68	; 0x44
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dc8:	232c      	movs	r3, #44	; 0x2c
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	0018      	movs	r0, r3
 8005dce:	2314      	movs	r3, #20
 8005dd0:	001a      	movs	r2, r3
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	f006 ffdb 	bl	800cd8e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005dd8:	2410      	movs	r4, #16
 8005dda:	193b      	adds	r3, r7, r4
 8005ddc:	0018      	movs	r0, r3
 8005dde:	231c      	movs	r3, #28
 8005de0:	001a      	movs	r2, r3
 8005de2:	2100      	movs	r1, #0
 8005de4:	f006 ffd3 	bl	800cd8e <memset>
  if(hadc->Instance==ADC1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a39      	ldr	r2, [pc, #228]	; (8005ed4 <HAL_ADC_MspInit+0x114>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d16c      	bne.n	8005ecc <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005df2:	193b      	adds	r3, r7, r4
 8005df4:	2280      	movs	r2, #128	; 0x80
 8005df6:	01d2      	lsls	r2, r2, #7
 8005df8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8005dfa:	193b      	adds	r3, r7, r4
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e00:	193b      	adds	r3, r7, r4
 8005e02:	0018      	movs	r0, r3
 8005e04:	f004 fcb0 	bl	800a768 <HAL_RCCEx_PeriphCLKConfig>
 8005e08:	1e03      	subs	r3, r0, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8005e0c:	f7ff ffaa 	bl	8005d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005e10:	4b31      	ldr	r3, [pc, #196]	; (8005ed8 <HAL_ADC_MspInit+0x118>)
 8005e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e14:	4b30      	ldr	r3, [pc, #192]	; (8005ed8 <HAL_ADC_MspInit+0x118>)
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	0349      	lsls	r1, r1, #13
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8005e1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ed8 <HAL_ADC_MspInit+0x118>)
 8005e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e22:	2380      	movs	r3, #128	; 0x80
 8005e24:	035b      	lsls	r3, r3, #13
 8005e26:	4013      	ands	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <HAL_ADC_MspInit+0x118>)
 8005e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e30:	4b29      	ldr	r3, [pc, #164]	; (8005ed8 <HAL_ADC_MspInit+0x118>)
 8005e32:	2101      	movs	r1, #1
 8005e34:	430a      	orrs	r2, r1
 8005e36:	635a      	str	r2, [r3, #52]	; 0x34
 8005e38:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <HAL_ADC_MspInit+0x118>)
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005e44:	212c      	movs	r1, #44	; 0x2c
 8005e46:	187b      	adds	r3, r7, r1
 8005e48:	223c      	movs	r2, #60	; 0x3c
 8005e4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	2203      	movs	r2, #3
 8005e50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e52:	187b      	adds	r3, r7, r1
 8005e54:	2200      	movs	r2, #0
 8005e56:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e58:	187a      	adds	r2, r7, r1
 8005e5a:	23a0      	movs	r3, #160	; 0xa0
 8005e5c:	05db      	lsls	r3, r3, #23
 8005e5e:	0011      	movs	r1, r2
 8005e60:	0018      	movs	r0, r3
 8005e62:	f002 fe07 	bl	8008a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005e66:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_ADC_MspInit+0x120>)
 8005e6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005e6e:	2205      	movs	r2, #5
 8005e70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e72:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e78:	4b18      	ldr	r3, [pc, #96]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e7e:	4b17      	ldr	r3, [pc, #92]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005e80:	2280      	movs	r2, #128	; 0x80
 8005e82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e84:	4b15      	ldr	r3, [pc, #84]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005e86:	2280      	movs	r2, #128	; 0x80
 8005e88:	0052      	lsls	r2, r2, #1
 8005e8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e8c:	4b13      	ldr	r3, [pc, #76]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005e8e:	2280      	movs	r2, #128	; 0x80
 8005e90:	00d2      	lsls	r2, r2, #3
 8005e92:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e94:	4b11      	ldr	r3, [pc, #68]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005e96:	2220      	movs	r2, #32
 8005e98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005ea0:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f002 f928 	bl	80080f8 <HAL_DMA_Init>
 8005ea8:	1e03      	subs	r3, r0, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8005eac:	f7ff ff5a 	bl	8005d64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005eb4:	651a      	str	r2, [r3, #80]	; 0x50
 8005eb6:	4b09      	ldr	r3, [pc, #36]	; (8005edc <HAL_ADC_MspInit+0x11c>)
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	200c      	movs	r0, #12
 8005ec2:	f002 f8df 	bl	8008084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8005ec6:	200c      	movs	r0, #12
 8005ec8:	f002 f8f1 	bl	80080ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005ecc:	46c0      	nop			; (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b011      	add	sp, #68	; 0x44
 8005ed2:	bd90      	pop	{r4, r7, pc}
 8005ed4:	40012400 	.word	0x40012400
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	2000059c 	.word	0x2000059c
 8005ee0:	40020008 	.word	0x40020008

08005ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b08b      	sub	sp, #44	; 0x2c
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eec:	2414      	movs	r4, #20
 8005eee:	193b      	adds	r3, r7, r4
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	2314      	movs	r3, #20
 8005ef4:	001a      	movs	r2, r3
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	f006 ff49 	bl	800cd8e <memset>
  if(hi2c->Instance==I2C2)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <HAL_I2C_MspInit+0x90>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d131      	bne.n	8005f6a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f06:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <HAL_I2C_MspInit+0x94>)
 8005f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <HAL_I2C_MspInit+0x94>)
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	635a      	str	r2, [r3, #52]	; 0x34
 8005f12:	4b19      	ldr	r3, [pc, #100]	; (8005f78 <HAL_I2C_MspInit+0x94>)
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	2201      	movs	r2, #1
 8005f18:	4013      	ands	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f1e:	193b      	adds	r3, r7, r4
 8005f20:	22c0      	movs	r2, #192	; 0xc0
 8005f22:	0152      	lsls	r2, r2, #5
 8005f24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f26:	0021      	movs	r1, r4
 8005f28:	187b      	adds	r3, r7, r1
 8005f2a:	2212      	movs	r2, #18
 8005f2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f2e:	187b      	adds	r3, r7, r1
 8005f30:	2201      	movs	r2, #1
 8005f32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	2200      	movs	r2, #0
 8005f38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005f3a:	187b      	adds	r3, r7, r1
 8005f3c:	2206      	movs	r2, #6
 8005f3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f40:	187a      	adds	r2, r7, r1
 8005f42:	23a0      	movs	r3, #160	; 0xa0
 8005f44:	05db      	lsls	r3, r3, #23
 8005f46:	0011      	movs	r1, r2
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f002 fd93 	bl	8008a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <HAL_I2C_MspInit+0x94>)
 8005f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <HAL_I2C_MspInit+0x94>)
 8005f54:	2180      	movs	r1, #128	; 0x80
 8005f56:	03c9      	lsls	r1, r1, #15
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <HAL_I2C_MspInit+0x94>)
 8005f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f60:	2380      	movs	r3, #128	; 0x80
 8005f62:	03db      	lsls	r3, r3, #15
 8005f64:	4013      	ands	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b00b      	add	sp, #44	; 0x2c
 8005f70:	bd90      	pop	{r4, r7, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	40005800 	.word	0x40005800
 8005f78:	40021000 	.word	0x40021000

08005f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a23      	ldr	r2, [pc, #140]	; (8006018 <HAL_TIM_Base_MspInit+0x9c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d10c      	bne.n	8005fa8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f8e:	4b23      	ldr	r3, [pc, #140]	; (800601c <HAL_TIM_Base_MspInit+0xa0>)
 8005f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f92:	4b22      	ldr	r3, [pc, #136]	; (800601c <HAL_TIM_Base_MspInit+0xa0>)
 8005f94:	2102      	movs	r1, #2
 8005f96:	430a      	orrs	r2, r1
 8005f98:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f9a:	4b20      	ldr	r3, [pc, #128]	; (800601c <HAL_TIM_Base_MspInit+0xa0>)
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005fa6:	e032      	b.n	800600e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <HAL_TIM_Base_MspInit+0xa4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d114      	bne.n	8005fdc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <HAL_TIM_Base_MspInit+0xa0>)
 8005fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fb6:	4b19      	ldr	r3, [pc, #100]	; (800601c <HAL_TIM_Base_MspInit+0xa0>)
 8005fb8:	2110      	movs	r1, #16
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fbe:	4b17      	ldr	r3, [pc, #92]	; (800601c <HAL_TIM_Base_MspInit+0xa0>)
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	2210      	movs	r2, #16
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2101      	movs	r1, #1
 8005fce:	2011      	movs	r0, #17
 8005fd0:	f002 f858 	bl	8008084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005fd4:	2011      	movs	r0, #17
 8005fd6:	f002 f86a 	bl	80080ae <HAL_NVIC_EnableIRQ>
}
 8005fda:	e018      	b.n	800600e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a10      	ldr	r2, [pc, #64]	; (8006024 <HAL_TIM_Base_MspInit+0xa8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d113      	bne.n	800600e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	; (800601c <HAL_TIM_Base_MspInit+0xa0>)
 8005fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <HAL_TIM_Base_MspInit+0xa0>)
 8005fec:	2120      	movs	r1, #32
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ff2:	4b0a      	ldr	r3, [pc, #40]	; (800601c <HAL_TIM_Base_MspInit+0xa0>)
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005ffe:	2200      	movs	r2, #0
 8006000:	2100      	movs	r1, #0
 8006002:	2012      	movs	r0, #18
 8006004:	f002 f83e 	bl	8008084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006008:	2012      	movs	r0, #18
 800600a:	f002 f850 	bl	80080ae <HAL_NVIC_EnableIRQ>
}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	46bd      	mov	sp, r7
 8006012:	b006      	add	sp, #24
 8006014:	bd80      	pop	{r7, pc}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	40000400 	.word	0x40000400
 800601c:	40021000 	.word	0x40021000
 8006020:	40001000 	.word	0x40001000
 8006024:	40001400 	.word	0x40001400

08006028 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006028:	b590      	push	{r4, r7, lr}
 800602a:	b089      	sub	sp, #36	; 0x24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006030:	240c      	movs	r4, #12
 8006032:	193b      	adds	r3, r7, r4
 8006034:	0018      	movs	r0, r3
 8006036:	2314      	movs	r3, #20
 8006038:	001a      	movs	r2, r3
 800603a:	2100      	movs	r1, #0
 800603c:	f006 fea7 	bl	800cd8e <memset>
  if(htim->Instance==TIM3)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a14      	ldr	r2, [pc, #80]	; (8006098 <HAL_TIM_MspPostInit+0x70>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d122      	bne.n	8006090 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <HAL_TIM_MspPostInit+0x74>)
 800604c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604e:	4b13      	ldr	r3, [pc, #76]	; (800609c <HAL_TIM_MspPostInit+0x74>)
 8006050:	2104      	movs	r1, #4
 8006052:	430a      	orrs	r2, r1
 8006054:	635a      	str	r2, [r3, #52]	; 0x34
 8006056:	4b11      	ldr	r3, [pc, #68]	; (800609c <HAL_TIM_MspPostInit+0x74>)
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	2204      	movs	r2, #4
 800605c:	4013      	ands	r3, r2
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_R_Pin|TIM3_CH4_SPOT_Pin;
 8006062:	193b      	adds	r3, r7, r4
 8006064:	22c0      	movs	r2, #192	; 0xc0
 8006066:	0092      	lsls	r2, r2, #2
 8006068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606a:	0021      	movs	r1, r4
 800606c:	187b      	adds	r3, r7, r1
 800606e:	2202      	movs	r2, #2
 8006070:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006072:	187b      	adds	r3, r7, r1
 8006074:	2200      	movs	r2, #0
 8006076:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006078:	187b      	adds	r3, r7, r1
 800607a:	2200      	movs	r2, #0
 800607c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800607e:	187b      	adds	r3, r7, r1
 8006080:	2201      	movs	r2, #1
 8006082:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006084:	187b      	adds	r3, r7, r1
 8006086:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <HAL_TIM_MspPostInit+0x78>)
 8006088:	0019      	movs	r1, r3
 800608a:	0010      	movs	r0, r2
 800608c:	f002 fcf2 	bl	8008a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006090:	46c0      	nop			; (mov r8, r8)
 8006092:	46bd      	mov	sp, r7
 8006094:	b009      	add	sp, #36	; 0x24
 8006096:	bd90      	pop	{r4, r7, pc}
 8006098:	40000400 	.word	0x40000400
 800609c:	40021000 	.word	0x40021000
 80060a0:	50000800 	.word	0x50000800

080060a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80060a4:	b590      	push	{r4, r7, lr}
 80060a6:	b097      	sub	sp, #92	; 0x5c
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ac:	2344      	movs	r3, #68	; 0x44
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	0018      	movs	r0, r3
 80060b2:	2314      	movs	r3, #20
 80060b4:	001a      	movs	r2, r3
 80060b6:	2100      	movs	r1, #0
 80060b8:	f006 fe69 	bl	800cd8e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060bc:	2428      	movs	r4, #40	; 0x28
 80060be:	193b      	adds	r3, r7, r4
 80060c0:	0018      	movs	r0, r3
 80060c2:	231c      	movs	r3, #28
 80060c4:	001a      	movs	r2, r3
 80060c6:	2100      	movs	r1, #0
 80060c8:	f006 fe61 	bl	800cd8e <memset>
  if(huart->Instance==USART1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a8b      	ldr	r2, [pc, #556]	; (8006300 <HAL_UART_MspInit+0x25c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d146      	bne.n	8006164 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80060d6:	193b      	adds	r3, r7, r4
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80060dc:	193b      	adds	r3, r7, r4
 80060de:	2200      	movs	r2, #0
 80060e0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060e2:	193b      	adds	r3, r7, r4
 80060e4:	0018      	movs	r0, r3
 80060e6:	f004 fb3f 	bl	800a768 <HAL_RCCEx_PeriphCLKConfig>
 80060ea:	1e03      	subs	r3, r0, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80060ee:	f7ff fe39 	bl	8005d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060f2:	4b84      	ldr	r3, [pc, #528]	; (8006304 <HAL_UART_MspInit+0x260>)
 80060f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060f6:	4b83      	ldr	r3, [pc, #524]	; (8006304 <HAL_UART_MspInit+0x260>)
 80060f8:	2180      	movs	r1, #128	; 0x80
 80060fa:	01c9      	lsls	r1, r1, #7
 80060fc:	430a      	orrs	r2, r1
 80060fe:	641a      	str	r2, [r3, #64]	; 0x40
 8006100:	4b80      	ldr	r3, [pc, #512]	; (8006304 <HAL_UART_MspInit+0x260>)
 8006102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	01db      	lsls	r3, r3, #7
 8006108:	4013      	ands	r3, r2
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800610e:	4b7d      	ldr	r3, [pc, #500]	; (8006304 <HAL_UART_MspInit+0x260>)
 8006110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006112:	4b7c      	ldr	r3, [pc, #496]	; (8006304 <HAL_UART_MspInit+0x260>)
 8006114:	2104      	movs	r1, #4
 8006116:	430a      	orrs	r2, r1
 8006118:	635a      	str	r2, [r3, #52]	; 0x34
 800611a:	4b7a      	ldr	r3, [pc, #488]	; (8006304 <HAL_UART_MspInit+0x260>)
 800611c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611e:	2204      	movs	r2, #4
 8006120:	4013      	ands	r3, r2
 8006122:	623b      	str	r3, [r7, #32]
 8006124:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006126:	2144      	movs	r1, #68	; 0x44
 8006128:	187b      	adds	r3, r7, r1
 800612a:	2230      	movs	r2, #48	; 0x30
 800612c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612e:	187b      	adds	r3, r7, r1
 8006130:	2202      	movs	r2, #2
 8006132:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006134:	187b      	adds	r3, r7, r1
 8006136:	2200      	movs	r2, #0
 8006138:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800613a:	187b      	adds	r3, r7, r1
 800613c:	2200      	movs	r2, #0
 800613e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006140:	187b      	adds	r3, r7, r1
 8006142:	2201      	movs	r2, #1
 8006144:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006146:	187b      	adds	r3, r7, r1
 8006148:	4a6f      	ldr	r2, [pc, #444]	; (8006308 <HAL_UART_MspInit+0x264>)
 800614a:	0019      	movs	r1, r3
 800614c:	0010      	movs	r0, r2
 800614e:	f002 fc91 	bl	8008a74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006152:	2200      	movs	r2, #0
 8006154:	2100      	movs	r1, #0
 8006156:	201b      	movs	r0, #27
 8006158:	f001 ff94 	bl	8008084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800615c:	201b      	movs	r0, #27
 800615e:	f001 ffa6 	bl	80080ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8006162:	e0c9      	b.n	80062f8 <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART2)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a68      	ldr	r2, [pc, #416]	; (800630c <HAL_UART_MspInit+0x268>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d147      	bne.n	80061fe <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800616e:	2128      	movs	r1, #40	; 0x28
 8006170:	187b      	adds	r3, r7, r1
 8006172:	2202      	movs	r2, #2
 8006174:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006176:	187b      	adds	r3, r7, r1
 8006178:	2200      	movs	r2, #0
 800617a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800617c:	187b      	adds	r3, r7, r1
 800617e:	0018      	movs	r0, r3
 8006180:	f004 faf2 	bl	800a768 <HAL_RCCEx_PeriphCLKConfig>
 8006184:	1e03      	subs	r3, r0, #0
 8006186:	d001      	beq.n	800618c <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8006188:	f7ff fdec 	bl	8005d64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800618c:	4b5d      	ldr	r3, [pc, #372]	; (8006304 <HAL_UART_MspInit+0x260>)
 800618e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006190:	4b5c      	ldr	r3, [pc, #368]	; (8006304 <HAL_UART_MspInit+0x260>)
 8006192:	2180      	movs	r1, #128	; 0x80
 8006194:	0289      	lsls	r1, r1, #10
 8006196:	430a      	orrs	r2, r1
 8006198:	63da      	str	r2, [r3, #60]	; 0x3c
 800619a:	4b5a      	ldr	r3, [pc, #360]	; (8006304 <HAL_UART_MspInit+0x260>)
 800619c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	029b      	lsls	r3, r3, #10
 80061a2:	4013      	ands	r3, r2
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061a8:	4b56      	ldr	r3, [pc, #344]	; (8006304 <HAL_UART_MspInit+0x260>)
 80061aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ac:	4b55      	ldr	r3, [pc, #340]	; (8006304 <HAL_UART_MspInit+0x260>)
 80061ae:	2108      	movs	r1, #8
 80061b0:	430a      	orrs	r2, r1
 80061b2:	635a      	str	r2, [r3, #52]	; 0x34
 80061b4:	4b53      	ldr	r3, [pc, #332]	; (8006304 <HAL_UART_MspInit+0x260>)
 80061b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b8:	2208      	movs	r2, #8
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80061c0:	2144      	movs	r1, #68	; 0x44
 80061c2:	187b      	adds	r3, r7, r1
 80061c4:	2260      	movs	r2, #96	; 0x60
 80061c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c8:	187b      	adds	r3, r7, r1
 80061ca:	2202      	movs	r2, #2
 80061cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ce:	187b      	adds	r3, r7, r1
 80061d0:	2200      	movs	r2, #0
 80061d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061d4:	187b      	adds	r3, r7, r1
 80061d6:	2200      	movs	r2, #0
 80061d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80061da:	187b      	adds	r3, r7, r1
 80061dc:	2200      	movs	r2, #0
 80061de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061e0:	187b      	adds	r3, r7, r1
 80061e2:	4a4b      	ldr	r2, [pc, #300]	; (8006310 <HAL_UART_MspInit+0x26c>)
 80061e4:	0019      	movs	r1, r3
 80061e6:	0010      	movs	r0, r2
 80061e8:	f002 fc44 	bl	8008a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061ec:	2200      	movs	r2, #0
 80061ee:	2100      	movs	r1, #0
 80061f0:	201c      	movs	r0, #28
 80061f2:	f001 ff47 	bl	8008084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061f6:	201c      	movs	r0, #28
 80061f8:	f001 ff59 	bl	80080ae <HAL_NVIC_EnableIRQ>
}
 80061fc:	e07c      	b.n	80062f8 <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART3)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a44      	ldr	r2, [pc, #272]	; (8006314 <HAL_UART_MspInit+0x270>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d139      	bne.n	800627c <HAL_UART_MspInit+0x1d8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006208:	4b3e      	ldr	r3, [pc, #248]	; (8006304 <HAL_UART_MspInit+0x260>)
 800620a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620c:	4b3d      	ldr	r3, [pc, #244]	; (8006304 <HAL_UART_MspInit+0x260>)
 800620e:	2180      	movs	r1, #128	; 0x80
 8006210:	02c9      	lsls	r1, r1, #11
 8006212:	430a      	orrs	r2, r1
 8006214:	63da      	str	r2, [r3, #60]	; 0x3c
 8006216:	4b3b      	ldr	r3, [pc, #236]	; (8006304 <HAL_UART_MspInit+0x260>)
 8006218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	02db      	lsls	r3, r3, #11
 800621e:	4013      	ands	r3, r2
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006224:	4b37      	ldr	r3, [pc, #220]	; (8006304 <HAL_UART_MspInit+0x260>)
 8006226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006228:	4b36      	ldr	r3, [pc, #216]	; (8006304 <HAL_UART_MspInit+0x260>)
 800622a:	2108      	movs	r1, #8
 800622c:	430a      	orrs	r2, r1
 800622e:	635a      	str	r2, [r3, #52]	; 0x34
 8006230:	4b34      	ldr	r3, [pc, #208]	; (8006304 <HAL_UART_MspInit+0x260>)
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	2208      	movs	r2, #8
 8006236:	4013      	ands	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800623c:	2144      	movs	r1, #68	; 0x44
 800623e:	187b      	adds	r3, r7, r1
 8006240:	22c0      	movs	r2, #192	; 0xc0
 8006242:	0092      	lsls	r2, r2, #2
 8006244:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006246:	187b      	adds	r3, r7, r1
 8006248:	2202      	movs	r2, #2
 800624a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624c:	187b      	adds	r3, r7, r1
 800624e:	2200      	movs	r2, #0
 8006250:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006252:	187b      	adds	r3, r7, r1
 8006254:	2200      	movs	r2, #0
 8006256:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8006258:	187b      	adds	r3, r7, r1
 800625a:	2200      	movs	r2, #0
 800625c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800625e:	187b      	adds	r3, r7, r1
 8006260:	4a2b      	ldr	r2, [pc, #172]	; (8006310 <HAL_UART_MspInit+0x26c>)
 8006262:	0019      	movs	r1, r3
 8006264:	0010      	movs	r0, r2
 8006266:	f002 fc05 	bl	8008a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800626a:	2200      	movs	r2, #0
 800626c:	2100      	movs	r1, #0
 800626e:	201d      	movs	r0, #29
 8006270:	f001 ff08 	bl	8008084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8006274:	201d      	movs	r0, #29
 8006276:	f001 ff1a 	bl	80080ae <HAL_NVIC_EnableIRQ>
}
 800627a:	e03d      	b.n	80062f8 <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART4)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a25      	ldr	r2, [pc, #148]	; (8006318 <HAL_UART_MspInit+0x274>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d138      	bne.n	80062f8 <HAL_UART_MspInit+0x254>
    __HAL_RCC_USART4_CLK_ENABLE();
 8006286:	4b1f      	ldr	r3, [pc, #124]	; (8006304 <HAL_UART_MspInit+0x260>)
 8006288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800628a:	4b1e      	ldr	r3, [pc, #120]	; (8006304 <HAL_UART_MspInit+0x260>)
 800628c:	2180      	movs	r1, #128	; 0x80
 800628e:	0309      	lsls	r1, r1, #12
 8006290:	430a      	orrs	r2, r1
 8006292:	63da      	str	r2, [r3, #60]	; 0x3c
 8006294:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <HAL_UART_MspInit+0x260>)
 8006296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	031b      	lsls	r3, r3, #12
 800629c:	4013      	ands	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062a2:	4b18      	ldr	r3, [pc, #96]	; (8006304 <HAL_UART_MspInit+0x260>)
 80062a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a6:	4b17      	ldr	r3, [pc, #92]	; (8006304 <HAL_UART_MspInit+0x260>)
 80062a8:	2101      	movs	r1, #1
 80062aa:	430a      	orrs	r2, r1
 80062ac:	635a      	str	r2, [r3, #52]	; 0x34
 80062ae:	4b15      	ldr	r3, [pc, #84]	; (8006304 <HAL_UART_MspInit+0x260>)
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	2201      	movs	r2, #1
 80062b4:	4013      	ands	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80062ba:	2144      	movs	r1, #68	; 0x44
 80062bc:	187b      	adds	r3, r7, r1
 80062be:	2203      	movs	r2, #3
 80062c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c2:	187b      	adds	r3, r7, r1
 80062c4:	2202      	movs	r2, #2
 80062c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c8:	187b      	adds	r3, r7, r1
 80062ca:	2200      	movs	r2, #0
 80062cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ce:	187b      	adds	r3, r7, r1
 80062d0:	2200      	movs	r2, #0
 80062d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80062d4:	187b      	adds	r3, r7, r1
 80062d6:	2204      	movs	r2, #4
 80062d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062da:	187a      	adds	r2, r7, r1
 80062dc:	23a0      	movs	r3, #160	; 0xa0
 80062de:	05db      	lsls	r3, r3, #23
 80062e0:	0011      	movs	r1, r2
 80062e2:	0018      	movs	r0, r3
 80062e4:	f002 fbc6 	bl	8008a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80062e8:	2200      	movs	r2, #0
 80062ea:	2100      	movs	r1, #0
 80062ec:	201d      	movs	r0, #29
 80062ee:	f001 fec9 	bl	8008084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80062f2:	201d      	movs	r0, #29
 80062f4:	f001 fedb 	bl	80080ae <HAL_NVIC_EnableIRQ>
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b017      	add	sp, #92	; 0x5c
 80062fe:	bd90      	pop	{r4, r7, pc}
 8006300:	40013800 	.word	0x40013800
 8006304:	40021000 	.word	0x40021000
 8006308:	50000800 	.word	0x50000800
 800630c:	40004400 	.word	0x40004400
 8006310:	50000c00 	.word	0x50000c00
 8006314:	40004800 	.word	0x40004800
 8006318:	40004c00 	.word	0x40004c00

0800631c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006320:	e7fe      	b.n	8006320 <NMI_Handler+0x4>

08006322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006326:	e7fe      	b.n	8006326 <HardFault_Handler+0x4>

08006328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800632c:	46c0      	nop			; (mov r8, r8)
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006340:	f000 fc14 	bl	8006b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8006344:	f001 fed0 	bl	80080e8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8006348:	46c0      	nop			; (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <DMA1_Channel1_IRQHandler+0x14>)
 8006356:	0018      	movs	r0, r3
 8006358:	f002 f8aa 	bl	80084b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800635c:	46c0      	nop			; (mov r8, r8)
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	46c0      	nop			; (mov r8, r8)
 8006364:	2000059c 	.word	0x2000059c

08006368 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <ADC1_IRQHandler+0x14>)
 800636e:	0018      	movs	r0, r3
 8006370:	f000 ffec 	bl	800734c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8006374:	46c0      	nop			; (mov r8, r8)
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	20000538 	.word	0x20000538

08006380 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <TIM6_IRQHandler+0x14>)
 8006386:	0018      	movs	r0, r3
 8006388:	f004 fc5e 	bl	800ac48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800638c:	46c0      	nop			; (mov r8, r8)
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	200006a8 	.word	0x200006a8

08006398 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800639c:	4b03      	ldr	r3, [pc, #12]	; (80063ac <TIM7_IRQHandler+0x14>)
 800639e:	0018      	movs	r0, r3
 80063a0:	f004 fc52 	bl	800ac48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80063a4:	46c0      	nop			; (mov r8, r8)
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	200006f4 	.word	0x200006f4

080063b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80063b4:	4b03      	ldr	r3, [pc, #12]	; (80063c4 <USART1_IRQHandler+0x14>)
 80063b6:	0018      	movs	r0, r3
 80063b8:	f005 fc1a 	bl	800bbf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80063bc:	46c0      	nop			; (mov r8, r8)
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	20000740 	.word	0x20000740

080063c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80063cc:	4b03      	ldr	r3, [pc, #12]	; (80063dc <USART2_IRQHandler+0x14>)
 80063ce:	0018      	movs	r0, r3
 80063d0:	f005 fc0e 	bl	800bbf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80063d4:	46c0      	nop			; (mov r8, r8)
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	200007d4 	.word	0x200007d4

080063e0 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <USART3_4_IRQHandler+0x1c>)
 80063e6:	0018      	movs	r0, r3
 80063e8:	f005 fc02 	bl	800bbf0 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 80063ec:	4b04      	ldr	r3, [pc, #16]	; (8006400 <USART3_4_IRQHandler+0x20>)
 80063ee:	0018      	movs	r0, r3
 80063f0:	f005 fbfe 	bl	800bbf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	20000868 	.word	0x20000868
 8006400:	200008fc 	.word	0x200008fc

08006404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
	return 1;
 8006408:	2301      	movs	r3, #1
}
 800640a:	0018      	movs	r0, r3
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <_kill>:

int _kill(int pid, int sig)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800641a:	f006 fc6d 	bl	800ccf8 <__errno>
 800641e:	0003      	movs	r3, r0
 8006420:	2216      	movs	r2, #22
 8006422:	601a      	str	r2, [r3, #0]
	return -1;
 8006424:	2301      	movs	r3, #1
 8006426:	425b      	negs	r3, r3
}
 8006428:	0018      	movs	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	b002      	add	sp, #8
 800642e:	bd80      	pop	{r7, pc}

08006430 <_exit>:

void _exit (int status)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006438:	2301      	movs	r3, #1
 800643a:	425a      	negs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	0011      	movs	r1, r2
 8006440:	0018      	movs	r0, r3
 8006442:	f7ff ffe5 	bl	8006410 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006446:	e7fe      	b.n	8006446 <_exit+0x16>

08006448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	e00a      	b.n	8006470 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800645a:	e000      	b.n	800645e <_read+0x16>
 800645c:	bf00      	nop
 800645e:	0001      	movs	r1, r0
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	60ba      	str	r2, [r7, #8]
 8006466:	b2ca      	uxtb	r2, r1
 8006468:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	3301      	adds	r3, #1
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	dbf0      	blt.n	800645a <_read+0x12>
	}

return len;
 8006478:	687b      	ldr	r3, [r7, #4]
}
 800647a:	0018      	movs	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	b006      	add	sp, #24
 8006480:	bd80      	pop	{r7, pc}

08006482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b086      	sub	sp, #24
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e009      	b.n	80064a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	60ba      	str	r2, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	0018      	movs	r0, r3
 800649e:	e000      	b.n	80064a2 <_write+0x20>
 80064a0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	3301      	adds	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	dbf1      	blt.n	8006494 <_write+0x12>
	}
	return len;
 80064b0:	687b      	ldr	r3, [r7, #4]
}
 80064b2:	0018      	movs	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b006      	add	sp, #24
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_close>:

int _close(int file)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
	return -1;
 80064c2:	2301      	movs	r3, #1
 80064c4:	425b      	negs	r3, r3
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b002      	add	sp, #8
 80064cc:	bd80      	pop	{r7, pc}

080064ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2280      	movs	r2, #128	; 0x80
 80064dc:	0192      	lsls	r2, r2, #6
 80064de:	605a      	str	r2, [r3, #4]
	return 0;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	0018      	movs	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b002      	add	sp, #8
 80064e8:	bd80      	pop	{r7, pc}

080064ea <_isatty>:

int _isatty(int file)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
	return 1;
 80064f2:	2301      	movs	r3, #1
}
 80064f4:	0018      	movs	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b002      	add	sp, #8
 80064fa:	bd80      	pop	{r7, pc}

080064fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
	return 0;
 8006508:	2300      	movs	r3, #0
}
 800650a:	0018      	movs	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	b004      	add	sp, #16
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800651c:	4a14      	ldr	r2, [pc, #80]	; (8006570 <_sbrk+0x5c>)
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <_sbrk+0x60>)
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006528:	4b13      	ldr	r3, [pc, #76]	; (8006578 <_sbrk+0x64>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006530:	4b11      	ldr	r3, [pc, #68]	; (8006578 <_sbrk+0x64>)
 8006532:	4a12      	ldr	r2, [pc, #72]	; (800657c <_sbrk+0x68>)
 8006534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <_sbrk+0x64>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	18d3      	adds	r3, r2, r3
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	429a      	cmp	r2, r3
 8006542:	d207      	bcs.n	8006554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006544:	f006 fbd8 	bl	800ccf8 <__errno>
 8006548:	0003      	movs	r3, r0
 800654a:	220c      	movs	r2, #12
 800654c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800654e:	2301      	movs	r3, #1
 8006550:	425b      	negs	r3, r3
 8006552:	e009      	b.n	8006568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006554:	4b08      	ldr	r3, [pc, #32]	; (8006578 <_sbrk+0x64>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800655a:	4b07      	ldr	r3, [pc, #28]	; (8006578 <_sbrk+0x64>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	18d2      	adds	r2, r2, r3
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <_sbrk+0x64>)
 8006564:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006566:	68fb      	ldr	r3, [r7, #12]
}
 8006568:	0018      	movs	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	b006      	add	sp, #24
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20009000 	.word	0x20009000
 8006574:	00000400 	.word	0x00000400
 8006578:	20000990 	.word	0x20000990
 800657c:	200009d8 	.word	0x200009d8

08006580 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006584:	46c0      	nop			; (mov r8, r8)
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <Drv8251_Control>:
#include "myHeader.h"

MotorTestWater_t TWMOTOR;

void Drv8251_Control(Drv8251DirCtrl_e control)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	0002      	movs	r2, r0
 8006594:	1dfb      	adds	r3, r7, #7
 8006596:	701a      	strb	r2, [r3, #0]
  switch(control)
 8006598:	1dfb      	adds	r3, r7, #7
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d05a      	beq.n	8006656 <Drv8251_Control+0xca>
 80065a0:	dd00      	ble.n	80065a4 <Drv8251_Control+0x18>
 80065a2:	e073      	b.n	800668c <Drv8251_Control+0x100>
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d020      	beq.n	80065ea <Drv8251_Control+0x5e>
 80065a8:	dc70      	bgt.n	800668c <Drv8251_Control+0x100>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <Drv8251_Control+0x28>
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d036      	beq.n	8006620 <Drv8251_Control+0x94>
      MOTOR_IN1_ON;
      MOTOR_IN2_ON;
      LED1_ON;
      LED2_ON;
      break;
    default:break;
 80065b2:	e06b      	b.n	800668c <Drv8251_Control+0x100>
      MOTOR_IN1_OFF;
 80065b4:	4b38      	ldr	r3, [pc, #224]	; (8006698 <Drv8251_Control+0x10c>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	2101      	movs	r1, #1
 80065ba:	0018      	movs	r0, r3
 80065bc:	f002 fbdb 	bl	8008d76 <HAL_GPIO_WritePin>
      MOTOR_IN2_OFF;
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	0219      	lsls	r1, r3, #8
 80065c4:	23a0      	movs	r3, #160	; 0xa0
 80065c6:	05db      	lsls	r3, r3, #23
 80065c8:	2200      	movs	r2, #0
 80065ca:	0018      	movs	r0, r3
 80065cc:	f002 fbd3 	bl	8008d76 <HAL_GPIO_WritePin>
      LED1_OFF;
 80065d0:	4b32      	ldr	r3, [pc, #200]	; (800669c <Drv8251_Control+0x110>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	2108      	movs	r1, #8
 80065d6:	0018      	movs	r0, r3
 80065d8:	f002 fbcd 	bl	8008d76 <HAL_GPIO_WritePin>
      LED2_OFF;
 80065dc:	4b2f      	ldr	r3, [pc, #188]	; (800669c <Drv8251_Control+0x110>)
 80065de:	2200      	movs	r2, #0
 80065e0:	2102      	movs	r1, #2
 80065e2:	0018      	movs	r0, r3
 80065e4:	f002 fbc7 	bl	8008d76 <HAL_GPIO_WritePin>
      break;
 80065e8:	e051      	b.n	800668e <Drv8251_Control+0x102>
      MOTOR_IN1_OFF;
 80065ea:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <Drv8251_Control+0x10c>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	2101      	movs	r1, #1
 80065f0:	0018      	movs	r0, r3
 80065f2:	f002 fbc0 	bl	8008d76 <HAL_GPIO_WritePin>
      MOTOR_IN2_ON;
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	0219      	lsls	r1, r3, #8
 80065fa:	23a0      	movs	r3, #160	; 0xa0
 80065fc:	05db      	lsls	r3, r3, #23
 80065fe:	2201      	movs	r2, #1
 8006600:	0018      	movs	r0, r3
 8006602:	f002 fbb8 	bl	8008d76 <HAL_GPIO_WritePin>
      LED1_OFF;
 8006606:	4b25      	ldr	r3, [pc, #148]	; (800669c <Drv8251_Control+0x110>)
 8006608:	2200      	movs	r2, #0
 800660a:	2108      	movs	r1, #8
 800660c:	0018      	movs	r0, r3
 800660e:	f002 fbb2 	bl	8008d76 <HAL_GPIO_WritePin>
      LED2_ON;
 8006612:	4b22      	ldr	r3, [pc, #136]	; (800669c <Drv8251_Control+0x110>)
 8006614:	2201      	movs	r2, #1
 8006616:	2102      	movs	r1, #2
 8006618:	0018      	movs	r0, r3
 800661a:	f002 fbac 	bl	8008d76 <HAL_GPIO_WritePin>
      break;
 800661e:	e036      	b.n	800668e <Drv8251_Control+0x102>
      MOTOR_IN1_ON;
 8006620:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <Drv8251_Control+0x10c>)
 8006622:	2201      	movs	r2, #1
 8006624:	2101      	movs	r1, #1
 8006626:	0018      	movs	r0, r3
 8006628:	f002 fba5 	bl	8008d76 <HAL_GPIO_WritePin>
      MOTOR_IN2_OFF;
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	0219      	lsls	r1, r3, #8
 8006630:	23a0      	movs	r3, #160	; 0xa0
 8006632:	05db      	lsls	r3, r3, #23
 8006634:	2200      	movs	r2, #0
 8006636:	0018      	movs	r0, r3
 8006638:	f002 fb9d 	bl	8008d76 <HAL_GPIO_WritePin>
      LED1_ON;
 800663c:	4b17      	ldr	r3, [pc, #92]	; (800669c <Drv8251_Control+0x110>)
 800663e:	2201      	movs	r2, #1
 8006640:	2108      	movs	r1, #8
 8006642:	0018      	movs	r0, r3
 8006644:	f002 fb97 	bl	8008d76 <HAL_GPIO_WritePin>
      LED2_OFF;
 8006648:	4b14      	ldr	r3, [pc, #80]	; (800669c <Drv8251_Control+0x110>)
 800664a:	2200      	movs	r2, #0
 800664c:	2102      	movs	r1, #2
 800664e:	0018      	movs	r0, r3
 8006650:	f002 fb91 	bl	8008d76 <HAL_GPIO_WritePin>
      break;
 8006654:	e01b      	b.n	800668e <Drv8251_Control+0x102>
      MOTOR_IN1_ON;
 8006656:	4b10      	ldr	r3, [pc, #64]	; (8006698 <Drv8251_Control+0x10c>)
 8006658:	2201      	movs	r2, #1
 800665a:	2101      	movs	r1, #1
 800665c:	0018      	movs	r0, r3
 800665e:	f002 fb8a 	bl	8008d76 <HAL_GPIO_WritePin>
      MOTOR_IN2_ON;
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	0219      	lsls	r1, r3, #8
 8006666:	23a0      	movs	r3, #160	; 0xa0
 8006668:	05db      	lsls	r3, r3, #23
 800666a:	2201      	movs	r2, #1
 800666c:	0018      	movs	r0, r3
 800666e:	f002 fb82 	bl	8008d76 <HAL_GPIO_WritePin>
      LED1_ON;
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <Drv8251_Control+0x110>)
 8006674:	2201      	movs	r2, #1
 8006676:	2108      	movs	r1, #8
 8006678:	0018      	movs	r0, r3
 800667a:	f002 fb7c 	bl	8008d76 <HAL_GPIO_WritePin>
      LED2_ON;
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <Drv8251_Control+0x110>)
 8006680:	2201      	movs	r2, #1
 8006682:	2102      	movs	r1, #2
 8006684:	0018      	movs	r0, r3
 8006686:	f002 fb76 	bl	8008d76 <HAL_GPIO_WritePin>
      break;
 800668a:	e000      	b.n	800668e <Drv8251_Control+0x102>
    default:break;
 800668c:	46c0      	nop			; (mov r8, r8)
  }
}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	46bd      	mov	sp, r7
 8006692:	b002      	add	sp, #8
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	50000c00 	.word	0x50000c00
 800669c:	50000800 	.word	0x50000800

080066a0 <testMotorSystickIrq1ms>:
      TWMOTOR.motorState = _DIR_LEFT;
      Drv8251_Control(_DIR_BRAKE);
  }
}

void testMotorSystickIrq1ms(MotorTestWater_t *mtor){
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  mtor->SWTS.Bit.RIGHT_SWT= Systick_ReadInput_poll(_IN_SW_RIGHT,SWTRIGHT_PinStt,10,10);
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	019b      	lsls	r3, r3, #6
 80066ac:	4a77      	ldr	r2, [pc, #476]	; (800688c <testMotorSystickIrq1ms+0x1ec>)
 80066ae:	0019      	movs	r1, r3
 80066b0:	0010      	movs	r0, r2
 80066b2:	f002 fb43 	bl	8008d3c <HAL_GPIO_ReadPin>
 80066b6:	0003      	movs	r3, r0
 80066b8:	0019      	movs	r1, r3
 80066ba:	230a      	movs	r3, #10
 80066bc:	220a      	movs	r2, #10
 80066be:	2002      	movs	r0, #2
 80066c0:	f7fd f8e0 	bl	8003884 <Systick_ReadInput_poll>
 80066c4:	0003      	movs	r3, r0
 80066c6:	1c1a      	adds	r2, r3, #0
 80066c8:	2301      	movs	r3, #1
 80066ca:	4013      	ands	r3, r2
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2101      	movs	r1, #1
 80066d2:	400a      	ands	r2, r1
 80066d4:	0010      	movs	r0, r2
 80066d6:	781a      	ldrb	r2, [r3, #0]
 80066d8:	2101      	movs	r1, #1
 80066da:	438a      	bics	r2, r1
 80066dc:	1c11      	adds	r1, r2, #0
 80066de:	1c02      	adds	r2, r0, #0
 80066e0:	430a      	orrs	r2, r1
 80066e2:	701a      	strb	r2, [r3, #0]
  mtor->SWTS.Bit.MID_SWT  = Systick_ReadInput_poll(_IN_SW_MID,SWTMID_PinStt,10,10);
 80066e4:	2380      	movs	r3, #128	; 0x80
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	4a68      	ldr	r2, [pc, #416]	; (800688c <testMotorSystickIrq1ms+0x1ec>)
 80066ea:	0019      	movs	r1, r3
 80066ec:	0010      	movs	r0, r2
 80066ee:	f002 fb25 	bl	8008d3c <HAL_GPIO_ReadPin>
 80066f2:	0003      	movs	r3, r0
 80066f4:	0019      	movs	r1, r3
 80066f6:	230a      	movs	r3, #10
 80066f8:	220a      	movs	r2, #10
 80066fa:	2001      	movs	r0, #1
 80066fc:	f7fd f8c2 	bl	8003884 <Systick_ReadInput_poll>
 8006700:	0003      	movs	r3, r0
 8006702:	1c1a      	adds	r2, r3, #0
 8006704:	2301      	movs	r3, #1
 8006706:	4013      	ands	r3, r2
 8006708:	b2da      	uxtb	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2101      	movs	r1, #1
 800670e:	400a      	ands	r2, r1
 8006710:	1890      	adds	r0, r2, r2
 8006712:	781a      	ldrb	r2, [r3, #0]
 8006714:	2102      	movs	r1, #2
 8006716:	438a      	bics	r2, r1
 8006718:	1c11      	adds	r1, r2, #0
 800671a:	1c02      	adds	r2, r0, #0
 800671c:	430a      	orrs	r2, r1
 800671e:	701a      	strb	r2, [r3, #0]
  mtor->SWTS.Bit.LEFT_SWT = Systick_ReadInput_poll(_IN_SW_LEFT,SWTLEFT_PinStt,10,10);
 8006720:	2380      	movs	r3, #128	; 0x80
 8006722:	015b      	lsls	r3, r3, #5
 8006724:	4a59      	ldr	r2, [pc, #356]	; (800688c <testMotorSystickIrq1ms+0x1ec>)
 8006726:	0019      	movs	r1, r3
 8006728:	0010      	movs	r0, r2
 800672a:	f002 fb07 	bl	8008d3c <HAL_GPIO_ReadPin>
 800672e:	0003      	movs	r3, r0
 8006730:	0019      	movs	r1, r3
 8006732:	230a      	movs	r3, #10
 8006734:	220a      	movs	r2, #10
 8006736:	2000      	movs	r0, #0
 8006738:	f7fd f8a4 	bl	8003884 <Systick_ReadInput_poll>
 800673c:	0003      	movs	r3, r0
 800673e:	1c1a      	adds	r2, r3, #0
 8006740:	2301      	movs	r3, #1
 8006742:	4013      	ands	r3, r2
 8006744:	b2da      	uxtb	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2101      	movs	r1, #1
 800674a:	400a      	ands	r2, r1
 800674c:	0090      	lsls	r0, r2, #2
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	2104      	movs	r1, #4
 8006752:	438a      	bics	r2, r1
 8006754:	1c11      	adds	r1, r2, #0
 8006756:	1c02      	adds	r2, r0, #0
 8006758:	430a      	orrs	r2, r1
 800675a:	701a      	strb	r2, [r3, #0]

  mtor->SWTS.Bit.RIGHT_IR = IRRIGHT_PinStt;//Systick_ReadInput_poll(_IN_IR_LEFT,IRRIGHT_PinStt,2,2);
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4a4b      	ldr	r2, [pc, #300]	; (8006890 <testMotorSystickIrq1ms+0x1f0>)
 8006762:	0019      	movs	r1, r3
 8006764:	0010      	movs	r0, r2
 8006766:	f002 fae9 	bl	8008d3c <HAL_GPIO_ReadPin>
 800676a:	0003      	movs	r3, r0
 800676c:	1c1a      	adds	r2, r3, #0
 800676e:	2301      	movs	r3, #1
 8006770:	4013      	ands	r3, r2
 8006772:	b2da      	uxtb	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2101      	movs	r1, #1
 8006778:	400a      	ands	r2, r1
 800677a:	00d0      	lsls	r0, r2, #3
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	2108      	movs	r1, #8
 8006780:	438a      	bics	r2, r1
 8006782:	1c11      	adds	r1, r2, #0
 8006784:	1c02      	adds	r2, r0, #0
 8006786:	430a      	orrs	r2, r1
 8006788:	701a      	strb	r2, [r3, #0]
  mtor->SWTS.Bit.LEFT_IR = IRLEFT_PinStt;//Systick_ReadInput_poll(_IN_IR_RIGHT,IRLEFT_PinStt,2,2);
 800678a:	4b41      	ldr	r3, [pc, #260]	; (8006890 <testMotorSystickIrq1ms+0x1f0>)
 800678c:	2180      	movs	r1, #128	; 0x80
 800678e:	0018      	movs	r0, r3
 8006790:	f002 fad4 	bl	8008d3c <HAL_GPIO_ReadPin>
 8006794:	0003      	movs	r3, r0
 8006796:	1c1a      	adds	r2, r3, #0
 8006798:	2301      	movs	r3, #1
 800679a:	4013      	ands	r3, r2
 800679c:	b2da      	uxtb	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2101      	movs	r1, #1
 80067a2:	400a      	ands	r2, r1
 80067a4:	0110      	lsls	r0, r2, #4
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	2110      	movs	r1, #16
 80067aa:	438a      	bics	r2, r1
 80067ac:	1c11      	adds	r1, r2, #0
 80067ae:	1c02      	adds	r2, r0, #0
 80067b0:	430a      	orrs	r2, r1
 80067b2:	701a      	strb	r2, [r3, #0]

  //update Posistion
  if(mtor->SWTS.Bit.LEFT_SWT==0 && mtor->SWTS.Bit.MID_SWT && mtor->SWTS.Bit.RIGHT_SWT) mtor->atPosition = _POS_LEFT;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2204      	movs	r2, #4
 80067ba:	4013      	ands	r3, r2
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d111      	bne.n	80067e6 <testMotorSystickIrq1ms+0x146>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2202      	movs	r2, #2
 80067c8:	4013      	ands	r3, r2
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <testMotorSystickIrq1ms+0x146>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2201      	movs	r2, #1
 80067d6:	4013      	ands	r3, r2
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <testMotorSystickIrq1ms+0x146>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	709a      	strb	r2, [r3, #2]
 80067e4:	e04e      	b.n	8006884 <testMotorSystickIrq1ms+0x1e4>
  else if(mtor->SWTS.Bit.LEFT_SWT && mtor->SWTS.Bit.MID_SWT==0 && mtor->SWTS.Bit.RIGHT_SWT) mtor->atPosition = _POS_MID;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2204      	movs	r2, #4
 80067ec:	4013      	ands	r3, r2
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d011      	beq.n	8006818 <testMotorSystickIrq1ms+0x178>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2202      	movs	r2, #2
 80067fa:	4013      	ands	r3, r2
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <testMotorSystickIrq1ms+0x178>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2201      	movs	r2, #1
 8006808:	4013      	ands	r3, r2
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <testMotorSystickIrq1ms+0x178>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	709a      	strb	r2, [r3, #2]
 8006816:	e035      	b.n	8006884 <testMotorSystickIrq1ms+0x1e4>
  else if(mtor->SWTS.Bit.LEFT_SWT && mtor->SWTS.Bit.MID_SWT && mtor->SWTS.Bit.RIGHT_SWT==0) mtor->atPosition = _POS_RIGHT;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2204      	movs	r2, #4
 800681e:	4013      	ands	r3, r2
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d011      	beq.n	800684a <testMotorSystickIrq1ms+0x1aa>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2202      	movs	r2, #2
 800682c:	4013      	ands	r3, r2
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <testMotorSystickIrq1ms+0x1aa>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2201      	movs	r2, #1
 800683a:	4013      	ands	r3, r2
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <testMotorSystickIrq1ms+0x1aa>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2203      	movs	r2, #3
 8006846:	709a      	strb	r2, [r3, #2]
 8006848:	e01c      	b.n	8006884 <testMotorSystickIrq1ms+0x1e4>
  else if(mtor->SWTS.Bit.LEFT_SWT && mtor->SWTS.Bit.MID_SWT && mtor->SWTS.Bit.RIGHT_SWT) mtor->atPosition = _POS_UNKNOWN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2204      	movs	r2, #4
 8006850:	4013      	ands	r3, r2
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d011      	beq.n	800687c <testMotorSystickIrq1ms+0x1dc>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2202      	movs	r2, #2
 800685e:	4013      	ands	r3, r2
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <testMotorSystickIrq1ms+0x1dc>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2201      	movs	r2, #1
 800686c:	4013      	ands	r3, r2
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <testMotorSystickIrq1ms+0x1dc>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	709a      	strb	r2, [r3, #2]
 800687a:	e003      	b.n	8006884 <testMotorSystickIrq1ms+0x1e4>
  else mtor->atPosition = _POS_SWT_ERROR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2204      	movs	r2, #4
 8006880:	709a      	strb	r2, [r3, #2]
}
 8006882:	46c0      	nop			; (mov r8, r8)
 8006884:	46c0      	nop			; (mov r8, r8)
 8006886:	46bd      	mov	sp, r7
 8006888:	b002      	add	sp, #8
 800688a:	bd80      	pop	{r7, pc}
 800688c:	50000800 	.word	0x50000800
 8006890:	50000400 	.word	0x50000400

08006894 <MotorTestWaterSensorInit>:

void MotorTestWaterSensorInit(MotorTestWater_t *mtor){
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  mtor->motorState = _DIR_COAST;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	705a      	strb	r2, [r3, #1]
  Drv8251_Control(mtor->motorState);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7ff fe70 	bl	800658c <Drv8251_Control>
  timer_set(&mtor->_timeRunMotor, 200);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	21c8      	movs	r1, #200	; 0xc8
 80068b2:	0018      	movs	r0, r3
 80068b4:	f7fc fc1e 	bl	80030f4 <timer_set>
}
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}

080068c0 <MotorTestWaterSensorLoop>:

void MotorTestWaterSensorLoop(MotorTestWater_t *mtor){
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]

  //Nếu hoạt động quá thời gian được set thì thả nổi lại
  if(timer_expired(&mtor->_timeRunMotor)){
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3304      	adds	r3, #4
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7fc fc3b 	bl	8003148 <timer_expired>
 80068d2:	1e03      	subs	r3, r0, #0
 80068d4:	d022      	beq.n	800691c <MotorTestWaterSensorLoop+0x5c>
      if(mtor->goPosition==_POS_MID && mtor->motorState == _DIR_LEFT){
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	78db      	ldrb	r3, [r3, #3]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d113      	bne.n	8006906 <MotorTestWaterSensorLoop+0x46>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d10f      	bne.n	8006906 <MotorTestWaterSensorLoop+0x46>
	  mtor->motorState=_DIR_RIGHT;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	705a      	strb	r2, [r3, #1]
	  Drv8251_Control(mtor->motorState);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	0018      	movs	r0, r3
 80068f2:	f7ff fe4b 	bl	800658c <Drv8251_Control>
	  timer_set(&mtor->_timeRunMotor, 3*_TIMEOUT_CHECK_MID);//thời gian tối quay ngược trở lại để tìm vị trí MID , gấp 3 lần giá trị cũ
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4a18      	ldr	r2, [pc, #96]	; (800695c <MotorTestWaterSensorLoop+0x9c>)
 80068fc:	0011      	movs	r1, r2
 80068fe:	0018      	movs	r0, r3
 8006900:	f7fc fbf8 	bl	80030f4 <timer_set>
 8006904:	e00a      	b.n	800691c <MotorTestWaterSensorLoop+0x5c>
      }
      else {
	  MotorGotoPosition(mtor,_POS_UNKNOWN,0);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	2100      	movs	r1, #0
 800690c:	0018      	movs	r0, r3
 800690e:	f000 f827 	bl	8006960 <MotorGotoPosition>
	  timer_stop(&mtor->_timeRunMotor);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	0018      	movs	r0, r3
 8006918:	f7fc fc3c 	bl	8003194 <timer_stop>
      }
  }

  //Nếu trước đó ko điều khiển
  if(mtor->goPosition==_POS_UNKNOWN)return;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	78db      	ldrb	r3, [r3, #3]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d016      	beq.n	8006952 <MotorTestWaterSensorLoop+0x92>
  //Nếu trước đó có điều khiển thì đúng vị trí sẽ dừng lại
  if(mtor->atPosition == mtor->goPosition){
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	789a      	ldrb	r2, [r3, #2]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	78db      	ldrb	r3, [r3, #3]
 800692c:	429a      	cmp	r2, r3
 800692e:	d111      	bne.n	8006954 <MotorTestWaterSensorLoop+0x94>
    mtor->goPosition = _POS_UNKNOWN;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	70da      	strb	r2, [r3, #3]
    mtor->motorState = _DIR_BRAKE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2203      	movs	r2, #3
 800693a:	705a      	strb	r2, [r3, #1]
    timer_stop(&mtor->_timeRunMotor);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3304      	adds	r3, #4
 8006940:	0018      	movs	r0, r3
 8006942:	f7fc fc27 	bl	8003194 <timer_stop>
    Drv8251_Control(mtor->motorState);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	0018      	movs	r0, r3
 800694c:	f7ff fe1e 	bl	800658c <Drv8251_Control>
 8006950:	e000      	b.n	8006954 <MotorTestWaterSensorLoop+0x94>
  if(mtor->goPosition==_POS_UNKNOWN)return;
 8006952:	46c0      	nop			; (mov r8, r8)
  }
}
 8006954:	46bd      	mov	sp, r7
 8006956:	b002      	add	sp, #8
 8006958:	bd80      	pop	{r7, pc}
 800695a:	46c0      	nop			; (mov r8, r8)
 800695c:	00001770 	.word	0x00001770

08006960 <MotorGotoPosition>:

void MotorGotoPosition(MotorTestWater_t *mtor,PositionMotor_t gotoPositon,uint32_t timeOut){
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	607a      	str	r2, [r7, #4]
 800696a:	200b      	movs	r0, #11
 800696c:	183b      	adds	r3, r7, r0
 800696e:	1c0a      	adds	r2, r1, #0
 8006970:	701a      	strb	r2, [r3, #0]

  //Nếu các CTHT bị lỗi
  if(mtor->atPosition==_POS_SWT_ERROR) return;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	789b      	ldrb	r3, [r3, #2]
 8006976:	2b04      	cmp	r3, #4
 8006978:	d05d      	beq.n	8006a36 <MotorGotoPosition+0xd6>
  //Vị trí hiện tại và vị trí muốn đến trùng nhau
  if(mtor->atPosition == gotoPositon || mtor->atPosition==_POS_SWT_ERROR) return;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	789b      	ldrb	r3, [r3, #2]
 800697e:	183a      	adds	r2, r7, r0
 8006980:	7812      	ldrb	r2, [r2, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d059      	beq.n	8006a3a <MotorGotoPosition+0xda>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	789b      	ldrb	r3, [r3, #2]
 800698a:	2b04      	cmp	r3, #4
 800698c:	d055      	beq.n	8006a3a <MotorGotoPosition+0xda>

  //Set thời gian hoạt động tối đa
  if(timeOut)timer_set(&mtor->_timeRunMotor, timeOut);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <MotorGotoPosition+0x42>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3304      	adds	r3, #4
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	0011      	movs	r1, r2
 800699c:	0018      	movs	r0, r3
 800699e:	f7fc fba9 	bl	80030f4 <timer_set>
  mtor->goPosition = gotoPositon;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	220b      	movs	r2, #11
 80069a6:	18ba      	adds	r2, r7, r2
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	70da      	strb	r2, [r3, #3]
  //các Trường hợp điều khiển
  switch(mtor->goPosition){
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	78db      	ldrb	r3, [r3, #3]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d009      	beq.n	80069c8 <MotorGotoPosition+0x68>
 80069b4:	dc2c      	bgt.n	8006a10 <MotorGotoPosition+0xb0>
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d002      	beq.n	80069c0 <MotorGotoPosition+0x60>
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d008      	beq.n	80069d0 <MotorGotoPosition+0x70>
 80069be:	e027      	b.n	8006a10 <MotorGotoPosition+0xb0>
    //Muốn qua trái
    case _POS_LEFT:
      mtor->motorState = _DIR_LEFT;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2202      	movs	r2, #2
 80069c4:	705a      	strb	r2, [r3, #1]
      break;
 80069c6:	e030      	b.n	8006a2a <MotorGotoPosition+0xca>

    //Muốn qua phải
    case _POS_RIGHT:
      mtor->motorState = _DIR_RIGHT;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	705a      	strb	r2, [r3, #1]
      break;
 80069ce:	e02c      	b.n	8006a2a <MotorGotoPosition+0xca>

    //Muốn về ở giữa
    case _POS_MID:
      if(mtor->atPosition==_POS_LEFT){
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	789b      	ldrb	r3, [r3, #2]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d103      	bne.n	80069e0 <MotorGotoPosition+0x80>
	mtor->motorState = _DIR_RIGHT;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	705a      	strb	r2, [r3, #1]
      {
	//nếu ko xác định được vị trí thì chạy qua trái trước
	mtor->motorState = _DIR_LEFT;
	timer_set(&mtor->_timeRunMotor, _TIMEOUT_CHECK_MID);//set thời gian tối thiều là 2s
      }
      break;
 80069de:	e023      	b.n	8006a28 <MotorGotoPosition+0xc8>
      else if(mtor->atPosition==_POS_RIGHT){
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	789b      	ldrb	r3, [r3, #2]
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d103      	bne.n	80069f0 <MotorGotoPosition+0x90>
	mtor->motorState = _DIR_LEFT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2202      	movs	r2, #2
 80069ec:	705a      	strb	r2, [r3, #1]
      break;
 80069ee:	e01b      	b.n	8006a28 <MotorGotoPosition+0xc8>
      else if(mtor->atPosition==_POS_UNKNOWN)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	789b      	ldrb	r3, [r3, #2]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d117      	bne.n	8006a28 <MotorGotoPosition+0xc8>
	mtor->motorState = _DIR_LEFT;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2202      	movs	r2, #2
 80069fc:	705a      	strb	r2, [r3, #1]
	timer_set(&mtor->_timeRunMotor, _TIMEOUT_CHECK_MID);//set thời gian tối thiều là 2s
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3304      	adds	r3, #4
 8006a02:	22fa      	movs	r2, #250	; 0xfa
 8006a04:	00d2      	lsls	r2, r2, #3
 8006a06:	0011      	movs	r1, r2
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7fc fb73 	bl	80030f4 <timer_set>
      break;
 8006a0e:	e00b      	b.n	8006a28 <MotorGotoPosition+0xc8>

    //ko xảy ra các trường hợp khác , ko biết thì thả nổi mtor
    default:
      mtor->goPosition = _POS_UNKNOWN;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	70da      	strb	r2, [r3, #3]
      mtor->motorState = _DIR_COAST;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	705a      	strb	r2, [r3, #1]
      timer_stop(&mtor->_timeRunMotor);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7fc fbb7 	bl	8003194 <timer_stop>
      return;
 8006a26:	e009      	b.n	8006a3c <MotorGotoPosition+0xdc>
      break;
 8006a28:	46c0      	nop			; (mov r8, r8)
  }
  Drv8251_Control(mtor->motorState);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f7ff fdac 	bl	800658c <Drv8251_Control>
 8006a34:	e002      	b.n	8006a3c <MotorGotoPosition+0xdc>
  if(mtor->atPosition==_POS_SWT_ERROR) return;
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	e000      	b.n	8006a3c <MotorGotoPosition+0xdc>
  if(mtor->atPosition == gotoPositon || mtor->atPosition==_POS_SWT_ERROR) return;
 8006a3a:	46c0      	nop			; (mov r8, r8)
}
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b004      	add	sp, #16
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006a44:	480d      	ldr	r0, [pc, #52]	; (8006a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006a46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006a48:	f7ff fd9a 	bl	8006580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a4c:	480c      	ldr	r0, [pc, #48]	; (8006a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8006a4e:	490d      	ldr	r1, [pc, #52]	; (8006a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006a50:	4a0d      	ldr	r2, [pc, #52]	; (8006a88 <LoopForever+0xe>)
  movs r3, #0
 8006a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a54:	e002      	b.n	8006a5c <LoopCopyDataInit>

08006a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a5a:	3304      	adds	r3, #4

08006a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a60:	d3f9      	bcc.n	8006a56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a62:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a64:	4c0a      	ldr	r4, [pc, #40]	; (8006a90 <LoopForever+0x16>)
  movs r3, #0
 8006a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a68:	e001      	b.n	8006a6e <LoopFillZerobss>

08006a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a6c:	3204      	adds	r2, #4

08006a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a70:	d3fb      	bcc.n	8006a6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006a72:	f006 f947 	bl	800cd04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006a76:	f7fe fc23 	bl	80052c0 <main>

08006a7a <LoopForever>:

LoopForever:
  b LoopForever
 8006a7a:	e7fe      	b.n	8006a7a <LoopForever>
  ldr   r0, =_estack
 8006a7c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8006a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a84:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8006a88:	08010594 	.word	0x08010594
  ldr r2, =_sbss
 8006a8c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8006a90:	200009d8 	.word	0x200009d8

08006a94 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a94:	e7fe      	b.n	8006a94 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08006a98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a9e:	1dfb      	adds	r3, r7, #7
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_Init+0x3c>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <HAL_Init+0x3c>)
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	0049      	lsls	r1, r1, #1
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f000 f810 	bl	8006ad8 <HAL_InitTick>
 8006ab8:	1e03      	subs	r3, r0, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006abc:	1dfb      	adds	r3, r7, #7
 8006abe:	2201      	movs	r2, #1
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e001      	b.n	8006ac8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006ac4:	f7ff f954 	bl	8005d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006ac8:	1dfb      	adds	r3, r7, #7
 8006aca:	781b      	ldrb	r3, [r3, #0]
}
 8006acc:	0018      	movs	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	b002      	add	sp, #8
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40022000 	.word	0x40022000

08006ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ad8:	b590      	push	{r4, r7, lr}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006ae0:	230f      	movs	r3, #15
 8006ae2:	18fb      	adds	r3, r7, r3
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <HAL_InitTick+0x88>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d02b      	beq.n	8006b48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006af0:	4b1c      	ldr	r3, [pc, #112]	; (8006b64 <HAL_InitTick+0x8c>)
 8006af2:	681c      	ldr	r4, [r3, #0]
 8006af4:	4b1a      	ldr	r3, [pc, #104]	; (8006b60 <HAL_InitTick+0x88>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	0019      	movs	r1, r3
 8006afa:	23fa      	movs	r3, #250	; 0xfa
 8006afc:	0098      	lsls	r0, r3, #2
 8006afe:	f7f9 fb1b 	bl	8000138 <__udivsi3>
 8006b02:	0003      	movs	r3, r0
 8006b04:	0019      	movs	r1, r3
 8006b06:	0020      	movs	r0, r4
 8006b08:	f7f9 fb16 	bl	8000138 <__udivsi3>
 8006b0c:	0003      	movs	r3, r0
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f001 fadd 	bl	80080ce <HAL_SYSTICK_Config>
 8006b14:	1e03      	subs	r3, r0, #0
 8006b16:	d112      	bne.n	8006b3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d80a      	bhi.n	8006b34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	2301      	movs	r3, #1
 8006b22:	425b      	negs	r3, r3
 8006b24:	2200      	movs	r2, #0
 8006b26:	0018      	movs	r0, r3
 8006b28:	f001 faac 	bl	8008084 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <HAL_InitTick+0x90>)
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e00d      	b.n	8006b50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006b34:	230f      	movs	r3, #15
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	2201      	movs	r2, #1
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	e008      	b.n	8006b50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b3e:	230f      	movs	r3, #15
 8006b40:	18fb      	adds	r3, r7, r3
 8006b42:	2201      	movs	r2, #1
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	e003      	b.n	8006b50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b48:	230f      	movs	r3, #15
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006b50:	230f      	movs	r3, #15
 8006b52:	18fb      	adds	r3, r7, r3
 8006b54:	781b      	ldrb	r3, [r3, #0]
}
 8006b56:	0018      	movs	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b005      	add	sp, #20
 8006b5c:	bd90      	pop	{r4, r7, pc}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	20000014 	.word	0x20000014
 8006b64:	2000000c 	.word	0x2000000c
 8006b68:	20000010 	.word	0x20000010

08006b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <HAL_IncTick+0x1c>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	001a      	movs	r2, r3
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_IncTick+0x20>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	18d2      	adds	r2, r2, r3
 8006b7c:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <HAL_IncTick+0x20>)
 8006b7e:	601a      	str	r2, [r3, #0]
}
 8006b80:	46c0      	nop			; (mov r8, r8)
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	20000014 	.word	0x20000014
 8006b8c:	200009a8 	.word	0x200009a8

08006b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  return uwTick;
 8006b94:	4b02      	ldr	r3, [pc, #8]	; (8006ba0 <HAL_GetTick+0x10>)
 8006b96:	681b      	ldr	r3, [r3, #0]
}
 8006b98:	0018      	movs	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	200009a8 	.word	0x200009a8

08006ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bac:	f7ff fff0 	bl	8006b90 <HAL_GetTick>
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	d005      	beq.n	8006bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <HAL_Delay+0x44>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	189b      	adds	r3, r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	f7ff ffe0 	bl	8006b90 <HAL_GetTick>
 8006bd0:	0002      	movs	r2, r0
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d8f7      	bhi.n	8006bcc <HAL_Delay+0x28>
  {
  }
}
 8006bdc:	46c0      	nop			; (mov r8, r8)
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	46bd      	mov	sp, r7
 8006be2:	b004      	add	sp, #16
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	20000014 	.word	0x20000014

08006bec <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8006bf4:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a06      	ldr	r2, [pc, #24]	; (8006c14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	0019      	movs	r1, r3
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	601a      	str	r2, [r3, #0]
}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b002      	add	sp, #8
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	40010000 	.word	0x40010000
 8006c14:	fffff9ff 	.word	0xfffff9ff

08006c18 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a05      	ldr	r2, [pc, #20]	; (8006c3c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8006c28:	401a      	ands	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	601a      	str	r2, [r3, #0]
}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b002      	add	sp, #8
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	fe3fffff 	.word	0xfe3fffff

08006c40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	23e0      	movs	r3, #224	; 0xe0
 8006c4e:	045b      	lsls	r3, r3, #17
 8006c50:	4013      	ands	r3, r2
}
 8006c52:	0018      	movs	r0, r3
 8006c54:	46bd      	mov	sp, r7
 8006c56:	b002      	add	sp, #8
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	2104      	movs	r1, #4
 8006c6e:	400a      	ands	r2, r1
 8006c70:	2107      	movs	r1, #7
 8006c72:	4091      	lsls	r1, r2
 8006c74:	000a      	movs	r2, r1
 8006c76:	43d2      	mvns	r2, r2
 8006c78:	401a      	ands	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2104      	movs	r1, #4
 8006c7e:	400b      	ands	r3, r1
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4099      	lsls	r1, r3
 8006c84:	000b      	movs	r3, r1
 8006c86:	431a      	orrs	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006c8c:	46c0      	nop			; (mov r8, r8)
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b004      	add	sp, #16
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	2104      	movs	r1, #4
 8006ca6:	400a      	ands	r2, r1
 8006ca8:	2107      	movs	r1, #7
 8006caa:	4091      	lsls	r1, r2
 8006cac:	000a      	movs	r2, r1
 8006cae:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2104      	movs	r1, #4
 8006cb4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006cb6:	40da      	lsrs	r2, r3
 8006cb8:	0013      	movs	r3, r2
}
 8006cba:	0018      	movs	r0, r3
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b002      	add	sp, #8
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	23c0      	movs	r3, #192	; 0xc0
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	d101      	bne.n	8006cda <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	0018      	movs	r0, r3
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b002      	add	sp, #8
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	211f      	movs	r1, #31
 8006cf8:	400a      	ands	r2, r1
 8006cfa:	210f      	movs	r1, #15
 8006cfc:	4091      	lsls	r1, r2
 8006cfe:	000a      	movs	r2, r1
 8006d00:	43d2      	mvns	r2, r2
 8006d02:	401a      	ands	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	0e9b      	lsrs	r3, r3, #26
 8006d08:	210f      	movs	r1, #15
 8006d0a:	4019      	ands	r1, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	201f      	movs	r0, #31
 8006d10:	4003      	ands	r3, r0
 8006d12:	4099      	lsls	r1, r3
 8006d14:	000b      	movs	r3, r1
 8006d16:	431a      	orrs	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006d1c:	46c0      	nop			; (mov r8, r8)
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	b004      	add	sp, #16
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	035b      	lsls	r3, r3, #13
 8006d36:	0b5b      	lsrs	r3, r3, #13
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	46bd      	mov	sp, r7
 8006d42:	b002      	add	sp, #8
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	0352      	lsls	r2, r2, #13
 8006d58:	0b52      	lsrs	r2, r2, #13
 8006d5a:	43d2      	mvns	r2, r2
 8006d5c:	401a      	ands	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b002      	add	sp, #8
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	2203      	movs	r2, #3
 8006d78:	4013      	ands	r3, r2
}
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b002      	add	sp, #8
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	0212      	lsls	r2, r2, #8
 8006d98:	43d2      	mvns	r2, r2
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	400b      	ands	r3, r1
 8006da4:	4904      	ldr	r1, [pc, #16]	; (8006db8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8006da6:	400b      	ands	r3, r1
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b004      	add	sp, #16
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	07ffff00 	.word	0x07ffff00

08006dbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4a05      	ldr	r2, [pc, #20]	; (8006de0 <LL_ADC_EnableInternalRegulator+0x24>)
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2280      	movs	r2, #128	; 0x80
 8006dce:	0552      	lsls	r2, r2, #21
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b002      	add	sp, #8
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	6fffffe8 	.word	0x6fffffe8

08006de4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	055b      	lsls	r3, r3, #21
 8006df4:	401a      	ands	r2, r3
 8006df6:	2380      	movs	r3, #128	; 0x80
 8006df8:	055b      	lsls	r3, r3, #21
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d101      	bne.n	8006e02 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	0018      	movs	r0, r3
 8006e06:	46bd      	mov	sp, r7
 8006e08:	b002      	add	sp, #8
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	4a04      	ldr	r2, [pc, #16]	; (8006e2c <LL_ADC_Enable+0x20>)
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006e24:	46c0      	nop			; (mov r8, r8)
 8006e26:	46bd      	mov	sp, r7
 8006e28:	b002      	add	sp, #8
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	7fffffe8 	.word	0x7fffffe8

08006e30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <LL_ADC_Disable+0x20>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2202      	movs	r2, #2
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006e48:	46c0      	nop			; (mov r8, r8)
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	b002      	add	sp, #8
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	7fffffe8 	.word	0x7fffffe8

08006e54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2201      	movs	r2, #1
 8006e62:	4013      	ands	r3, r2
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <LL_ADC_IsEnabled+0x18>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <LL_ADC_IsEnabled+0x1a>
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	0018      	movs	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b002      	add	sp, #8
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2202      	movs	r2, #2
 8006e84:	4013      	ands	r3, r2
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d101      	bne.n	8006e8e <LL_ADC_IsDisableOngoing+0x18>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <LL_ADC_IsDisableOngoing+0x1a>
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	0018      	movs	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	b002      	add	sp, #8
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	4a04      	ldr	r2, [pc, #16]	; (8006eb8 <LL_ADC_REG_StartConversion+0x20>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2204      	movs	r2, #4
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	7fffffe8 	.word	0x7fffffe8

08006ebc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d101      	bne.n	8006ed4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b002      	add	sp, #8
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ee8:	231f      	movs	r3, #31
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e17f      	b.n	8007206 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	0018      	movs	r0, r3
 8006f12:	f7fe ff55 	bl	8005dc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2254      	movs	r2, #84	; 0x54
 8006f20:	2100      	movs	r1, #0
 8006f22:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	0018      	movs	r0, r3
 8006f2a:	f7ff ff5b 	bl	8006de4 <LL_ADC_IsInternalRegulatorEnabled>
 8006f2e:	1e03      	subs	r3, r0, #0
 8006f30:	d115      	bne.n	8006f5e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	0018      	movs	r0, r3
 8006f38:	f7ff ff40 	bl	8006dbc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f3c:	4bb4      	ldr	r3, [pc, #720]	; (8007210 <HAL_ADC_Init+0x330>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	49b4      	ldr	r1, [pc, #720]	; (8007214 <HAL_ADC_Init+0x334>)
 8006f42:	0018      	movs	r0, r3
 8006f44:	f7f9 f8f8 	bl	8000138 <__udivsi3>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006f50:	e002      	b.n	8006f58 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f9      	bne.n	8006f52 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	0018      	movs	r0, r3
 8006f64:	f7ff ff3e 	bl	8006de4 <LL_ADC_IsInternalRegulatorEnabled>
 8006f68:	1e03      	subs	r3, r0, #0
 8006f6a:	d10f      	bne.n	8006f8c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f70:	2210      	movs	r2, #16
 8006f72:	431a      	orrs	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006f84:	231f      	movs	r3, #31
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	2201      	movs	r2, #1
 8006f8a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7ff ff93 	bl	8006ebc <LL_ADC_REG_IsConversionOngoing>
 8006f96:	0003      	movs	r3, r0
 8006f98:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	d000      	beq.n	8006fa6 <HAL_ADC_Init+0xc6>
 8006fa4:	e122      	b.n	80071ec <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d000      	beq.n	8006fae <HAL_ADC_Init+0xce>
 8006fac:	e11e      	b.n	80071ec <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	4a99      	ldr	r2, [pc, #612]	; (8007218 <HAL_ADC_Init+0x338>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f7ff ff46 	bl	8006e54 <LL_ADC_IsEnabled>
 8006fc8:	1e03      	subs	r3, r0, #0
 8006fca:	d000      	beq.n	8006fce <HAL_ADC_Init+0xee>
 8006fcc:	e0ad      	b.n	800712a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	7e1b      	ldrb	r3, [r3, #24]
 8006fd6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8006fd8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	7e5b      	ldrb	r3, [r3, #25]
 8006fde:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006fe0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	7e9b      	ldrb	r3, [r3, #26]
 8006fe6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006fe8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_ADC_Init+0x118>
 8006ff2:	2380      	movs	r3, #128	; 0x80
 8006ff4:	015b      	lsls	r3, r3, #5
 8006ff6:	e000      	b.n	8006ffa <HAL_ADC_Init+0x11a>
 8006ff8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006ffa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007000:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	da04      	bge.n	8007014 <HAL_ADC_Init+0x134>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	e001      	b.n	8007018 <HAL_ADC_Init+0x138>
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8007018:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	212c      	movs	r1, #44	; 0x2c
 800701e:	5c5b      	ldrb	r3, [r3, r1]
 8007020:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007022:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	4313      	orrs	r3, r2
 8007028:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	5c9b      	ldrb	r3, [r3, r2]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d115      	bne.n	8007060 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7e9b      	ldrb	r3, [r3, #26]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d105      	bne.n	8007048 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2280      	movs	r2, #128	; 0x80
 8007040:	0252      	lsls	r2, r2, #9
 8007042:	4313      	orrs	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	e00b      	b.n	8007060 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704c:	2220      	movs	r2, #32
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007058:	2201      	movs	r2, #1
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800706c:	23e0      	movs	r3, #224	; 0xe0
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007076:	4313      	orrs	r3, r2
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	4313      	orrs	r3, r2
 800707c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	4a65      	ldr	r2, [pc, #404]	; (800721c <HAL_ADC_Init+0x33c>)
 8007086:	4013      	ands	r3, r2
 8007088:	0019      	movs	r1, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	430a      	orrs	r2, r1
 8007092:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	0f9b      	lsrs	r3, r3, #30
 800709a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80070a0:	4313      	orrs	r3, r2
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	223c      	movs	r2, #60	; 0x3c
 80070ac:	5c9b      	ldrb	r3, [r3, r2]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d111      	bne.n	80070d6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	0f9b      	lsrs	r3, r3, #30
 80070b8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80070be:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80070c4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80070ca:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	2201      	movs	r2, #1
 80070d2:	4313      	orrs	r3, r2
 80070d4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	4a50      	ldr	r2, [pc, #320]	; (8007220 <HAL_ADC_Init+0x340>)
 80070de:	4013      	ands	r3, r2
 80070e0:	0019      	movs	r1, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	23c0      	movs	r3, #192	; 0xc0
 80070f2:	061b      	lsls	r3, r3, #24
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d018      	beq.n	800712a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80070fc:	2380      	movs	r3, #128	; 0x80
 80070fe:	05db      	lsls	r3, r3, #23
 8007100:	429a      	cmp	r2, r3
 8007102:	d012      	beq.n	800712a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007108:	2380      	movs	r3, #128	; 0x80
 800710a:	061b      	lsls	r3, r3, #24
 800710c:	429a      	cmp	r2, r3
 800710e:	d00c      	beq.n	800712a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8007110:	4b44      	ldr	r3, [pc, #272]	; (8007224 <HAL_ADC_Init+0x344>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a44      	ldr	r2, [pc, #272]	; (8007228 <HAL_ADC_Init+0x348>)
 8007116:	4013      	ands	r3, r2
 8007118:	0019      	movs	r1, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	23f0      	movs	r3, #240	; 0xf0
 8007120:	039b      	lsls	r3, r3, #14
 8007122:	401a      	ands	r2, r3
 8007124:	4b3f      	ldr	r3, [pc, #252]	; (8007224 <HAL_ADC_Init+0x344>)
 8007126:	430a      	orrs	r2, r1
 8007128:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007132:	001a      	movs	r2, r3
 8007134:	2100      	movs	r1, #0
 8007136:	f7ff fd90 	bl	8006c5a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	493a      	ldr	r1, [pc, #232]	; (800722c <HAL_ADC_Init+0x34c>)
 8007144:	001a      	movs	r2, r3
 8007146:	f7ff fd88 	bl	8006c5a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2110      	movs	r1, #16
 800715e:	4249      	negs	r1, r1
 8007160:	430a      	orrs	r2, r1
 8007162:	629a      	str	r2, [r3, #40]	; 0x28
 8007164:	e018      	b.n	8007198 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691a      	ldr	r2, [r3, #16]
 800716a:	2380      	movs	r3, #128	; 0x80
 800716c:	039b      	lsls	r3, r3, #14
 800716e:	429a      	cmp	r2, r3
 8007170:	d112      	bne.n	8007198 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	3b01      	subs	r3, #1
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	221c      	movs	r2, #28
 8007182:	4013      	ands	r3, r2
 8007184:	2210      	movs	r2, #16
 8007186:	4252      	negs	r2, r2
 8007188:	409a      	lsls	r2, r3
 800718a:	0011      	movs	r1, r2
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2100      	movs	r1, #0
 800719e:	0018      	movs	r0, r3
 80071a0:	f7ff fd78 	bl	8006c94 <LL_ADC_GetSamplingTimeCommonChannels>
 80071a4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d10b      	bne.n	80071c6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b8:	2203      	movs	r2, #3
 80071ba:	4393      	bics	r3, r2
 80071bc:	2201      	movs	r2, #1
 80071be:	431a      	orrs	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80071c4:	e01c      	b.n	8007200 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ca:	2212      	movs	r2, #18
 80071cc:	4393      	bics	r3, r2
 80071ce:	2210      	movs	r2, #16
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071da:	2201      	movs	r2, #1
 80071dc:	431a      	orrs	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80071e2:	231f      	movs	r3, #31
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	2201      	movs	r2, #1
 80071e8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80071ea:	e009      	b.n	8007200 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f0:	2210      	movs	r2, #16
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80071f8:	231f      	movs	r3, #31
 80071fa:	18fb      	adds	r3, r7, r3
 80071fc:	2201      	movs	r2, #1
 80071fe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8007200:	231f      	movs	r3, #31
 8007202:	18fb      	adds	r3, r7, r3
 8007204:	781b      	ldrb	r3, [r3, #0]
}
 8007206:	0018      	movs	r0, r3
 8007208:	46bd      	mov	sp, r7
 800720a:	b008      	add	sp, #32
 800720c:	bd80      	pop	{r7, pc}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	2000000c 	.word	0x2000000c
 8007214:	00030d40 	.word	0x00030d40
 8007218:	fffffefd 	.word	0xfffffefd
 800721c:	fffe0201 	.word	0xfffe0201
 8007220:	1ffffc02 	.word	0x1ffffc02
 8007224:	40012708 	.word	0x40012708
 8007228:	ffc3ffff 	.word	0xffc3ffff
 800722c:	07ffff04 	.word	0x07ffff04

08007230 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007230:	b5b0      	push	{r4, r5, r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	0018      	movs	r0, r3
 8007242:	f7ff fe3b 	bl	8006ebc <LL_ADC_REG_IsConversionOngoing>
 8007246:	1e03      	subs	r3, r0, #0
 8007248:	d16c      	bne.n	8007324 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2254      	movs	r2, #84	; 0x54
 800724e:	5c9b      	ldrb	r3, [r3, r2]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_ADC_Start_DMA+0x28>
 8007254:	2302      	movs	r3, #2
 8007256:	e06c      	b.n	8007332 <HAL_ADC_Start_DMA+0x102>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2254      	movs	r2, #84	; 0x54
 800725c:	2101      	movs	r1, #1
 800725e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	4013      	ands	r3, r2
 800726a:	d113      	bne.n	8007294 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	0018      	movs	r0, r3
 8007272:	f7ff fdef 	bl	8006e54 <LL_ADC_IsEnabled>
 8007276:	1e03      	subs	r3, r0, #0
 8007278:	d004      	beq.n	8007284 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	0018      	movs	r0, r3
 8007280:	f7ff fdd6 	bl	8006e30 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2101      	movs	r1, #1
 8007290:	430a      	orrs	r2, r1
 8007292:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007294:	2517      	movs	r5, #23
 8007296:	197c      	adds	r4, r7, r5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	0018      	movs	r0, r3
 800729c:	f000 fb5e 	bl	800795c <ADC_Enable>
 80072a0:	0003      	movs	r3, r0
 80072a2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80072a4:	002c      	movs	r4, r5
 80072a6:	193b      	adds	r3, r7, r4
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d13e      	bne.n	800732c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b2:	4a22      	ldr	r2, [pc, #136]	; (800733c <HAL_ADC_Start_DMA+0x10c>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	2280      	movs	r2, #128	; 0x80
 80072b8:	0052      	lsls	r2, r2, #1
 80072ba:	431a      	orrs	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ca:	4a1d      	ldr	r2, [pc, #116]	; (8007340 <HAL_ADC_Start_DMA+0x110>)
 80072cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d2:	4a1c      	ldr	r2, [pc, #112]	; (8007344 <HAL_ADC_Start_DMA+0x114>)
 80072d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072da:	4a1b      	ldr	r2, [pc, #108]	; (8007348 <HAL_ADC_Start_DMA+0x118>)
 80072dc:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	221c      	movs	r2, #28
 80072e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2254      	movs	r2, #84	; 0x54
 80072ea:	2100      	movs	r1, #0
 80072ec:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2110      	movs	r1, #16
 80072fa:	430a      	orrs	r2, r1
 80072fc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3340      	adds	r3, #64	; 0x40
 8007308:	0019      	movs	r1, r3
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	193c      	adds	r4, r7, r4
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f000 ff7c 	bl	800820c <HAL_DMA_Start_IT>
 8007314:	0003      	movs	r3, r0
 8007316:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	0018      	movs	r0, r3
 800731e:	f7ff fdbb 	bl	8006e98 <LL_ADC_REG_StartConversion>
 8007322:	e003      	b.n	800732c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007324:	2317      	movs	r3, #23
 8007326:	18fb      	adds	r3, r7, r3
 8007328:	2202      	movs	r2, #2
 800732a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800732c:	2317      	movs	r3, #23
 800732e:	18fb      	adds	r3, r7, r3
 8007330:	781b      	ldrb	r3, [r3, #0]
}
 8007332:	0018      	movs	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	b006      	add	sp, #24
 8007338:	bdb0      	pop	{r4, r5, r7, pc}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	fffff0fe 	.word	0xfffff0fe
 8007340:	08007b25 	.word	0x08007b25
 8007344:	08007bed 	.word	0x08007bed
 8007348:	08007c0b 	.word	0x08007c0b

0800734c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2202      	movs	r2, #2
 800736c:	4013      	ands	r3, r2
 800736e:	d017      	beq.n	80073a0 <HAL_ADC_IRQHandler+0x54>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2202      	movs	r2, #2
 8007374:	4013      	ands	r3, r2
 8007376:	d013      	beq.n	80073a0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737c:	2210      	movs	r2, #16
 800737e:	4013      	ands	r3, r2
 8007380:	d106      	bne.n	8007390 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007386:	2280      	movs	r2, #128	; 0x80
 8007388:	0112      	lsls	r2, r2, #4
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	0018      	movs	r0, r3
 8007394:	f000 fdba 	bl	8007f0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2202      	movs	r2, #2
 800739e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2204      	movs	r2, #4
 80073a4:	4013      	ands	r3, r2
 80073a6:	d003      	beq.n	80073b0 <HAL_ADC_IRQHandler+0x64>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2204      	movs	r2, #4
 80073ac:	4013      	ands	r3, r2
 80073ae:	d107      	bne.n	80073c0 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2208      	movs	r2, #8
 80073b4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80073b6:	d04d      	beq.n	8007454 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2208      	movs	r2, #8
 80073bc:	4013      	ands	r3, r2
 80073be:	d049      	beq.n	8007454 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c4:	2210      	movs	r2, #16
 80073c6:	4013      	ands	r3, r2
 80073c8:	d106      	bne.n	80073d8 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ce:	2280      	movs	r2, #128	; 0x80
 80073d0:	0092      	lsls	r2, r2, #2
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	0018      	movs	r0, r3
 80073de:	f7ff fc70 	bl	8006cc2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80073e2:	1e03      	subs	r3, r0, #0
 80073e4:	d02e      	beq.n	8007444 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	7e9b      	ldrb	r3, [r3, #26]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d12a      	bne.n	8007444 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2208      	movs	r2, #8
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d123      	bne.n	8007444 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	0018      	movs	r0, r3
 8007402:	f7ff fd5b 	bl	8006ebc <LL_ADC_REG_IsConversionOngoing>
 8007406:	1e03      	subs	r3, r0, #0
 8007408:	d110      	bne.n	800742c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	210c      	movs	r1, #12
 8007416:	438a      	bics	r2, r1
 8007418:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	4a56      	ldr	r2, [pc, #344]	; (8007578 <HAL_ADC_IRQHandler+0x22c>)
 8007420:	4013      	ands	r3, r2
 8007422:	2201      	movs	r2, #1
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	659a      	str	r2, [r3, #88]	; 0x58
 800742a:	e00b      	b.n	8007444 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007430:	2220      	movs	r2, #32
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743c:	2201      	movs	r2, #1
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	0018      	movs	r0, r3
 8007448:	f7fc fcac 	bl	8003da4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	220c      	movs	r2, #12
 8007452:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	4013      	ands	r3, r2
 800745a:	d012      	beq.n	8007482 <HAL_ADC_IRQHandler+0x136>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2280      	movs	r2, #128	; 0x80
 8007460:	4013      	ands	r3, r2
 8007462:	d00e      	beq.n	8007482 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007468:	2280      	movs	r2, #128	; 0x80
 800746a:	0252      	lsls	r2, r2, #9
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	0018      	movs	r0, r3
 8007476:	f000 f889 	bl	800758c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2280      	movs	r2, #128	; 0x80
 8007480:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	2380      	movs	r3, #128	; 0x80
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	4013      	ands	r3, r2
 800748a:	d014      	beq.n	80074b6 <HAL_ADC_IRQHandler+0x16a>
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	2380      	movs	r3, #128	; 0x80
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	4013      	ands	r3, r2
 8007494:	d00f      	beq.n	80074b6 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	2280      	movs	r2, #128	; 0x80
 800749c:	0292      	lsls	r2, r2, #10
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	0018      	movs	r0, r3
 80074a8:	f000 fd20 	bl	8007eec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2280      	movs	r2, #128	; 0x80
 80074b2:	0052      	lsls	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	2380      	movs	r3, #128	; 0x80
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4013      	ands	r3, r2
 80074be:	d014      	beq.n	80074ea <HAL_ADC_IRQHandler+0x19e>
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	2380      	movs	r3, #128	; 0x80
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4013      	ands	r3, r2
 80074c8:	d00f      	beq.n	80074ea <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ce:	2280      	movs	r2, #128	; 0x80
 80074d0:	02d2      	lsls	r2, r2, #11
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	0018      	movs	r0, r3
 80074dc:	f000 fd0e 	bl	8007efc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	0092      	lsls	r2, r2, #2
 80074e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2210      	movs	r2, #16
 80074ee:	4013      	ands	r3, r2
 80074f0:	d02b      	beq.n	800754a <HAL_ADC_IRQHandler+0x1fe>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2210      	movs	r2, #16
 80074f6:	4013      	ands	r3, r2
 80074f8:	d027      	beq.n	800754a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8007502:	2301      	movs	r3, #1
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	e008      	b.n	800751a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	0018      	movs	r0, r3
 800750e:	f7ff fc2c 	bl	8006d6a <LL_ADC_REG_GetDMATransfer>
 8007512:	1e03      	subs	r3, r0, #0
 8007514:	d001      	beq.n	800751a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8007516:	2301      	movs	r3, #1
 8007518:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d110      	bne.n	8007542 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	2280      	movs	r2, #128	; 0x80
 8007526:	00d2      	lsls	r2, r2, #3
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007532:	2202      	movs	r2, #2
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	0018      	movs	r0, r3
 800753e:	f000 f82d 	bl	800759c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2210      	movs	r2, #16
 8007548:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	019b      	lsls	r3, r3, #6
 8007550:	4013      	ands	r3, r2
 8007552:	d00d      	beq.n	8007570 <HAL_ADC_IRQHandler+0x224>
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	2380      	movs	r3, #128	; 0x80
 8007558:	019b      	lsls	r3, r3, #6
 800755a:	4013      	ands	r3, r2
 800755c:	d008      	beq.n	8007570 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	0018      	movs	r0, r3
 8007562:	f000 fcdb 	bl	8007f1c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2280      	movs	r2, #128	; 0x80
 800756c:	0192      	lsls	r2, r2, #6
 800756e:	601a      	str	r2, [r3, #0]
  }
}
 8007570:	46c0      	nop			; (mov r8, r8)
 8007572:	46bd      	mov	sp, r7
 8007574:	b006      	add	sp, #24
 8007576:	bd80      	pop	{r7, pc}
 8007578:	fffffefe 	.word	0xfffffefe

0800757c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007584:	46c0      	nop			; (mov r8, r8)
 8007586:	46bd      	mov	sp, r7
 8007588:	b002      	add	sp, #8
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007594:	46c0      	nop			; (mov r8, r8)
 8007596:	46bd      	mov	sp, r7
 8007598:	b002      	add	sp, #8
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80075a4:	46c0      	nop			; (mov r8, r8)
 80075a6:	46bd      	mov	sp, r7
 80075a8:	b002      	add	sp, #8
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075b6:	2317      	movs	r3, #23
 80075b8:	18fb      	adds	r3, r7, r3
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2254      	movs	r2, #84	; 0x54
 80075c6:	5c9b      	ldrb	r3, [r3, r2]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_ADC_ConfigChannel+0x24>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e1c0      	b.n	8007952 <HAL_ADC_ConfigChannel+0x3a6>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2254      	movs	r2, #84	; 0x54
 80075d4:	2101      	movs	r1, #1
 80075d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	0018      	movs	r0, r3
 80075de:	f7ff fc6d 	bl	8006ebc <LL_ADC_REG_IsConversionOngoing>
 80075e2:	1e03      	subs	r3, r0, #0
 80075e4:	d000      	beq.n	80075e8 <HAL_ADC_ConfigChannel+0x3c>
 80075e6:	e1a3      	b.n	8007930 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d100      	bne.n	80075f2 <HAL_ADC_ConfigChannel+0x46>
 80075f0:	e143      	b.n	800787a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691a      	ldr	r2, [r3, #16]
 80075f6:	2380      	movs	r3, #128	; 0x80
 80075f8:	061b      	lsls	r3, r3, #24
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d004      	beq.n	8007608 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007602:	4ac1      	ldr	r2, [pc, #772]	; (8007908 <HAL_ADC_ConfigChannel+0x35c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d108      	bne.n	800761a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	0019      	movs	r1, r3
 8007612:	0010      	movs	r0, r2
 8007614:	f7ff fb86 	bl	8006d24 <LL_ADC_REG_SetSequencerChAdd>
 8007618:	e0c9      	b.n	80077ae <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	211f      	movs	r1, #31
 8007624:	400b      	ands	r3, r1
 8007626:	210f      	movs	r1, #15
 8007628:	4099      	lsls	r1, r3
 800762a:	000b      	movs	r3, r1
 800762c:	43db      	mvns	r3, r3
 800762e:	4013      	ands	r3, r2
 8007630:	0019      	movs	r1, r3
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	035b      	lsls	r3, r3, #13
 8007638:	0b5b      	lsrs	r3, r3, #13
 800763a:	d105      	bne.n	8007648 <HAL_ADC_ConfigChannel+0x9c>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	0e9b      	lsrs	r3, r3, #26
 8007642:	221f      	movs	r2, #31
 8007644:	4013      	ands	r3, r2
 8007646:	e098      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2201      	movs	r2, #1
 800764e:	4013      	ands	r3, r2
 8007650:	d000      	beq.n	8007654 <HAL_ADC_ConfigChannel+0xa8>
 8007652:	e091      	b.n	8007778 <HAL_ADC_ConfigChannel+0x1cc>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2202      	movs	r2, #2
 800765a:	4013      	ands	r3, r2
 800765c:	d000      	beq.n	8007660 <HAL_ADC_ConfigChannel+0xb4>
 800765e:	e089      	b.n	8007774 <HAL_ADC_ConfigChannel+0x1c8>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2204      	movs	r2, #4
 8007666:	4013      	ands	r3, r2
 8007668:	d000      	beq.n	800766c <HAL_ADC_ConfigChannel+0xc0>
 800766a:	e081      	b.n	8007770 <HAL_ADC_ConfigChannel+0x1c4>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2208      	movs	r2, #8
 8007672:	4013      	ands	r3, r2
 8007674:	d000      	beq.n	8007678 <HAL_ADC_ConfigChannel+0xcc>
 8007676:	e079      	b.n	800776c <HAL_ADC_ConfigChannel+0x1c0>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2210      	movs	r2, #16
 800767e:	4013      	ands	r3, r2
 8007680:	d000      	beq.n	8007684 <HAL_ADC_ConfigChannel+0xd8>
 8007682:	e071      	b.n	8007768 <HAL_ADC_ConfigChannel+0x1bc>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2220      	movs	r2, #32
 800768a:	4013      	ands	r3, r2
 800768c:	d000      	beq.n	8007690 <HAL_ADC_ConfigChannel+0xe4>
 800768e:	e069      	b.n	8007764 <HAL_ADC_ConfigChannel+0x1b8>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2240      	movs	r2, #64	; 0x40
 8007696:	4013      	ands	r3, r2
 8007698:	d000      	beq.n	800769c <HAL_ADC_ConfigChannel+0xf0>
 800769a:	e061      	b.n	8007760 <HAL_ADC_ConfigChannel+0x1b4>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2280      	movs	r2, #128	; 0x80
 80076a2:	4013      	ands	r3, r2
 80076a4:	d000      	beq.n	80076a8 <HAL_ADC_ConfigChannel+0xfc>
 80076a6:	e059      	b.n	800775c <HAL_ADC_ConfigChannel+0x1b0>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	2380      	movs	r3, #128	; 0x80
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	4013      	ands	r3, r2
 80076b2:	d151      	bne.n	8007758 <HAL_ADC_ConfigChannel+0x1ac>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	2380      	movs	r3, #128	; 0x80
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4013      	ands	r3, r2
 80076be:	d149      	bne.n	8007754 <HAL_ADC_ConfigChannel+0x1a8>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	2380      	movs	r3, #128	; 0x80
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	4013      	ands	r3, r2
 80076ca:	d141      	bne.n	8007750 <HAL_ADC_ConfigChannel+0x1a4>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	2380      	movs	r3, #128	; 0x80
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	4013      	ands	r3, r2
 80076d6:	d139      	bne.n	800774c <HAL_ADC_ConfigChannel+0x1a0>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	2380      	movs	r3, #128	; 0x80
 80076de:	015b      	lsls	r3, r3, #5
 80076e0:	4013      	ands	r3, r2
 80076e2:	d131      	bne.n	8007748 <HAL_ADC_ConfigChannel+0x19c>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	019b      	lsls	r3, r3, #6
 80076ec:	4013      	ands	r3, r2
 80076ee:	d129      	bne.n	8007744 <HAL_ADC_ConfigChannel+0x198>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	2380      	movs	r3, #128	; 0x80
 80076f6:	01db      	lsls	r3, r3, #7
 80076f8:	4013      	ands	r3, r2
 80076fa:	d121      	bne.n	8007740 <HAL_ADC_ConfigChannel+0x194>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	4013      	ands	r3, r2
 8007706:	d119      	bne.n	800773c <HAL_ADC_ConfigChannel+0x190>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	2380      	movs	r3, #128	; 0x80
 800770e:	025b      	lsls	r3, r3, #9
 8007710:	4013      	ands	r3, r2
 8007712:	d111      	bne.n	8007738 <HAL_ADC_ConfigChannel+0x18c>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	029b      	lsls	r3, r3, #10
 800771c:	4013      	ands	r3, r2
 800771e:	d109      	bne.n	8007734 <HAL_ADC_ConfigChannel+0x188>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	2380      	movs	r3, #128	; 0x80
 8007726:	02db      	lsls	r3, r3, #11
 8007728:	4013      	ands	r3, r2
 800772a:	d001      	beq.n	8007730 <HAL_ADC_ConfigChannel+0x184>
 800772c:	2312      	movs	r3, #18
 800772e:	e024      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007730:	2300      	movs	r3, #0
 8007732:	e022      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007734:	2311      	movs	r3, #17
 8007736:	e020      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007738:	2310      	movs	r3, #16
 800773a:	e01e      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 800773c:	230f      	movs	r3, #15
 800773e:	e01c      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007740:	230e      	movs	r3, #14
 8007742:	e01a      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007744:	230d      	movs	r3, #13
 8007746:	e018      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007748:	230c      	movs	r3, #12
 800774a:	e016      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 800774c:	230b      	movs	r3, #11
 800774e:	e014      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007750:	230a      	movs	r3, #10
 8007752:	e012      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007754:	2309      	movs	r3, #9
 8007756:	e010      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007758:	2308      	movs	r3, #8
 800775a:	e00e      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 800775c:	2307      	movs	r3, #7
 800775e:	e00c      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007760:	2306      	movs	r3, #6
 8007762:	e00a      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007764:	2305      	movs	r3, #5
 8007766:	e008      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007768:	2304      	movs	r3, #4
 800776a:	e006      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 800776c:	2303      	movs	r3, #3
 800776e:	e004      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007770:	2302      	movs	r3, #2
 8007772:	e002      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <HAL_ADC_ConfigChannel+0x1ce>
 8007778:	2300      	movs	r3, #0
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	6852      	ldr	r2, [r2, #4]
 800777e:	201f      	movs	r0, #31
 8007780:	4002      	ands	r2, r0
 8007782:	4093      	lsls	r3, r2
 8007784:	000a      	movs	r2, r1
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	089b      	lsrs	r3, r3, #2
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	429a      	cmp	r2, r3
 800779a:	d808      	bhi.n	80077ae <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	6859      	ldr	r1, [r3, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	001a      	movs	r2, r3
 80077aa:	f7ff fa9b 	bl	8006ce4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6819      	ldr	r1, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	001a      	movs	r2, r3
 80077bc:	f7ff fae2 	bl	8006d84 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	db00      	blt.n	80077ca <HAL_ADC_ConfigChannel+0x21e>
 80077c8:	e0bc      	b.n	8007944 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077ca:	4b50      	ldr	r3, [pc, #320]	; (800790c <HAL_ADC_ConfigChannel+0x360>)
 80077cc:	0018      	movs	r0, r3
 80077ce:	f7ff fa37 	bl	8006c40 <LL_ADC_GetCommonPathInternalCh>
 80077d2:	0003      	movs	r3, r0
 80077d4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a4d      	ldr	r2, [pc, #308]	; (8007910 <HAL_ADC_ConfigChannel+0x364>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d122      	bne.n	8007826 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	2380      	movs	r3, #128	; 0x80
 80077e4:	041b      	lsls	r3, r3, #16
 80077e6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80077e8:	d11d      	bne.n	8007826 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2280      	movs	r2, #128	; 0x80
 80077ee:	0412      	lsls	r2, r2, #16
 80077f0:	4313      	orrs	r3, r2
 80077f2:	4a46      	ldr	r2, [pc, #280]	; (800790c <HAL_ADC_ConfigChannel+0x360>)
 80077f4:	0019      	movs	r1, r3
 80077f6:	0010      	movs	r0, r2
 80077f8:	f7ff fa0e 	bl	8006c18 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80077fc:	4b45      	ldr	r3, [pc, #276]	; (8007914 <HAL_ADC_ConfigChannel+0x368>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4945      	ldr	r1, [pc, #276]	; (8007918 <HAL_ADC_ConfigChannel+0x36c>)
 8007802:	0018      	movs	r0, r3
 8007804:	f7f8 fc98 	bl	8000138 <__udivsi3>
 8007808:	0003      	movs	r3, r0
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	0013      	movs	r3, r2
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	189b      	adds	r3, r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007816:	e002      	b.n	800781e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3b01      	subs	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1f9      	bne.n	8007818 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007824:	e08e      	b.n	8007944 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a3c      	ldr	r2, [pc, #240]	; (800791c <HAL_ADC_ConfigChannel+0x370>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10e      	bne.n	800784e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	2380      	movs	r3, #128	; 0x80
 8007834:	045b      	lsls	r3, r3, #17
 8007836:	4013      	ands	r3, r2
 8007838:	d109      	bne.n	800784e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2280      	movs	r2, #128	; 0x80
 800783e:	0452      	lsls	r2, r2, #17
 8007840:	4313      	orrs	r3, r2
 8007842:	4a32      	ldr	r2, [pc, #200]	; (800790c <HAL_ADC_ConfigChannel+0x360>)
 8007844:	0019      	movs	r1, r3
 8007846:	0010      	movs	r0, r2
 8007848:	f7ff f9e6 	bl	8006c18 <LL_ADC_SetCommonPathInternalCh>
 800784c:	e07a      	b.n	8007944 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a33      	ldr	r2, [pc, #204]	; (8007920 <HAL_ADC_ConfigChannel+0x374>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d000      	beq.n	800785a <HAL_ADC_ConfigChannel+0x2ae>
 8007858:	e074      	b.n	8007944 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	2380      	movs	r3, #128	; 0x80
 800785e:	03db      	lsls	r3, r3, #15
 8007860:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007862:	d000      	beq.n	8007866 <HAL_ADC_ConfigChannel+0x2ba>
 8007864:	e06e      	b.n	8007944 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2280      	movs	r2, #128	; 0x80
 800786a:	03d2      	lsls	r2, r2, #15
 800786c:	4313      	orrs	r3, r2
 800786e:	4a27      	ldr	r2, [pc, #156]	; (800790c <HAL_ADC_ConfigChannel+0x360>)
 8007870:	0019      	movs	r1, r3
 8007872:	0010      	movs	r0, r2
 8007874:	f7ff f9d0 	bl	8006c18 <LL_ADC_SetCommonPathInternalCh>
 8007878:	e064      	b.n	8007944 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	2380      	movs	r3, #128	; 0x80
 8007880:	061b      	lsls	r3, r3, #24
 8007882:	429a      	cmp	r2, r3
 8007884:	d004      	beq.n	8007890 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800788a:	4a1f      	ldr	r2, [pc, #124]	; (8007908 <HAL_ADC_ConfigChannel+0x35c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d107      	bne.n	80078a0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	0019      	movs	r1, r3
 800789a:	0010      	movs	r0, r2
 800789c:	f7ff fa53 	bl	8006d46 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	da4d      	bge.n	8007944 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078a8:	4b18      	ldr	r3, [pc, #96]	; (800790c <HAL_ADC_ConfigChannel+0x360>)
 80078aa:	0018      	movs	r0, r3
 80078ac:	f7ff f9c8 	bl	8006c40 <LL_ADC_GetCommonPathInternalCh>
 80078b0:	0003      	movs	r3, r0
 80078b2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a15      	ldr	r2, [pc, #84]	; (8007910 <HAL_ADC_ConfigChannel+0x364>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d108      	bne.n	80078d0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4a18      	ldr	r2, [pc, #96]	; (8007924 <HAL_ADC_ConfigChannel+0x378>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	4a11      	ldr	r2, [pc, #68]	; (800790c <HAL_ADC_ConfigChannel+0x360>)
 80078c6:	0019      	movs	r1, r3
 80078c8:	0010      	movs	r0, r2
 80078ca:	f7ff f9a5 	bl	8006c18 <LL_ADC_SetCommonPathInternalCh>
 80078ce:	e039      	b.n	8007944 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a11      	ldr	r2, [pc, #68]	; (800791c <HAL_ADC_ConfigChannel+0x370>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d108      	bne.n	80078ec <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	4a12      	ldr	r2, [pc, #72]	; (8007928 <HAL_ADC_ConfigChannel+0x37c>)
 80078de:	4013      	ands	r3, r2
 80078e0:	4a0a      	ldr	r2, [pc, #40]	; (800790c <HAL_ADC_ConfigChannel+0x360>)
 80078e2:	0019      	movs	r1, r3
 80078e4:	0010      	movs	r0, r2
 80078e6:	f7ff f997 	bl	8006c18 <LL_ADC_SetCommonPathInternalCh>
 80078ea:	e02b      	b.n	8007944 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a0b      	ldr	r2, [pc, #44]	; (8007920 <HAL_ADC_ConfigChannel+0x374>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d126      	bne.n	8007944 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	4a0c      	ldr	r2, [pc, #48]	; (800792c <HAL_ADC_ConfigChannel+0x380>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	4a03      	ldr	r2, [pc, #12]	; (800790c <HAL_ADC_ConfigChannel+0x360>)
 80078fe:	0019      	movs	r1, r3
 8007900:	0010      	movs	r0, r2
 8007902:	f7ff f989 	bl	8006c18 <LL_ADC_SetCommonPathInternalCh>
 8007906:	e01d      	b.n	8007944 <HAL_ADC_ConfigChannel+0x398>
 8007908:	80000004 	.word	0x80000004
 800790c:	40012708 	.word	0x40012708
 8007910:	b0001000 	.word	0xb0001000
 8007914:	2000000c 	.word	0x2000000c
 8007918:	00030d40 	.word	0x00030d40
 800791c:	b8004000 	.word	0xb8004000
 8007920:	b4002000 	.word	0xb4002000
 8007924:	ff7fffff 	.word	0xff7fffff
 8007928:	feffffff 	.word	0xfeffffff
 800792c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007934:	2220      	movs	r2, #32
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800793c:	2317      	movs	r3, #23
 800793e:	18fb      	adds	r3, r7, r3
 8007940:	2201      	movs	r2, #1
 8007942:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2254      	movs	r2, #84	; 0x54
 8007948:	2100      	movs	r1, #0
 800794a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800794c:	2317      	movs	r3, #23
 800794e:	18fb      	adds	r3, r7, r3
 8007950:	781b      	ldrb	r3, [r3, #0]
}
 8007952:	0018      	movs	r0, r3
 8007954:	46bd      	mov	sp, r7
 8007956:	b006      	add	sp, #24
 8007958:	bd80      	pop	{r7, pc}
 800795a:	46c0      	nop			; (mov r8, r8)

0800795c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007964:	2300      	movs	r3, #0
 8007966:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	0018      	movs	r0, r3
 800796e:	f7ff fa71 	bl	8006e54 <LL_ADC_IsEnabled>
 8007972:	1e03      	subs	r3, r0, #0
 8007974:	d000      	beq.n	8007978 <ADC_Enable+0x1c>
 8007976:	e069      	b.n	8007a4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	4a36      	ldr	r2, [pc, #216]	; (8007a58 <ADC_Enable+0xfc>)
 8007980:	4013      	ands	r3, r2
 8007982:	d00d      	beq.n	80079a0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007988:	2210      	movs	r2, #16
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007994:	2201      	movs	r2, #1
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e056      	b.n	8007a4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	0018      	movs	r0, r3
 80079a6:	f7ff fa31 	bl	8006e0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80079aa:	4b2c      	ldr	r3, [pc, #176]	; (8007a5c <ADC_Enable+0x100>)
 80079ac:	0018      	movs	r0, r3
 80079ae:	f7ff f947 	bl	8006c40 <LL_ADC_GetCommonPathInternalCh>
 80079b2:	0002      	movs	r2, r0
 80079b4:	2380      	movs	r3, #128	; 0x80
 80079b6:	041b      	lsls	r3, r3, #16
 80079b8:	4013      	ands	r3, r2
 80079ba:	d00f      	beq.n	80079dc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80079bc:	4b28      	ldr	r3, [pc, #160]	; (8007a60 <ADC_Enable+0x104>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4928      	ldr	r1, [pc, #160]	; (8007a64 <ADC_Enable+0x108>)
 80079c2:	0018      	movs	r0, r3
 80079c4:	f7f8 fbb8 	bl	8000138 <__udivsi3>
 80079c8:	0003      	movs	r3, r0
 80079ca:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80079cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80079ce:	e002      	b.n	80079d6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1f9      	bne.n	80079d0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7e5b      	ldrb	r3, [r3, #25]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d033      	beq.n	8007a4c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80079e4:	f7ff f8d4 	bl	8006b90 <HAL_GetTick>
 80079e8:	0003      	movs	r3, r0
 80079ea:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80079ec:	e027      	b.n	8007a3e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	0018      	movs	r0, r3
 80079f4:	f7ff fa2e 	bl	8006e54 <LL_ADC_IsEnabled>
 80079f8:	1e03      	subs	r3, r0, #0
 80079fa:	d104      	bne.n	8007a06 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	0018      	movs	r0, r3
 8007a02:	f7ff fa03 	bl	8006e0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007a06:	f7ff f8c3 	bl	8006b90 <HAL_GetTick>
 8007a0a:	0002      	movs	r2, r0
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d914      	bls.n	8007a3e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d00d      	beq.n	8007a3e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a26:	2210      	movs	r2, #16
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a32:	2201      	movs	r2, #1
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e007      	b.n	8007a4e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2201      	movs	r2, #1
 8007a46:	4013      	ands	r3, r2
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d1d0      	bne.n	80079ee <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	0018      	movs	r0, r3
 8007a50:	46bd      	mov	sp, r7
 8007a52:	b004      	add	sp, #16
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	80000017 	.word	0x80000017
 8007a5c:	40012708 	.word	0x40012708
 8007a60:	2000000c 	.word	0x2000000c
 8007a64:	00030d40 	.word	0x00030d40

08007a68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	0018      	movs	r0, r3
 8007a76:	f7ff f9fe 	bl	8006e76 <LL_ADC_IsDisableOngoing>
 8007a7a:	0003      	movs	r3, r0
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	0018      	movs	r0, r3
 8007a84:	f7ff f9e6 	bl	8006e54 <LL_ADC_IsEnabled>
 8007a88:	1e03      	subs	r3, r0, #0
 8007a8a:	d046      	beq.n	8007b1a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d143      	bne.n	8007b1a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	2205      	movs	r2, #5
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10d      	bne.n	8007abc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f7ff f9c3 	bl	8006e30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2203      	movs	r2, #3
 8007ab0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007ab2:	f7ff f86d 	bl	8006b90 <HAL_GetTick>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007aba:	e028      	b.n	8007b0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac0:	2210      	movs	r2, #16
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007acc:	2201      	movs	r2, #1
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e021      	b.n	8007b1c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007ad8:	f7ff f85a 	bl	8006b90 <HAL_GetTick>
 8007adc:	0002      	movs	r2, r0
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d913      	bls.n	8007b0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	2201      	movs	r2, #1
 8007aee:	4013      	ands	r3, r2
 8007af0:	d00d      	beq.n	8007b0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af6:	2210      	movs	r2, #16
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b02:	2201      	movs	r2, #1
 8007b04:	431a      	orrs	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e006      	b.n	8007b1c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2201      	movs	r2, #1
 8007b16:	4013      	ands	r3, r2
 8007b18:	d1de      	bne.n	8007ad8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b004      	add	sp, #16
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b36:	2250      	movs	r2, #80	; 0x50
 8007b38:	4013      	ands	r3, r2
 8007b3a:	d141      	bne.n	8007bc0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b40:	2280      	movs	r2, #128	; 0x80
 8007b42:	0092      	lsls	r2, r2, #2
 8007b44:	431a      	orrs	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f7ff f8b7 	bl	8006cc2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007b54:	1e03      	subs	r3, r0, #0
 8007b56:	d02e      	beq.n	8007bb6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	7e9b      	ldrb	r3, [r3, #26]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d12a      	bne.n	8007bb6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2208      	movs	r2, #8
 8007b68:	4013      	ands	r3, r2
 8007b6a:	2b08      	cmp	r3, #8
 8007b6c:	d123      	bne.n	8007bb6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	0018      	movs	r0, r3
 8007b74:	f7ff f9a2 	bl	8006ebc <LL_ADC_REG_IsConversionOngoing>
 8007b78:	1e03      	subs	r3, r0, #0
 8007b7a:	d110      	bne.n	8007b9e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	210c      	movs	r1, #12
 8007b88:	438a      	bics	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b90:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <ADC_DMAConvCplt+0xc4>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	2201      	movs	r2, #1
 8007b96:	431a      	orrs	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	659a      	str	r2, [r3, #88]	; 0x58
 8007b9c:	e00b      	b.n	8007bb6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bae:	2201      	movs	r2, #1
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	0018      	movs	r0, r3
 8007bba:	f7fc f8f3 	bl	8003da4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007bbe:	e00f      	b.n	8007be0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc4:	2210      	movs	r2, #16
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	d004      	beq.n	8007bd4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f7ff fce5 	bl	800759c <HAL_ADC_ErrorCallback>
}
 8007bd2:	e005      	b.n	8007be0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	0010      	movs	r0, r2
 8007bde:	4798      	blx	r3
}
 8007be0:	46c0      	nop			; (mov r8, r8)
 8007be2:	46bd      	mov	sp, r7
 8007be4:	b004      	add	sp, #16
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	fffffefe 	.word	0xfffffefe

08007bec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f7ff fcbd 	bl	800757c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	46bd      	mov	sp, r7
 8007c06:	b004      	add	sp, #16
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1c:	2240      	movs	r2, #64	; 0x40
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c28:	2204      	movs	r2, #4
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	0018      	movs	r0, r3
 8007c34:	f7ff fcb2 	bl	800759c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c38:	46c0      	nop			; (mov r8, r8)
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	b004      	add	sp, #16
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <LL_ADC_SetCalibrationFactor>:
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	22b4      	movs	r2, #180	; 0xb4
 8007c4e:	589b      	ldr	r3, [r3, r2]
 8007c50:	227f      	movs	r2, #127	; 0x7f
 8007c52:	4393      	bics	r3, r2
 8007c54:	001a      	movs	r2, r3
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	21b4      	movs	r1, #180	; 0xb4
 8007c5e:	505a      	str	r2, [r3, r1]
}
 8007c60:	46c0      	nop			; (mov r8, r8)
 8007c62:	46bd      	mov	sp, r7
 8007c64:	b002      	add	sp, #8
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <LL_ADC_GetCalibrationFactor>:
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	22b4      	movs	r2, #180	; 0xb4
 8007c74:	589b      	ldr	r3, [r3, r2]
 8007c76:	227f      	movs	r2, #127	; 0x7f
 8007c78:	4013      	ands	r3, r2
}
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b002      	add	sp, #8
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <LL_ADC_Enable>:
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4a04      	ldr	r2, [pc, #16]	; (8007ca4 <LL_ADC_Enable+0x20>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	2201      	movs	r2, #1
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	609a      	str	r2, [r3, #8]
}
 8007c9c:	46c0      	nop			; (mov r8, r8)
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	b002      	add	sp, #8
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	7fffffe8 	.word	0x7fffffe8

08007ca8 <LL_ADC_Disable>:
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	4a04      	ldr	r2, [pc, #16]	; (8007cc8 <LL_ADC_Disable+0x20>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	2202      	movs	r2, #2
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	609a      	str	r2, [r3, #8]
}
 8007cc0:	46c0      	nop			; (mov r8, r8)
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	b002      	add	sp, #8
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	7fffffe8 	.word	0x7fffffe8

08007ccc <LL_ADC_IsEnabled>:
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <LL_ADC_IsEnabled+0x18>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e000      	b.n	8007ce6 <LL_ADC_IsEnabled+0x1a>
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b002      	add	sp, #8
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <LL_ADC_StartCalibration>:
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	4a05      	ldr	r2, [pc, #20]	; (8007d14 <LL_ADC_StartCalibration+0x24>)
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2280      	movs	r2, #128	; 0x80
 8007d02:	0612      	lsls	r2, r2, #24
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	609a      	str	r2, [r3, #8]
}
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	b002      	add	sp, #8
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	7fffffe8 	.word	0x7fffffe8

08007d18 <LL_ADC_IsCalibrationOnGoing>:
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	0fdb      	lsrs	r3, r3, #31
 8007d26:	07da      	lsls	r2, r3, #31
 8007d28:	2380      	movs	r3, #128	; 0x80
 8007d2a:	061b      	lsls	r3, r3, #24
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d101      	bne.n	8007d34 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	0018      	movs	r0, r3
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	b002      	add	sp, #8
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8007d40:	b590      	push	{r4, r7, lr}
 8007d42:	b089      	sub	sp, #36	; 0x24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2254      	movs	r2, #84	; 0x54
 8007d54:	5c9b      	ldrb	r3, [r3, r2]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_ADCEx_Calibration_Start+0x1e>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e0ba      	b.n	8007ed4 <HAL_ADCEx_Calibration_Start+0x194>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2254      	movs	r2, #84	; 0x54
 8007d62:	2101      	movs	r1, #1
 8007d64:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007d66:	2317      	movs	r3, #23
 8007d68:	18fc      	adds	r4, r7, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f7ff fe7b 	bl	8007a68 <ADC_Disable>
 8007d72:	0003      	movs	r3, r0
 8007d74:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f7ff ffa6 	bl	8007ccc <LL_ADC_IsEnabled>
 8007d80:	1e03      	subs	r3, r0, #0
 8007d82:	d000      	beq.n	8007d86 <HAL_ADCEx_Calibration_Start+0x46>
 8007d84:	e099      	b.n	8007eba <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d8a:	4a54      	ldr	r2, [pc, #336]	; (8007edc <HAL_ADCEx_Calibration_Start+0x19c>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	2202      	movs	r2, #2
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	4a50      	ldr	r2, [pc, #320]	; (8007ee0 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8007d9e:	4013      	ands	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	494d      	ldr	r1, [pc, #308]	; (8007ee4 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8007dae:	400a      	ands	r2, r1
 8007db0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007db2:	2300      	movs	r3, #0
 8007db4:	61fb      	str	r3, [r7, #28]
 8007db6:	e02d      	b.n	8007e14 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f7ff ff97 	bl	8007cf0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007dc2:	e014      	b.n	8007dee <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	4a46      	ldr	r2, [pc, #280]	; (8007ee8 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d90d      	bls.n	8007dee <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd6:	2212      	movs	r2, #18
 8007dd8:	4393      	bics	r3, r2
 8007dda:	2210      	movs	r2, #16
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2254      	movs	r2, #84	; 0x54
 8007de6:	2100      	movs	r1, #0
 8007de8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e072      	b.n	8007ed4 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	0018      	movs	r0, r3
 8007df4:	f7ff ff90 	bl	8007d18 <LL_ADC_IsCalibrationOnGoing>
 8007df8:	1e03      	subs	r3, r0, #0
 8007dfa:	d1e3      	bne.n	8007dc4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	0018      	movs	r0, r3
 8007e02:	f7ff ff31 	bl	8007c68 <LL_ADC_GetCalibrationFactor>
 8007e06:	0002      	movs	r2, r0
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	189b      	adds	r3, r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	3301      	adds	r3, #1
 8007e12:	61fb      	str	r3, [r7, #28]
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	2b07      	cmp	r3, #7
 8007e18:	d9ce      	bls.n	8007db8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007e1a:	69f9      	ldr	r1, [r7, #28]
 8007e1c:	69b8      	ldr	r0, [r7, #24]
 8007e1e:	f7f8 f98b 	bl	8000138 <__udivsi3>
 8007e22:	0003      	movs	r3, r0
 8007e24:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f7ff ff2a 	bl	8007c84 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	0011      	movs	r1, r2
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f7ff ff01 	bl	8007c40 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	0018      	movs	r0, r3
 8007e44:	f7ff ff30 	bl	8007ca8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007e48:	f7fe fea2 	bl	8006b90 <HAL_GetTick>
 8007e4c:	0003      	movs	r3, r0
 8007e4e:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e50:	e01b      	b.n	8007e8a <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007e52:	f7fe fe9d 	bl	8006b90 <HAL_GetTick>
 8007e56:	0002      	movs	r2, r0
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d914      	bls.n	8007e8a <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	0018      	movs	r0, r3
 8007e66:	f7ff ff31 	bl	8007ccc <LL_ADC_IsEnabled>
 8007e6a:	1e03      	subs	r3, r0, #0
 8007e6c:	d00d      	beq.n	8007e8a <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e72:	2210      	movs	r2, #16
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7e:	2201      	movs	r2, #1
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e024      	b.n	8007ed4 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	0018      	movs	r0, r3
 8007e90:	f7ff ff1c 	bl	8007ccc <LL_ADC_IsEnabled>
 8007e94:	1e03      	subs	r3, r0, #0
 8007e96:	d1dc      	bne.n	8007e52 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68d9      	ldr	r1, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eac:	2203      	movs	r2, #3
 8007eae:	4393      	bics	r3, r2
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	659a      	str	r2, [r3, #88]	; 0x58
 8007eb8:	e005      	b.n	8007ec6 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebe:	2210      	movs	r2, #16
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2254      	movs	r2, #84	; 0x54
 8007eca:	2100      	movs	r1, #0
 8007ecc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007ece:	2317      	movs	r3, #23
 8007ed0:	18fb      	adds	r3, r7, r3
 8007ed2:	781b      	ldrb	r3, [r3, #0]
}
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	b009      	add	sp, #36	; 0x24
 8007eda:	bd90      	pop	{r4, r7, pc}
 8007edc:	fffffefd 	.word	0xfffffefd
 8007ee0:	00008003 	.word	0x00008003
 8007ee4:	ffff7ffc 	.word	0xffff7ffc
 8007ee8:	0002f1ff 	.word	0x0002f1ff

08007eec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007ef4:	46c0      	nop			; (mov r8, r8)
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	b002      	add	sp, #8
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007f04:	46c0      	nop			; (mov r8, r8)
 8007f06:	46bd      	mov	sp, r7
 8007f08:	b002      	add	sp, #8
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007f14:	46c0      	nop			; (mov r8, r8)
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b002      	add	sp, #8
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8007f24:	46c0      	nop			; (mov r8, r8)
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <__NVIC_EnableIRQ>:
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	0002      	movs	r2, r0
 8007f34:	1dfb      	adds	r3, r7, #7
 8007f36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f38:	1dfb      	adds	r3, r7, #7
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8007f3e:	d809      	bhi.n	8007f54 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f40:	1dfb      	adds	r3, r7, #7
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	001a      	movs	r2, r3
 8007f46:	231f      	movs	r3, #31
 8007f48:	401a      	ands	r2, r3
 8007f4a:	4b04      	ldr	r3, [pc, #16]	; (8007f5c <__NVIC_EnableIRQ+0x30>)
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	4091      	lsls	r1, r2
 8007f50:	000a      	movs	r2, r1
 8007f52:	601a      	str	r2, [r3, #0]
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b002      	add	sp, #8
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	e000e100 	.word	0xe000e100

08007f60 <__NVIC_SetPriority>:
{
 8007f60:	b590      	push	{r4, r7, lr}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	0002      	movs	r2, r0
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	1dfb      	adds	r3, r7, #7
 8007f6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f6e:	1dfb      	adds	r3, r7, #7
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b7f      	cmp	r3, #127	; 0x7f
 8007f74:	d828      	bhi.n	8007fc8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f76:	4a2f      	ldr	r2, [pc, #188]	; (8008034 <__NVIC_SetPriority+0xd4>)
 8007f78:	1dfb      	adds	r3, r7, #7
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b25b      	sxtb	r3, r3
 8007f7e:	089b      	lsrs	r3, r3, #2
 8007f80:	33c0      	adds	r3, #192	; 0xc0
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	589b      	ldr	r3, [r3, r2]
 8007f86:	1dfa      	adds	r2, r7, #7
 8007f88:	7812      	ldrb	r2, [r2, #0]
 8007f8a:	0011      	movs	r1, r2
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	400a      	ands	r2, r1
 8007f90:	00d2      	lsls	r2, r2, #3
 8007f92:	21ff      	movs	r1, #255	; 0xff
 8007f94:	4091      	lsls	r1, r2
 8007f96:	000a      	movs	r2, r1
 8007f98:	43d2      	mvns	r2, r2
 8007f9a:	401a      	ands	r2, r3
 8007f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	019b      	lsls	r3, r3, #6
 8007fa2:	22ff      	movs	r2, #255	; 0xff
 8007fa4:	401a      	ands	r2, r3
 8007fa6:	1dfb      	adds	r3, r7, #7
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	0018      	movs	r0, r3
 8007fac:	2303      	movs	r3, #3
 8007fae:	4003      	ands	r3, r0
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007fb4:	481f      	ldr	r0, [pc, #124]	; (8008034 <__NVIC_SetPriority+0xd4>)
 8007fb6:	1dfb      	adds	r3, r7, #7
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	b25b      	sxtb	r3, r3
 8007fbc:	089b      	lsrs	r3, r3, #2
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	33c0      	adds	r3, #192	; 0xc0
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	501a      	str	r2, [r3, r0]
}
 8007fc6:	e031      	b.n	800802c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007fc8:	4a1b      	ldr	r2, [pc, #108]	; (8008038 <__NVIC_SetPriority+0xd8>)
 8007fca:	1dfb      	adds	r3, r7, #7
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	0019      	movs	r1, r3
 8007fd0:	230f      	movs	r3, #15
 8007fd2:	400b      	ands	r3, r1
 8007fd4:	3b08      	subs	r3, #8
 8007fd6:	089b      	lsrs	r3, r3, #2
 8007fd8:	3306      	adds	r3, #6
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	18d3      	adds	r3, r2, r3
 8007fde:	3304      	adds	r3, #4
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	1dfa      	adds	r2, r7, #7
 8007fe4:	7812      	ldrb	r2, [r2, #0]
 8007fe6:	0011      	movs	r1, r2
 8007fe8:	2203      	movs	r2, #3
 8007fea:	400a      	ands	r2, r1
 8007fec:	00d2      	lsls	r2, r2, #3
 8007fee:	21ff      	movs	r1, #255	; 0xff
 8007ff0:	4091      	lsls	r1, r2
 8007ff2:	000a      	movs	r2, r1
 8007ff4:	43d2      	mvns	r2, r2
 8007ff6:	401a      	ands	r2, r3
 8007ff8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	019b      	lsls	r3, r3, #6
 8007ffe:	22ff      	movs	r2, #255	; 0xff
 8008000:	401a      	ands	r2, r3
 8008002:	1dfb      	adds	r3, r7, #7
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	0018      	movs	r0, r3
 8008008:	2303      	movs	r3, #3
 800800a:	4003      	ands	r3, r0
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008010:	4809      	ldr	r0, [pc, #36]	; (8008038 <__NVIC_SetPriority+0xd8>)
 8008012:	1dfb      	adds	r3, r7, #7
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	001c      	movs	r4, r3
 8008018:	230f      	movs	r3, #15
 800801a:	4023      	ands	r3, r4
 800801c:	3b08      	subs	r3, #8
 800801e:	089b      	lsrs	r3, r3, #2
 8008020:	430a      	orrs	r2, r1
 8008022:	3306      	adds	r3, #6
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	18c3      	adds	r3, r0, r3
 8008028:	3304      	adds	r3, #4
 800802a:	601a      	str	r2, [r3, #0]
}
 800802c:	46c0      	nop			; (mov r8, r8)
 800802e:	46bd      	mov	sp, r7
 8008030:	b003      	add	sp, #12
 8008032:	bd90      	pop	{r4, r7, pc}
 8008034:	e000e100 	.word	0xe000e100
 8008038:	e000ed00 	.word	0xe000ed00

0800803c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	1e5a      	subs	r2, r3, #1
 8008048:	2380      	movs	r3, #128	; 0x80
 800804a:	045b      	lsls	r3, r3, #17
 800804c:	429a      	cmp	r2, r3
 800804e:	d301      	bcc.n	8008054 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008050:	2301      	movs	r3, #1
 8008052:	e010      	b.n	8008076 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <SysTick_Config+0x44>)
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	3a01      	subs	r2, #1
 800805a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800805c:	2301      	movs	r3, #1
 800805e:	425b      	negs	r3, r3
 8008060:	2103      	movs	r1, #3
 8008062:	0018      	movs	r0, r3
 8008064:	f7ff ff7c 	bl	8007f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008068:	4b05      	ldr	r3, [pc, #20]	; (8008080 <SysTick_Config+0x44>)
 800806a:	2200      	movs	r2, #0
 800806c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800806e:	4b04      	ldr	r3, [pc, #16]	; (8008080 <SysTick_Config+0x44>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008074:	2300      	movs	r3, #0
}
 8008076:	0018      	movs	r0, r3
 8008078:	46bd      	mov	sp, r7
 800807a:	b002      	add	sp, #8
 800807c:	bd80      	pop	{r7, pc}
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	e000e010 	.word	0xe000e010

08008084 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
 800808e:	210f      	movs	r1, #15
 8008090:	187b      	adds	r3, r7, r1
 8008092:	1c02      	adds	r2, r0, #0
 8008094:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	187b      	adds	r3, r7, r1
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b25b      	sxtb	r3, r3
 800809e:	0011      	movs	r1, r2
 80080a0:	0018      	movs	r0, r3
 80080a2:	f7ff ff5d 	bl	8007f60 <__NVIC_SetPriority>
}
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	46bd      	mov	sp, r7
 80080aa:	b004      	add	sp, #16
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	0002      	movs	r2, r0
 80080b6:	1dfb      	adds	r3, r7, #7
 80080b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080ba:	1dfb      	adds	r3, r7, #7
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b25b      	sxtb	r3, r3
 80080c0:	0018      	movs	r0, r3
 80080c2:	f7ff ff33 	bl	8007f2c <__NVIC_EnableIRQ>
}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	46bd      	mov	sp, r7
 80080ca:	b002      	add	sp, #8
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	0018      	movs	r0, r3
 80080da:	f7ff ffaf 	bl	800803c <SysTick_Config>
 80080de:	0003      	movs	r3, r0
}
 80080e0:	0018      	movs	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	b002      	add	sp, #8
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80080ec:	f7fb fe86 	bl	8003dfc <HAL_SYSTICK_Callback>
}
 80080f0:	46c0      	nop			; (mov r8, r8)
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e077      	b.n	80081fa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a3d      	ldr	r2, [pc, #244]	; (8008204 <HAL_DMA_Init+0x10c>)
 8008110:	4694      	mov	ip, r2
 8008112:	4463      	add	r3, ip
 8008114:	2114      	movs	r1, #20
 8008116:	0018      	movs	r0, r3
 8008118:	f7f8 f80e 	bl	8000138 <__udivsi3>
 800811c:	0003      	movs	r3, r0
 800811e:	009a      	lsls	r2, r3, #2
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2225      	movs	r2, #37	; 0x25
 8008128:	2102      	movs	r1, #2
 800812a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4934      	ldr	r1, [pc, #208]	; (8008208 <HAL_DMA_Init+0x110>)
 8008138:	400a      	ands	r2, r1
 800813a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6819      	ldr	r1, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689a      	ldr	r2, [r3, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	0018      	movs	r0, r3
 8008176:	f000 fa8d 	bl	8008694 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	2380      	movs	r3, #128	; 0x80
 8008180:	01db      	lsls	r3, r3, #7
 8008182:	429a      	cmp	r2, r3
 8008184:	d102      	bne.n	800818c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008194:	213f      	movs	r1, #63	; 0x3f
 8008196:	400a      	ands	r2, r1
 8008198:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80081a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d011      	beq.n	80081d0 <HAL_DMA_Init+0xd8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d80d      	bhi.n	80081d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	0018      	movs	r0, r3
 80081b8:	f000 fa98 	bl	80086ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80081cc:	605a      	str	r2, [r3, #4]
 80081ce:	e008      	b.n	80081e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2225      	movs	r2, #37	; 0x25
 80081ec:	2101      	movs	r1, #1
 80081ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2224      	movs	r2, #36	; 0x24
 80081f4:	2100      	movs	r1, #0
 80081f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	0018      	movs	r0, r3
 80081fc:	46bd      	mov	sp, r7
 80081fe:	b002      	add	sp, #8
 8008200:	bd80      	pop	{r7, pc}
 8008202:	46c0      	nop			; (mov r8, r8)
 8008204:	bffdfff8 	.word	0xbffdfff8
 8008208:	ffff800f 	.word	0xffff800f

0800820c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800821a:	2317      	movs	r3, #23
 800821c:	18fb      	adds	r3, r7, r3
 800821e:	2200      	movs	r2, #0
 8008220:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2224      	movs	r2, #36	; 0x24
 8008226:	5c9b      	ldrb	r3, [r3, r2]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_DMA_Start_IT+0x24>
 800822c:	2302      	movs	r3, #2
 800822e:	e06f      	b.n	8008310 <HAL_DMA_Start_IT+0x104>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2224      	movs	r2, #36	; 0x24
 8008234:	2101      	movs	r1, #1
 8008236:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2225      	movs	r2, #37	; 0x25
 800823c:	5c9b      	ldrb	r3, [r3, r2]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d157      	bne.n	80082f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2225      	movs	r2, #37	; 0x25
 8008248:	2102      	movs	r1, #2
 800824a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2101      	movs	r1, #1
 800825e:	438a      	bics	r2, r1
 8008260:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f9d3 	bl	8008614 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	2b00      	cmp	r3, #0
 8008274:	d008      	beq.n	8008288 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	210e      	movs	r1, #14
 8008282:	430a      	orrs	r2, r1
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	e00f      	b.n	80082a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2104      	movs	r1, #4
 8008294:	438a      	bics	r2, r1
 8008296:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	210a      	movs	r1, #10
 80082a4:	430a      	orrs	r2, r1
 80082a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	2380      	movs	r3, #128	; 0x80
 80082b0:	025b      	lsls	r3, r3, #9
 80082b2:	4013      	ands	r3, r2
 80082b4:	d008      	beq.n	80082c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c0:	2180      	movs	r1, #128	; 0x80
 80082c2:	0049      	lsls	r1, r1, #1
 80082c4:	430a      	orrs	r2, r1
 80082c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d008      	beq.n	80082e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082da:	2180      	movs	r1, #128	; 0x80
 80082dc:	0049      	lsls	r1, r1, #1
 80082de:	430a      	orrs	r2, r1
 80082e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2101      	movs	r1, #1
 80082ee:	430a      	orrs	r2, r1
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	e00a      	b.n	800830a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2280      	movs	r2, #128	; 0x80
 80082f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2224      	movs	r2, #36	; 0x24
 80082fe:	2100      	movs	r1, #0
 8008300:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8008302:	2317      	movs	r3, #23
 8008304:	18fb      	adds	r3, r7, r3
 8008306:	2201      	movs	r2, #1
 8008308:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800830a:	2317      	movs	r3, #23
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	781b      	ldrb	r3, [r3, #0]
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b006      	add	sp, #24
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e050      	b.n	80083cc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2225      	movs	r2, #37	; 0x25
 800832e:	5c9b      	ldrb	r3, [r3, r2]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d008      	beq.n	8008348 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2204      	movs	r2, #4
 800833a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2224      	movs	r2, #36	; 0x24
 8008340:	2100      	movs	r1, #0
 8008342:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e041      	b.n	80083cc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	210e      	movs	r1, #14
 8008354:	438a      	bics	r2, r1
 8008356:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008362:	491c      	ldr	r1, [pc, #112]	; (80083d4 <HAL_DMA_Abort+0xbc>)
 8008364:	400a      	ands	r2, r1
 8008366:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2101      	movs	r1, #1
 8008374:	438a      	bics	r2, r1
 8008376:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8008378:	4b17      	ldr	r3, [pc, #92]	; (80083d8 <HAL_DMA_Abort+0xc0>)
 800837a:	6859      	ldr	r1, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	221c      	movs	r2, #28
 8008382:	4013      	ands	r3, r2
 8008384:	2201      	movs	r2, #1
 8008386:	409a      	lsls	r2, r3
 8008388:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <HAL_DMA_Abort+0xc0>)
 800838a:	430a      	orrs	r2, r1
 800838c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008396:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00c      	beq.n	80083ba <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083aa:	490a      	ldr	r1, [pc, #40]	; (80083d4 <HAL_DMA_Abort+0xbc>)
 80083ac:	400a      	ands	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80083b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2225      	movs	r2, #37	; 0x25
 80083be:	2101      	movs	r1, #1
 80083c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2224      	movs	r2, #36	; 0x24
 80083c6:	2100      	movs	r1, #0
 80083c8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	0018      	movs	r0, r3
 80083ce:	46bd      	mov	sp, r7
 80083d0:	b002      	add	sp, #8
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	fffffeff 	.word	0xfffffeff
 80083d8:	40020000 	.word	0x40020000

080083dc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083e4:	210f      	movs	r1, #15
 80083e6:	187b      	adds	r3, r7, r1
 80083e8:	2200      	movs	r2, #0
 80083ea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2225      	movs	r2, #37	; 0x25
 80083f0:	5c9b      	ldrb	r3, [r3, r2]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d006      	beq.n	8008406 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2204      	movs	r2, #4
 80083fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80083fe:	187b      	adds	r3, r7, r1
 8008400:	2201      	movs	r2, #1
 8008402:	701a      	strb	r2, [r3, #0]
 8008404:	e049      	b.n	800849a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	210e      	movs	r1, #14
 8008412:	438a      	bics	r2, r1
 8008414:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2101      	movs	r1, #1
 8008422:	438a      	bics	r2, r1
 8008424:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008430:	491d      	ldr	r1, [pc, #116]	; (80084a8 <HAL_DMA_Abort_IT+0xcc>)
 8008432:	400a      	ands	r2, r1
 8008434:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8008436:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <HAL_DMA_Abort_IT+0xd0>)
 8008438:	6859      	ldr	r1, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	221c      	movs	r2, #28
 8008440:	4013      	ands	r3, r2
 8008442:	2201      	movs	r2, #1
 8008444:	409a      	lsls	r2, r3
 8008446:	4b19      	ldr	r3, [pc, #100]	; (80084ac <HAL_DMA_Abort_IT+0xd0>)
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008454:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00c      	beq.n	8008478 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008468:	490f      	ldr	r1, [pc, #60]	; (80084a8 <HAL_DMA_Abort_IT+0xcc>)
 800846a:	400a      	ands	r2, r1
 800846c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008476:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2225      	movs	r2, #37	; 0x25
 800847c:	2101      	movs	r1, #1
 800847e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2224      	movs	r2, #36	; 0x24
 8008484:	2100      	movs	r1, #0
 8008486:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	0010      	movs	r0, r2
 8008498:	4798      	blx	r3
    }
  }
  return status;
 800849a:	230f      	movs	r3, #15
 800849c:	18fb      	adds	r3, r7, r3
 800849e:	781b      	ldrb	r3, [r3, #0]
}
 80084a0:	0018      	movs	r0, r3
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b004      	add	sp, #16
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	fffffeff 	.word	0xfffffeff
 80084ac:	40020000 	.word	0x40020000

080084b0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80084b8:	4b55      	ldr	r3, [pc, #340]	; (8008610 <HAL_DMA_IRQHandler+0x160>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	221c      	movs	r2, #28
 80084cc:	4013      	ands	r3, r2
 80084ce:	2204      	movs	r2, #4
 80084d0:	409a      	lsls	r2, r3
 80084d2:	0013      	movs	r3, r2
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4013      	ands	r3, r2
 80084d8:	d027      	beq.n	800852a <HAL_DMA_IRQHandler+0x7a>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2204      	movs	r2, #4
 80084de:	4013      	ands	r3, r2
 80084e0:	d023      	beq.n	800852a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2220      	movs	r2, #32
 80084ea:	4013      	ands	r3, r2
 80084ec:	d107      	bne.n	80084fe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2104      	movs	r1, #4
 80084fa:	438a      	bics	r2, r1
 80084fc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80084fe:	4b44      	ldr	r3, [pc, #272]	; (8008610 <HAL_DMA_IRQHandler+0x160>)
 8008500:	6859      	ldr	r1, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	221c      	movs	r2, #28
 8008508:	4013      	ands	r3, r2
 800850a:	2204      	movs	r2, #4
 800850c:	409a      	lsls	r2, r3
 800850e:	4b40      	ldr	r3, [pc, #256]	; (8008610 <HAL_DMA_IRQHandler+0x160>)
 8008510:	430a      	orrs	r2, r1
 8008512:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008518:	2b00      	cmp	r3, #0
 800851a:	d100      	bne.n	800851e <HAL_DMA_IRQHandler+0x6e>
 800851c:	e073      	b.n	8008606 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	0010      	movs	r0, r2
 8008526:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8008528:	e06d      	b.n	8008606 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	221c      	movs	r2, #28
 8008530:	4013      	ands	r3, r2
 8008532:	2202      	movs	r2, #2
 8008534:	409a      	lsls	r2, r3
 8008536:	0013      	movs	r3, r2
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4013      	ands	r3, r2
 800853c:	d02e      	beq.n	800859c <HAL_DMA_IRQHandler+0xec>
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2202      	movs	r2, #2
 8008542:	4013      	ands	r3, r2
 8008544:	d02a      	beq.n	800859c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2220      	movs	r2, #32
 800854e:	4013      	ands	r3, r2
 8008550:	d10b      	bne.n	800856a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	210a      	movs	r1, #10
 800855e:	438a      	bics	r2, r1
 8008560:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2225      	movs	r2, #37	; 0x25
 8008566:	2101      	movs	r1, #1
 8008568:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800856a:	4b29      	ldr	r3, [pc, #164]	; (8008610 <HAL_DMA_IRQHandler+0x160>)
 800856c:	6859      	ldr	r1, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	221c      	movs	r2, #28
 8008574:	4013      	ands	r3, r2
 8008576:	2202      	movs	r2, #2
 8008578:	409a      	lsls	r2, r3
 800857a:	4b25      	ldr	r3, [pc, #148]	; (8008610 <HAL_DMA_IRQHandler+0x160>)
 800857c:	430a      	orrs	r2, r1
 800857e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2224      	movs	r2, #36	; 0x24
 8008584:	2100      	movs	r1, #0
 8008586:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d03a      	beq.n	8008606 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	0010      	movs	r0, r2
 8008598:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800859a:	e034      	b.n	8008606 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	221c      	movs	r2, #28
 80085a2:	4013      	ands	r3, r2
 80085a4:	2208      	movs	r2, #8
 80085a6:	409a      	lsls	r2, r3
 80085a8:	0013      	movs	r3, r2
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4013      	ands	r3, r2
 80085ae:	d02b      	beq.n	8008608 <HAL_DMA_IRQHandler+0x158>
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2208      	movs	r2, #8
 80085b4:	4013      	ands	r3, r2
 80085b6:	d027      	beq.n	8008608 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	210e      	movs	r1, #14
 80085c4:	438a      	bics	r2, r1
 80085c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80085c8:	4b11      	ldr	r3, [pc, #68]	; (8008610 <HAL_DMA_IRQHandler+0x160>)
 80085ca:	6859      	ldr	r1, [r3, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d0:	221c      	movs	r2, #28
 80085d2:	4013      	ands	r3, r2
 80085d4:	2201      	movs	r2, #1
 80085d6:	409a      	lsls	r2, r3
 80085d8:	4b0d      	ldr	r3, [pc, #52]	; (8008610 <HAL_DMA_IRQHandler+0x160>)
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2225      	movs	r2, #37	; 0x25
 80085e8:	2101      	movs	r1, #1
 80085ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2224      	movs	r2, #36	; 0x24
 80085f0:	2100      	movs	r1, #0
 80085f2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d005      	beq.n	8008608 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	0010      	movs	r0, r2
 8008604:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	46c0      	nop			; (mov r8, r8)
}
 800860a:	46bd      	mov	sp, r7
 800860c:	b004      	add	sp, #16
 800860e:	bd80      	pop	{r7, pc}
 8008610:	40020000 	.word	0x40020000

08008614 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800862a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800863c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800863e:	4b14      	ldr	r3, [pc, #80]	; (8008690 <DMA_SetConfig+0x7c>)
 8008640:	6859      	ldr	r1, [r3, #4]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	221c      	movs	r2, #28
 8008648:	4013      	ands	r3, r2
 800864a:	2201      	movs	r2, #1
 800864c:	409a      	lsls	r2, r3
 800864e:	4b10      	ldr	r3, [pc, #64]	; (8008690 <DMA_SetConfig+0x7c>)
 8008650:	430a      	orrs	r2, r1
 8008652:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b10      	cmp	r3, #16
 8008662:	d108      	bne.n	8008676 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008674:	e007      	b.n	8008686 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	60da      	str	r2, [r3, #12]
}
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	46bd      	mov	sp, r7
 800868a:	b004      	add	sp, #16
 800868c:	bd80      	pop	{r7, pc}
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	40020000 	.word	0x40020000

08008694 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	089b      	lsrs	r3, r3, #2
 80086a2:	4a10      	ldr	r2, [pc, #64]	; (80086e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80086a4:	4694      	mov	ip, r2
 80086a6:	4463      	add	r3, ip
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	001a      	movs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	001a      	movs	r2, r3
 80086b6:	23ff      	movs	r3, #255	; 0xff
 80086b8:	4013      	ands	r3, r2
 80086ba:	3b08      	subs	r3, #8
 80086bc:	2114      	movs	r1, #20
 80086be:	0018      	movs	r0, r3
 80086c0:	f7f7 fd3a 	bl	8000138 <__udivsi3>
 80086c4:	0003      	movs	r3, r0
 80086c6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a07      	ldr	r2, [pc, #28]	; (80086e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80086cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	221f      	movs	r2, #31
 80086d2:	4013      	ands	r3, r2
 80086d4:	2201      	movs	r2, #1
 80086d6:	409a      	lsls	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80086dc:	46c0      	nop			; (mov r8, r8)
 80086de:	46bd      	mov	sp, r7
 80086e0:	b004      	add	sp, #16
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	10008200 	.word	0x10008200
 80086e8:	40020880 	.word	0x40020880

080086ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	223f      	movs	r2, #63	; 0x3f
 80086fa:	4013      	ands	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4a0a      	ldr	r2, [pc, #40]	; (800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008702:	4694      	mov	ip, r2
 8008704:	4463      	add	r3, ip
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	001a      	movs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a07      	ldr	r2, [pc, #28]	; (8008730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008712:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3b01      	subs	r3, #1
 8008718:	2203      	movs	r2, #3
 800871a:	4013      	ands	r3, r2
 800871c:	2201      	movs	r2, #1
 800871e:	409a      	lsls	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	659a      	str	r2, [r3, #88]	; 0x58
}
 8008724:	46c0      	nop			; (mov r8, r8)
 8008726:	46bd      	mov	sp, r7
 8008728:	b004      	add	sp, #16
 800872a:	bd80      	pop	{r7, pc}
 800872c:	1000823f 	.word	0x1000823f
 8008730:	40020940 	.word	0x40020940

08008734 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008734:	b5b0      	push	{r4, r5, r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	603a      	str	r2, [r7, #0]
 8008740:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008742:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <HAL_FLASH_Program+0x94>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d101      	bne.n	800874e <HAL_FLASH_Program+0x1a>
 800874a:	2302      	movs	r3, #2
 800874c:	e038      	b.n	80087c0 <HAL_FLASH_Program+0x8c>
 800874e:	4b1e      	ldr	r3, [pc, #120]	; (80087c8 <HAL_FLASH_Program+0x94>)
 8008750:	2201      	movs	r2, #1
 8008752:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008754:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <HAL_FLASH_Program+0x94>)
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800875a:	2517      	movs	r5, #23
 800875c:	197c      	adds	r4, r7, r5
 800875e:	23fa      	movs	r3, #250	; 0xfa
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	0018      	movs	r0, r3
 8008764:	f000 f874 	bl	8008850 <FLASH_WaitForLastOperation>
 8008768:	0003      	movs	r3, r0
 800876a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800876c:	197b      	adds	r3, r7, r5
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d11f      	bne.n	80087b4 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d106      	bne.n	8008788 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	0008      	movs	r0, r1
 8008782:	f000 f8b3 	bl	80088ec <FLASH_Program_DoubleWord>
 8008786:	e005      	b.n	8008794 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	0011      	movs	r1, r2
 800878e:	0018      	movs	r0, r3
 8008790:	f007 fa9a 	bl	800fcc8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008794:	2317      	movs	r3, #23
 8008796:	18fc      	adds	r4, r7, r3
 8008798:	23fa      	movs	r3, #250	; 0xfa
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	0018      	movs	r0, r3
 800879e:	f000 f857 	bl	8008850 <FLASH_WaitForLastOperation>
 80087a2:	0003      	movs	r3, r0
 80087a4:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80087a6:	4b09      	ldr	r3, [pc, #36]	; (80087cc <HAL_FLASH_Program+0x98>)
 80087a8:	695a      	ldr	r2, [r3, #20]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	43d9      	mvns	r1, r3
 80087ae:	4b07      	ldr	r3, [pc, #28]	; (80087cc <HAL_FLASH_Program+0x98>)
 80087b0:	400a      	ands	r2, r1
 80087b2:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <HAL_FLASH_Program+0x94>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80087ba:	2317      	movs	r3, #23
 80087bc:	18fb      	adds	r3, r7, r3
 80087be:	781b      	ldrb	r3, [r3, #0]
}
 80087c0:	0018      	movs	r0, r3
 80087c2:	46bd      	mov	sp, r7
 80087c4:	b006      	add	sp, #24
 80087c6:	bdb0      	pop	{r4, r5, r7, pc}
 80087c8:	200009ac 	.word	0x200009ac
 80087cc:	40022000 	.word	0x40022000

080087d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80087d6:	1dfb      	adds	r3, r7, #7
 80087d8:	2200      	movs	r2, #0
 80087da:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80087dc:	4b0b      	ldr	r3, [pc, #44]	; (800880c <HAL_FLASH_Unlock+0x3c>)
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	da0c      	bge.n	80087fe <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80087e4:	4b09      	ldr	r3, [pc, #36]	; (800880c <HAL_FLASH_Unlock+0x3c>)
 80087e6:	4a0a      	ldr	r2, [pc, #40]	; (8008810 <HAL_FLASH_Unlock+0x40>)
 80087e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80087ea:	4b08      	ldr	r3, [pc, #32]	; (800880c <HAL_FLASH_Unlock+0x3c>)
 80087ec:	4a09      	ldr	r2, [pc, #36]	; (8008814 <HAL_FLASH_Unlock+0x44>)
 80087ee:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80087f0:	4b06      	ldr	r3, [pc, #24]	; (800880c <HAL_FLASH_Unlock+0x3c>)
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	da02      	bge.n	80087fe <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80087f8:	1dfb      	adds	r3, r7, #7
 80087fa:	2201      	movs	r2, #1
 80087fc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80087fe:	1dfb      	adds	r3, r7, #7
 8008800:	781b      	ldrb	r3, [r3, #0]
}
 8008802:	0018      	movs	r0, r3
 8008804:	46bd      	mov	sp, r7
 8008806:	b002      	add	sp, #8
 8008808:	bd80      	pop	{r7, pc}
 800880a:	46c0      	nop			; (mov r8, r8)
 800880c:	40022000 	.word	0x40022000
 8008810:	45670123 	.word	0x45670123
 8008814:	cdef89ab 	.word	0xcdef89ab

08008818 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800881e:	1dfb      	adds	r3, r7, #7
 8008820:	2201      	movs	r2, #1
 8008822:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008824:	4b09      	ldr	r3, [pc, #36]	; (800884c <HAL_FLASH_Lock+0x34>)
 8008826:	695a      	ldr	r2, [r3, #20]
 8008828:	4b08      	ldr	r3, [pc, #32]	; (800884c <HAL_FLASH_Lock+0x34>)
 800882a:	2180      	movs	r1, #128	; 0x80
 800882c:	0609      	lsls	r1, r1, #24
 800882e:	430a      	orrs	r2, r1
 8008830:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8008832:	4b06      	ldr	r3, [pc, #24]	; (800884c <HAL_FLASH_Lock+0x34>)
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	2b00      	cmp	r3, #0
 8008838:	da02      	bge.n	8008840 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 800883a:	1dfb      	adds	r3, r7, #7
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008840:	1dfb      	adds	r3, r7, #7
 8008842:	781b      	ldrb	r3, [r3, #0]
}
 8008844:	0018      	movs	r0, r3
 8008846:	46bd      	mov	sp, r7
 8008848:	b002      	add	sp, #8
 800884a:	bd80      	pop	{r7, pc}
 800884c:	40022000 	.word	0x40022000

08008850 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008858:	f7fe f99a 	bl	8006b90 <HAL_GetTick>
 800885c:	0002      	movs	r2, r0
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	189b      	adds	r3, r3, r2
 8008862:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8008864:	2380      	movs	r3, #128	; 0x80
 8008866:	025b      	lsls	r3, r3, #9
 8008868:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800886a:	e007      	b.n	800887c <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 800886c:	f7fe f990 	bl	8006b90 <HAL_GetTick>
 8008870:	0002      	movs	r2, r0
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4293      	cmp	r3, r2
 8008876:	d801      	bhi.n	800887c <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e02a      	b.n	80088d2 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 800887c:	4b17      	ldr	r3, [pc, #92]	; (80088dc <FLASH_WaitForLastOperation+0x8c>)
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	4013      	ands	r3, r2
 8008884:	d1f2      	bne.n	800886c <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8008886:	4b15      	ldr	r3, [pc, #84]	; (80088dc <FLASH_WaitForLastOperation+0x8c>)
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	4a15      	ldr	r2, [pc, #84]	; (80088e0 <FLASH_WaitForLastOperation+0x90>)
 800888c:	4013      	ands	r3, r2
 800888e:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <FLASH_WaitForLastOperation+0x8c>)
 8008892:	4a14      	ldr	r2, [pc, #80]	; (80088e4 <FLASH_WaitForLastOperation+0x94>)
 8008894:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800889c:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <FLASH_WaitForLastOperation+0x98>)
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e015      	b.n	80088d2 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80088a6:	f7fe f973 	bl	8006b90 <HAL_GetTick>
 80088aa:	0002      	movs	r2, r0
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	189b      	adds	r3, r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80088b2:	e007      	b.n	80088c4 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 80088b4:	f7fe f96c 	bl	8006b90 <HAL_GetTick>
 80088b8:	0002      	movs	r2, r0
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4293      	cmp	r3, r2
 80088be:	d801      	bhi.n	80088c4 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e006      	b.n	80088d2 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80088c4:	4b05      	ldr	r3, [pc, #20]	; (80088dc <FLASH_WaitForLastOperation+0x8c>)
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	2380      	movs	r3, #128	; 0x80
 80088ca:	02db      	lsls	r3, r3, #11
 80088cc:	4013      	ands	r3, r2
 80088ce:	d1f1      	bne.n	80088b4 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	0018      	movs	r0, r3
 80088d4:	46bd      	mov	sp, r7
 80088d6:	b004      	add	sp, #16
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	46c0      	nop			; (mov r8, r8)
 80088dc:	40022000 	.word	0x40022000
 80088e0:	000083fa 	.word	0x000083fa
 80088e4:	000083fb 	.word	0x000083fb
 80088e8:	200009ac 	.word	0x200009ac

080088ec <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80088ec:	b5b0      	push	{r4, r5, r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	603a      	str	r2, [r7, #0]
 80088f6:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80088f8:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <FLASH_Program_DoubleWord+0x3c>)
 80088fa:	695a      	ldr	r2, [r3, #20]
 80088fc:	4b0a      	ldr	r3, [pc, #40]	; (8008928 <FLASH_Program_DoubleWord+0x3c>)
 80088fe:	2101      	movs	r1, #1
 8008900:	430a      	orrs	r2, r1
 8008902:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800890a:	f3bf 8f6f 	isb	sy
}
 800890e:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	001c      	movs	r4, r3
 8008914:	2300      	movs	r3, #0
 8008916:	001d      	movs	r5, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3304      	adds	r3, #4
 800891c:	0022      	movs	r2, r4
 800891e:	601a      	str	r2, [r3, #0]
}
 8008920:	46c0      	nop			; (mov r8, r8)
 8008922:	46bd      	mov	sp, r7
 8008924:	b004      	add	sp, #16
 8008926:	bdb0      	pop	{r4, r5, r7, pc}
 8008928:	40022000 	.word	0x40022000

0800892c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800892c:	b5b0      	push	{r4, r5, r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008936:	4b35      	ldr	r3, [pc, #212]	; (8008a0c <HAL_FLASHEx_Erase+0xe0>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d101      	bne.n	8008942 <HAL_FLASHEx_Erase+0x16>
 800893e:	2302      	movs	r3, #2
 8008940:	e05f      	b.n	8008a02 <HAL_FLASHEx_Erase+0xd6>
 8008942:	4b32      	ldr	r3, [pc, #200]	; (8008a0c <HAL_FLASHEx_Erase+0xe0>)
 8008944:	2201      	movs	r2, #1
 8008946:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008948:	4b30      	ldr	r3, [pc, #192]	; (8008a0c <HAL_FLASHEx_Erase+0xe0>)
 800894a:	2200      	movs	r2, #0
 800894c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800894e:	250f      	movs	r5, #15
 8008950:	197c      	adds	r4, r7, r5
 8008952:	23fa      	movs	r3, #250	; 0xfa
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	0018      	movs	r0, r3
 8008958:	f7ff ff7a 	bl	8008850 <FLASH_WaitForLastOperation>
 800895c:	0003      	movs	r3, r0
 800895e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008960:	002c      	movs	r4, r5
 8008962:	193b      	adds	r3, r7, r4
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d145      	bne.n	80089f6 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2204      	movs	r2, #4
 800896e:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b04      	cmp	r3, #4
 8008976:	d10d      	bne.n	8008994 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	0018      	movs	r0, r3
 800897e:	f000 f849 	bl	8008a14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008982:	193c      	adds	r4, r7, r4
 8008984:	23fa      	movs	r3, #250	; 0xfa
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	0018      	movs	r0, r3
 800898a:	f7ff ff61 	bl	8008850 <FLASH_WaitForLastOperation>
 800898e:	0003      	movs	r3, r0
 8008990:	7023      	strb	r3, [r4, #0]
 8008992:	e030      	b.n	80089f6 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2201      	movs	r2, #1
 8008998:	4252      	negs	r2, r2
 800899a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	60bb      	str	r3, [r7, #8]
 80089a2:	e01a      	b.n	80089da <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	0011      	movs	r1, r2
 80089ac:	0018      	movs	r0, r3
 80089ae:	f000 f845 	bl	8008a3c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80089b2:	250f      	movs	r5, #15
 80089b4:	197c      	adds	r4, r7, r5
 80089b6:	23fa      	movs	r3, #250	; 0xfa
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7ff ff48 	bl	8008850 <FLASH_WaitForLastOperation>
 80089c0:	0003      	movs	r3, r0
 80089c2:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80089c4:	197b      	adds	r3, r7, r5
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	601a      	str	r2, [r3, #0]
          break;
 80089d2:	e00a      	b.n	80089ea <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3301      	adds	r3, #1
 80089d8:	60bb      	str	r3, [r7, #8]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	18d3      	adds	r3, r2, r3
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d3dc      	bcc.n	80089a4 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80089ea:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <HAL_FLASHEx_Erase+0xe4>)
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	4b08      	ldr	r3, [pc, #32]	; (8008a10 <HAL_FLASHEx_Erase+0xe4>)
 80089f0:	2102      	movs	r1, #2
 80089f2:	438a      	bics	r2, r1
 80089f4:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80089f6:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <HAL_FLASHEx_Erase+0xe0>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80089fc:	230f      	movs	r3, #15
 80089fe:	18fb      	adds	r3, r7, r3
 8008a00:	781b      	ldrb	r3, [r3, #0]
}
 8008a02:	0018      	movs	r0, r3
 8008a04:	46bd      	mov	sp, r7
 8008a06:	b004      	add	sp, #16
 8008a08:	bdb0      	pop	{r4, r5, r7, pc}
 8008a0a:	46c0      	nop			; (mov r8, r8)
 8008a0c:	200009ac 	.word	0x200009ac
 8008a10:	40022000 	.word	0x40022000

08008a14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <FLASH_MassErase+0x24>)
 8008a1e:	695a      	ldr	r2, [r3, #20]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	4b04      	ldr	r3, [pc, #16]	; (8008a38 <FLASH_MassErase+0x24>)
 8008a26:	2180      	movs	r1, #128	; 0x80
 8008a28:	0249      	lsls	r1, r1, #9
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	615a      	str	r2, [r3, #20]
}
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	46bd      	mov	sp, r7
 8008a32:	b002      	add	sp, #8
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	46c0      	nop			; (mov r8, r8)
 8008a38:	40022000 	.word	0x40022000

08008a3c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8008a46:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <FLASH_PageErase+0x2c>)
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	4a08      	ldr	r2, [pc, #32]	; (8008a6c <FLASH_PageErase+0x30>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	00da      	lsls	r2, r3, #3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	4b03      	ldr	r3, [pc, #12]	; (8008a68 <FLASH_PageErase+0x2c>)
 8008a5a:	4905      	ldr	r1, [pc, #20]	; (8008a70 <FLASH_PageErase+0x34>)
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	615a      	str	r2, [r3, #20]
}
 8008a60:	46c0      	nop			; (mov r8, r8)
 8008a62:	46bd      	mov	sp, r7
 8008a64:	b004      	add	sp, #16
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	40022000 	.word	0x40022000
 8008a6c:	ffffe007 	.word	0xffffe007
 8008a70:	00010002 	.word	0x00010002

08008a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a82:	e147      	b.n	8008d14 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2101      	movs	r1, #1
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	4091      	lsls	r1, r2
 8008a8e:	000a      	movs	r2, r1
 8008a90:	4013      	ands	r3, r2
 8008a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d100      	bne.n	8008a9c <HAL_GPIO_Init+0x28>
 8008a9a:	e138      	b.n	8008d0e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	2203      	movs	r2, #3
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d005      	beq.n	8008ab4 <HAL_GPIO_Init+0x40>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2203      	movs	r2, #3
 8008aae:	4013      	ands	r3, r2
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d130      	bne.n	8008b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	2203      	movs	r2, #3
 8008ac0:	409a      	lsls	r2, r3
 8008ac2:	0013      	movs	r3, r2
 8008ac4:	43da      	mvns	r2, r3
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	409a      	lsls	r2, r3
 8008ad6:	0013      	movs	r3, r2
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008aea:	2201      	movs	r2, #1
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	409a      	lsls	r2, r3
 8008af0:	0013      	movs	r3, r2
 8008af2:	43da      	mvns	r2, r3
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	4013      	ands	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	091b      	lsrs	r3, r3, #4
 8008b00:	2201      	movs	r2, #1
 8008b02:	401a      	ands	r2, r3
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	409a      	lsls	r2, r3
 8008b08:	0013      	movs	r3, r2
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d017      	beq.n	8008b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	2203      	movs	r2, #3
 8008b2e:	409a      	lsls	r2, r3
 8008b30:	0013      	movs	r3, r2
 8008b32:	43da      	mvns	r2, r3
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	4013      	ands	r3, r2
 8008b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	689a      	ldr	r2, [r3, #8]
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	409a      	lsls	r2, r3
 8008b44:	0013      	movs	r3, r2
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2203      	movs	r2, #3
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d123      	bne.n	8008ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	08da      	lsrs	r2, r3, #3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3208      	adds	r2, #8
 8008b66:	0092      	lsls	r2, r2, #2
 8008b68:	58d3      	ldr	r3, [r2, r3]
 8008b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2207      	movs	r2, #7
 8008b70:	4013      	ands	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	220f      	movs	r2, #15
 8008b76:	409a      	lsls	r2, r3
 8008b78:	0013      	movs	r3, r2
 8008b7a:	43da      	mvns	r2, r3
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	691a      	ldr	r2, [r3, #16]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2107      	movs	r1, #7
 8008b8a:	400b      	ands	r3, r1
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	409a      	lsls	r2, r3
 8008b90:	0013      	movs	r3, r2
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	08da      	lsrs	r2, r3, #3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3208      	adds	r2, #8
 8008ba0:	0092      	lsls	r2, r2, #2
 8008ba2:	6939      	ldr	r1, [r7, #16]
 8008ba4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	409a      	lsls	r2, r3
 8008bb4:	0013      	movs	r3, r2
 8008bb6:	43da      	mvns	r2, r3
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	401a      	ands	r2, r3
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	409a      	lsls	r2, r3
 8008bcc:	0013      	movs	r3, r2
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	23c0      	movs	r3, #192	; 0xc0
 8008be0:	029b      	lsls	r3, r3, #10
 8008be2:	4013      	ands	r3, r2
 8008be4:	d100      	bne.n	8008be8 <HAL_GPIO_Init+0x174>
 8008be6:	e092      	b.n	8008d0e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008be8:	4a50      	ldr	r2, [pc, #320]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	089b      	lsrs	r3, r3, #2
 8008bee:	3318      	adds	r3, #24
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	589b      	ldr	r3, [r3, r2]
 8008bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	220f      	movs	r2, #15
 8008c00:	409a      	lsls	r2, r3
 8008c02:	0013      	movs	r3, r2
 8008c04:	43da      	mvns	r2, r3
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4013      	ands	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	23a0      	movs	r3, #160	; 0xa0
 8008c10:	05db      	lsls	r3, r3, #23
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d013      	beq.n	8008c3e <HAL_GPIO_Init+0x1ca>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a45      	ldr	r2, [pc, #276]	; (8008d30 <HAL_GPIO_Init+0x2bc>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00d      	beq.n	8008c3a <HAL_GPIO_Init+0x1c6>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a44      	ldr	r2, [pc, #272]	; (8008d34 <HAL_GPIO_Init+0x2c0>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d007      	beq.n	8008c36 <HAL_GPIO_Init+0x1c2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a43      	ldr	r2, [pc, #268]	; (8008d38 <HAL_GPIO_Init+0x2c4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d101      	bne.n	8008c32 <HAL_GPIO_Init+0x1be>
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e006      	b.n	8008c40 <HAL_GPIO_Init+0x1cc>
 8008c32:	2305      	movs	r3, #5
 8008c34:	e004      	b.n	8008c40 <HAL_GPIO_Init+0x1cc>
 8008c36:	2302      	movs	r3, #2
 8008c38:	e002      	b.n	8008c40 <HAL_GPIO_Init+0x1cc>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <HAL_GPIO_Init+0x1cc>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	2103      	movs	r1, #3
 8008c44:	400a      	ands	r2, r1
 8008c46:	00d2      	lsls	r2, r2, #3
 8008c48:	4093      	lsls	r3, r2
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008c50:	4936      	ldr	r1, [pc, #216]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	089b      	lsrs	r3, r3, #2
 8008c56:	3318      	adds	r3, #24
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c5e:	4b33      	ldr	r3, [pc, #204]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	43da      	mvns	r2, r3
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	2380      	movs	r3, #128	; 0x80
 8008c74:	035b      	lsls	r3, r3, #13
 8008c76:	4013      	ands	r3, r2
 8008c78:	d003      	beq.n	8008c82 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008c82:	4b2a      	ldr	r3, [pc, #168]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008c88:	4b28      	ldr	r3, [pc, #160]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	43da      	mvns	r2, r3
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	4013      	ands	r3, r2
 8008c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	2380      	movs	r3, #128	; 0x80
 8008c9e:	039b      	lsls	r3, r3, #14
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	d003      	beq.n	8008cac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008cac:	4b1f      	ldr	r3, [pc, #124]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008cb2:	4a1e      	ldr	r2, [pc, #120]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008cb4:	2384      	movs	r3, #132	; 0x84
 8008cb6:	58d3      	ldr	r3, [r2, r3]
 8008cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	43da      	mvns	r2, r3
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	2380      	movs	r3, #128	; 0x80
 8008cca:	029b      	lsls	r3, r3, #10
 8008ccc:	4013      	ands	r3, r2
 8008cce:	d003      	beq.n	8008cd8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008cd8:	4914      	ldr	r1, [pc, #80]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008cda:	2284      	movs	r2, #132	; 0x84
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008ce0:	4a12      	ldr	r2, [pc, #72]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008ce2:	2380      	movs	r3, #128	; 0x80
 8008ce4:	58d3      	ldr	r3, [r2, r3]
 8008ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	43da      	mvns	r2, r3
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	2380      	movs	r3, #128	; 0x80
 8008cf8:	025b      	lsls	r3, r3, #9
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	d003      	beq.n	8008d06 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008d06:	4909      	ldr	r1, [pc, #36]	; (8008d2c <HAL_GPIO_Init+0x2b8>)
 8008d08:	2280      	movs	r2, #128	; 0x80
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	3301      	adds	r3, #1
 8008d12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	40da      	lsrs	r2, r3
 8008d1c:	1e13      	subs	r3, r2, #0
 8008d1e:	d000      	beq.n	8008d22 <HAL_GPIO_Init+0x2ae>
 8008d20:	e6b0      	b.n	8008a84 <HAL_GPIO_Init+0x10>
  }
}
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	46c0      	nop			; (mov r8, r8)
 8008d26:	46bd      	mov	sp, r7
 8008d28:	b006      	add	sp, #24
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	40021800 	.word	0x40021800
 8008d30:	50000400 	.word	0x50000400
 8008d34:	50000800 	.word	0x50000800
 8008d38:	50000c00 	.word	0x50000c00

08008d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	000a      	movs	r2, r1
 8008d46:	1cbb      	adds	r3, r7, #2
 8008d48:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	1cba      	adds	r2, r7, #2
 8008d50:	8812      	ldrh	r2, [r2, #0]
 8008d52:	4013      	ands	r3, r2
 8008d54:	d004      	beq.n	8008d60 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008d56:	230f      	movs	r3, #15
 8008d58:	18fb      	adds	r3, r7, r3
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	e003      	b.n	8008d68 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d60:	230f      	movs	r3, #15
 8008d62:	18fb      	adds	r3, r7, r3
 8008d64:	2200      	movs	r2, #0
 8008d66:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008d68:	230f      	movs	r3, #15
 8008d6a:	18fb      	adds	r3, r7, r3
 8008d6c:	781b      	ldrb	r3, [r3, #0]
}
 8008d6e:	0018      	movs	r0, r3
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b004      	add	sp, #16
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	0008      	movs	r0, r1
 8008d80:	0011      	movs	r1, r2
 8008d82:	1cbb      	adds	r3, r7, #2
 8008d84:	1c02      	adds	r2, r0, #0
 8008d86:	801a      	strh	r2, [r3, #0]
 8008d88:	1c7b      	adds	r3, r7, #1
 8008d8a:	1c0a      	adds	r2, r1, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d8e:	1c7b      	adds	r3, r7, #1
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008d96:	1cbb      	adds	r3, r7, #2
 8008d98:	881a      	ldrh	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008d9e:	e003      	b.n	8008da8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008da0:	1cbb      	adds	r3, r7, #2
 8008da2:	881a      	ldrh	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008da8:	46c0      	nop			; (mov r8, r8)
 8008daa:	46bd      	mov	sp, r7
 8008dac:	b002      	add	sp, #8
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e082      	b.n	8008ec8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2241      	movs	r2, #65	; 0x41
 8008dc6:	5c9b      	ldrb	r3, [r3, r2]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d107      	bne.n	8008dde <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2240      	movs	r2, #64	; 0x40
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f7fd f883 	bl	8005ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2241      	movs	r2, #65	; 0x41
 8008de2:	2124      	movs	r1, #36	; 0x24
 8008de4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2101      	movs	r1, #1
 8008df2:	438a      	bics	r2, r1
 8008df4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4934      	ldr	r1, [pc, #208]	; (8008ed0 <HAL_I2C_Init+0x120>)
 8008e00:	400a      	ands	r2, r1
 8008e02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4931      	ldr	r1, [pc, #196]	; (8008ed4 <HAL_I2C_Init+0x124>)
 8008e10:	400a      	ands	r2, r1
 8008e12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d108      	bne.n	8008e2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2180      	movs	r1, #128	; 0x80
 8008e26:	0209      	lsls	r1, r1, #8
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	609a      	str	r2, [r3, #8]
 8008e2c:	e007      	b.n	8008e3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	689a      	ldr	r2, [r3, #8]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2184      	movs	r1, #132	; 0x84
 8008e38:	0209      	lsls	r1, r1, #8
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d104      	bne.n	8008e50 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2280      	movs	r2, #128	; 0x80
 8008e4c:	0112      	lsls	r2, r2, #4
 8008e4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	491f      	ldr	r1, [pc, #124]	; (8008ed8 <HAL_I2C_Init+0x128>)
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	491a      	ldr	r1, [pc, #104]	; (8008ed4 <HAL_I2C_Init+0x124>)
 8008e6c:	400a      	ands	r2, r1
 8008e6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691a      	ldr	r2, [r3, #16]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69d9      	ldr	r1, [r3, #28]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1a      	ldr	r2, [r3, #32]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2241      	movs	r2, #65	; 0x41
 8008eb4:	2120      	movs	r1, #32
 8008eb6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2242      	movs	r2, #66	; 0x42
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	0018      	movs	r0, r3
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	b002      	add	sp, #8
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	f0ffffff 	.word	0xf0ffffff
 8008ed4:	ffff7fff 	.word	0xffff7fff
 8008ed8:	02008000 	.word	0x02008000

08008edc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008edc:	b590      	push	{r4, r7, lr}
 8008ede:	b089      	sub	sp, #36	; 0x24
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	0008      	movs	r0, r1
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	0019      	movs	r1, r3
 8008eea:	230a      	movs	r3, #10
 8008eec:	18fb      	adds	r3, r7, r3
 8008eee:	1c02      	adds	r2, r0, #0
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	2308      	movs	r3, #8
 8008ef4:	18fb      	adds	r3, r7, r3
 8008ef6:	1c0a      	adds	r2, r1, #0
 8008ef8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2241      	movs	r2, #65	; 0x41
 8008efe:	5c9b      	ldrb	r3, [r3, r2]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b20      	cmp	r3, #32
 8008f04:	d000      	beq.n	8008f08 <HAL_I2C_Master_Transmit+0x2c>
 8008f06:	e0e7      	b.n	80090d8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2240      	movs	r2, #64	; 0x40
 8008f0c:	5c9b      	ldrb	r3, [r3, r2]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d101      	bne.n	8008f16 <HAL_I2C_Master_Transmit+0x3a>
 8008f12:	2302      	movs	r3, #2
 8008f14:	e0e1      	b.n	80090da <HAL_I2C_Master_Transmit+0x1fe>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2240      	movs	r2, #64	; 0x40
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f1e:	f7fd fe37 	bl	8006b90 <HAL_GetTick>
 8008f22:	0003      	movs	r3, r0
 8008f24:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f26:	2380      	movs	r3, #128	; 0x80
 8008f28:	0219      	lsls	r1, r3, #8
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	2319      	movs	r3, #25
 8008f32:	2201      	movs	r2, #1
 8008f34:	f000 fc24 	bl	8009780 <I2C_WaitOnFlagUntilTimeout>
 8008f38:	1e03      	subs	r3, r0, #0
 8008f3a:	d001      	beq.n	8008f40 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e0cc      	b.n	80090da <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2241      	movs	r2, #65	; 0x41
 8008f44:	2121      	movs	r1, #33	; 0x21
 8008f46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2242      	movs	r2, #66	; 0x42
 8008f4c:	2110      	movs	r1, #16
 8008f4e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2208      	movs	r2, #8
 8008f60:	18ba      	adds	r2, r7, r2
 8008f62:	8812      	ldrh	r2, [r2, #0]
 8008f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2bff      	cmp	r3, #255	; 0xff
 8008f74:	d911      	bls.n	8008f9a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	22ff      	movs	r2, #255	; 0xff
 8008f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	2380      	movs	r3, #128	; 0x80
 8008f84:	045c      	lsls	r4, r3, #17
 8008f86:	230a      	movs	r3, #10
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	8819      	ldrh	r1, [r3, #0]
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	4b55      	ldr	r3, [pc, #340]	; (80090e4 <HAL_I2C_Master_Transmit+0x208>)
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	0023      	movs	r3, r4
 8008f94:	f000 fdae 	bl	8009af4 <I2C_TransferConfig>
 8008f98:	e075      	b.n	8009086 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	2380      	movs	r3, #128	; 0x80
 8008fac:	049c      	lsls	r4, r3, #18
 8008fae:	230a      	movs	r3, #10
 8008fb0:	18fb      	adds	r3, r7, r3
 8008fb2:	8819      	ldrh	r1, [r3, #0]
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	4b4b      	ldr	r3, [pc, #300]	; (80090e4 <HAL_I2C_Master_Transmit+0x208>)
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	0023      	movs	r3, r4
 8008fbc:	f000 fd9a 	bl	8009af4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008fc0:	e061      	b.n	8009086 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f000 fc18 	bl	80097fe <I2C_WaitOnTXISFlagUntilTimeout>
 8008fce:	1e03      	subs	r3, r0, #0
 8008fd0:	d001      	beq.n	8008fd6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e081      	b.n	80090da <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	781a      	ldrb	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ffe:	3b01      	subs	r3, #1
 8009000:	b29a      	uxth	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900a:	b29b      	uxth	r3, r3
 800900c:	2b00      	cmp	r3, #0
 800900e:	d03a      	beq.n	8009086 <HAL_I2C_Master_Transmit+0x1aa>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009014:	2b00      	cmp	r3, #0
 8009016:	d136      	bne.n	8009086 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	0013      	movs	r3, r2
 8009022:	2200      	movs	r2, #0
 8009024:	2180      	movs	r1, #128	; 0x80
 8009026:	f000 fbab 	bl	8009780 <I2C_WaitOnFlagUntilTimeout>
 800902a:	1e03      	subs	r3, r0, #0
 800902c:	d001      	beq.n	8009032 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e053      	b.n	80090da <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009036:	b29b      	uxth	r3, r3
 8009038:	2bff      	cmp	r3, #255	; 0xff
 800903a:	d911      	bls.n	8009060 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	22ff      	movs	r2, #255	; 0xff
 8009040:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009046:	b2da      	uxtb	r2, r3
 8009048:	2380      	movs	r3, #128	; 0x80
 800904a:	045c      	lsls	r4, r3, #17
 800904c:	230a      	movs	r3, #10
 800904e:	18fb      	adds	r3, r7, r3
 8009050:	8819      	ldrh	r1, [r3, #0]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	2300      	movs	r3, #0
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	0023      	movs	r3, r4
 800905a:	f000 fd4b 	bl	8009af4 <I2C_TransferConfig>
 800905e:	e012      	b.n	8009086 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009064:	b29a      	uxth	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800906e:	b2da      	uxtb	r2, r3
 8009070:	2380      	movs	r3, #128	; 0x80
 8009072:	049c      	lsls	r4, r3, #18
 8009074:	230a      	movs	r3, #10
 8009076:	18fb      	adds	r3, r7, r3
 8009078:	8819      	ldrh	r1, [r3, #0]
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	2300      	movs	r3, #0
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	0023      	movs	r3, r4
 8009082:	f000 fd37 	bl	8009af4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800908a:	b29b      	uxth	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d198      	bne.n	8008fc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	0018      	movs	r0, r3
 8009098:	f000 fbf0 	bl	800987c <I2C_WaitOnSTOPFlagUntilTimeout>
 800909c:	1e03      	subs	r3, r0, #0
 800909e:	d001      	beq.n	80090a4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e01a      	b.n	80090da <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2220      	movs	r2, #32
 80090aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	490c      	ldr	r1, [pc, #48]	; (80090e8 <HAL_I2C_Master_Transmit+0x20c>)
 80090b8:	400a      	ands	r2, r1
 80090ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2241      	movs	r2, #65	; 0x41
 80090c0:	2120      	movs	r1, #32
 80090c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2242      	movs	r2, #66	; 0x42
 80090c8:	2100      	movs	r1, #0
 80090ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2240      	movs	r2, #64	; 0x40
 80090d0:	2100      	movs	r1, #0
 80090d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	e000      	b.n	80090da <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80090d8:	2302      	movs	r3, #2
  }
}
 80090da:	0018      	movs	r0, r3
 80090dc:	46bd      	mov	sp, r7
 80090de:	b007      	add	sp, #28
 80090e0:	bd90      	pop	{r4, r7, pc}
 80090e2:	46c0      	nop			; (mov r8, r8)
 80090e4:	80002000 	.word	0x80002000
 80090e8:	fe00e800 	.word	0xfe00e800

080090ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b089      	sub	sp, #36	; 0x24
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	000c      	movs	r4, r1
 80090f6:	0010      	movs	r0, r2
 80090f8:	0019      	movs	r1, r3
 80090fa:	230a      	movs	r3, #10
 80090fc:	18fb      	adds	r3, r7, r3
 80090fe:	1c22      	adds	r2, r4, #0
 8009100:	801a      	strh	r2, [r3, #0]
 8009102:	2308      	movs	r3, #8
 8009104:	18fb      	adds	r3, r7, r3
 8009106:	1c02      	adds	r2, r0, #0
 8009108:	801a      	strh	r2, [r3, #0]
 800910a:	1dbb      	adds	r3, r7, #6
 800910c:	1c0a      	adds	r2, r1, #0
 800910e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2241      	movs	r2, #65	; 0x41
 8009114:	5c9b      	ldrb	r3, [r3, r2]
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b20      	cmp	r3, #32
 800911a:	d000      	beq.n	800911e <HAL_I2C_Mem_Write+0x32>
 800911c:	e10c      	b.n	8009338 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	2b00      	cmp	r3, #0
 8009122:	d004      	beq.n	800912e <HAL_I2C_Mem_Write+0x42>
 8009124:	232c      	movs	r3, #44	; 0x2c
 8009126:	18fb      	adds	r3, r7, r3
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d105      	bne.n	800913a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2280      	movs	r2, #128	; 0x80
 8009132:	0092      	lsls	r2, r2, #2
 8009134:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e0ff      	b.n	800933a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2240      	movs	r2, #64	; 0x40
 800913e:	5c9b      	ldrb	r3, [r3, r2]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d101      	bne.n	8009148 <HAL_I2C_Mem_Write+0x5c>
 8009144:	2302      	movs	r3, #2
 8009146:	e0f8      	b.n	800933a <HAL_I2C_Mem_Write+0x24e>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2240      	movs	r2, #64	; 0x40
 800914c:	2101      	movs	r1, #1
 800914e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009150:	f7fd fd1e 	bl	8006b90 <HAL_GetTick>
 8009154:	0003      	movs	r3, r0
 8009156:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009158:	2380      	movs	r3, #128	; 0x80
 800915a:	0219      	lsls	r1, r3, #8
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	2319      	movs	r3, #25
 8009164:	2201      	movs	r2, #1
 8009166:	f000 fb0b 	bl	8009780 <I2C_WaitOnFlagUntilTimeout>
 800916a:	1e03      	subs	r3, r0, #0
 800916c:	d001      	beq.n	8009172 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e0e3      	b.n	800933a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2241      	movs	r2, #65	; 0x41
 8009176:	2121      	movs	r1, #33	; 0x21
 8009178:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2242      	movs	r2, #66	; 0x42
 800917e:	2140      	movs	r1, #64	; 0x40
 8009180:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800918c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	222c      	movs	r2, #44	; 0x2c
 8009192:	18ba      	adds	r2, r7, r2
 8009194:	8812      	ldrh	r2, [r2, #0]
 8009196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800919e:	1dbb      	adds	r3, r7, #6
 80091a0:	881c      	ldrh	r4, [r3, #0]
 80091a2:	2308      	movs	r3, #8
 80091a4:	18fb      	adds	r3, r7, r3
 80091a6:	881a      	ldrh	r2, [r3, #0]
 80091a8:	230a      	movs	r3, #10
 80091aa:	18fb      	adds	r3, r7, r3
 80091ac:	8819      	ldrh	r1, [r3, #0]
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	0023      	movs	r3, r4
 80091ba:	f000 f9f9 	bl	80095b0 <I2C_RequestMemoryWrite>
 80091be:	1e03      	subs	r3, r0, #0
 80091c0:	d005      	beq.n	80091ce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2240      	movs	r2, #64	; 0x40
 80091c6:	2100      	movs	r1, #0
 80091c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e0b5      	b.n	800933a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	2bff      	cmp	r3, #255	; 0xff
 80091d6:	d911      	bls.n	80091fc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	22ff      	movs	r2, #255	; 0xff
 80091dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	2380      	movs	r3, #128	; 0x80
 80091e6:	045c      	lsls	r4, r3, #17
 80091e8:	230a      	movs	r3, #10
 80091ea:	18fb      	adds	r3, r7, r3
 80091ec:	8819      	ldrh	r1, [r3, #0]
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	2300      	movs	r3, #0
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	0023      	movs	r3, r4
 80091f6:	f000 fc7d 	bl	8009af4 <I2C_TransferConfig>
 80091fa:	e012      	b.n	8009222 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009200:	b29a      	uxth	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800920a:	b2da      	uxtb	r2, r3
 800920c:	2380      	movs	r3, #128	; 0x80
 800920e:	049c      	lsls	r4, r3, #18
 8009210:	230a      	movs	r3, #10
 8009212:	18fb      	adds	r3, r7, r3
 8009214:	8819      	ldrh	r1, [r3, #0]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	2300      	movs	r3, #0
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	0023      	movs	r3, r4
 800921e:	f000 fc69 	bl	8009af4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	0018      	movs	r0, r3
 800922a:	f000 fae8 	bl	80097fe <I2C_WaitOnTXISFlagUntilTimeout>
 800922e:	1e03      	subs	r3, r0, #0
 8009230:	d001      	beq.n	8009236 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e081      	b.n	800933a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	781a      	ldrb	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009250:	b29b      	uxth	r3, r3
 8009252:	3b01      	subs	r3, #1
 8009254:	b29a      	uxth	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d03a      	beq.n	80092e6 <HAL_I2C_Mem_Write+0x1fa>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009274:	2b00      	cmp	r3, #0
 8009276:	d136      	bne.n	80092e6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	0013      	movs	r3, r2
 8009282:	2200      	movs	r2, #0
 8009284:	2180      	movs	r1, #128	; 0x80
 8009286:	f000 fa7b 	bl	8009780 <I2C_WaitOnFlagUntilTimeout>
 800928a:	1e03      	subs	r3, r0, #0
 800928c:	d001      	beq.n	8009292 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e053      	b.n	800933a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009296:	b29b      	uxth	r3, r3
 8009298:	2bff      	cmp	r3, #255	; 0xff
 800929a:	d911      	bls.n	80092c0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	22ff      	movs	r2, #255	; 0xff
 80092a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	2380      	movs	r3, #128	; 0x80
 80092aa:	045c      	lsls	r4, r3, #17
 80092ac:	230a      	movs	r3, #10
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	8819      	ldrh	r1, [r3, #0]
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	2300      	movs	r3, #0
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	0023      	movs	r3, r4
 80092ba:	f000 fc1b 	bl	8009af4 <I2C_TransferConfig>
 80092be:	e012      	b.n	80092e6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	2380      	movs	r3, #128	; 0x80
 80092d2:	049c      	lsls	r4, r3, #18
 80092d4:	230a      	movs	r3, #10
 80092d6:	18fb      	adds	r3, r7, r3
 80092d8:	8819      	ldrh	r1, [r3, #0]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	2300      	movs	r3, #0
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	0023      	movs	r3, r4
 80092e2:	f000 fc07 	bl	8009af4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d198      	bne.n	8009222 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	0018      	movs	r0, r3
 80092f8:	f000 fac0 	bl	800987c <I2C_WaitOnSTOPFlagUntilTimeout>
 80092fc:	1e03      	subs	r3, r0, #0
 80092fe:	d001      	beq.n	8009304 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e01a      	b.n	800933a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2220      	movs	r2, #32
 800930a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	490b      	ldr	r1, [pc, #44]	; (8009344 <HAL_I2C_Mem_Write+0x258>)
 8009318:	400a      	ands	r2, r1
 800931a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2241      	movs	r2, #65	; 0x41
 8009320:	2120      	movs	r1, #32
 8009322:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2242      	movs	r2, #66	; 0x42
 8009328:	2100      	movs	r1, #0
 800932a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2240      	movs	r2, #64	; 0x40
 8009330:	2100      	movs	r1, #0
 8009332:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	e000      	b.n	800933a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8009338:	2302      	movs	r3, #2
  }
}
 800933a:	0018      	movs	r0, r3
 800933c:	46bd      	mov	sp, r7
 800933e:	b007      	add	sp, #28
 8009340:	bd90      	pop	{r4, r7, pc}
 8009342:	46c0      	nop			; (mov r8, r8)
 8009344:	fe00e800 	.word	0xfe00e800

08009348 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009348:	b590      	push	{r4, r7, lr}
 800934a:	b089      	sub	sp, #36	; 0x24
 800934c:	af02      	add	r7, sp, #8
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	000c      	movs	r4, r1
 8009352:	0010      	movs	r0, r2
 8009354:	0019      	movs	r1, r3
 8009356:	230a      	movs	r3, #10
 8009358:	18fb      	adds	r3, r7, r3
 800935a:	1c22      	adds	r2, r4, #0
 800935c:	801a      	strh	r2, [r3, #0]
 800935e:	2308      	movs	r3, #8
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	1c02      	adds	r2, r0, #0
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	1dbb      	adds	r3, r7, #6
 8009368:	1c0a      	adds	r2, r1, #0
 800936a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2241      	movs	r2, #65	; 0x41
 8009370:	5c9b      	ldrb	r3, [r3, r2]
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b20      	cmp	r3, #32
 8009376:	d000      	beq.n	800937a <HAL_I2C_Mem_Read+0x32>
 8009378:	e110      	b.n	800959c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	2b00      	cmp	r3, #0
 800937e:	d004      	beq.n	800938a <HAL_I2C_Mem_Read+0x42>
 8009380:	232c      	movs	r3, #44	; 0x2c
 8009382:	18fb      	adds	r3, r7, r3
 8009384:	881b      	ldrh	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d105      	bne.n	8009396 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2280      	movs	r2, #128	; 0x80
 800938e:	0092      	lsls	r2, r2, #2
 8009390:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e103      	b.n	800959e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2240      	movs	r2, #64	; 0x40
 800939a:	5c9b      	ldrb	r3, [r3, r2]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <HAL_I2C_Mem_Read+0x5c>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e0fc      	b.n	800959e <HAL_I2C_Mem_Read+0x256>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2240      	movs	r2, #64	; 0x40
 80093a8:	2101      	movs	r1, #1
 80093aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093ac:	f7fd fbf0 	bl	8006b90 <HAL_GetTick>
 80093b0:	0003      	movs	r3, r0
 80093b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093b4:	2380      	movs	r3, #128	; 0x80
 80093b6:	0219      	lsls	r1, r3, #8
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	2319      	movs	r3, #25
 80093c0:	2201      	movs	r2, #1
 80093c2:	f000 f9dd 	bl	8009780 <I2C_WaitOnFlagUntilTimeout>
 80093c6:	1e03      	subs	r3, r0, #0
 80093c8:	d001      	beq.n	80093ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e0e7      	b.n	800959e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2241      	movs	r2, #65	; 0x41
 80093d2:	2122      	movs	r1, #34	; 0x22
 80093d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2242      	movs	r2, #66	; 0x42
 80093da:	2140      	movs	r1, #64	; 0x40
 80093dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	222c      	movs	r2, #44	; 0x2c
 80093ee:	18ba      	adds	r2, r7, r2
 80093f0:	8812      	ldrh	r2, [r2, #0]
 80093f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093fa:	1dbb      	adds	r3, r7, #6
 80093fc:	881c      	ldrh	r4, [r3, #0]
 80093fe:	2308      	movs	r3, #8
 8009400:	18fb      	adds	r3, r7, r3
 8009402:	881a      	ldrh	r2, [r3, #0]
 8009404:	230a      	movs	r3, #10
 8009406:	18fb      	adds	r3, r7, r3
 8009408:	8819      	ldrh	r1, [r3, #0]
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	0023      	movs	r3, r4
 8009416:	f000 f92f 	bl	8009678 <I2C_RequestMemoryRead>
 800941a:	1e03      	subs	r3, r0, #0
 800941c:	d005      	beq.n	800942a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2240      	movs	r2, #64	; 0x40
 8009422:	2100      	movs	r1, #0
 8009424:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e0b9      	b.n	800959e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800942e:	b29b      	uxth	r3, r3
 8009430:	2bff      	cmp	r3, #255	; 0xff
 8009432:	d911      	bls.n	8009458 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	22ff      	movs	r2, #255	; 0xff
 8009438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800943e:	b2da      	uxtb	r2, r3
 8009440:	2380      	movs	r3, #128	; 0x80
 8009442:	045c      	lsls	r4, r3, #17
 8009444:	230a      	movs	r3, #10
 8009446:	18fb      	adds	r3, r7, r3
 8009448:	8819      	ldrh	r1, [r3, #0]
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	4b56      	ldr	r3, [pc, #344]	; (80095a8 <HAL_I2C_Mem_Read+0x260>)
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	0023      	movs	r3, r4
 8009452:	f000 fb4f 	bl	8009af4 <I2C_TransferConfig>
 8009456:	e012      	b.n	800947e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945c:	b29a      	uxth	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009466:	b2da      	uxtb	r2, r3
 8009468:	2380      	movs	r3, #128	; 0x80
 800946a:	049c      	lsls	r4, r3, #18
 800946c:	230a      	movs	r3, #10
 800946e:	18fb      	adds	r3, r7, r3
 8009470:	8819      	ldrh	r1, [r3, #0]
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	4b4c      	ldr	r3, [pc, #304]	; (80095a8 <HAL_I2C_Mem_Read+0x260>)
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	0023      	movs	r3, r4
 800947a:	f000 fb3b 	bl	8009af4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800947e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	0013      	movs	r3, r2
 8009488:	2200      	movs	r2, #0
 800948a:	2104      	movs	r1, #4
 800948c:	f000 f978 	bl	8009780 <I2C_WaitOnFlagUntilTimeout>
 8009490:	1e03      	subs	r3, r0, #0
 8009492:	d001      	beq.n	8009498 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e082      	b.n	800959e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	b2d2      	uxtb	r2, r2
 80094a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	3b01      	subs	r3, #1
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d03a      	beq.n	800954a <HAL_I2C_Mem_Read+0x202>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d136      	bne.n	800954a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	0013      	movs	r3, r2
 80094e6:	2200      	movs	r2, #0
 80094e8:	2180      	movs	r1, #128	; 0x80
 80094ea:	f000 f949 	bl	8009780 <I2C_WaitOnFlagUntilTimeout>
 80094ee:	1e03      	subs	r3, r0, #0
 80094f0:	d001      	beq.n	80094f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e053      	b.n	800959e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2bff      	cmp	r3, #255	; 0xff
 80094fe:	d911      	bls.n	8009524 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	22ff      	movs	r2, #255	; 0xff
 8009504:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950a:	b2da      	uxtb	r2, r3
 800950c:	2380      	movs	r3, #128	; 0x80
 800950e:	045c      	lsls	r4, r3, #17
 8009510:	230a      	movs	r3, #10
 8009512:	18fb      	adds	r3, r7, r3
 8009514:	8819      	ldrh	r1, [r3, #0]
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	2300      	movs	r3, #0
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	0023      	movs	r3, r4
 800951e:	f000 fae9 	bl	8009af4 <I2C_TransferConfig>
 8009522:	e012      	b.n	800954a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009532:	b2da      	uxtb	r2, r3
 8009534:	2380      	movs	r3, #128	; 0x80
 8009536:	049c      	lsls	r4, r3, #18
 8009538:	230a      	movs	r3, #10
 800953a:	18fb      	adds	r3, r7, r3
 800953c:	8819      	ldrh	r1, [r3, #0]
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	2300      	movs	r3, #0
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	0023      	movs	r3, r4
 8009546:	f000 fad5 	bl	8009af4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954e:	b29b      	uxth	r3, r3
 8009550:	2b00      	cmp	r3, #0
 8009552:	d194      	bne.n	800947e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	0018      	movs	r0, r3
 800955c:	f000 f98e 	bl	800987c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009560:	1e03      	subs	r3, r0, #0
 8009562:	d001      	beq.n	8009568 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e01a      	b.n	800959e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2220      	movs	r2, #32
 800956e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	490c      	ldr	r1, [pc, #48]	; (80095ac <HAL_I2C_Mem_Read+0x264>)
 800957c:	400a      	ands	r2, r1
 800957e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2241      	movs	r2, #65	; 0x41
 8009584:	2120      	movs	r1, #32
 8009586:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2242      	movs	r2, #66	; 0x42
 800958c:	2100      	movs	r1, #0
 800958e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2240      	movs	r2, #64	; 0x40
 8009594:	2100      	movs	r1, #0
 8009596:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	e000      	b.n	800959e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800959c:	2302      	movs	r3, #2
  }
}
 800959e:	0018      	movs	r0, r3
 80095a0:	46bd      	mov	sp, r7
 80095a2:	b007      	add	sp, #28
 80095a4:	bd90      	pop	{r4, r7, pc}
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	80002400 	.word	0x80002400
 80095ac:	fe00e800 	.word	0xfe00e800

080095b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80095b0:	b5b0      	push	{r4, r5, r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af02      	add	r7, sp, #8
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	000c      	movs	r4, r1
 80095ba:	0010      	movs	r0, r2
 80095bc:	0019      	movs	r1, r3
 80095be:	250a      	movs	r5, #10
 80095c0:	197b      	adds	r3, r7, r5
 80095c2:	1c22      	adds	r2, r4, #0
 80095c4:	801a      	strh	r2, [r3, #0]
 80095c6:	2308      	movs	r3, #8
 80095c8:	18fb      	adds	r3, r7, r3
 80095ca:	1c02      	adds	r2, r0, #0
 80095cc:	801a      	strh	r2, [r3, #0]
 80095ce:	1dbb      	adds	r3, r7, #6
 80095d0:	1c0a      	adds	r2, r1, #0
 80095d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80095d4:	1dbb      	adds	r3, r7, #6
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	2380      	movs	r3, #128	; 0x80
 80095dc:	045c      	lsls	r4, r3, #17
 80095de:	197b      	adds	r3, r7, r5
 80095e0:	8819      	ldrh	r1, [r3, #0]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	4b23      	ldr	r3, [pc, #140]	; (8009674 <I2C_RequestMemoryWrite+0xc4>)
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	0023      	movs	r3, r4
 80095ea:	f000 fa83 	bl	8009af4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f0:	6a39      	ldr	r1, [r7, #32]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	0018      	movs	r0, r3
 80095f6:	f000 f902 	bl	80097fe <I2C_WaitOnTXISFlagUntilTimeout>
 80095fa:	1e03      	subs	r3, r0, #0
 80095fc:	d001      	beq.n	8009602 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e033      	b.n	800966a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009602:	1dbb      	adds	r3, r7, #6
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d107      	bne.n	800961a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800960a:	2308      	movs	r3, #8
 800960c:	18fb      	adds	r3, r7, r3
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	b2da      	uxtb	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	629a      	str	r2, [r3, #40]	; 0x28
 8009618:	e019      	b.n	800964e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800961a:	2308      	movs	r3, #8
 800961c:	18fb      	adds	r3, r7, r3
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	0a1b      	lsrs	r3, r3, #8
 8009622:	b29b      	uxth	r3, r3
 8009624:	b2da      	uxtb	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800962c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962e:	6a39      	ldr	r1, [r7, #32]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	0018      	movs	r0, r3
 8009634:	f000 f8e3 	bl	80097fe <I2C_WaitOnTXISFlagUntilTimeout>
 8009638:	1e03      	subs	r3, r0, #0
 800963a:	d001      	beq.n	8009640 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e014      	b.n	800966a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009640:	2308      	movs	r3, #8
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	881b      	ldrh	r3, [r3, #0]
 8009646:	b2da      	uxtb	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800964e:	6a3a      	ldr	r2, [r7, #32]
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	0013      	movs	r3, r2
 8009658:	2200      	movs	r2, #0
 800965a:	2180      	movs	r1, #128	; 0x80
 800965c:	f000 f890 	bl	8009780 <I2C_WaitOnFlagUntilTimeout>
 8009660:	1e03      	subs	r3, r0, #0
 8009662:	d001      	beq.n	8009668 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e000      	b.n	800966a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	0018      	movs	r0, r3
 800966c:	46bd      	mov	sp, r7
 800966e:	b004      	add	sp, #16
 8009670:	bdb0      	pop	{r4, r5, r7, pc}
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	80002000 	.word	0x80002000

08009678 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009678:	b5b0      	push	{r4, r5, r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af02      	add	r7, sp, #8
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	000c      	movs	r4, r1
 8009682:	0010      	movs	r0, r2
 8009684:	0019      	movs	r1, r3
 8009686:	250a      	movs	r5, #10
 8009688:	197b      	adds	r3, r7, r5
 800968a:	1c22      	adds	r2, r4, #0
 800968c:	801a      	strh	r2, [r3, #0]
 800968e:	2308      	movs	r3, #8
 8009690:	18fb      	adds	r3, r7, r3
 8009692:	1c02      	adds	r2, r0, #0
 8009694:	801a      	strh	r2, [r3, #0]
 8009696:	1dbb      	adds	r3, r7, #6
 8009698:	1c0a      	adds	r2, r1, #0
 800969a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800969c:	1dbb      	adds	r3, r7, #6
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	197b      	adds	r3, r7, r5
 80096a4:	8819      	ldrh	r1, [r3, #0]
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	4b23      	ldr	r3, [pc, #140]	; (8009738 <I2C_RequestMemoryRead+0xc0>)
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	2300      	movs	r3, #0
 80096ae:	f000 fa21 	bl	8009af4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b4:	6a39      	ldr	r1, [r7, #32]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	0018      	movs	r0, r3
 80096ba:	f000 f8a0 	bl	80097fe <I2C_WaitOnTXISFlagUntilTimeout>
 80096be:	1e03      	subs	r3, r0, #0
 80096c0:	d001      	beq.n	80096c6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e033      	b.n	800972e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096c6:	1dbb      	adds	r3, r7, #6
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d107      	bne.n	80096de <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096ce:	2308      	movs	r3, #8
 80096d0:	18fb      	adds	r3, r7, r3
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	629a      	str	r2, [r3, #40]	; 0x28
 80096dc:	e019      	b.n	8009712 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80096de:	2308      	movs	r3, #8
 80096e0:	18fb      	adds	r3, r7, r3
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	0a1b      	lsrs	r3, r3, #8
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f2:	6a39      	ldr	r1, [r7, #32]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	0018      	movs	r0, r3
 80096f8:	f000 f881 	bl	80097fe <I2C_WaitOnTXISFlagUntilTimeout>
 80096fc:	1e03      	subs	r3, r0, #0
 80096fe:	d001      	beq.n	8009704 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e014      	b.n	800972e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009704:	2308      	movs	r3, #8
 8009706:	18fb      	adds	r3, r7, r3
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	b2da      	uxtb	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009712:	6a3a      	ldr	r2, [r7, #32]
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	0013      	movs	r3, r2
 800971c:	2200      	movs	r2, #0
 800971e:	2140      	movs	r1, #64	; 0x40
 8009720:	f000 f82e 	bl	8009780 <I2C_WaitOnFlagUntilTimeout>
 8009724:	1e03      	subs	r3, r0, #0
 8009726:	d001      	beq.n	800972c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	0018      	movs	r0, r3
 8009730:	46bd      	mov	sp, r7
 8009732:	b004      	add	sp, #16
 8009734:	bdb0      	pop	{r4, r5, r7, pc}
 8009736:	46c0      	nop			; (mov r8, r8)
 8009738:	80002000 	.word	0x80002000

0800973c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	2202      	movs	r2, #2
 800974c:	4013      	ands	r3, r2
 800974e:	2b02      	cmp	r3, #2
 8009750:	d103      	bne.n	800975a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2200      	movs	r2, #0
 8009758:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	2201      	movs	r2, #1
 8009762:	4013      	ands	r3, r2
 8009764:	2b01      	cmp	r3, #1
 8009766:	d007      	beq.n	8009778 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699a      	ldr	r2, [r3, #24]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2101      	movs	r1, #1
 8009774:	430a      	orrs	r2, r1
 8009776:	619a      	str	r2, [r3, #24]
  }
}
 8009778:	46c0      	nop			; (mov r8, r8)
 800977a:	46bd      	mov	sp, r7
 800977c:	b002      	add	sp, #8
 800977e:	bd80      	pop	{r7, pc}

08009780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	1dfb      	adds	r3, r7, #7
 800978e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009790:	e021      	b.n	80097d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	3301      	adds	r3, #1
 8009796:	d01e      	beq.n	80097d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009798:	f7fd f9fa 	bl	8006b90 <HAL_GetTick>
 800979c:	0002      	movs	r2, r0
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d302      	bcc.n	80097ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d113      	bne.n	80097d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b2:	2220      	movs	r2, #32
 80097b4:	431a      	orrs	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2241      	movs	r2, #65	; 0x41
 80097be:	2120      	movs	r1, #32
 80097c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2242      	movs	r2, #66	; 0x42
 80097c6:	2100      	movs	r1, #0
 80097c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2240      	movs	r2, #64	; 0x40
 80097ce:	2100      	movs	r1, #0
 80097d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e00f      	b.n	80097f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	4013      	ands	r3, r2
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	425a      	negs	r2, r3
 80097e6:	4153      	adcs	r3, r2
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	001a      	movs	r2, r3
 80097ec:	1dfb      	adds	r3, r7, #7
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d0ce      	beq.n	8009792 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	0018      	movs	r0, r3
 80097f8:	46bd      	mov	sp, r7
 80097fa:	b004      	add	sp, #16
 80097fc:	bd80      	pop	{r7, pc}

080097fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	60f8      	str	r0, [r7, #12]
 8009806:	60b9      	str	r1, [r7, #8]
 8009808:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800980a:	e02b      	b.n	8009864 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	68b9      	ldr	r1, [r7, #8]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	0018      	movs	r0, r3
 8009814:	f000 f86e 	bl	80098f4 <I2C_IsErrorOccurred>
 8009818:	1e03      	subs	r3, r0, #0
 800981a:	d001      	beq.n	8009820 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e029      	b.n	8009874 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3301      	adds	r3, #1
 8009824:	d01e      	beq.n	8009864 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009826:	f7fd f9b3 	bl	8006b90 <HAL_GetTick>
 800982a:	0002      	movs	r2, r0
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	429a      	cmp	r2, r3
 8009834:	d302      	bcc.n	800983c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d113      	bne.n	8009864 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009840:	2220      	movs	r2, #32
 8009842:	431a      	orrs	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2241      	movs	r2, #65	; 0x41
 800984c:	2120      	movs	r1, #32
 800984e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2242      	movs	r2, #66	; 0x42
 8009854:	2100      	movs	r1, #0
 8009856:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2240      	movs	r2, #64	; 0x40
 800985c:	2100      	movs	r1, #0
 800985e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e007      	b.n	8009874 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	2202      	movs	r2, #2
 800986c:	4013      	ands	r3, r2
 800986e:	2b02      	cmp	r3, #2
 8009870:	d1cc      	bne.n	800980c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	0018      	movs	r0, r3
 8009876:	46bd      	mov	sp, r7
 8009878:	b004      	add	sp, #16
 800987a:	bd80      	pop	{r7, pc}

0800987c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009888:	e028      	b.n	80098dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	68b9      	ldr	r1, [r7, #8]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	0018      	movs	r0, r3
 8009892:	f000 f82f 	bl	80098f4 <I2C_IsErrorOccurred>
 8009896:	1e03      	subs	r3, r0, #0
 8009898:	d001      	beq.n	800989e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e026      	b.n	80098ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800989e:	f7fd f977 	bl	8006b90 <HAL_GetTick>
 80098a2:	0002      	movs	r2, r0
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d302      	bcc.n	80098b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d113      	bne.n	80098dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b8:	2220      	movs	r2, #32
 80098ba:	431a      	orrs	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2241      	movs	r2, #65	; 0x41
 80098c4:	2120      	movs	r1, #32
 80098c6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2242      	movs	r2, #66	; 0x42
 80098cc:	2100      	movs	r1, #0
 80098ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2240      	movs	r2, #64	; 0x40
 80098d4:	2100      	movs	r1, #0
 80098d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e007      	b.n	80098ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	2220      	movs	r2, #32
 80098e4:	4013      	ands	r3, r2
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d1cf      	bne.n	800988a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	0018      	movs	r0, r3
 80098ee:	46bd      	mov	sp, r7
 80098f0:	b004      	add	sp, #16
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098f4:	b590      	push	{r4, r7, lr}
 80098f6:	b08b      	sub	sp, #44	; 0x2c
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009900:	2327      	movs	r3, #39	; 0x27
 8009902:	18fb      	adds	r3, r7, r3
 8009904:	2200      	movs	r2, #0
 8009906:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	2210      	movs	r2, #16
 800991c:	4013      	ands	r3, r2
 800991e:	d100      	bne.n	8009922 <I2C_IsErrorOccurred+0x2e>
 8009920:	e082      	b.n	8009a28 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2210      	movs	r2, #16
 8009928:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800992a:	e060      	b.n	80099ee <I2C_IsErrorOccurred+0xfa>
 800992c:	2427      	movs	r4, #39	; 0x27
 800992e:	193b      	adds	r3, r7, r4
 8009930:	193a      	adds	r2, r7, r4
 8009932:	7812      	ldrb	r2, [r2, #0]
 8009934:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	3301      	adds	r3, #1
 800993a:	d058      	beq.n	80099ee <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800993c:	f7fd f928 	bl	8006b90 <HAL_GetTick>
 8009940:	0002      	movs	r2, r0
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	429a      	cmp	r2, r3
 800994a:	d306      	bcc.n	800995a <I2C_IsErrorOccurred+0x66>
 800994c:	193b      	adds	r3, r7, r4
 800994e:	193a      	adds	r2, r7, r4
 8009950:	7812      	ldrb	r2, [r2, #0]
 8009952:	701a      	strb	r2, [r3, #0]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d149      	bne.n	80099ee <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	2380      	movs	r3, #128	; 0x80
 8009962:	01db      	lsls	r3, r3, #7
 8009964:	4013      	ands	r3, r2
 8009966:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009968:	2013      	movs	r0, #19
 800996a:	183b      	adds	r3, r7, r0
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	2142      	movs	r1, #66	; 0x42
 8009970:	5c52      	ldrb	r2, [r2, r1]
 8009972:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	699a      	ldr	r2, [r3, #24]
 800997a:	2380      	movs	r3, #128	; 0x80
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	401a      	ands	r2, r3
 8009980:	2380      	movs	r3, #128	; 0x80
 8009982:	021b      	lsls	r3, r3, #8
 8009984:	429a      	cmp	r2, r3
 8009986:	d126      	bne.n	80099d6 <I2C_IsErrorOccurred+0xe2>
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	2380      	movs	r3, #128	; 0x80
 800998c:	01db      	lsls	r3, r3, #7
 800998e:	429a      	cmp	r2, r3
 8009990:	d021      	beq.n	80099d6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8009992:	183b      	adds	r3, r7, r0
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b20      	cmp	r3, #32
 8009998:	d01d      	beq.n	80099d6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2180      	movs	r1, #128	; 0x80
 80099a6:	01c9      	lsls	r1, r1, #7
 80099a8:	430a      	orrs	r2, r1
 80099aa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80099ac:	f7fd f8f0 	bl	8006b90 <HAL_GetTick>
 80099b0:	0003      	movs	r3, r0
 80099b2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099b4:	e00f      	b.n	80099d6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80099b6:	f7fd f8eb 	bl	8006b90 <HAL_GetTick>
 80099ba:	0002      	movs	r2, r0
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b19      	cmp	r3, #25
 80099c2:	d908      	bls.n	80099d6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	2220      	movs	r2, #32
 80099c8:	4313      	orrs	r3, r2
 80099ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80099cc:	2327      	movs	r3, #39	; 0x27
 80099ce:	18fb      	adds	r3, r7, r3
 80099d0:	2201      	movs	r2, #1
 80099d2:	701a      	strb	r2, [r3, #0]

              break;
 80099d4:	e00b      	b.n	80099ee <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	2220      	movs	r2, #32
 80099de:	4013      	ands	r3, r2
 80099e0:	2127      	movs	r1, #39	; 0x27
 80099e2:	187a      	adds	r2, r7, r1
 80099e4:	1879      	adds	r1, r7, r1
 80099e6:	7809      	ldrb	r1, [r1, #0]
 80099e8:	7011      	strb	r1, [r2, #0]
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	d1e3      	bne.n	80099b6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	2220      	movs	r2, #32
 80099f6:	4013      	ands	r3, r2
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	d004      	beq.n	8009a06 <I2C_IsErrorOccurred+0x112>
 80099fc:	2327      	movs	r3, #39	; 0x27
 80099fe:	18fb      	adds	r3, r7, r3
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d092      	beq.n	800992c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a06:	2327      	movs	r3, #39	; 0x27
 8009a08:	18fb      	adds	r3, r7, r3
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2220      	movs	r2, #32
 8009a16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	2204      	movs	r2, #4
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a20:	2327      	movs	r3, #39	; 0x27
 8009a22:	18fb      	adds	r3, r7, r3
 8009a24:	2201      	movs	r2, #1
 8009a26:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	2380      	movs	r3, #128	; 0x80
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	4013      	ands	r3, r2
 8009a38:	d00c      	beq.n	8009a54 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2280      	movs	r2, #128	; 0x80
 8009a48:	0052      	lsls	r2, r2, #1
 8009a4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a4c:	2327      	movs	r3, #39	; 0x27
 8009a4e:	18fb      	adds	r3, r7, r3
 8009a50:	2201      	movs	r2, #1
 8009a52:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	2380      	movs	r3, #128	; 0x80
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	d00c      	beq.n	8009a78 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	2208      	movs	r2, #8
 8009a62:	4313      	orrs	r3, r2
 8009a64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2280      	movs	r2, #128	; 0x80
 8009a6c:	00d2      	lsls	r2, r2, #3
 8009a6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a70:	2327      	movs	r3, #39	; 0x27
 8009a72:	18fb      	adds	r3, r7, r3
 8009a74:	2201      	movs	r2, #1
 8009a76:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009a78:	69ba      	ldr	r2, [r7, #24]
 8009a7a:	2380      	movs	r3, #128	; 0x80
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4013      	ands	r3, r2
 8009a80:	d00c      	beq.n	8009a9c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	2202      	movs	r2, #2
 8009a86:	4313      	orrs	r3, r2
 8009a88:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2280      	movs	r2, #128	; 0x80
 8009a90:	0092      	lsls	r2, r2, #2
 8009a92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a94:	2327      	movs	r3, #39	; 0x27
 8009a96:	18fb      	adds	r3, r7, r3
 8009a98:	2201      	movs	r2, #1
 8009a9a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8009a9c:	2327      	movs	r3, #39	; 0x27
 8009a9e:	18fb      	adds	r3, r7, r3
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d01d      	beq.n	8009ae2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f7ff fe47 	bl	800973c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	490d      	ldr	r1, [pc, #52]	; (8009af0 <I2C_IsErrorOccurred+0x1fc>)
 8009aba:	400a      	ands	r2, r1
 8009abc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2241      	movs	r2, #65	; 0x41
 8009ace:	2120      	movs	r1, #32
 8009ad0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2242      	movs	r2, #66	; 0x42
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2240      	movs	r2, #64	; 0x40
 8009ade:	2100      	movs	r1, #0
 8009ae0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009ae2:	2327      	movs	r3, #39	; 0x27
 8009ae4:	18fb      	adds	r3, r7, r3
 8009ae6:	781b      	ldrb	r3, [r3, #0]
}
 8009ae8:	0018      	movs	r0, r3
 8009aea:	46bd      	mov	sp, r7
 8009aec:	b00b      	add	sp, #44	; 0x2c
 8009aee:	bd90      	pop	{r4, r7, pc}
 8009af0:	fe00e800 	.word	0xfe00e800

08009af4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009af4:	b590      	push	{r4, r7, lr}
 8009af6:	b087      	sub	sp, #28
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	0008      	movs	r0, r1
 8009afe:	0011      	movs	r1, r2
 8009b00:	607b      	str	r3, [r7, #4]
 8009b02:	240a      	movs	r4, #10
 8009b04:	193b      	adds	r3, r7, r4
 8009b06:	1c02      	adds	r2, r0, #0
 8009b08:	801a      	strh	r2, [r3, #0]
 8009b0a:	2009      	movs	r0, #9
 8009b0c:	183b      	adds	r3, r7, r0
 8009b0e:	1c0a      	adds	r2, r1, #0
 8009b10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b12:	193b      	adds	r3, r7, r4
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	059b      	lsls	r3, r3, #22
 8009b18:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b1a:	183b      	adds	r3, r7, r0
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	0419      	lsls	r1, r3, #16
 8009b20:	23ff      	movs	r3, #255	; 0xff
 8009b22:	041b      	lsls	r3, r3, #16
 8009b24:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b26:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	085b      	lsrs	r3, r3, #1
 8009b34:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b3e:	0d51      	lsrs	r1, r2, #21
 8009b40:	2280      	movs	r2, #128	; 0x80
 8009b42:	00d2      	lsls	r2, r2, #3
 8009b44:	400a      	ands	r2, r1
 8009b46:	4907      	ldr	r1, [pc, #28]	; (8009b64 <I2C_TransferConfig+0x70>)
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	43d2      	mvns	r2, r2
 8009b4c:	401a      	ands	r2, r3
 8009b4e:	0011      	movs	r1, r2
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b5a:	46c0      	nop			; (mov r8, r8)
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	b007      	add	sp, #28
 8009b60:	bd90      	pop	{r4, r7, pc}
 8009b62:	46c0      	nop			; (mov r8, r8)
 8009b64:	03ff63ff 	.word	0x03ff63ff

08009b68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2241      	movs	r2, #65	; 0x41
 8009b76:	5c9b      	ldrb	r3, [r3, r2]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	d138      	bne.n	8009bf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2240      	movs	r2, #64	; 0x40
 8009b82:	5c9b      	ldrb	r3, [r3, r2]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e032      	b.n	8009bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2240      	movs	r2, #64	; 0x40
 8009b90:	2101      	movs	r1, #1
 8009b92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2241      	movs	r2, #65	; 0x41
 8009b98:	2124      	movs	r1, #36	; 0x24
 8009b9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	438a      	bics	r2, r1
 8009baa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4911      	ldr	r1, [pc, #68]	; (8009bfc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009bb8:	400a      	ands	r2, r1
 8009bba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6819      	ldr	r1, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2241      	movs	r2, #65	; 0x41
 8009be0:	2120      	movs	r1, #32
 8009be2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2240      	movs	r2, #64	; 0x40
 8009be8:	2100      	movs	r1, #0
 8009bea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e000      	b.n	8009bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bf0:	2302      	movs	r3, #2
  }
}
 8009bf2:	0018      	movs	r0, r3
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	b002      	add	sp, #8
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	ffffefff 	.word	0xffffefff

08009c00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2241      	movs	r2, #65	; 0x41
 8009c0e:	5c9b      	ldrb	r3, [r3, r2]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	d139      	bne.n	8009c8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2240      	movs	r2, #64	; 0x40
 8009c1a:	5c9b      	ldrb	r3, [r3, r2]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d101      	bne.n	8009c24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c20:	2302      	movs	r3, #2
 8009c22:	e033      	b.n	8009c8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2240      	movs	r2, #64	; 0x40
 8009c28:	2101      	movs	r1, #1
 8009c2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2241      	movs	r2, #65	; 0x41
 8009c30:	2124      	movs	r1, #36	; 0x24
 8009c32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2101      	movs	r1, #1
 8009c40:	438a      	bics	r2, r1
 8009c42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4a11      	ldr	r2, [pc, #68]	; (8009c94 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2101      	movs	r1, #1
 8009c72:	430a      	orrs	r2, r1
 8009c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2241      	movs	r2, #65	; 0x41
 8009c7a:	2120      	movs	r1, #32
 8009c7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2240      	movs	r2, #64	; 0x40
 8009c82:	2100      	movs	r1, #0
 8009c84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	e000      	b.n	8009c8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c8a:	2302      	movs	r3, #2
  }
}
 8009c8c:	0018      	movs	r0, r3
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	b004      	add	sp, #16
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	fffff0ff 	.word	0xfffff0ff

08009c98 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e03d      	b.n	8009d26 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a20      	ldr	r2, [pc, #128]	; (8009d30 <HAL_IWDG_Init+0x98>)
 8009cb0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a1f      	ldr	r2, [pc, #124]	; (8009d34 <HAL_IWDG_Init+0x9c>)
 8009cb8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6852      	ldr	r2, [r2, #4]
 8009cc2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	6892      	ldr	r2, [r2, #8]
 8009ccc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009cce:	f7fc ff5f 	bl	8006b90 <HAL_GetTick>
 8009cd2:	0003      	movs	r3, r0
 8009cd4:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009cd6:	e00e      	b.n	8009cf6 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009cd8:	f7fc ff5a 	bl	8006b90 <HAL_GetTick>
 8009cdc:	0002      	movs	r2, r0
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b31      	cmp	r3, #49	; 0x31
 8009ce4:	d907      	bls.n	8009cf6 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	2207      	movs	r2, #7
 8009cee:	4013      	ands	r3, r2
 8009cf0:	d001      	beq.n	8009cf6 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e017      	b.n	8009d26 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	2207      	movs	r2, #7
 8009cfe:	4013      	ands	r3, r2
 8009d00:	d1ea      	bne.n	8009cd8 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691a      	ldr	r2, [r3, #16]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d005      	beq.n	8009d1c <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	68d2      	ldr	r2, [r2, #12]
 8009d18:	611a      	str	r2, [r3, #16]
 8009d1a:	e003      	b.n	8009d24 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a05      	ldr	r2, [pc, #20]	; (8009d38 <HAL_IWDG_Init+0xa0>)
 8009d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	0018      	movs	r0, r3
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	b004      	add	sp, #16
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	46c0      	nop			; (mov r8, r8)
 8009d30:	0000cccc 	.word	0x0000cccc
 8009d34:	00005555 	.word	0x00005555
 8009d38:	0000aaaa 	.word	0x0000aaaa

08009d3c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a03      	ldr	r2, [pc, #12]	; (8009d58 <HAL_IWDG_Refresh+0x1c>)
 8009d4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	0018      	movs	r0, r3
 8009d50:	46bd      	mov	sp, r7
 8009d52:	b002      	add	sp, #8
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	0000aaaa 	.word	0x0000aaaa

08009d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009d64:	4b19      	ldr	r3, [pc, #100]	; (8009dcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a19      	ldr	r2, [pc, #100]	; (8009dd0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	0019      	movs	r1, r3
 8009d6e:	4b17      	ldr	r3, [pc, #92]	; (8009dcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	430a      	orrs	r2, r1
 8009d74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	2380      	movs	r3, #128	; 0x80
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d11f      	bne.n	8009dc0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009d80:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	0013      	movs	r3, r2
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	189b      	adds	r3, r3, r2
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	4912      	ldr	r1, [pc, #72]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009d8e:	0018      	movs	r0, r3
 8009d90:	f7f6 f9d2 	bl	8000138 <__udivsi3>
 8009d94:	0003      	movs	r3, r0
 8009d96:	3301      	adds	r3, #1
 8009d98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d9a:	e008      	b.n	8009dae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e001      	b.n	8009dae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e009      	b.n	8009dc2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009db0:	695a      	ldr	r2, [r3, #20]
 8009db2:	2380      	movs	r3, #128	; 0x80
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	401a      	ands	r2, r3
 8009db8:	2380      	movs	r3, #128	; 0x80
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d0ed      	beq.n	8009d9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	0018      	movs	r0, r3
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	b004      	add	sp, #16
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	46c0      	nop			; (mov r8, r8)
 8009dcc:	40007000 	.word	0x40007000
 8009dd0:	fffff9ff 	.word	0xfffff9ff
 8009dd4:	2000000c 	.word	0x2000000c
 8009dd8:	000f4240 	.word	0x000f4240

08009ddc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009de0:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	23e0      	movs	r3, #224	; 0xe0
 8009de6:	01db      	lsls	r3, r3, #7
 8009de8:	4013      	ands	r3, r2
}
 8009dea:	0018      	movs	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	40021000 	.word	0x40021000

08009df4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e2f3      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	d100      	bne.n	8009e12 <HAL_RCC_OscConfig+0x1e>
 8009e10:	e07c      	b.n	8009f0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e12:	4bc3      	ldr	r3, [pc, #780]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	2238      	movs	r2, #56	; 0x38
 8009e18:	4013      	ands	r3, r2
 8009e1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e1c:	4bc0      	ldr	r3, [pc, #768]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2203      	movs	r2, #3
 8009e22:	4013      	ands	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	2b10      	cmp	r3, #16
 8009e2a:	d102      	bne.n	8009e32 <HAL_RCC_OscConfig+0x3e>
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d002      	beq.n	8009e38 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b08      	cmp	r3, #8
 8009e36:	d10b      	bne.n	8009e50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e38:	4bb9      	ldr	r3, [pc, #740]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	2380      	movs	r3, #128	; 0x80
 8009e3e:	029b      	lsls	r3, r3, #10
 8009e40:	4013      	ands	r3, r2
 8009e42:	d062      	beq.n	8009f0a <HAL_RCC_OscConfig+0x116>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d15e      	bne.n	8009f0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e2ce      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	2380      	movs	r3, #128	; 0x80
 8009e56:	025b      	lsls	r3, r3, #9
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d107      	bne.n	8009e6c <HAL_RCC_OscConfig+0x78>
 8009e5c:	4bb0      	ldr	r3, [pc, #704]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	4baf      	ldr	r3, [pc, #700]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e62:	2180      	movs	r1, #128	; 0x80
 8009e64:	0249      	lsls	r1, r1, #9
 8009e66:	430a      	orrs	r2, r1
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	e020      	b.n	8009eae <HAL_RCC_OscConfig+0xba>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	23a0      	movs	r3, #160	; 0xa0
 8009e72:	02db      	lsls	r3, r3, #11
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d10e      	bne.n	8009e96 <HAL_RCC_OscConfig+0xa2>
 8009e78:	4ba9      	ldr	r3, [pc, #676]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	4ba8      	ldr	r3, [pc, #672]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e7e:	2180      	movs	r1, #128	; 0x80
 8009e80:	02c9      	lsls	r1, r1, #11
 8009e82:	430a      	orrs	r2, r1
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	4ba6      	ldr	r3, [pc, #664]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	4ba5      	ldr	r3, [pc, #660]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e8c:	2180      	movs	r1, #128	; 0x80
 8009e8e:	0249      	lsls	r1, r1, #9
 8009e90:	430a      	orrs	r2, r1
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	e00b      	b.n	8009eae <HAL_RCC_OscConfig+0xba>
 8009e96:	4ba2      	ldr	r3, [pc, #648]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	4ba1      	ldr	r3, [pc, #644]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009e9c:	49a1      	ldr	r1, [pc, #644]	; (800a124 <HAL_RCC_OscConfig+0x330>)
 8009e9e:	400a      	ands	r2, r1
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	4b9f      	ldr	r3, [pc, #636]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	4b9e      	ldr	r3, [pc, #632]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009ea8:	499f      	ldr	r1, [pc, #636]	; (800a128 <HAL_RCC_OscConfig+0x334>)
 8009eaa:	400a      	ands	r2, r1
 8009eac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d014      	beq.n	8009ee0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eb6:	f7fc fe6b 	bl	8006b90 <HAL_GetTick>
 8009eba:	0003      	movs	r3, r0
 8009ebc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ebe:	e008      	b.n	8009ed2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ec0:	f7fc fe66 	bl	8006b90 <HAL_GetTick>
 8009ec4:	0002      	movs	r2, r0
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b64      	cmp	r3, #100	; 0x64
 8009ecc:	d901      	bls.n	8009ed2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e28d      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ed2:	4b93      	ldr	r3, [pc, #588]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	2380      	movs	r3, #128	; 0x80
 8009ed8:	029b      	lsls	r3, r3, #10
 8009eda:	4013      	ands	r3, r2
 8009edc:	d0f0      	beq.n	8009ec0 <HAL_RCC_OscConfig+0xcc>
 8009ede:	e015      	b.n	8009f0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee0:	f7fc fe56 	bl	8006b90 <HAL_GetTick>
 8009ee4:	0003      	movs	r3, r0
 8009ee6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ee8:	e008      	b.n	8009efc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009eea:	f7fc fe51 	bl	8006b90 <HAL_GetTick>
 8009eee:	0002      	movs	r2, r0
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	2b64      	cmp	r3, #100	; 0x64
 8009ef6:	d901      	bls.n	8009efc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e278      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009efc:	4b88      	ldr	r3, [pc, #544]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	2380      	movs	r3, #128	; 0x80
 8009f02:	029b      	lsls	r3, r3, #10
 8009f04:	4013      	ands	r3, r2
 8009f06:	d1f0      	bne.n	8009eea <HAL_RCC_OscConfig+0xf6>
 8009f08:	e000      	b.n	8009f0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2202      	movs	r2, #2
 8009f12:	4013      	ands	r3, r2
 8009f14:	d100      	bne.n	8009f18 <HAL_RCC_OscConfig+0x124>
 8009f16:	e099      	b.n	800a04c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f18:	4b81      	ldr	r3, [pc, #516]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	2238      	movs	r2, #56	; 0x38
 8009f1e:	4013      	ands	r3, r2
 8009f20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f22:	4b7f      	ldr	r3, [pc, #508]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2203      	movs	r2, #3
 8009f28:	4013      	ands	r3, r2
 8009f2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	2b10      	cmp	r3, #16
 8009f30:	d102      	bne.n	8009f38 <HAL_RCC_OscConfig+0x144>
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d002      	beq.n	8009f3e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d135      	bne.n	8009faa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f3e:	4b78      	ldr	r3, [pc, #480]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	2380      	movs	r3, #128	; 0x80
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	4013      	ands	r3, r2
 8009f48:	d005      	beq.n	8009f56 <HAL_RCC_OscConfig+0x162>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e24b      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f56:	4b72      	ldr	r3, [pc, #456]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	4a74      	ldr	r2, [pc, #464]	; (800a12c <HAL_RCC_OscConfig+0x338>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	0019      	movs	r1, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	021a      	lsls	r2, r3, #8
 8009f66:	4b6e      	ldr	r3, [pc, #440]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d112      	bne.n	8009f98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009f72:	4b6b      	ldr	r3, [pc, #428]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a6e      	ldr	r2, [pc, #440]	; (800a130 <HAL_RCC_OscConfig+0x33c>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	0019      	movs	r1, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	691a      	ldr	r2, [r3, #16]
 8009f80:	4b67      	ldr	r3, [pc, #412]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009f82:	430a      	orrs	r2, r1
 8009f84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009f86:	4b66      	ldr	r3, [pc, #408]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	0adb      	lsrs	r3, r3, #11
 8009f8c:	2207      	movs	r2, #7
 8009f8e:	4013      	ands	r3, r2
 8009f90:	4a68      	ldr	r2, [pc, #416]	; (800a134 <HAL_RCC_OscConfig+0x340>)
 8009f92:	40da      	lsrs	r2, r3
 8009f94:	4b68      	ldr	r3, [pc, #416]	; (800a138 <HAL_RCC_OscConfig+0x344>)
 8009f96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009f98:	4b68      	ldr	r3, [pc, #416]	; (800a13c <HAL_RCC_OscConfig+0x348>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	0018      	movs	r0, r3
 8009f9e:	f7fc fd9b 	bl	8006ad8 <HAL_InitTick>
 8009fa2:	1e03      	subs	r3, r0, #0
 8009fa4:	d051      	beq.n	800a04a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e221      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d030      	beq.n	800a014 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009fb2:	4b5b      	ldr	r3, [pc, #364]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a5e      	ldr	r2, [pc, #376]	; (800a130 <HAL_RCC_OscConfig+0x33c>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	0019      	movs	r1, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691a      	ldr	r2, [r3, #16]
 8009fc0:	4b57      	ldr	r3, [pc, #348]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009fc6:	4b56      	ldr	r3, [pc, #344]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	4b55      	ldr	r3, [pc, #340]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009fcc:	2180      	movs	r1, #128	; 0x80
 8009fce:	0049      	lsls	r1, r1, #1
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd4:	f7fc fddc 	bl	8006b90 <HAL_GetTick>
 8009fd8:	0003      	movs	r3, r0
 8009fda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009fdc:	e008      	b.n	8009ff0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fde:	f7fc fdd7 	bl	8006b90 <HAL_GetTick>
 8009fe2:	0002      	movs	r2, r0
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d901      	bls.n	8009ff0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e1fe      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ff0:	4b4b      	ldr	r3, [pc, #300]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	2380      	movs	r3, #128	; 0x80
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	d0f0      	beq.n	8009fde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ffc:	4b48      	ldr	r3, [pc, #288]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	4a4a      	ldr	r2, [pc, #296]	; (800a12c <HAL_RCC_OscConfig+0x338>)
 800a002:	4013      	ands	r3, r2
 800a004:	0019      	movs	r1, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	021a      	lsls	r2, r3, #8
 800a00c:	4b44      	ldr	r3, [pc, #272]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a00e:	430a      	orrs	r2, r1
 800a010:	605a      	str	r2, [r3, #4]
 800a012:	e01b      	b.n	800a04c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a014:	4b42      	ldr	r3, [pc, #264]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	4b41      	ldr	r3, [pc, #260]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a01a:	4949      	ldr	r1, [pc, #292]	; (800a140 <HAL_RCC_OscConfig+0x34c>)
 800a01c:	400a      	ands	r2, r1
 800a01e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a020:	f7fc fdb6 	bl	8006b90 <HAL_GetTick>
 800a024:	0003      	movs	r3, r0
 800a026:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a028:	e008      	b.n	800a03c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a02a:	f7fc fdb1 	bl	8006b90 <HAL_GetTick>
 800a02e:	0002      	movs	r2, r0
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b02      	cmp	r3, #2
 800a036:	d901      	bls.n	800a03c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e1d8      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a03c:	4b38      	ldr	r3, [pc, #224]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	2380      	movs	r3, #128	; 0x80
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	4013      	ands	r3, r2
 800a046:	d1f0      	bne.n	800a02a <HAL_RCC_OscConfig+0x236>
 800a048:	e000      	b.n	800a04c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a04a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2208      	movs	r2, #8
 800a052:	4013      	ands	r3, r2
 800a054:	d047      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a056:	4b32      	ldr	r3, [pc, #200]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	2238      	movs	r2, #56	; 0x38
 800a05c:	4013      	ands	r3, r2
 800a05e:	2b18      	cmp	r3, #24
 800a060:	d10a      	bne.n	800a078 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a062:	4b2f      	ldr	r3, [pc, #188]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a066:	2202      	movs	r2, #2
 800a068:	4013      	ands	r3, r2
 800a06a:	d03c      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x2f2>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d138      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e1ba      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d019      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a080:	4b27      	ldr	r3, [pc, #156]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a082:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a084:	4b26      	ldr	r3, [pc, #152]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a086:	2101      	movs	r1, #1
 800a088:	430a      	orrs	r2, r1
 800a08a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a08c:	f7fc fd80 	bl	8006b90 <HAL_GetTick>
 800a090:	0003      	movs	r3, r0
 800a092:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a094:	e008      	b.n	800a0a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a096:	f7fc fd7b 	bl	8006b90 <HAL_GetTick>
 800a09a:	0002      	movs	r2, r0
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d901      	bls.n	800a0a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e1a2      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a0a8:	4b1d      	ldr	r3, [pc, #116]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a0aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	d0f1      	beq.n	800a096 <HAL_RCC_OscConfig+0x2a2>
 800a0b2:	e018      	b.n	800a0e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a0b4:	4b1a      	ldr	r3, [pc, #104]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a0b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a0b8:	4b19      	ldr	r3, [pc, #100]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	438a      	bics	r2, r1
 800a0be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0c0:	f7fc fd66 	bl	8006b90 <HAL_GetTick>
 800a0c4:	0003      	movs	r3, r0
 800a0c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0c8:	e008      	b.n	800a0dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0ca:	f7fc fd61 	bl	8006b90 <HAL_GetTick>
 800a0ce:	0002      	movs	r2, r0
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d901      	bls.n	800a0dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e188      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0dc:	4b10      	ldr	r3, [pc, #64]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a0de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	d1f1      	bne.n	800a0ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2204      	movs	r2, #4
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	d100      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x2fe>
 800a0f0:	e0c6      	b.n	800a280 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0f2:	231f      	movs	r3, #31
 800a0f4:	18fb      	adds	r3, r7, r3
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	2238      	movs	r2, #56	; 0x38
 800a100:	4013      	ands	r3, r2
 800a102:	2b20      	cmp	r3, #32
 800a104:	d11e      	bne.n	800a144 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a106:	4b06      	ldr	r3, [pc, #24]	; (800a120 <HAL_RCC_OscConfig+0x32c>)
 800a108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a10a:	2202      	movs	r2, #2
 800a10c:	4013      	ands	r3, r2
 800a10e:	d100      	bne.n	800a112 <HAL_RCC_OscConfig+0x31e>
 800a110:	e0b6      	b.n	800a280 <HAL_RCC_OscConfig+0x48c>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d000      	beq.n	800a11c <HAL_RCC_OscConfig+0x328>
 800a11a:	e0b1      	b.n	800a280 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e166      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
 800a120:	40021000 	.word	0x40021000
 800a124:	fffeffff 	.word	0xfffeffff
 800a128:	fffbffff 	.word	0xfffbffff
 800a12c:	ffff80ff 	.word	0xffff80ff
 800a130:	ffffc7ff 	.word	0xffffc7ff
 800a134:	00f42400 	.word	0x00f42400
 800a138:	2000000c 	.word	0x2000000c
 800a13c:	20000010 	.word	0x20000010
 800a140:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a144:	4bac      	ldr	r3, [pc, #688]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a148:	2380      	movs	r3, #128	; 0x80
 800a14a:	055b      	lsls	r3, r3, #21
 800a14c:	4013      	ands	r3, r2
 800a14e:	d101      	bne.n	800a154 <HAL_RCC_OscConfig+0x360>
 800a150:	2301      	movs	r3, #1
 800a152:	e000      	b.n	800a156 <HAL_RCC_OscConfig+0x362>
 800a154:	2300      	movs	r3, #0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d011      	beq.n	800a17e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a15a:	4ba7      	ldr	r3, [pc, #668]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a15c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a15e:	4ba6      	ldr	r3, [pc, #664]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a160:	2180      	movs	r1, #128	; 0x80
 800a162:	0549      	lsls	r1, r1, #21
 800a164:	430a      	orrs	r2, r1
 800a166:	63da      	str	r2, [r3, #60]	; 0x3c
 800a168:	4ba3      	ldr	r3, [pc, #652]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a16a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a16c:	2380      	movs	r3, #128	; 0x80
 800a16e:	055b      	lsls	r3, r3, #21
 800a170:	4013      	ands	r3, r2
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a176:	231f      	movs	r3, #31
 800a178:	18fb      	adds	r3, r7, r3
 800a17a:	2201      	movs	r2, #1
 800a17c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a17e:	4b9f      	ldr	r3, [pc, #636]	; (800a3fc <HAL_RCC_OscConfig+0x608>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	2380      	movs	r3, #128	; 0x80
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	4013      	ands	r3, r2
 800a188:	d11a      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a18a:	4b9c      	ldr	r3, [pc, #624]	; (800a3fc <HAL_RCC_OscConfig+0x608>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4b9b      	ldr	r3, [pc, #620]	; (800a3fc <HAL_RCC_OscConfig+0x608>)
 800a190:	2180      	movs	r1, #128	; 0x80
 800a192:	0049      	lsls	r1, r1, #1
 800a194:	430a      	orrs	r2, r1
 800a196:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a198:	f7fc fcfa 	bl	8006b90 <HAL_GetTick>
 800a19c:	0003      	movs	r3, r0
 800a19e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1a0:	e008      	b.n	800a1b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1a2:	f7fc fcf5 	bl	8006b90 <HAL_GetTick>
 800a1a6:	0002      	movs	r2, r0
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d901      	bls.n	800a1b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e11c      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1b4:	4b91      	ldr	r3, [pc, #580]	; (800a3fc <HAL_RCC_OscConfig+0x608>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	2380      	movs	r3, #128	; 0x80
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	4013      	ands	r3, r2
 800a1be:	d0f0      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d106      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x3e2>
 800a1c8:	4b8b      	ldr	r3, [pc, #556]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a1ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1cc:	4b8a      	ldr	r3, [pc, #552]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	430a      	orrs	r2, r1
 800a1d2:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1d4:	e01c      	b.n	800a210 <HAL_RCC_OscConfig+0x41c>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	2b05      	cmp	r3, #5
 800a1dc:	d10c      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x404>
 800a1de:	4b86      	ldr	r3, [pc, #536]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a1e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1e2:	4b85      	ldr	r3, [pc, #532]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a1e4:	2104      	movs	r1, #4
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1ea:	4b83      	ldr	r3, [pc, #524]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a1ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1ee:	4b82      	ldr	r3, [pc, #520]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1f6:	e00b      	b.n	800a210 <HAL_RCC_OscConfig+0x41c>
 800a1f8:	4b7f      	ldr	r3, [pc, #508]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a1fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1fc:	4b7e      	ldr	r3, [pc, #504]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a1fe:	2101      	movs	r1, #1
 800a200:	438a      	bics	r2, r1
 800a202:	65da      	str	r2, [r3, #92]	; 0x5c
 800a204:	4b7c      	ldr	r3, [pc, #496]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a208:	4b7b      	ldr	r3, [pc, #492]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a20a:	2104      	movs	r1, #4
 800a20c:	438a      	bics	r2, r1
 800a20e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d014      	beq.n	800a242 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a218:	f7fc fcba 	bl	8006b90 <HAL_GetTick>
 800a21c:	0003      	movs	r3, r0
 800a21e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a220:	e009      	b.n	800a236 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a222:	f7fc fcb5 	bl	8006b90 <HAL_GetTick>
 800a226:	0002      	movs	r2, r0
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	4a74      	ldr	r2, [pc, #464]	; (800a400 <HAL_RCC_OscConfig+0x60c>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d901      	bls.n	800a236 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e0db      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a236:	4b70      	ldr	r3, [pc, #448]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a23a:	2202      	movs	r2, #2
 800a23c:	4013      	ands	r3, r2
 800a23e:	d0f0      	beq.n	800a222 <HAL_RCC_OscConfig+0x42e>
 800a240:	e013      	b.n	800a26a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a242:	f7fc fca5 	bl	8006b90 <HAL_GetTick>
 800a246:	0003      	movs	r3, r0
 800a248:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a24a:	e009      	b.n	800a260 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a24c:	f7fc fca0 	bl	8006b90 <HAL_GetTick>
 800a250:	0002      	movs	r2, r0
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	4a6a      	ldr	r2, [pc, #424]	; (800a400 <HAL_RCC_OscConfig+0x60c>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d901      	bls.n	800a260 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e0c6      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a260:	4b65      	ldr	r3, [pc, #404]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a264:	2202      	movs	r2, #2
 800a266:	4013      	ands	r3, r2
 800a268:	d1f0      	bne.n	800a24c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a26a:	231f      	movs	r3, #31
 800a26c:	18fb      	adds	r3, r7, r3
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d105      	bne.n	800a280 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a274:	4b60      	ldr	r3, [pc, #384]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a278:	4b5f      	ldr	r3, [pc, #380]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a27a:	4962      	ldr	r1, [pc, #392]	; (800a404 <HAL_RCC_OscConfig+0x610>)
 800a27c:	400a      	ands	r2, r1
 800a27e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d100      	bne.n	800a28a <HAL_RCC_OscConfig+0x496>
 800a288:	e0b0      	b.n	800a3ec <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a28a:	4b5b      	ldr	r3, [pc, #364]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	2238      	movs	r2, #56	; 0x38
 800a290:	4013      	ands	r3, r2
 800a292:	2b10      	cmp	r3, #16
 800a294:	d100      	bne.n	800a298 <HAL_RCC_OscConfig+0x4a4>
 800a296:	e078      	b.n	800a38a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d153      	bne.n	800a348 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2a0:	4b55      	ldr	r3, [pc, #340]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	4b54      	ldr	r3, [pc, #336]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a2a6:	4958      	ldr	r1, [pc, #352]	; (800a408 <HAL_RCC_OscConfig+0x614>)
 800a2a8:	400a      	ands	r2, r1
 800a2aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2ac:	f7fc fc70 	bl	8006b90 <HAL_GetTick>
 800a2b0:	0003      	movs	r3, r0
 800a2b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2b4:	e008      	b.n	800a2c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2b6:	f7fc fc6b 	bl	8006b90 <HAL_GetTick>
 800a2ba:	0002      	movs	r2, r0
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d901      	bls.n	800a2c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e092      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2c8:	4b4b      	ldr	r3, [pc, #300]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	2380      	movs	r3, #128	; 0x80
 800a2ce:	049b      	lsls	r3, r3, #18
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	d1f0      	bne.n	800a2b6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2d4:	4b48      	ldr	r3, [pc, #288]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	4a4c      	ldr	r2, [pc, #304]	; (800a40c <HAL_RCC_OscConfig+0x618>)
 800a2da:	4013      	ands	r3, r2
 800a2dc:	0019      	movs	r1, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a1a      	ldr	r2, [r3, #32]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	021b      	lsls	r3, r3, #8
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	4b3e      	ldr	r3, [pc, #248]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a2fe:	430a      	orrs	r2, r1
 800a300:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a302:	4b3d      	ldr	r3, [pc, #244]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	4b3c      	ldr	r3, [pc, #240]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a308:	2180      	movs	r1, #128	; 0x80
 800a30a:	0449      	lsls	r1, r1, #17
 800a30c:	430a      	orrs	r2, r1
 800a30e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a310:	4b39      	ldr	r3, [pc, #228]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	4b38      	ldr	r3, [pc, #224]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a316:	2180      	movs	r1, #128	; 0x80
 800a318:	0549      	lsls	r1, r1, #21
 800a31a:	430a      	orrs	r2, r1
 800a31c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a31e:	f7fc fc37 	bl	8006b90 <HAL_GetTick>
 800a322:	0003      	movs	r3, r0
 800a324:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a326:	e008      	b.n	800a33a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a328:	f7fc fc32 	bl	8006b90 <HAL_GetTick>
 800a32c:	0002      	movs	r2, r0
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	2b02      	cmp	r3, #2
 800a334:	d901      	bls.n	800a33a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e059      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a33a:	4b2f      	ldr	r3, [pc, #188]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	2380      	movs	r3, #128	; 0x80
 800a340:	049b      	lsls	r3, r3, #18
 800a342:	4013      	ands	r3, r2
 800a344:	d0f0      	beq.n	800a328 <HAL_RCC_OscConfig+0x534>
 800a346:	e051      	b.n	800a3ec <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a348:	4b2b      	ldr	r3, [pc, #172]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	4b2a      	ldr	r3, [pc, #168]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a34e:	492e      	ldr	r1, [pc, #184]	; (800a408 <HAL_RCC_OscConfig+0x614>)
 800a350:	400a      	ands	r2, r1
 800a352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a354:	f7fc fc1c 	bl	8006b90 <HAL_GetTick>
 800a358:	0003      	movs	r3, r0
 800a35a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a35c:	e008      	b.n	800a370 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a35e:	f7fc fc17 	bl	8006b90 <HAL_GetTick>
 800a362:	0002      	movs	r2, r0
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d901      	bls.n	800a370 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e03e      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a370:	4b21      	ldr	r3, [pc, #132]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	2380      	movs	r3, #128	; 0x80
 800a376:	049b      	lsls	r3, r3, #18
 800a378:	4013      	ands	r3, r2
 800a37a:	d1f0      	bne.n	800a35e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800a37c:	4b1e      	ldr	r3, [pc, #120]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	4b1d      	ldr	r3, [pc, #116]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a382:	4923      	ldr	r1, [pc, #140]	; (800a410 <HAL_RCC_OscConfig+0x61c>)
 800a384:	400a      	ands	r2, r1
 800a386:	60da      	str	r2, [r3, #12]
 800a388:	e030      	b.n	800a3ec <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d101      	bne.n	800a396 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e02b      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a396:	4b18      	ldr	r3, [pc, #96]	; (800a3f8 <HAL_RCC_OscConfig+0x604>)
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	2203      	movs	r2, #3
 800a3a0:	401a      	ands	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d11e      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2270      	movs	r2, #112	; 0x70
 800a3ae:	401a      	ands	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d117      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	23fe      	movs	r3, #254	; 0xfe
 800a3bc:	01db      	lsls	r3, r3, #7
 800a3be:	401a      	ands	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d10e      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	23f8      	movs	r3, #248	; 0xf8
 800a3ce:	039b      	lsls	r3, r3, #14
 800a3d0:	401a      	ands	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d106      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	0f5b      	lsrs	r3, r3, #29
 800a3de:	075a      	lsls	r2, r3, #29
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d001      	beq.n	800a3ec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e000      	b.n	800a3ee <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	b008      	add	sp, #32
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	46c0      	nop			; (mov r8, r8)
 800a3f8:	40021000 	.word	0x40021000
 800a3fc:	40007000 	.word	0x40007000
 800a400:	00001388 	.word	0x00001388
 800a404:	efffffff 	.word	0xefffffff
 800a408:	feffffff 	.word	0xfeffffff
 800a40c:	1fc1808c 	.word	0x1fc1808c
 800a410:	effefffc 	.word	0xeffefffc

0800a414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e0e9      	b.n	800a5fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a428:	4b76      	ldr	r3, [pc, #472]	; (800a604 <HAL_RCC_ClockConfig+0x1f0>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2207      	movs	r2, #7
 800a42e:	4013      	ands	r3, r2
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d91e      	bls.n	800a474 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a436:	4b73      	ldr	r3, [pc, #460]	; (800a604 <HAL_RCC_ClockConfig+0x1f0>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2207      	movs	r2, #7
 800a43c:	4393      	bics	r3, r2
 800a43e:	0019      	movs	r1, r3
 800a440:	4b70      	ldr	r3, [pc, #448]	; (800a604 <HAL_RCC_ClockConfig+0x1f0>)
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	430a      	orrs	r2, r1
 800a446:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a448:	f7fc fba2 	bl	8006b90 <HAL_GetTick>
 800a44c:	0003      	movs	r3, r0
 800a44e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a450:	e009      	b.n	800a466 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a452:	f7fc fb9d 	bl	8006b90 <HAL_GetTick>
 800a456:	0002      	movs	r2, r0
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	4a6a      	ldr	r2, [pc, #424]	; (800a608 <HAL_RCC_ClockConfig+0x1f4>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d901      	bls.n	800a466 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	e0ca      	b.n	800a5fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a466:	4b67      	ldr	r3, [pc, #412]	; (800a604 <HAL_RCC_ClockConfig+0x1f0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2207      	movs	r2, #7
 800a46c:	4013      	ands	r3, r2
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d1ee      	bne.n	800a452 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2202      	movs	r2, #2
 800a47a:	4013      	ands	r3, r2
 800a47c:	d015      	beq.n	800a4aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2204      	movs	r2, #4
 800a484:	4013      	ands	r3, r2
 800a486:	d006      	beq.n	800a496 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a488:	4b60      	ldr	r3, [pc, #384]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a48a:	689a      	ldr	r2, [r3, #8]
 800a48c:	4b5f      	ldr	r3, [pc, #380]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a48e:	21e0      	movs	r1, #224	; 0xe0
 800a490:	01c9      	lsls	r1, r1, #7
 800a492:	430a      	orrs	r2, r1
 800a494:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a496:	4b5d      	ldr	r3, [pc, #372]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	4a5d      	ldr	r2, [pc, #372]	; (800a610 <HAL_RCC_ClockConfig+0x1fc>)
 800a49c:	4013      	ands	r3, r2
 800a49e:	0019      	movs	r1, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	4b59      	ldr	r3, [pc, #356]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	d057      	beq.n	800a564 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d107      	bne.n	800a4cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4bc:	4b53      	ldr	r3, [pc, #332]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	2380      	movs	r3, #128	; 0x80
 800a4c2:	029b      	lsls	r3, r3, #10
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	d12b      	bne.n	800a520 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e097      	b.n	800a5fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d107      	bne.n	800a4e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4d4:	4b4d      	ldr	r3, [pc, #308]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	2380      	movs	r3, #128	; 0x80
 800a4da:	049b      	lsls	r3, r3, #18
 800a4dc:	4013      	ands	r3, r2
 800a4de:	d11f      	bne.n	800a520 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e08b      	b.n	800a5fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d107      	bne.n	800a4fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4ec:	4b47      	ldr	r3, [pc, #284]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	2380      	movs	r3, #128	; 0x80
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	d113      	bne.n	800a520 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e07f      	b.n	800a5fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	2b03      	cmp	r3, #3
 800a502:	d106      	bne.n	800a512 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a504:	4b41      	ldr	r3, [pc, #260]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a508:	2202      	movs	r2, #2
 800a50a:	4013      	ands	r3, r2
 800a50c:	d108      	bne.n	800a520 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e074      	b.n	800a5fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a512:	4b3e      	ldr	r3, [pc, #248]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a516:	2202      	movs	r2, #2
 800a518:	4013      	ands	r3, r2
 800a51a:	d101      	bne.n	800a520 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e06d      	b.n	800a5fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a520:	4b3a      	ldr	r3, [pc, #232]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	2207      	movs	r2, #7
 800a526:	4393      	bics	r3, r2
 800a528:	0019      	movs	r1, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	4b37      	ldr	r3, [pc, #220]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a530:	430a      	orrs	r2, r1
 800a532:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a534:	f7fc fb2c 	bl	8006b90 <HAL_GetTick>
 800a538:	0003      	movs	r3, r0
 800a53a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a53c:	e009      	b.n	800a552 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a53e:	f7fc fb27 	bl	8006b90 <HAL_GetTick>
 800a542:	0002      	movs	r2, r0
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	4a2f      	ldr	r2, [pc, #188]	; (800a608 <HAL_RCC_ClockConfig+0x1f4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e054      	b.n	800a5fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a552:	4b2e      	ldr	r3, [pc, #184]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	2238      	movs	r2, #56	; 0x38
 800a558:	401a      	ands	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	429a      	cmp	r2, r3
 800a562:	d1ec      	bne.n	800a53e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a564:	4b27      	ldr	r3, [pc, #156]	; (800a604 <HAL_RCC_ClockConfig+0x1f0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2207      	movs	r2, #7
 800a56a:	4013      	ands	r3, r2
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d21e      	bcs.n	800a5b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a572:	4b24      	ldr	r3, [pc, #144]	; (800a604 <HAL_RCC_ClockConfig+0x1f0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2207      	movs	r2, #7
 800a578:	4393      	bics	r3, r2
 800a57a:	0019      	movs	r1, r3
 800a57c:	4b21      	ldr	r3, [pc, #132]	; (800a604 <HAL_RCC_ClockConfig+0x1f0>)
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a584:	f7fc fb04 	bl	8006b90 <HAL_GetTick>
 800a588:	0003      	movs	r3, r0
 800a58a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a58c:	e009      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a58e:	f7fc faff 	bl	8006b90 <HAL_GetTick>
 800a592:	0002      	movs	r2, r0
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	4a1b      	ldr	r2, [pc, #108]	; (800a608 <HAL_RCC_ClockConfig+0x1f4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d901      	bls.n	800a5a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e02c      	b.n	800a5fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a5a2:	4b18      	ldr	r3, [pc, #96]	; (800a604 <HAL_RCC_ClockConfig+0x1f0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2207      	movs	r2, #7
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d1ee      	bne.n	800a58e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2204      	movs	r2, #4
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	d009      	beq.n	800a5ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a5ba:	4b14      	ldr	r3, [pc, #80]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	4a15      	ldr	r2, [pc, #84]	; (800a614 <HAL_RCC_ClockConfig+0x200>)
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	0019      	movs	r1, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68da      	ldr	r2, [r3, #12]
 800a5c8:	4b10      	ldr	r3, [pc, #64]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a5ce:	f000 f829 	bl	800a624 <HAL_RCC_GetSysClockFreq>
 800a5d2:	0001      	movs	r1, r0
 800a5d4:	4b0d      	ldr	r3, [pc, #52]	; (800a60c <HAL_RCC_ClockConfig+0x1f8>)
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	0a1b      	lsrs	r3, r3, #8
 800a5da:	220f      	movs	r2, #15
 800a5dc:	401a      	ands	r2, r3
 800a5de:	4b0e      	ldr	r3, [pc, #56]	; (800a618 <HAL_RCC_ClockConfig+0x204>)
 800a5e0:	0092      	lsls	r2, r2, #2
 800a5e2:	58d3      	ldr	r3, [r2, r3]
 800a5e4:	221f      	movs	r2, #31
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	000a      	movs	r2, r1
 800a5ea:	40da      	lsrs	r2, r3
 800a5ec:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <HAL_RCC_ClockConfig+0x208>)
 800a5ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a5f0:	4b0b      	ldr	r3, [pc, #44]	; (800a620 <HAL_RCC_ClockConfig+0x20c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	0018      	movs	r0, r3
 800a5f6:	f7fc fa6f 	bl	8006ad8 <HAL_InitTick>
 800a5fa:	0003      	movs	r3, r0
}
 800a5fc:	0018      	movs	r0, r3
 800a5fe:	46bd      	mov	sp, r7
 800a600:	b004      	add	sp, #16
 800a602:	bd80      	pop	{r7, pc}
 800a604:	40022000 	.word	0x40022000
 800a608:	00001388 	.word	0x00001388
 800a60c:	40021000 	.word	0x40021000
 800a610:	fffff0ff 	.word	0xfffff0ff
 800a614:	ffff8fff 	.word	0xffff8fff
 800a618:	080100d4 	.word	0x080100d4
 800a61c:	2000000c 	.word	0x2000000c
 800a620:	20000010 	.word	0x20000010

0800a624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a62a:	4b3c      	ldr	r3, [pc, #240]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	2238      	movs	r2, #56	; 0x38
 800a630:	4013      	ands	r3, r2
 800a632:	d10f      	bne.n	800a654 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a634:	4b39      	ldr	r3, [pc, #228]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	0adb      	lsrs	r3, r3, #11
 800a63a:	2207      	movs	r2, #7
 800a63c:	4013      	ands	r3, r2
 800a63e:	2201      	movs	r2, #1
 800a640:	409a      	lsls	r2, r3
 800a642:	0013      	movs	r3, r2
 800a644:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	4835      	ldr	r0, [pc, #212]	; (800a720 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a64a:	f7f5 fd75 	bl	8000138 <__udivsi3>
 800a64e:	0003      	movs	r3, r0
 800a650:	613b      	str	r3, [r7, #16]
 800a652:	e05d      	b.n	800a710 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a654:	4b31      	ldr	r3, [pc, #196]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	2238      	movs	r2, #56	; 0x38
 800a65a:	4013      	ands	r3, r2
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d102      	bne.n	800a666 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a660:	4b30      	ldr	r3, [pc, #192]	; (800a724 <HAL_RCC_GetSysClockFreq+0x100>)
 800a662:	613b      	str	r3, [r7, #16]
 800a664:	e054      	b.n	800a710 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a666:	4b2d      	ldr	r3, [pc, #180]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	2238      	movs	r2, #56	; 0x38
 800a66c:	4013      	ands	r3, r2
 800a66e:	2b10      	cmp	r3, #16
 800a670:	d138      	bne.n	800a6e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a672:	4b2a      	ldr	r3, [pc, #168]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	2203      	movs	r2, #3
 800a678:	4013      	ands	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a67c:	4b27      	ldr	r3, [pc, #156]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	091b      	lsrs	r3, r3, #4
 800a682:	2207      	movs	r2, #7
 800a684:	4013      	ands	r3, r2
 800a686:	3301      	adds	r3, #1
 800a688:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d10d      	bne.n	800a6ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a690:	68b9      	ldr	r1, [r7, #8]
 800a692:	4824      	ldr	r0, [pc, #144]	; (800a724 <HAL_RCC_GetSysClockFreq+0x100>)
 800a694:	f7f5 fd50 	bl	8000138 <__udivsi3>
 800a698:	0003      	movs	r3, r0
 800a69a:	0019      	movs	r1, r3
 800a69c:	4b1f      	ldr	r3, [pc, #124]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	0a1b      	lsrs	r3, r3, #8
 800a6a2:	227f      	movs	r2, #127	; 0x7f
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	434b      	muls	r3, r1
 800a6a8:	617b      	str	r3, [r7, #20]
        break;
 800a6aa:	e00d      	b.n	800a6c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a6ac:	68b9      	ldr	r1, [r7, #8]
 800a6ae:	481c      	ldr	r0, [pc, #112]	; (800a720 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a6b0:	f7f5 fd42 	bl	8000138 <__udivsi3>
 800a6b4:	0003      	movs	r3, r0
 800a6b6:	0019      	movs	r1, r3
 800a6b8:	4b18      	ldr	r3, [pc, #96]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	0a1b      	lsrs	r3, r3, #8
 800a6be:	227f      	movs	r2, #127	; 0x7f
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	434b      	muls	r3, r1
 800a6c4:	617b      	str	r3, [r7, #20]
        break;
 800a6c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a6c8:	4b14      	ldr	r3, [pc, #80]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	0f5b      	lsrs	r3, r3, #29
 800a6ce:	2207      	movs	r2, #7
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	6978      	ldr	r0, [r7, #20]
 800a6da:	f7f5 fd2d 	bl	8000138 <__udivsi3>
 800a6de:	0003      	movs	r3, r0
 800a6e0:	613b      	str	r3, [r7, #16]
 800a6e2:	e015      	b.n	800a710 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a6e4:	4b0d      	ldr	r3, [pc, #52]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	2238      	movs	r2, #56	; 0x38
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2b20      	cmp	r3, #32
 800a6ee:	d103      	bne.n	800a6f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a6f0:	2380      	movs	r3, #128	; 0x80
 800a6f2:	021b      	lsls	r3, r3, #8
 800a6f4:	613b      	str	r3, [r7, #16]
 800a6f6:	e00b      	b.n	800a710 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a6f8:	4b08      	ldr	r3, [pc, #32]	; (800a71c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	2238      	movs	r2, #56	; 0x38
 800a6fe:	4013      	ands	r3, r2
 800a700:	2b18      	cmp	r3, #24
 800a702:	d103      	bne.n	800a70c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a704:	23fa      	movs	r3, #250	; 0xfa
 800a706:	01db      	lsls	r3, r3, #7
 800a708:	613b      	str	r3, [r7, #16]
 800a70a:	e001      	b.n	800a710 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a70c:	2300      	movs	r3, #0
 800a70e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a710:	693b      	ldr	r3, [r7, #16]
}
 800a712:	0018      	movs	r0, r3
 800a714:	46bd      	mov	sp, r7
 800a716:	b006      	add	sp, #24
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	46c0      	nop			; (mov r8, r8)
 800a71c:	40021000 	.word	0x40021000
 800a720:	00f42400 	.word	0x00f42400
 800a724:	007a1200 	.word	0x007a1200

0800a728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a72c:	4b02      	ldr	r3, [pc, #8]	; (800a738 <HAL_RCC_GetHCLKFreq+0x10>)
 800a72e:	681b      	ldr	r3, [r3, #0]
}
 800a730:	0018      	movs	r0, r3
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	2000000c 	.word	0x2000000c

0800a73c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a73c:	b5b0      	push	{r4, r5, r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a740:	f7ff fff2 	bl	800a728 <HAL_RCC_GetHCLKFreq>
 800a744:	0004      	movs	r4, r0
 800a746:	f7ff fb49 	bl	8009ddc <LL_RCC_GetAPB1Prescaler>
 800a74a:	0003      	movs	r3, r0
 800a74c:	0b1a      	lsrs	r2, r3, #12
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a750:	0092      	lsls	r2, r2, #2
 800a752:	58d3      	ldr	r3, [r2, r3]
 800a754:	221f      	movs	r2, #31
 800a756:	4013      	ands	r3, r2
 800a758:	40dc      	lsrs	r4, r3
 800a75a:	0023      	movs	r3, r4
}
 800a75c:	0018      	movs	r0, r3
 800a75e:	46bd      	mov	sp, r7
 800a760:	bdb0      	pop	{r4, r5, r7, pc}
 800a762:	46c0      	nop			; (mov r8, r8)
 800a764:	08010114 	.word	0x08010114

0800a768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a770:	2313      	movs	r3, #19
 800a772:	18fb      	adds	r3, r7, r3
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a778:	2312      	movs	r3, #18
 800a77a:	18fb      	adds	r3, r7, r3
 800a77c:	2200      	movs	r2, #0
 800a77e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	2380      	movs	r3, #128	; 0x80
 800a786:	029b      	lsls	r3, r3, #10
 800a788:	4013      	ands	r3, r2
 800a78a:	d100      	bne.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a78c:	e0a3      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a78e:	2011      	movs	r0, #17
 800a790:	183b      	adds	r3, r7, r0
 800a792:	2200      	movs	r2, #0
 800a794:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a796:	4b86      	ldr	r3, [pc, #536]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a79a:	2380      	movs	r3, #128	; 0x80
 800a79c:	055b      	lsls	r3, r3, #21
 800a79e:	4013      	ands	r3, r2
 800a7a0:	d110      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7a2:	4b83      	ldr	r3, [pc, #524]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7a6:	4b82      	ldr	r3, [pc, #520]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7a8:	2180      	movs	r1, #128	; 0x80
 800a7aa:	0549      	lsls	r1, r1, #21
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	63da      	str	r2, [r3, #60]	; 0x3c
 800a7b0:	4b7f      	ldr	r3, [pc, #508]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7b4:	2380      	movs	r3, #128	; 0x80
 800a7b6:	055b      	lsls	r3, r3, #21
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	60bb      	str	r3, [r7, #8]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7be:	183b      	adds	r3, r7, r0
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7c4:	4b7b      	ldr	r3, [pc, #492]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	4b7a      	ldr	r3, [pc, #488]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a7ca:	2180      	movs	r1, #128	; 0x80
 800a7cc:	0049      	lsls	r1, r1, #1
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7d2:	f7fc f9dd 	bl	8006b90 <HAL_GetTick>
 800a7d6:	0003      	movs	r3, r0
 800a7d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7da:	e00b      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7dc:	f7fc f9d8 	bl	8006b90 <HAL_GetTick>
 800a7e0:	0002      	movs	r2, r0
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d904      	bls.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a7ea:	2313      	movs	r3, #19
 800a7ec:	18fb      	adds	r3, r7, r3
 800a7ee:	2203      	movs	r2, #3
 800a7f0:	701a      	strb	r2, [r3, #0]
        break;
 800a7f2:	e005      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7f4:	4b6f      	ldr	r3, [pc, #444]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	2380      	movs	r3, #128	; 0x80
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	d0ed      	beq.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a800:	2313      	movs	r3, #19
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d154      	bne.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a80a:	4b69      	ldr	r3, [pc, #420]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a80c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a80e:	23c0      	movs	r3, #192	; 0xc0
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4013      	ands	r3, r2
 800a814:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d019      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	429a      	cmp	r2, r3
 800a824:	d014      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a826:	4b62      	ldr	r3, [pc, #392]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a82a:	4a63      	ldr	r2, [pc, #396]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a82c:	4013      	ands	r3, r2
 800a82e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a830:	4b5f      	ldr	r3, [pc, #380]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a834:	4b5e      	ldr	r3, [pc, #376]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a836:	2180      	movs	r1, #128	; 0x80
 800a838:	0249      	lsls	r1, r1, #9
 800a83a:	430a      	orrs	r2, r1
 800a83c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a83e:	4b5c      	ldr	r3, [pc, #368]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a842:	4b5b      	ldr	r3, [pc, #364]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a844:	495d      	ldr	r1, [pc, #372]	; (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800a846:	400a      	ands	r2, r1
 800a848:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a84a:	4b59      	ldr	r3, [pc, #356]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	2201      	movs	r2, #1
 800a854:	4013      	ands	r3, r2
 800a856:	d016      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a858:	f7fc f99a 	bl	8006b90 <HAL_GetTick>
 800a85c:	0003      	movs	r3, r0
 800a85e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a860:	e00c      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a862:	f7fc f995 	bl	8006b90 <HAL_GetTick>
 800a866:	0002      	movs	r2, r0
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	4a54      	ldr	r2, [pc, #336]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d904      	bls.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a872:	2313      	movs	r3, #19
 800a874:	18fb      	adds	r3, r7, r3
 800a876:	2203      	movs	r2, #3
 800a878:	701a      	strb	r2, [r3, #0]
            break;
 800a87a:	e004      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a87c:	4b4c      	ldr	r3, [pc, #304]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a880:	2202      	movs	r2, #2
 800a882:	4013      	ands	r3, r2
 800a884:	d0ed      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a886:	2313      	movs	r3, #19
 800a888:	18fb      	adds	r3, r7, r3
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10a      	bne.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a890:	4b47      	ldr	r3, [pc, #284]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a894:	4a48      	ldr	r2, [pc, #288]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a896:	4013      	ands	r3, r2
 800a898:	0019      	movs	r1, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	699a      	ldr	r2, [r3, #24]
 800a89e:	4b44      	ldr	r3, [pc, #272]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	65da      	str	r2, [r3, #92]	; 0x5c
 800a8a4:	e00c      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a8a6:	2312      	movs	r3, #18
 800a8a8:	18fb      	adds	r3, r7, r3
 800a8aa:	2213      	movs	r2, #19
 800a8ac:	18ba      	adds	r2, r7, r2
 800a8ae:	7812      	ldrb	r2, [r2, #0]
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	e005      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b4:	2312      	movs	r3, #18
 800a8b6:	18fb      	adds	r3, r7, r3
 800a8b8:	2213      	movs	r2, #19
 800a8ba:	18ba      	adds	r2, r7, r2
 800a8bc:	7812      	ldrb	r2, [r2, #0]
 800a8be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a8c0:	2311      	movs	r3, #17
 800a8c2:	18fb      	adds	r3, r7, r3
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d105      	bne.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8ca:	4b39      	ldr	r3, [pc, #228]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8ce:	4b38      	ldr	r3, [pc, #224]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8d0:	493c      	ldr	r1, [pc, #240]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a8d2:	400a      	ands	r2, r1
 800a8d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	4013      	ands	r3, r2
 800a8de:	d009      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a8e0:	4b33      	ldr	r3, [pc, #204]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e4:	2203      	movs	r2, #3
 800a8e6:	4393      	bics	r3, r2
 800a8e8:	0019      	movs	r1, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	4b30      	ldr	r3, [pc, #192]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	d009      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a8fe:	4b2c      	ldr	r3, [pc, #176]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a902:	220c      	movs	r2, #12
 800a904:	4393      	bics	r3, r2
 800a906:	0019      	movs	r1, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	689a      	ldr	r2, [r3, #8]
 800a90c:	4b28      	ldr	r3, [pc, #160]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a90e:	430a      	orrs	r2, r1
 800a910:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2220      	movs	r2, #32
 800a918:	4013      	ands	r3, r2
 800a91a:	d009      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a91c:	4b24      	ldr	r3, [pc, #144]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a91e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a920:	4a29      	ldr	r2, [pc, #164]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a922:	4013      	ands	r3, r2
 800a924:	0019      	movs	r1, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68da      	ldr	r2, [r3, #12]
 800a92a:	4b21      	ldr	r3, [pc, #132]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a92c:	430a      	orrs	r2, r1
 800a92e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	2380      	movs	r3, #128	; 0x80
 800a936:	01db      	lsls	r3, r3, #7
 800a938:	4013      	ands	r3, r2
 800a93a:	d015      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a93c:	4b1c      	ldr	r3, [pc, #112]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	0899      	lsrs	r1, r3, #2
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	695a      	ldr	r2, [r3, #20]
 800a948:	4b19      	ldr	r3, [pc, #100]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a94a:	430a      	orrs	r2, r1
 800a94c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	695a      	ldr	r2, [r3, #20]
 800a952:	2380      	movs	r3, #128	; 0x80
 800a954:	05db      	lsls	r3, r3, #23
 800a956:	429a      	cmp	r2, r3
 800a958:	d106      	bne.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a95a:	4b15      	ldr	r3, [pc, #84]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a95c:	68da      	ldr	r2, [r3, #12]
 800a95e:	4b14      	ldr	r3, [pc, #80]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a960:	2180      	movs	r1, #128	; 0x80
 800a962:	0249      	lsls	r1, r1, #9
 800a964:	430a      	orrs	r2, r1
 800a966:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	2380      	movs	r3, #128	; 0x80
 800a96e:	011b      	lsls	r3, r3, #4
 800a970:	4013      	ands	r3, r2
 800a972:	d016      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a974:	4b0e      	ldr	r3, [pc, #56]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a978:	4a14      	ldr	r2, [pc, #80]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a97a:	4013      	ands	r3, r2
 800a97c:	0019      	movs	r1, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691a      	ldr	r2, [r3, #16]
 800a982:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a984:	430a      	orrs	r2, r1
 800a986:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691a      	ldr	r2, [r3, #16]
 800a98c:	2380      	movs	r3, #128	; 0x80
 800a98e:	01db      	lsls	r3, r3, #7
 800a990:	429a      	cmp	r2, r3
 800a992:	d106      	bne.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a994:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a99a:	2180      	movs	r1, #128	; 0x80
 800a99c:	0249      	lsls	r1, r1, #9
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a9a2:	2312      	movs	r3, #18
 800a9a4:	18fb      	adds	r3, r7, r3
 800a9a6:	781b      	ldrb	r3, [r3, #0]
}
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	b006      	add	sp, #24
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	40021000 	.word	0x40021000
 800a9b4:	40007000 	.word	0x40007000
 800a9b8:	fffffcff 	.word	0xfffffcff
 800a9bc:	fffeffff 	.word	0xfffeffff
 800a9c0:	00001388 	.word	0x00001388
 800a9c4:	efffffff 	.word	0xefffffff
 800a9c8:	ffffcfff 	.word	0xffffcfff
 800a9cc:	ffff3fff 	.word	0xffff3fff

0800a9d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d101      	bne.n	800a9e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e04a      	b.n	800aa78 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	223d      	movs	r2, #61	; 0x3d
 800a9e6:	5c9b      	ldrb	r3, [r3, r2]
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d107      	bne.n	800a9fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	223c      	movs	r2, #60	; 0x3c
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	0018      	movs	r0, r3
 800a9fa:	f7fb fabf 	bl	8005f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	223d      	movs	r2, #61	; 0x3d
 800aa02:	2102      	movs	r1, #2
 800aa04:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	0019      	movs	r1, r3
 800aa10:	0010      	movs	r0, r2
 800aa12:	f000 fc41 	bl	800b298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2248      	movs	r2, #72	; 0x48
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	223e      	movs	r2, #62	; 0x3e
 800aa22:	2101      	movs	r1, #1
 800aa24:	5499      	strb	r1, [r3, r2]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	223f      	movs	r2, #63	; 0x3f
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	5499      	strb	r1, [r3, r2]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2240      	movs	r2, #64	; 0x40
 800aa32:	2101      	movs	r1, #1
 800aa34:	5499      	strb	r1, [r3, r2]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2241      	movs	r2, #65	; 0x41
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	5499      	strb	r1, [r3, r2]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2242      	movs	r2, #66	; 0x42
 800aa42:	2101      	movs	r1, #1
 800aa44:	5499      	strb	r1, [r3, r2]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2243      	movs	r2, #67	; 0x43
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2244      	movs	r2, #68	; 0x44
 800aa52:	2101      	movs	r1, #1
 800aa54:	5499      	strb	r1, [r3, r2]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2245      	movs	r2, #69	; 0x45
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	5499      	strb	r1, [r3, r2]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2246      	movs	r2, #70	; 0x46
 800aa62:	2101      	movs	r1, #1
 800aa64:	5499      	strb	r1, [r3, r2]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2247      	movs	r2, #71	; 0x47
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	223d      	movs	r2, #61	; 0x3d
 800aa72:	2101      	movs	r1, #1
 800aa74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	0018      	movs	r0, r3
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	b002      	add	sp, #8
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	223d      	movs	r2, #61	; 0x3d
 800aa8c:	5c9b      	ldrb	r3, [r3, r2]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d001      	beq.n	800aa98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e03c      	b.n	800ab12 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	223d      	movs	r2, #61	; 0x3d
 800aa9c:	2102      	movs	r1, #2
 800aa9e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2101      	movs	r1, #1
 800aaac:	430a      	orrs	r2, r1
 800aaae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a19      	ldr	r2, [pc, #100]	; (800ab1c <HAL_TIM_Base_Start_IT+0x9c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d009      	beq.n	800aace <HAL_TIM_Base_Start_IT+0x4e>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a18      	ldr	r2, [pc, #96]	; (800ab20 <HAL_TIM_Base_Start_IT+0xa0>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d004      	beq.n	800aace <HAL_TIM_Base_Start_IT+0x4e>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a16      	ldr	r2, [pc, #88]	; (800ab24 <HAL_TIM_Base_Start_IT+0xa4>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d116      	bne.n	800aafc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	4a14      	ldr	r2, [pc, #80]	; (800ab28 <HAL_TIM_Base_Start_IT+0xa8>)
 800aad6:	4013      	ands	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b06      	cmp	r3, #6
 800aade:	d016      	beq.n	800ab0e <HAL_TIM_Base_Start_IT+0x8e>
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	2380      	movs	r3, #128	; 0x80
 800aae4:	025b      	lsls	r3, r3, #9
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d011      	beq.n	800ab0e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aafa:	e008      	b.n	800ab0e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2101      	movs	r1, #1
 800ab08:	430a      	orrs	r2, r1
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	e000      	b.n	800ab10 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	0018      	movs	r0, r3
 800ab14:	46bd      	mov	sp, r7
 800ab16:	b004      	add	sp, #16
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	46c0      	nop			; (mov r8, r8)
 800ab1c:	40012c00 	.word	0x40012c00
 800ab20:	40000400 	.word	0x40000400
 800ab24:	40014000 	.word	0x40014000
 800ab28:	00010007 	.word	0x00010007

0800ab2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2101      	movs	r1, #1
 800ab40:	438a      	bics	r2, r1
 800ab42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	4a0d      	ldr	r2, [pc, #52]	; (800ab80 <HAL_TIM_Base_Stop_IT+0x54>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	d10d      	bne.n	800ab6c <HAL_TIM_Base_Stop_IT+0x40>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	4a0b      	ldr	r2, [pc, #44]	; (800ab84 <HAL_TIM_Base_Stop_IT+0x58>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	d107      	bne.n	800ab6c <HAL_TIM_Base_Stop_IT+0x40>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2101      	movs	r1, #1
 800ab68:	438a      	bics	r2, r1
 800ab6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	223d      	movs	r2, #61	; 0x3d
 800ab70:	2101      	movs	r1, #1
 800ab72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	0018      	movs	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	b002      	add	sp, #8
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	46c0      	nop			; (mov r8, r8)
 800ab80:	00001111 	.word	0x00001111
 800ab84:	00000444 	.word	0x00000444

0800ab88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e04a      	b.n	800ac30 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	223d      	movs	r2, #61	; 0x3d
 800ab9e:	5c9b      	ldrb	r3, [r3, r2]
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d107      	bne.n	800abb6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	223c      	movs	r2, #60	; 0x3c
 800abaa:	2100      	movs	r1, #0
 800abac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	0018      	movs	r0, r3
 800abb2:	f000 f841 	bl	800ac38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	223d      	movs	r2, #61	; 0x3d
 800abba:	2102      	movs	r1, #2
 800abbc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3304      	adds	r3, #4
 800abc6:	0019      	movs	r1, r3
 800abc8:	0010      	movs	r0, r2
 800abca:	f000 fb65 	bl	800b298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2248      	movs	r2, #72	; 0x48
 800abd2:	2101      	movs	r1, #1
 800abd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	223e      	movs	r2, #62	; 0x3e
 800abda:	2101      	movs	r1, #1
 800abdc:	5499      	strb	r1, [r3, r2]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	223f      	movs	r2, #63	; 0x3f
 800abe2:	2101      	movs	r1, #1
 800abe4:	5499      	strb	r1, [r3, r2]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2240      	movs	r2, #64	; 0x40
 800abea:	2101      	movs	r1, #1
 800abec:	5499      	strb	r1, [r3, r2]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2241      	movs	r2, #65	; 0x41
 800abf2:	2101      	movs	r1, #1
 800abf4:	5499      	strb	r1, [r3, r2]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2242      	movs	r2, #66	; 0x42
 800abfa:	2101      	movs	r1, #1
 800abfc:	5499      	strb	r1, [r3, r2]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2243      	movs	r2, #67	; 0x43
 800ac02:	2101      	movs	r1, #1
 800ac04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2244      	movs	r2, #68	; 0x44
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	5499      	strb	r1, [r3, r2]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2245      	movs	r2, #69	; 0x45
 800ac12:	2101      	movs	r1, #1
 800ac14:	5499      	strb	r1, [r3, r2]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2246      	movs	r2, #70	; 0x46
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	5499      	strb	r1, [r3, r2]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2247      	movs	r2, #71	; 0x47
 800ac22:	2101      	movs	r1, #1
 800ac24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	223d      	movs	r2, #61	; 0x3d
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	0018      	movs	r0, r3
 800ac32:	46bd      	mov	sp, r7
 800ac34:	b002      	add	sp, #8
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac40:	46c0      	nop			; (mov r8, r8)
 800ac42:	46bd      	mov	sp, r7
 800ac44:	b002      	add	sp, #8
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	2202      	movs	r2, #2
 800ac58:	4013      	ands	r3, r2
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d124      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	2202      	movs	r2, #2
 800ac66:	4013      	ands	r3, r2
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d11d      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2203      	movs	r2, #3
 800ac72:	4252      	negs	r2, r2
 800ac74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	2203      	movs	r2, #3
 800ac84:	4013      	ands	r3, r2
 800ac86:	d004      	beq.n	800ac92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	0018      	movs	r0, r3
 800ac8c:	f000 faec 	bl	800b268 <HAL_TIM_IC_CaptureCallback>
 800ac90:	e007      	b.n	800aca2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	0018      	movs	r0, r3
 800ac96:	f000 fadf 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	f000 faeb 	bl	800b278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	2204      	movs	r2, #4
 800acb0:	4013      	ands	r3, r2
 800acb2:	2b04      	cmp	r3, #4
 800acb4:	d125      	bne.n	800ad02 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	2204      	movs	r2, #4
 800acbe:	4013      	ands	r3, r2
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d11e      	bne.n	800ad02 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2205      	movs	r2, #5
 800acca:	4252      	negs	r2, r2
 800accc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2202      	movs	r2, #2
 800acd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	699a      	ldr	r2, [r3, #24]
 800acda:	23c0      	movs	r3, #192	; 0xc0
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4013      	ands	r3, r2
 800ace0:	d004      	beq.n	800acec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	0018      	movs	r0, r3
 800ace6:	f000 fabf 	bl	800b268 <HAL_TIM_IC_CaptureCallback>
 800acea:	e007      	b.n	800acfc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	0018      	movs	r0, r3
 800acf0:	f000 fab2 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	0018      	movs	r0, r3
 800acf8:	f000 fabe 	bl	800b278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	2208      	movs	r2, #8
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	2b08      	cmp	r3, #8
 800ad0e:	d124      	bne.n	800ad5a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	2208      	movs	r2, #8
 800ad18:	4013      	ands	r3, r2
 800ad1a:	2b08      	cmp	r3, #8
 800ad1c:	d11d      	bne.n	800ad5a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2209      	movs	r2, #9
 800ad24:	4252      	negs	r2, r2
 800ad26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2204      	movs	r2, #4
 800ad2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	69db      	ldr	r3, [r3, #28]
 800ad34:	2203      	movs	r2, #3
 800ad36:	4013      	ands	r3, r2
 800ad38:	d004      	beq.n	800ad44 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	0018      	movs	r0, r3
 800ad3e:	f000 fa93 	bl	800b268 <HAL_TIM_IC_CaptureCallback>
 800ad42:	e007      	b.n	800ad54 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	0018      	movs	r0, r3
 800ad48:	f000 fa86 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	0018      	movs	r0, r3
 800ad50:	f000 fa92 	bl	800b278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	2210      	movs	r2, #16
 800ad62:	4013      	ands	r3, r2
 800ad64:	2b10      	cmp	r3, #16
 800ad66:	d125      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	2210      	movs	r2, #16
 800ad70:	4013      	ands	r3, r2
 800ad72:	2b10      	cmp	r3, #16
 800ad74:	d11e      	bne.n	800adb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2211      	movs	r2, #17
 800ad7c:	4252      	negs	r2, r2
 800ad7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2208      	movs	r2, #8
 800ad84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	69da      	ldr	r2, [r3, #28]
 800ad8c:	23c0      	movs	r3, #192	; 0xc0
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4013      	ands	r3, r2
 800ad92:	d004      	beq.n	800ad9e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	0018      	movs	r0, r3
 800ad98:	f000 fa66 	bl	800b268 <HAL_TIM_IC_CaptureCallback>
 800ad9c:	e007      	b.n	800adae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	0018      	movs	r0, r3
 800ada2:	f000 fa59 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	0018      	movs	r0, r3
 800adaa:	f000 fa65 	bl	800b278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	2201      	movs	r2, #1
 800adbc:	4013      	ands	r3, r2
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d10f      	bne.n	800ade2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	2201      	movs	r2, #1
 800adca:	4013      	ands	r3, r2
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d108      	bne.n	800ade2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2202      	movs	r2, #2
 800add6:	4252      	negs	r2, r2
 800add8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	0018      	movs	r0, r3
 800adde:	f7f8 ffe9 	bl	8003db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	2280      	movs	r2, #128	; 0x80
 800adea:	4013      	ands	r3, r2
 800adec:	2b80      	cmp	r3, #128	; 0x80
 800adee:	d10f      	bne.n	800ae10 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	2280      	movs	r2, #128	; 0x80
 800adf8:	4013      	ands	r3, r2
 800adfa:	2b80      	cmp	r3, #128	; 0x80
 800adfc:	d108      	bne.n	800ae10 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2281      	movs	r2, #129	; 0x81
 800ae04:	4252      	negs	r2, r2
 800ae06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	f000 fe8a 	bl	800bb24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	691a      	ldr	r2, [r3, #16]
 800ae16:	2380      	movs	r3, #128	; 0x80
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	401a      	ands	r2, r3
 800ae1c:	2380      	movs	r3, #128	; 0x80
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d10e      	bne.n	800ae42 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	2280      	movs	r2, #128	; 0x80
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	2b80      	cmp	r3, #128	; 0x80
 800ae30:	d107      	bne.n	800ae42 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a1c      	ldr	r2, [pc, #112]	; (800aea8 <HAL_TIM_IRQHandler+0x260>)
 800ae38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	f000 fe79 	bl	800bb34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	2240      	movs	r2, #64	; 0x40
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	2b40      	cmp	r3, #64	; 0x40
 800ae4e:	d10f      	bne.n	800ae70 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	2240      	movs	r2, #64	; 0x40
 800ae58:	4013      	ands	r3, r2
 800ae5a:	2b40      	cmp	r3, #64	; 0x40
 800ae5c:	d108      	bne.n	800ae70 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2241      	movs	r2, #65	; 0x41
 800ae64:	4252      	negs	r2, r2
 800ae66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	0018      	movs	r0, r3
 800ae6c:	f000 fa0c 	bl	800b288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	2220      	movs	r2, #32
 800ae78:	4013      	ands	r3, r2
 800ae7a:	2b20      	cmp	r3, #32
 800ae7c:	d10f      	bne.n	800ae9e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	2220      	movs	r2, #32
 800ae86:	4013      	ands	r3, r2
 800ae88:	2b20      	cmp	r3, #32
 800ae8a:	d108      	bne.n	800ae9e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2221      	movs	r2, #33	; 0x21
 800ae92:	4252      	negs	r2, r2
 800ae94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	0018      	movs	r0, r3
 800ae9a:	f000 fe3b 	bl	800bb14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	46bd      	mov	sp, r7
 800aea2:	b002      	add	sp, #8
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	46c0      	nop			; (mov r8, r8)
 800aea8:	fffffeff 	.word	0xfffffeff

0800aeac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb8:	2317      	movs	r3, #23
 800aeba:	18fb      	adds	r3, r7, r3
 800aebc:	2200      	movs	r2, #0
 800aebe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	223c      	movs	r2, #60	; 0x3c
 800aec4:	5c9b      	ldrb	r3, [r3, r2]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d101      	bne.n	800aece <HAL_TIM_PWM_ConfigChannel+0x22>
 800aeca:	2302      	movs	r3, #2
 800aecc:	e0e5      	b.n	800b09a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	223c      	movs	r2, #60	; 0x3c
 800aed2:	2101      	movs	r1, #1
 800aed4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b14      	cmp	r3, #20
 800aeda:	d900      	bls.n	800aede <HAL_TIM_PWM_ConfigChannel+0x32>
 800aedc:	e0d1      	b.n	800b082 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	009a      	lsls	r2, r3, #2
 800aee2:	4b70      	ldr	r3, [pc, #448]	; (800b0a4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800aee4:	18d3      	adds	r3, r2, r3
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	0011      	movs	r1, r2
 800aef2:	0018      	movs	r0, r3
 800aef4:	f000 fa46 	bl	800b384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	699a      	ldr	r2, [r3, #24]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2108      	movs	r1, #8
 800af04:	430a      	orrs	r2, r1
 800af06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2104      	movs	r1, #4
 800af14:	438a      	bics	r2, r1
 800af16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6999      	ldr	r1, [r3, #24]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	691a      	ldr	r2, [r3, #16]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	619a      	str	r2, [r3, #24]
      break;
 800af2a:	e0af      	b.n	800b08c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	0011      	movs	r1, r2
 800af34:	0018      	movs	r0, r3
 800af36:	f000 faaf 	bl	800b498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	699a      	ldr	r2, [r3, #24]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2180      	movs	r1, #128	; 0x80
 800af46:	0109      	lsls	r1, r1, #4
 800af48:	430a      	orrs	r2, r1
 800af4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	699a      	ldr	r2, [r3, #24]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4954      	ldr	r1, [pc, #336]	; (800b0a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800af58:	400a      	ands	r2, r1
 800af5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6999      	ldr	r1, [r3, #24]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	021a      	lsls	r2, r3, #8
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	430a      	orrs	r2, r1
 800af6e:	619a      	str	r2, [r3, #24]
      break;
 800af70:	e08c      	b.n	800b08c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	0011      	movs	r1, r2
 800af7a:	0018      	movs	r0, r3
 800af7c:	f000 fb10 	bl	800b5a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	69da      	ldr	r2, [r3, #28]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2108      	movs	r1, #8
 800af8c:	430a      	orrs	r2, r1
 800af8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	69da      	ldr	r2, [r3, #28]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2104      	movs	r1, #4
 800af9c:	438a      	bics	r2, r1
 800af9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	69d9      	ldr	r1, [r3, #28]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	691a      	ldr	r2, [r3, #16]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	430a      	orrs	r2, r1
 800afb0:	61da      	str	r2, [r3, #28]
      break;
 800afb2:	e06b      	b.n	800b08c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	0011      	movs	r1, r2
 800afbc:	0018      	movs	r0, r3
 800afbe:	f000 fb77 	bl	800b6b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2180      	movs	r1, #128	; 0x80
 800afce:	0109      	lsls	r1, r1, #4
 800afd0:	430a      	orrs	r2, r1
 800afd2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	69da      	ldr	r2, [r3, #28]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4932      	ldr	r1, [pc, #200]	; (800b0a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800afe0:	400a      	ands	r2, r1
 800afe2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	69d9      	ldr	r1, [r3, #28]
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	021a      	lsls	r2, r3, #8
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	61da      	str	r2, [r3, #28]
      break;
 800aff8:	e048      	b.n	800b08c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	0011      	movs	r1, r2
 800b002:	0018      	movs	r0, r3
 800b004:	f000 fbbe 	bl	800b784 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2108      	movs	r1, #8
 800b014:	430a      	orrs	r2, r1
 800b016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2104      	movs	r1, #4
 800b024:	438a      	bics	r2, r1
 800b026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	691a      	ldr	r2, [r3, #16]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	430a      	orrs	r2, r1
 800b038:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b03a:	e027      	b.n	800b08c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	0011      	movs	r1, r2
 800b044:	0018      	movs	r0, r3
 800b046:	f000 fbfd 	bl	800b844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2180      	movs	r1, #128	; 0x80
 800b056:	0109      	lsls	r1, r1, #4
 800b058:	430a      	orrs	r2, r1
 800b05a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4910      	ldr	r1, [pc, #64]	; (800b0a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b068:	400a      	ands	r2, r1
 800b06a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	021a      	lsls	r2, r3, #8
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b080:	e004      	b.n	800b08c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800b082:	2317      	movs	r3, #23
 800b084:	18fb      	adds	r3, r7, r3
 800b086:	2201      	movs	r2, #1
 800b088:	701a      	strb	r2, [r3, #0]
      break;
 800b08a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	223c      	movs	r2, #60	; 0x3c
 800b090:	2100      	movs	r1, #0
 800b092:	5499      	strb	r1, [r3, r2]

  return status;
 800b094:	2317      	movs	r3, #23
 800b096:	18fb      	adds	r3, r7, r3
 800b098:	781b      	ldrb	r3, [r3, #0]
}
 800b09a:	0018      	movs	r0, r3
 800b09c:	46bd      	mov	sp, r7
 800b09e:	b006      	add	sp, #24
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	46c0      	nop			; (mov r8, r8)
 800b0a4:	08010134 	.word	0x08010134
 800b0a8:	fffffbff 	.word	0xfffffbff

0800b0ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0b6:	230f      	movs	r3, #15
 800b0b8:	18fb      	adds	r3, r7, r3
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	223c      	movs	r2, #60	; 0x3c
 800b0c2:	5c9b      	ldrb	r3, [r3, r2]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d101      	bne.n	800b0cc <HAL_TIM_ConfigClockSource+0x20>
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	e0bc      	b.n	800b246 <HAL_TIM_ConfigClockSource+0x19a>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	223c      	movs	r2, #60	; 0x3c
 800b0d0:	2101      	movs	r1, #1
 800b0d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	223d      	movs	r2, #61	; 0x3d
 800b0d8:	2102      	movs	r1, #2
 800b0da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	4a5a      	ldr	r2, [pc, #360]	; (800b250 <HAL_TIM_ConfigClockSource+0x1a4>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	4a59      	ldr	r2, [pc, #356]	; (800b254 <HAL_TIM_ConfigClockSource+0x1a8>)
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2280      	movs	r2, #128	; 0x80
 800b102:	0192      	lsls	r2, r2, #6
 800b104:	4293      	cmp	r3, r2
 800b106:	d040      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0xde>
 800b108:	2280      	movs	r2, #128	; 0x80
 800b10a:	0192      	lsls	r2, r2, #6
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d900      	bls.n	800b112 <HAL_TIM_ConfigClockSource+0x66>
 800b110:	e088      	b.n	800b224 <HAL_TIM_ConfigClockSource+0x178>
 800b112:	2280      	movs	r2, #128	; 0x80
 800b114:	0152      	lsls	r2, r2, #5
 800b116:	4293      	cmp	r3, r2
 800b118:	d100      	bne.n	800b11c <HAL_TIM_ConfigClockSource+0x70>
 800b11a:	e088      	b.n	800b22e <HAL_TIM_ConfigClockSource+0x182>
 800b11c:	2280      	movs	r2, #128	; 0x80
 800b11e:	0152      	lsls	r2, r2, #5
 800b120:	4293      	cmp	r3, r2
 800b122:	d900      	bls.n	800b126 <HAL_TIM_ConfigClockSource+0x7a>
 800b124:	e07e      	b.n	800b224 <HAL_TIM_ConfigClockSource+0x178>
 800b126:	2b70      	cmp	r3, #112	; 0x70
 800b128:	d018      	beq.n	800b15c <HAL_TIM_ConfigClockSource+0xb0>
 800b12a:	d900      	bls.n	800b12e <HAL_TIM_ConfigClockSource+0x82>
 800b12c:	e07a      	b.n	800b224 <HAL_TIM_ConfigClockSource+0x178>
 800b12e:	2b60      	cmp	r3, #96	; 0x60
 800b130:	d04f      	beq.n	800b1d2 <HAL_TIM_ConfigClockSource+0x126>
 800b132:	d900      	bls.n	800b136 <HAL_TIM_ConfigClockSource+0x8a>
 800b134:	e076      	b.n	800b224 <HAL_TIM_ConfigClockSource+0x178>
 800b136:	2b50      	cmp	r3, #80	; 0x50
 800b138:	d03b      	beq.n	800b1b2 <HAL_TIM_ConfigClockSource+0x106>
 800b13a:	d900      	bls.n	800b13e <HAL_TIM_ConfigClockSource+0x92>
 800b13c:	e072      	b.n	800b224 <HAL_TIM_ConfigClockSource+0x178>
 800b13e:	2b40      	cmp	r3, #64	; 0x40
 800b140:	d057      	beq.n	800b1f2 <HAL_TIM_ConfigClockSource+0x146>
 800b142:	d900      	bls.n	800b146 <HAL_TIM_ConfigClockSource+0x9a>
 800b144:	e06e      	b.n	800b224 <HAL_TIM_ConfigClockSource+0x178>
 800b146:	2b30      	cmp	r3, #48	; 0x30
 800b148:	d063      	beq.n	800b212 <HAL_TIM_ConfigClockSource+0x166>
 800b14a:	d86b      	bhi.n	800b224 <HAL_TIM_ConfigClockSource+0x178>
 800b14c:	2b20      	cmp	r3, #32
 800b14e:	d060      	beq.n	800b212 <HAL_TIM_ConfigClockSource+0x166>
 800b150:	d868      	bhi.n	800b224 <HAL_TIM_ConfigClockSource+0x178>
 800b152:	2b00      	cmp	r3, #0
 800b154:	d05d      	beq.n	800b212 <HAL_TIM_ConfigClockSource+0x166>
 800b156:	2b10      	cmp	r3, #16
 800b158:	d05b      	beq.n	800b212 <HAL_TIM_ConfigClockSource+0x166>
 800b15a:	e063      	b.n	800b224 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6818      	ldr	r0, [r3, #0]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	6899      	ldr	r1, [r3, #8]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f000 fc4a 	bl	800ba04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2277      	movs	r2, #119	; 0x77
 800b17c:	4313      	orrs	r3, r2
 800b17e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	609a      	str	r2, [r3, #8]
      break;
 800b188:	e052      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	6899      	ldr	r1, [r3, #8]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	f000 fc33 	bl	800ba04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	689a      	ldr	r2, [r3, #8]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2180      	movs	r1, #128	; 0x80
 800b1aa:	01c9      	lsls	r1, r1, #7
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	609a      	str	r2, [r3, #8]
      break;
 800b1b0:	e03e      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6818      	ldr	r0, [r3, #0]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	6859      	ldr	r1, [r3, #4]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	001a      	movs	r2, r3
 800b1c0:	f000 fba4 	bl	800b90c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2150      	movs	r1, #80	; 0x50
 800b1ca:	0018      	movs	r0, r3
 800b1cc:	f000 fbfe 	bl	800b9cc <TIM_ITRx_SetConfig>
      break;
 800b1d0:	e02e      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	6859      	ldr	r1, [r3, #4]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	001a      	movs	r2, r3
 800b1e0:	f000 fbc2 	bl	800b968 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2160      	movs	r1, #96	; 0x60
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f000 fbee 	bl	800b9cc <TIM_ITRx_SetConfig>
      break;
 800b1f0:	e01e      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6818      	ldr	r0, [r3, #0]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	6859      	ldr	r1, [r3, #4]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	001a      	movs	r2, r3
 800b200:	f000 fb84 	bl	800b90c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2140      	movs	r1, #64	; 0x40
 800b20a:	0018      	movs	r0, r3
 800b20c:	f000 fbde 	bl	800b9cc <TIM_ITRx_SetConfig>
      break;
 800b210:	e00e      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	0019      	movs	r1, r3
 800b21c:	0010      	movs	r0, r2
 800b21e:	f000 fbd5 	bl	800b9cc <TIM_ITRx_SetConfig>
      break;
 800b222:	e005      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800b224:	230f      	movs	r3, #15
 800b226:	18fb      	adds	r3, r7, r3
 800b228:	2201      	movs	r2, #1
 800b22a:	701a      	strb	r2, [r3, #0]
      break;
 800b22c:	e000      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800b22e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	223d      	movs	r2, #61	; 0x3d
 800b234:	2101      	movs	r1, #1
 800b236:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	223c      	movs	r2, #60	; 0x3c
 800b23c:	2100      	movs	r1, #0
 800b23e:	5499      	strb	r1, [r3, r2]

  return status;
 800b240:	230f      	movs	r3, #15
 800b242:	18fb      	adds	r3, r7, r3
 800b244:	781b      	ldrb	r3, [r3, #0]
}
 800b246:	0018      	movs	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	b004      	add	sp, #16
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	46c0      	nop			; (mov r8, r8)
 800b250:	ffceff88 	.word	0xffceff88
 800b254:	ffff00ff 	.word	0xffff00ff

0800b258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b260:	46c0      	nop			; (mov r8, r8)
 800b262:	46bd      	mov	sp, r7
 800b264:	b002      	add	sp, #8
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b270:	46c0      	nop			; (mov r8, r8)
 800b272:	46bd      	mov	sp, r7
 800b274:	b002      	add	sp, #8
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b280:	46c0      	nop			; (mov r8, r8)
 800b282:	46bd      	mov	sp, r7
 800b284:	b002      	add	sp, #8
 800b286:	bd80      	pop	{r7, pc}

0800b288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b290:	46c0      	nop			; (mov r8, r8)
 800b292:	46bd      	mov	sp, r7
 800b294:	b002      	add	sp, #8
 800b296:	bd80      	pop	{r7, pc}

0800b298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a2f      	ldr	r2, [pc, #188]	; (800b368 <TIM_Base_SetConfig+0xd0>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d003      	beq.n	800b2b8 <TIM_Base_SetConfig+0x20>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a2e      	ldr	r2, [pc, #184]	; (800b36c <TIM_Base_SetConfig+0xd4>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d108      	bne.n	800b2ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2270      	movs	r2, #112	; 0x70
 800b2bc:	4393      	bics	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a26      	ldr	r2, [pc, #152]	; (800b368 <TIM_Base_SetConfig+0xd0>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d013      	beq.n	800b2fa <TIM_Base_SetConfig+0x62>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a25      	ldr	r2, [pc, #148]	; (800b36c <TIM_Base_SetConfig+0xd4>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d00f      	beq.n	800b2fa <TIM_Base_SetConfig+0x62>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a24      	ldr	r2, [pc, #144]	; (800b370 <TIM_Base_SetConfig+0xd8>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d00b      	beq.n	800b2fa <TIM_Base_SetConfig+0x62>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a23      	ldr	r2, [pc, #140]	; (800b374 <TIM_Base_SetConfig+0xdc>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d007      	beq.n	800b2fa <TIM_Base_SetConfig+0x62>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a22      	ldr	r2, [pc, #136]	; (800b378 <TIM_Base_SetConfig+0xe0>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d003      	beq.n	800b2fa <TIM_Base_SetConfig+0x62>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a21      	ldr	r2, [pc, #132]	; (800b37c <TIM_Base_SetConfig+0xe4>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d108      	bne.n	800b30c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4a20      	ldr	r2, [pc, #128]	; (800b380 <TIM_Base_SetConfig+0xe8>)
 800b2fe:	4013      	ands	r3, r2
 800b300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	4313      	orrs	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2280      	movs	r2, #128	; 0x80
 800b310:	4393      	bics	r3, r2
 800b312:	001a      	movs	r2, r3
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	4313      	orrs	r3, r2
 800b31a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	689a      	ldr	r2, [r3, #8]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a0c      	ldr	r2, [pc, #48]	; (800b368 <TIM_Base_SetConfig+0xd0>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00b      	beq.n	800b352 <TIM_Base_SetConfig+0xba>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a0d      	ldr	r2, [pc, #52]	; (800b374 <TIM_Base_SetConfig+0xdc>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d007      	beq.n	800b352 <TIM_Base_SetConfig+0xba>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a0c      	ldr	r2, [pc, #48]	; (800b378 <TIM_Base_SetConfig+0xe0>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d003      	beq.n	800b352 <TIM_Base_SetConfig+0xba>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a0b      	ldr	r2, [pc, #44]	; (800b37c <TIM_Base_SetConfig+0xe4>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d103      	bne.n	800b35a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	691a      	ldr	r2, [r3, #16]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2201      	movs	r2, #1
 800b35e:	615a      	str	r2, [r3, #20]
}
 800b360:	46c0      	nop			; (mov r8, r8)
 800b362:	46bd      	mov	sp, r7
 800b364:	b004      	add	sp, #16
 800b366:	bd80      	pop	{r7, pc}
 800b368:	40012c00 	.word	0x40012c00
 800b36c:	40000400 	.word	0x40000400
 800b370:	40002000 	.word	0x40002000
 800b374:	40014000 	.word	0x40014000
 800b378:	40014400 	.word	0x40014400
 800b37c:	40014800 	.word	0x40014800
 800b380:	fffffcff 	.word	0xfffffcff

0800b384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a1b      	ldr	r3, [r3, #32]
 800b392:	2201      	movs	r2, #1
 800b394:	4393      	bics	r3, r2
 800b396:	001a      	movs	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	4a32      	ldr	r2, [pc, #200]	; (800b47c <TIM_OC1_SetConfig+0xf8>)
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2203      	movs	r2, #3
 800b3ba:	4393      	bics	r3, r2
 800b3bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	4393      	bics	r3, r2
 800b3ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a28      	ldr	r2, [pc, #160]	; (800b480 <TIM_OC1_SetConfig+0xfc>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00b      	beq.n	800b3fa <TIM_OC1_SetConfig+0x76>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a27      	ldr	r2, [pc, #156]	; (800b484 <TIM_OC1_SetConfig+0x100>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d007      	beq.n	800b3fa <TIM_OC1_SetConfig+0x76>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a26      	ldr	r2, [pc, #152]	; (800b488 <TIM_OC1_SetConfig+0x104>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d003      	beq.n	800b3fa <TIM_OC1_SetConfig+0x76>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a25      	ldr	r2, [pc, #148]	; (800b48c <TIM_OC1_SetConfig+0x108>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d10c      	bne.n	800b414 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	4393      	bics	r3, r2
 800b400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	4313      	orrs	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2204      	movs	r2, #4
 800b410:	4393      	bics	r3, r2
 800b412:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a1a      	ldr	r2, [pc, #104]	; (800b480 <TIM_OC1_SetConfig+0xfc>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00b      	beq.n	800b434 <TIM_OC1_SetConfig+0xb0>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a19      	ldr	r2, [pc, #100]	; (800b484 <TIM_OC1_SetConfig+0x100>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d007      	beq.n	800b434 <TIM_OC1_SetConfig+0xb0>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a18      	ldr	r2, [pc, #96]	; (800b488 <TIM_OC1_SetConfig+0x104>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d003      	beq.n	800b434 <TIM_OC1_SetConfig+0xb0>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a17      	ldr	r2, [pc, #92]	; (800b48c <TIM_OC1_SetConfig+0x108>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d111      	bne.n	800b458 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	4a16      	ldr	r2, [pc, #88]	; (800b490 <TIM_OC1_SetConfig+0x10c>)
 800b438:	4013      	ands	r3, r2
 800b43a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	4a15      	ldr	r2, [pc, #84]	; (800b494 <TIM_OC1_SetConfig+0x110>)
 800b440:	4013      	ands	r3, r2
 800b442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	4313      	orrs	r3, r2
 800b456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	685a      	ldr	r2, [r3, #4]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	621a      	str	r2, [r3, #32]
}
 800b472:	46c0      	nop			; (mov r8, r8)
 800b474:	46bd      	mov	sp, r7
 800b476:	b006      	add	sp, #24
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	46c0      	nop			; (mov r8, r8)
 800b47c:	fffeff8f 	.word	0xfffeff8f
 800b480:	40012c00 	.word	0x40012c00
 800b484:	40014000 	.word	0x40014000
 800b488:	40014400 	.word	0x40014400
 800b48c:	40014800 	.word	0x40014800
 800b490:	fffffeff 	.word	0xfffffeff
 800b494:	fffffdff 	.word	0xfffffdff

0800b498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	2210      	movs	r2, #16
 800b4a8:	4393      	bics	r3, r2
 800b4aa:	001a      	movs	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	4a2e      	ldr	r2, [pc, #184]	; (800b580 <TIM_OC2_SetConfig+0xe8>)
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4a2d      	ldr	r2, [pc, #180]	; (800b584 <TIM_OC2_SetConfig+0xec>)
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	021b      	lsls	r3, r3, #8
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	4393      	bics	r3, r2
 800b4e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	011b      	lsls	r3, r3, #4
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a24      	ldr	r2, [pc, #144]	; (800b588 <TIM_OC2_SetConfig+0xf0>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d10d      	bne.n	800b516 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	2280      	movs	r2, #128	; 0x80
 800b4fe:	4393      	bics	r3, r2
 800b500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	011b      	lsls	r3, r3, #4
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2240      	movs	r2, #64	; 0x40
 800b512:	4393      	bics	r3, r2
 800b514:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a1b      	ldr	r2, [pc, #108]	; (800b588 <TIM_OC2_SetConfig+0xf0>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d00b      	beq.n	800b536 <TIM_OC2_SetConfig+0x9e>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a1a      	ldr	r2, [pc, #104]	; (800b58c <TIM_OC2_SetConfig+0xf4>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d007      	beq.n	800b536 <TIM_OC2_SetConfig+0x9e>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a19      	ldr	r2, [pc, #100]	; (800b590 <TIM_OC2_SetConfig+0xf8>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d003      	beq.n	800b536 <TIM_OC2_SetConfig+0x9e>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a18      	ldr	r2, [pc, #96]	; (800b594 <TIM_OC2_SetConfig+0xfc>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d113      	bne.n	800b55e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	4a17      	ldr	r2, [pc, #92]	; (800b598 <TIM_OC2_SetConfig+0x100>)
 800b53a:	4013      	ands	r3, r2
 800b53c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	4a16      	ldr	r2, [pc, #88]	; (800b59c <TIM_OC2_SetConfig+0x104>)
 800b542:	4013      	ands	r3, r2
 800b544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	4313      	orrs	r3, r2
 800b550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	621a      	str	r2, [r3, #32]
}
 800b578:	46c0      	nop			; (mov r8, r8)
 800b57a:	46bd      	mov	sp, r7
 800b57c:	b006      	add	sp, #24
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	feff8fff 	.word	0xfeff8fff
 800b584:	fffffcff 	.word	0xfffffcff
 800b588:	40012c00 	.word	0x40012c00
 800b58c:	40014000 	.word	0x40014000
 800b590:	40014400 	.word	0x40014400
 800b594:	40014800 	.word	0x40014800
 800b598:	fffffbff 	.word	0xfffffbff
 800b59c:	fffff7ff 	.word	0xfffff7ff

0800b5a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	4a35      	ldr	r2, [pc, #212]	; (800b684 <TIM_OC3_SetConfig+0xe4>)
 800b5b0:	401a      	ands	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4a2f      	ldr	r2, [pc, #188]	; (800b688 <TIM_OC3_SetConfig+0xe8>)
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	4393      	bics	r3, r2
 800b5d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	4a29      	ldr	r2, [pc, #164]	; (800b68c <TIM_OC3_SetConfig+0xec>)
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	021b      	lsls	r3, r3, #8
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a25      	ldr	r2, [pc, #148]	; (800b690 <TIM_OC3_SetConfig+0xf0>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d10d      	bne.n	800b61a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	4a24      	ldr	r2, [pc, #144]	; (800b694 <TIM_OC3_SetConfig+0xf4>)
 800b602:	4013      	ands	r3, r2
 800b604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	021b      	lsls	r3, r3, #8
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	4313      	orrs	r3, r2
 800b610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	4a20      	ldr	r2, [pc, #128]	; (800b698 <TIM_OC3_SetConfig+0xf8>)
 800b616:	4013      	ands	r3, r2
 800b618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a1c      	ldr	r2, [pc, #112]	; (800b690 <TIM_OC3_SetConfig+0xf0>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d00b      	beq.n	800b63a <TIM_OC3_SetConfig+0x9a>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a1d      	ldr	r2, [pc, #116]	; (800b69c <TIM_OC3_SetConfig+0xfc>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d007      	beq.n	800b63a <TIM_OC3_SetConfig+0x9a>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a1c      	ldr	r2, [pc, #112]	; (800b6a0 <TIM_OC3_SetConfig+0x100>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d003      	beq.n	800b63a <TIM_OC3_SetConfig+0x9a>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a1b      	ldr	r2, [pc, #108]	; (800b6a4 <TIM_OC3_SetConfig+0x104>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d113      	bne.n	800b662 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	4a1a      	ldr	r2, [pc, #104]	; (800b6a8 <TIM_OC3_SetConfig+0x108>)
 800b63e:	4013      	ands	r3, r2
 800b640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	4a19      	ldr	r2, [pc, #100]	; (800b6ac <TIM_OC3_SetConfig+0x10c>)
 800b646:	4013      	ands	r3, r2
 800b648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	4313      	orrs	r3, r2
 800b654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	011b      	lsls	r3, r3, #4
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	4313      	orrs	r3, r2
 800b660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	693a      	ldr	r2, [r7, #16]
 800b666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	621a      	str	r2, [r3, #32]
}
 800b67c:	46c0      	nop			; (mov r8, r8)
 800b67e:	46bd      	mov	sp, r7
 800b680:	b006      	add	sp, #24
 800b682:	bd80      	pop	{r7, pc}
 800b684:	fffffeff 	.word	0xfffffeff
 800b688:	fffeff8f 	.word	0xfffeff8f
 800b68c:	fffffdff 	.word	0xfffffdff
 800b690:	40012c00 	.word	0x40012c00
 800b694:	fffff7ff 	.word	0xfffff7ff
 800b698:	fffffbff 	.word	0xfffffbff
 800b69c:	40014000 	.word	0x40014000
 800b6a0:	40014400 	.word	0x40014400
 800b6a4:	40014800 	.word	0x40014800
 800b6a8:	ffffefff 	.word	0xffffefff
 800b6ac:	ffffdfff 	.word	0xffffdfff

0800b6b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	4a28      	ldr	r2, [pc, #160]	; (800b760 <TIM_OC4_SetConfig+0xb0>)
 800b6c0:	401a      	ands	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a1b      	ldr	r3, [r3, #32]
 800b6ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	4a22      	ldr	r2, [pc, #136]	; (800b764 <TIM_OC4_SetConfig+0xb4>)
 800b6dc:	4013      	ands	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4a21      	ldr	r2, [pc, #132]	; (800b768 <TIM_OC4_SetConfig+0xb8>)
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	021b      	lsls	r3, r3, #8
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	4a1d      	ldr	r2, [pc, #116]	; (800b76c <TIM_OC4_SetConfig+0xbc>)
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	031b      	lsls	r3, r3, #12
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	4313      	orrs	r3, r2
 800b706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a19      	ldr	r2, [pc, #100]	; (800b770 <TIM_OC4_SetConfig+0xc0>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d00b      	beq.n	800b728 <TIM_OC4_SetConfig+0x78>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a18      	ldr	r2, [pc, #96]	; (800b774 <TIM_OC4_SetConfig+0xc4>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d007      	beq.n	800b728 <TIM_OC4_SetConfig+0x78>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a17      	ldr	r2, [pc, #92]	; (800b778 <TIM_OC4_SetConfig+0xc8>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d003      	beq.n	800b728 <TIM_OC4_SetConfig+0x78>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a16      	ldr	r2, [pc, #88]	; (800b77c <TIM_OC4_SetConfig+0xcc>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d109      	bne.n	800b73c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	4a15      	ldr	r2, [pc, #84]	; (800b780 <TIM_OC4_SetConfig+0xd0>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	019b      	lsls	r3, r3, #6
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	4313      	orrs	r3, r2
 800b73a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	621a      	str	r2, [r3, #32]
}
 800b756:	46c0      	nop			; (mov r8, r8)
 800b758:	46bd      	mov	sp, r7
 800b75a:	b006      	add	sp, #24
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	46c0      	nop			; (mov r8, r8)
 800b760:	ffffefff 	.word	0xffffefff
 800b764:	feff8fff 	.word	0xfeff8fff
 800b768:	fffffcff 	.word	0xfffffcff
 800b76c:	ffffdfff 	.word	0xffffdfff
 800b770:	40012c00 	.word	0x40012c00
 800b774:	40014000 	.word	0x40014000
 800b778:	40014400 	.word	0x40014400
 800b77c:	40014800 	.word	0x40014800
 800b780:	ffffbfff 	.word	0xffffbfff

0800b784 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	4a25      	ldr	r2, [pc, #148]	; (800b828 <TIM_OC5_SetConfig+0xa4>)
 800b794:	401a      	ands	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a1b      	ldr	r3, [r3, #32]
 800b79e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4a1f      	ldr	r2, [pc, #124]	; (800b82c <TIM_OC5_SetConfig+0xa8>)
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	4a1b      	ldr	r2, [pc, #108]	; (800b830 <TIM_OC5_SetConfig+0xac>)
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	041b      	lsls	r3, r3, #16
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a17      	ldr	r2, [pc, #92]	; (800b834 <TIM_OC5_SetConfig+0xb0>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d00b      	beq.n	800b7f2 <TIM_OC5_SetConfig+0x6e>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a16      	ldr	r2, [pc, #88]	; (800b838 <TIM_OC5_SetConfig+0xb4>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d007      	beq.n	800b7f2 <TIM_OC5_SetConfig+0x6e>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a15      	ldr	r2, [pc, #84]	; (800b83c <TIM_OC5_SetConfig+0xb8>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d003      	beq.n	800b7f2 <TIM_OC5_SetConfig+0x6e>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a14      	ldr	r2, [pc, #80]	; (800b840 <TIM_OC5_SetConfig+0xbc>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d109      	bne.n	800b806 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	4a0c      	ldr	r2, [pc, #48]	; (800b828 <TIM_OC5_SetConfig+0xa4>)
 800b7f6:	4013      	ands	r3, r2
 800b7f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	021b      	lsls	r3, r3, #8
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	4313      	orrs	r3, r2
 800b804:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	621a      	str	r2, [r3, #32]
}
 800b820:	46c0      	nop			; (mov r8, r8)
 800b822:	46bd      	mov	sp, r7
 800b824:	b006      	add	sp, #24
 800b826:	bd80      	pop	{r7, pc}
 800b828:	fffeffff 	.word	0xfffeffff
 800b82c:	fffeff8f 	.word	0xfffeff8f
 800b830:	fffdffff 	.word	0xfffdffff
 800b834:	40012c00 	.word	0x40012c00
 800b838:	40014000 	.word	0x40014000
 800b83c:	40014400 	.word	0x40014400
 800b840:	40014800 	.word	0x40014800

0800b844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	4a26      	ldr	r2, [pc, #152]	; (800b8ec <TIM_OC6_SetConfig+0xa8>)
 800b854:	401a      	ands	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	4a20      	ldr	r2, [pc, #128]	; (800b8f0 <TIM_OC6_SetConfig+0xac>)
 800b870:	4013      	ands	r3, r2
 800b872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	021b      	lsls	r3, r3, #8
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	4a1c      	ldr	r2, [pc, #112]	; (800b8f4 <TIM_OC6_SetConfig+0xb0>)
 800b884:	4013      	ands	r3, r2
 800b886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	051b      	lsls	r3, r3, #20
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	4313      	orrs	r3, r2
 800b892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4a18      	ldr	r2, [pc, #96]	; (800b8f8 <TIM_OC6_SetConfig+0xb4>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d00b      	beq.n	800b8b4 <TIM_OC6_SetConfig+0x70>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a17      	ldr	r2, [pc, #92]	; (800b8fc <TIM_OC6_SetConfig+0xb8>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d007      	beq.n	800b8b4 <TIM_OC6_SetConfig+0x70>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a16      	ldr	r2, [pc, #88]	; (800b900 <TIM_OC6_SetConfig+0xbc>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d003      	beq.n	800b8b4 <TIM_OC6_SetConfig+0x70>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a15      	ldr	r2, [pc, #84]	; (800b904 <TIM_OC6_SetConfig+0xc0>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d109      	bne.n	800b8c8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	4a14      	ldr	r2, [pc, #80]	; (800b908 <TIM_OC6_SetConfig+0xc4>)
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	695b      	ldr	r3, [r3, #20]
 800b8c0:	029b      	lsls	r3, r3, #10
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	697a      	ldr	r2, [r7, #20]
 800b8cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685a      	ldr	r2, [r3, #4]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	621a      	str	r2, [r3, #32]
}
 800b8e2:	46c0      	nop			; (mov r8, r8)
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	b006      	add	sp, #24
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	46c0      	nop			; (mov r8, r8)
 800b8ec:	ffefffff 	.word	0xffefffff
 800b8f0:	feff8fff 	.word	0xfeff8fff
 800b8f4:	ffdfffff 	.word	0xffdfffff
 800b8f8:	40012c00 	.word	0x40012c00
 800b8fc:	40014000 	.word	0x40014000
 800b900:	40014400 	.word	0x40014400
 800b904:	40014800 	.word	0x40014800
 800b908:	fffbffff 	.word	0xfffbffff

0800b90c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6a1b      	ldr	r3, [r3, #32]
 800b91c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6a1b      	ldr	r3, [r3, #32]
 800b922:	2201      	movs	r2, #1
 800b924:	4393      	bics	r3, r2
 800b926:	001a      	movs	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	22f0      	movs	r2, #240	; 0xf0
 800b936:	4393      	bics	r3, r2
 800b938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	011b      	lsls	r3, r3, #4
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	4313      	orrs	r3, r2
 800b942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	220a      	movs	r2, #10
 800b948:	4393      	bics	r3, r2
 800b94a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	4313      	orrs	r3, r2
 800b952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	697a      	ldr	r2, [r7, #20]
 800b95e:	621a      	str	r2, [r3, #32]
}
 800b960:	46c0      	nop			; (mov r8, r8)
 800b962:	46bd      	mov	sp, r7
 800b964:	b006      	add	sp, #24
 800b966:	bd80      	pop	{r7, pc}

0800b968 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6a1b      	ldr	r3, [r3, #32]
 800b978:	2210      	movs	r2, #16
 800b97a:	4393      	bics	r3, r2
 800b97c:	001a      	movs	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	4a0d      	ldr	r2, [pc, #52]	; (800b9c8 <TIM_TI2_ConfigInputStage+0x60>)
 800b992:	4013      	ands	r3, r2
 800b994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	031b      	lsls	r3, r3, #12
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	22a0      	movs	r2, #160	; 0xa0
 800b9a4:	4393      	bics	r3, r2
 800b9a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	011b      	lsls	r3, r3, #4
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	693a      	ldr	r2, [r7, #16]
 800b9bc:	621a      	str	r2, [r3, #32]
}
 800b9be:	46c0      	nop			; (mov r8, r8)
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	b006      	add	sp, #24
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	46c0      	nop			; (mov r8, r8)
 800b9c8:	ffff0fff 	.word	0xffff0fff

0800b9cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	4a08      	ldr	r2, [pc, #32]	; (800ba00 <TIM_ITRx_SetConfig+0x34>)
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	2207      	movs	r2, #7
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	609a      	str	r2, [r3, #8]
}
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	b004      	add	sp, #16
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	46c0      	nop			; (mov r8, r8)
 800ba00:	ffcfff8f 	.word	0xffcfff8f

0800ba04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
 800ba10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	4a09      	ldr	r2, [pc, #36]	; (800ba40 <TIM_ETR_SetConfig+0x3c>)
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	021a      	lsls	r2, r3, #8
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	431a      	orrs	r2, r3
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	609a      	str	r2, [r3, #8]
}
 800ba38:	46c0      	nop			; (mov r8, r8)
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	b006      	add	sp, #24
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	ffff00ff 	.word	0xffff00ff

0800ba44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	223c      	movs	r2, #60	; 0x3c
 800ba52:	5c9b      	ldrb	r3, [r3, r2]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d101      	bne.n	800ba5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba58:	2302      	movs	r3, #2
 800ba5a:	e04f      	b.n	800bafc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	223c      	movs	r2, #60	; 0x3c
 800ba60:	2101      	movs	r1, #1
 800ba62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	223d      	movs	r2, #61	; 0x3d
 800ba68:	2102      	movs	r1, #2
 800ba6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a20      	ldr	r2, [pc, #128]	; (800bb04 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d108      	bne.n	800ba98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	4a1f      	ldr	r2, [pc, #124]	; (800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2270      	movs	r2, #112	; 0x70
 800ba9c:	4393      	bics	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a13      	ldr	r2, [pc, #76]	; (800bb04 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d009      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a12      	ldr	r2, [pc, #72]	; (800bb0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d004      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a11      	ldr	r2, [pc, #68]	; (800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d10c      	bne.n	800baea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2280      	movs	r2, #128	; 0x80
 800bad4:	4393      	bics	r3, r2
 800bad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	4313      	orrs	r3, r2
 800bae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	223d      	movs	r2, #61	; 0x3d
 800baee:	2101      	movs	r1, #1
 800baf0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	223c      	movs	r2, #60	; 0x3c
 800baf6:	2100      	movs	r1, #0
 800baf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	0018      	movs	r0, r3
 800bafe:	46bd      	mov	sp, r7
 800bb00:	b004      	add	sp, #16
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	40012c00 	.word	0x40012c00
 800bb08:	ff0fffff 	.word	0xff0fffff
 800bb0c:	40000400 	.word	0x40000400
 800bb10:	40014000 	.word	0x40014000

0800bb14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb1c:	46c0      	nop			; (mov r8, r8)
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	b002      	add	sp, #8
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb2c:	46c0      	nop			; (mov r8, r8)
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	b002      	add	sp, #8
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb3c:	46c0      	nop			; (mov r8, r8)
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	b002      	add	sp, #8
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e046      	b.n	800bbe4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2288      	movs	r2, #136	; 0x88
 800bb5a:	589b      	ldr	r3, [r3, r2]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d107      	bne.n	800bb70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2284      	movs	r2, #132	; 0x84
 800bb64:	2100      	movs	r1, #0
 800bb66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	0018      	movs	r0, r3
 800bb6c:	f7fa fa9a 	bl	80060a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2288      	movs	r2, #136	; 0x88
 800bb74:	2124      	movs	r1, #36	; 0x24
 800bb76:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2101      	movs	r1, #1
 800bb84:	438a      	bics	r2, r1
 800bb86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	0018      	movs	r0, r3
 800bb8c:	f000 fb6a 	bl	800c264 <UART_SetConfig>
 800bb90:	0003      	movs	r3, r0
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d101      	bne.n	800bb9a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	e024      	b.n	800bbe4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	0018      	movs	r0, r3
 800bba6:	f000 fd01 	bl	800c5ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	490d      	ldr	r1, [pc, #52]	; (800bbec <HAL_UART_Init+0xa8>)
 800bbb6:	400a      	ands	r2, r1
 800bbb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	689a      	ldr	r2, [r3, #8]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	212a      	movs	r1, #42	; 0x2a
 800bbc6:	438a      	bics	r2, r1
 800bbc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	430a      	orrs	r2, r1
 800bbd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	0018      	movs	r0, r3
 800bbde:	f000 fd99 	bl	800c714 <UART_CheckIdleState>
 800bbe2:	0003      	movs	r3, r0
}
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	b002      	add	sp, #8
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	ffffb7ff 	.word	0xffffb7ff

0800bbf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbf0:	b5b0      	push	{r4, r5, r7, lr}
 800bbf2:	b0aa      	sub	sp, #168	; 0xa8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	22a4      	movs	r2, #164	; 0xa4
 800bc00:	18b9      	adds	r1, r7, r2
 800bc02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	20a0      	movs	r0, #160	; 0xa0
 800bc0c:	1839      	adds	r1, r7, r0
 800bc0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	249c      	movs	r4, #156	; 0x9c
 800bc18:	1939      	adds	r1, r7, r4
 800bc1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bc1c:	0011      	movs	r1, r2
 800bc1e:	18bb      	adds	r3, r7, r2
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4aa2      	ldr	r2, [pc, #648]	; (800beac <HAL_UART_IRQHandler+0x2bc>)
 800bc24:	4013      	ands	r3, r2
 800bc26:	2298      	movs	r2, #152	; 0x98
 800bc28:	18bd      	adds	r5, r7, r2
 800bc2a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800bc2c:	18bb      	adds	r3, r7, r2
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d11a      	bne.n	800bc6a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc34:	187b      	adds	r3, r7, r1
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2220      	movs	r2, #32
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	d015      	beq.n	800bc6a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc3e:	183b      	adds	r3, r7, r0
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2220      	movs	r2, #32
 800bc44:	4013      	ands	r3, r2
 800bc46:	d105      	bne.n	800bc54 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc48:	193b      	adds	r3, r7, r4
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	2380      	movs	r3, #128	; 0x80
 800bc4e:	055b      	lsls	r3, r3, #21
 800bc50:	4013      	ands	r3, r2
 800bc52:	d00a      	beq.n	800bc6a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d100      	bne.n	800bc5e <HAL_UART_IRQHandler+0x6e>
 800bc5c:	e2dc      	b.n	800c218 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	0010      	movs	r0, r2
 800bc66:	4798      	blx	r3
      }
      return;
 800bc68:	e2d6      	b.n	800c218 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc6a:	2398      	movs	r3, #152	; 0x98
 800bc6c:	18fb      	adds	r3, r7, r3
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d100      	bne.n	800bc76 <HAL_UART_IRQHandler+0x86>
 800bc74:	e122      	b.n	800bebc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc76:	239c      	movs	r3, #156	; 0x9c
 800bc78:	18fb      	adds	r3, r7, r3
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a8c      	ldr	r2, [pc, #560]	; (800beb0 <HAL_UART_IRQHandler+0x2c0>)
 800bc7e:	4013      	ands	r3, r2
 800bc80:	d106      	bne.n	800bc90 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc82:	23a0      	movs	r3, #160	; 0xa0
 800bc84:	18fb      	adds	r3, r7, r3
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a8a      	ldr	r2, [pc, #552]	; (800beb4 <HAL_UART_IRQHandler+0x2c4>)
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	d100      	bne.n	800bc90 <HAL_UART_IRQHandler+0xa0>
 800bc8e:	e115      	b.n	800bebc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc90:	23a4      	movs	r3, #164	; 0xa4
 800bc92:	18fb      	adds	r3, r7, r3
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2201      	movs	r2, #1
 800bc98:	4013      	ands	r3, r2
 800bc9a:	d012      	beq.n	800bcc2 <HAL_UART_IRQHandler+0xd2>
 800bc9c:	23a0      	movs	r3, #160	; 0xa0
 800bc9e:	18fb      	adds	r3, r7, r3
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	2380      	movs	r3, #128	; 0x80
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	4013      	ands	r3, r2
 800bca8:	d00b      	beq.n	800bcc2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2290      	movs	r2, #144	; 0x90
 800bcb6:	589b      	ldr	r3, [r3, r2]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	431a      	orrs	r2, r3
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2190      	movs	r1, #144	; 0x90
 800bcc0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcc2:	23a4      	movs	r3, #164	; 0xa4
 800bcc4:	18fb      	adds	r3, r7, r3
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	4013      	ands	r3, r2
 800bccc:	d011      	beq.n	800bcf2 <HAL_UART_IRQHandler+0x102>
 800bcce:	239c      	movs	r3, #156	; 0x9c
 800bcd0:	18fb      	adds	r3, r7, r3
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	d00b      	beq.n	800bcf2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2202      	movs	r2, #2
 800bce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2290      	movs	r2, #144	; 0x90
 800bce6:	589b      	ldr	r3, [r3, r2]
 800bce8:	2204      	movs	r2, #4
 800bcea:	431a      	orrs	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2190      	movs	r1, #144	; 0x90
 800bcf0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcf2:	23a4      	movs	r3, #164	; 0xa4
 800bcf4:	18fb      	adds	r3, r7, r3
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2204      	movs	r2, #4
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	d011      	beq.n	800bd22 <HAL_UART_IRQHandler+0x132>
 800bcfe:	239c      	movs	r3, #156	; 0x9c
 800bd00:	18fb      	adds	r3, r7, r3
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2201      	movs	r2, #1
 800bd06:	4013      	ands	r3, r2
 800bd08:	d00b      	beq.n	800bd22 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2204      	movs	r2, #4
 800bd10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2290      	movs	r2, #144	; 0x90
 800bd16:	589b      	ldr	r3, [r3, r2]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	431a      	orrs	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2190      	movs	r1, #144	; 0x90
 800bd20:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bd22:	23a4      	movs	r3, #164	; 0xa4
 800bd24:	18fb      	adds	r3, r7, r3
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2208      	movs	r2, #8
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	d017      	beq.n	800bd5e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd2e:	23a0      	movs	r3, #160	; 0xa0
 800bd30:	18fb      	adds	r3, r7, r3
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2220      	movs	r2, #32
 800bd36:	4013      	ands	r3, r2
 800bd38:	d105      	bne.n	800bd46 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bd3a:	239c      	movs	r3, #156	; 0x9c
 800bd3c:	18fb      	adds	r3, r7, r3
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a5b      	ldr	r2, [pc, #364]	; (800beb0 <HAL_UART_IRQHandler+0x2c0>)
 800bd42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd44:	d00b      	beq.n	800bd5e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2208      	movs	r2, #8
 800bd4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2290      	movs	r2, #144	; 0x90
 800bd52:	589b      	ldr	r3, [r3, r2]
 800bd54:	2208      	movs	r2, #8
 800bd56:	431a      	orrs	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2190      	movs	r1, #144	; 0x90
 800bd5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd5e:	23a4      	movs	r3, #164	; 0xa4
 800bd60:	18fb      	adds	r3, r7, r3
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	2380      	movs	r3, #128	; 0x80
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	4013      	ands	r3, r2
 800bd6a:	d013      	beq.n	800bd94 <HAL_UART_IRQHandler+0x1a4>
 800bd6c:	23a0      	movs	r3, #160	; 0xa0
 800bd6e:	18fb      	adds	r3, r7, r3
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	2380      	movs	r3, #128	; 0x80
 800bd74:	04db      	lsls	r3, r3, #19
 800bd76:	4013      	ands	r3, r2
 800bd78:	d00c      	beq.n	800bd94 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2280      	movs	r2, #128	; 0x80
 800bd80:	0112      	lsls	r2, r2, #4
 800bd82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2290      	movs	r2, #144	; 0x90
 800bd88:	589b      	ldr	r3, [r3, r2]
 800bd8a:	2220      	movs	r2, #32
 800bd8c:	431a      	orrs	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2190      	movs	r1, #144	; 0x90
 800bd92:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2290      	movs	r2, #144	; 0x90
 800bd98:	589b      	ldr	r3, [r3, r2]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d100      	bne.n	800bda0 <HAL_UART_IRQHandler+0x1b0>
 800bd9e:	e23d      	b.n	800c21c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bda0:	23a4      	movs	r3, #164	; 0xa4
 800bda2:	18fb      	adds	r3, r7, r3
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2220      	movs	r2, #32
 800bda8:	4013      	ands	r3, r2
 800bdaa:	d015      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bdac:	23a0      	movs	r3, #160	; 0xa0
 800bdae:	18fb      	adds	r3, r7, r3
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2220      	movs	r2, #32
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	d106      	bne.n	800bdc6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bdb8:	239c      	movs	r3, #156	; 0x9c
 800bdba:	18fb      	adds	r3, r7, r3
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	2380      	movs	r3, #128	; 0x80
 800bdc0:	055b      	lsls	r3, r3, #21
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	d008      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d004      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	0010      	movs	r0, r2
 800bdd6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2290      	movs	r2, #144	; 0x90
 800bddc:	589b      	ldr	r3, [r3, r2]
 800bdde:	2194      	movs	r1, #148	; 0x94
 800bde0:	187a      	adds	r2, r7, r1
 800bde2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	2240      	movs	r2, #64	; 0x40
 800bdec:	4013      	ands	r3, r2
 800bdee:	2b40      	cmp	r3, #64	; 0x40
 800bdf0:	d004      	beq.n	800bdfc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bdf2:	187b      	adds	r3, r7, r1
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2228      	movs	r2, #40	; 0x28
 800bdf8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdfa:	d04c      	beq.n	800be96 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	0018      	movs	r0, r3
 800be00:	f000 fd9e 	bl	800c940 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	2240      	movs	r2, #64	; 0x40
 800be0c:	4013      	ands	r3, r2
 800be0e:	2b40      	cmp	r3, #64	; 0x40
 800be10:	d13c      	bne.n	800be8c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be12:	f3ef 8310 	mrs	r3, PRIMASK
 800be16:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800be18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be1a:	2090      	movs	r0, #144	; 0x90
 800be1c:	183a      	adds	r2, r7, r0
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	2301      	movs	r3, #1
 800be22:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be26:	f383 8810 	msr	PRIMASK, r3
}
 800be2a:	46c0      	nop			; (mov r8, r8)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2140      	movs	r1, #64	; 0x40
 800be38:	438a      	bics	r2, r1
 800be3a:	609a      	str	r2, [r3, #8]
 800be3c:	183b      	adds	r3, r7, r0
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be44:	f383 8810 	msr	PRIMASK, r3
}
 800be48:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2280      	movs	r2, #128	; 0x80
 800be4e:	589b      	ldr	r3, [r3, r2]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d016      	beq.n	800be82 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2280      	movs	r2, #128	; 0x80
 800be58:	589b      	ldr	r3, [r3, r2]
 800be5a:	4a17      	ldr	r2, [pc, #92]	; (800beb8 <HAL_UART_IRQHandler+0x2c8>)
 800be5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2280      	movs	r2, #128	; 0x80
 800be62:	589b      	ldr	r3, [r3, r2]
 800be64:	0018      	movs	r0, r3
 800be66:	f7fc fab9 	bl	80083dc <HAL_DMA_Abort_IT>
 800be6a:	1e03      	subs	r3, r0, #0
 800be6c:	d01c      	beq.n	800bea8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2280      	movs	r2, #128	; 0x80
 800be72:	589b      	ldr	r3, [r3, r2]
 800be74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	2180      	movs	r1, #128	; 0x80
 800be7a:	5852      	ldr	r2, [r2, r1]
 800be7c:	0010      	movs	r0, r2
 800be7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be80:	e012      	b.n	800bea8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	0018      	movs	r0, r3
 800be86:	f000 f9d9 	bl	800c23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be8a:	e00d      	b.n	800bea8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	0018      	movs	r0, r3
 800be90:	f000 f9d4 	bl	800c23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be94:	e008      	b.n	800bea8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	0018      	movs	r0, r3
 800be9a:	f000 f9cf 	bl	800c23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2290      	movs	r2, #144	; 0x90
 800bea2:	2100      	movs	r1, #0
 800bea4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800bea6:	e1b9      	b.n	800c21c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bea8:	46c0      	nop			; (mov r8, r8)
    return;
 800beaa:	e1b7      	b.n	800c21c <HAL_UART_IRQHandler+0x62c>
 800beac:	0000080f 	.word	0x0000080f
 800beb0:	10000001 	.word	0x10000001
 800beb4:	04000120 	.word	0x04000120
 800beb8:	0800ca0d 	.word	0x0800ca0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d000      	beq.n	800bec6 <HAL_UART_IRQHandler+0x2d6>
 800bec4:	e13e      	b.n	800c144 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bec6:	23a4      	movs	r3, #164	; 0xa4
 800bec8:	18fb      	adds	r3, r7, r3
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2210      	movs	r2, #16
 800bece:	4013      	ands	r3, r2
 800bed0:	d100      	bne.n	800bed4 <HAL_UART_IRQHandler+0x2e4>
 800bed2:	e137      	b.n	800c144 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bed4:	23a0      	movs	r3, #160	; 0xa0
 800bed6:	18fb      	adds	r3, r7, r3
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2210      	movs	r2, #16
 800bedc:	4013      	ands	r3, r2
 800bede:	d100      	bne.n	800bee2 <HAL_UART_IRQHandler+0x2f2>
 800bee0:	e130      	b.n	800c144 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2210      	movs	r2, #16
 800bee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	2240      	movs	r2, #64	; 0x40
 800bef2:	4013      	ands	r3, r2
 800bef4:	2b40      	cmp	r3, #64	; 0x40
 800bef6:	d000      	beq.n	800befa <HAL_UART_IRQHandler+0x30a>
 800bef8:	e0a4      	b.n	800c044 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2280      	movs	r2, #128	; 0x80
 800befe:	589b      	ldr	r3, [r3, r2]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	217e      	movs	r1, #126	; 0x7e
 800bf06:	187b      	adds	r3, r7, r1
 800bf08:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800bf0a:	187b      	adds	r3, r7, r1
 800bf0c:	881b      	ldrh	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d100      	bne.n	800bf14 <HAL_UART_IRQHandler+0x324>
 800bf12:	e185      	b.n	800c220 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	225c      	movs	r2, #92	; 0x5c
 800bf18:	5a9b      	ldrh	r3, [r3, r2]
 800bf1a:	187a      	adds	r2, r7, r1
 800bf1c:	8812      	ldrh	r2, [r2, #0]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d300      	bcc.n	800bf24 <HAL_UART_IRQHandler+0x334>
 800bf22:	e17d      	b.n	800c220 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	187a      	adds	r2, r7, r1
 800bf28:	215e      	movs	r1, #94	; 0x5e
 800bf2a:	8812      	ldrh	r2, [r2, #0]
 800bf2c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2280      	movs	r2, #128	; 0x80
 800bf32:	589b      	ldr	r3, [r3, r2]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2220      	movs	r2, #32
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	d170      	bne.n	800c020 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf3e:	f3ef 8310 	mrs	r3, PRIMASK
 800bf42:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf46:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf48:	2301      	movs	r3, #1
 800bf4a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4e:	f383 8810 	msr	PRIMASK, r3
}
 800bf52:	46c0      	nop			; (mov r8, r8)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	49b4      	ldr	r1, [pc, #720]	; (800c230 <HAL_UART_IRQHandler+0x640>)
 800bf60:	400a      	ands	r2, r1
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	f383 8810 	msr	PRIMASK, r3
}
 800bf6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf70:	f3ef 8310 	mrs	r3, PRIMASK
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800bf76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf78:	677b      	str	r3, [r7, #116]	; 0x74
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf80:	f383 8810 	msr	PRIMASK, r3
}
 800bf84:	46c0      	nop			; (mov r8, r8)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	689a      	ldr	r2, [r3, #8]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2101      	movs	r1, #1
 800bf92:	438a      	bics	r2, r1
 800bf94:	609a      	str	r2, [r3, #8]
 800bf96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf98:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf9c:	f383 8810 	msr	PRIMASK, r3
}
 800bfa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfa2:	f3ef 8310 	mrs	r3, PRIMASK
 800bfa6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800bfa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfaa:	673b      	str	r3, [r7, #112]	; 0x70
 800bfac:	2301      	movs	r3, #1
 800bfae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb2:	f383 8810 	msr	PRIMASK, r3
}
 800bfb6:	46c0      	nop			; (mov r8, r8)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	689a      	ldr	r2, [r3, #8]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2140      	movs	r1, #64	; 0x40
 800bfc4:	438a      	bics	r2, r1
 800bfc6:	609a      	str	r2, [r3, #8]
 800bfc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfce:	f383 8810 	msr	PRIMASK, r3
}
 800bfd2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	228c      	movs	r2, #140	; 0x8c
 800bfd8:	2120      	movs	r1, #32
 800bfda:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfe2:	f3ef 8310 	mrs	r3, PRIMASK
 800bfe6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800bfe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfec:	2301      	movs	r3, #1
 800bfee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bff2:	f383 8810 	msr	PRIMASK, r3
}
 800bff6:	46c0      	nop			; (mov r8, r8)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2110      	movs	r1, #16
 800c004:	438a      	bics	r2, r1
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c00a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c00c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c00e:	f383 8810 	msr	PRIMASK, r3
}
 800c012:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2280      	movs	r2, #128	; 0x80
 800c018:	589b      	ldr	r3, [r3, r2]
 800c01a:	0018      	movs	r0, r3
 800c01c:	f7fc f97c 	bl	8008318 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2202      	movs	r2, #2
 800c024:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	225c      	movs	r2, #92	; 0x5c
 800c02a:	5a9a      	ldrh	r2, [r3, r2]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	215e      	movs	r1, #94	; 0x5e
 800c030:	5a5b      	ldrh	r3, [r3, r1]
 800c032:	b29b      	uxth	r3, r3
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	b29a      	uxth	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	0011      	movs	r1, r2
 800c03c:	0018      	movs	r0, r3
 800c03e:	f000 f905 	bl	800c24c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c042:	e0ed      	b.n	800c220 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	225c      	movs	r2, #92	; 0x5c
 800c048:	5a99      	ldrh	r1, [r3, r2]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	225e      	movs	r2, #94	; 0x5e
 800c04e:	5a9b      	ldrh	r3, [r3, r2]
 800c050:	b29a      	uxth	r2, r3
 800c052:	208e      	movs	r0, #142	; 0x8e
 800c054:	183b      	adds	r3, r7, r0
 800c056:	1a8a      	subs	r2, r1, r2
 800c058:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	225e      	movs	r2, #94	; 0x5e
 800c05e:	5a9b      	ldrh	r3, [r3, r2]
 800c060:	b29b      	uxth	r3, r3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d100      	bne.n	800c068 <HAL_UART_IRQHandler+0x478>
 800c066:	e0dd      	b.n	800c224 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800c068:	183b      	adds	r3, r7, r0
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d100      	bne.n	800c072 <HAL_UART_IRQHandler+0x482>
 800c070:	e0d8      	b.n	800c224 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c072:	f3ef 8310 	mrs	r3, PRIMASK
 800c076:	60fb      	str	r3, [r7, #12]
  return(result);
 800c078:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c07a:	2488      	movs	r4, #136	; 0x88
 800c07c:	193a      	adds	r2, r7, r4
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	2301      	movs	r3, #1
 800c082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	f383 8810 	msr	PRIMASK, r3
}
 800c08a:	46c0      	nop			; (mov r8, r8)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4967      	ldr	r1, [pc, #412]	; (800c234 <HAL_UART_IRQHandler+0x644>)
 800c098:	400a      	ands	r2, r1
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	193b      	adds	r3, r7, r4
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f383 8810 	msr	PRIMASK, r3
}
 800c0a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c0ae:	61bb      	str	r3, [r7, #24]
  return(result);
 800c0b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0b2:	2484      	movs	r4, #132	; 0x84
 800c0b4:	193a      	adds	r2, r7, r4
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	f383 8810 	msr	PRIMASK, r3
}
 800c0c2:	46c0      	nop			; (mov r8, r8)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	689a      	ldr	r2, [r3, #8]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	495a      	ldr	r1, [pc, #360]	; (800c238 <HAL_UART_IRQHandler+0x648>)
 800c0d0:	400a      	ands	r2, r1
 800c0d2:	609a      	str	r2, [r3, #8]
 800c0d4:	193b      	adds	r3, r7, r4
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	f383 8810 	msr	PRIMASK, r3
}
 800c0e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	228c      	movs	r2, #140	; 0x8c
 800c0e6:	2120      	movs	r1, #32
 800c0e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c0fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0fe:	2480      	movs	r4, #128	; 0x80
 800c100:	193a      	adds	r2, r7, r4
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	2301      	movs	r3, #1
 800c106:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	f383 8810 	msr	PRIMASK, r3
}
 800c10e:	46c0      	nop			; (mov r8, r8)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2110      	movs	r1, #16
 800c11c:	438a      	bics	r2, r1
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	193b      	adds	r3, r7, r4
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c128:	f383 8810 	msr	PRIMASK, r3
}
 800c12c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2202      	movs	r2, #2
 800c132:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c134:	183b      	adds	r3, r7, r0
 800c136:	881a      	ldrh	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	0011      	movs	r1, r2
 800c13c:	0018      	movs	r0, r3
 800c13e:	f000 f885 	bl	800c24c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c142:	e06f      	b.n	800c224 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c144:	23a4      	movs	r3, #164	; 0xa4
 800c146:	18fb      	adds	r3, r7, r3
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	2380      	movs	r3, #128	; 0x80
 800c14c:	035b      	lsls	r3, r3, #13
 800c14e:	4013      	ands	r3, r2
 800c150:	d010      	beq.n	800c174 <HAL_UART_IRQHandler+0x584>
 800c152:	239c      	movs	r3, #156	; 0x9c
 800c154:	18fb      	adds	r3, r7, r3
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	2380      	movs	r3, #128	; 0x80
 800c15a:	03db      	lsls	r3, r3, #15
 800c15c:	4013      	ands	r3, r2
 800c15e:	d009      	beq.n	800c174 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2280      	movs	r2, #128	; 0x80
 800c166:	0352      	lsls	r2, r2, #13
 800c168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	0018      	movs	r0, r3
 800c16e:	f000 fc90 	bl	800ca92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c172:	e05a      	b.n	800c22a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c174:	23a4      	movs	r3, #164	; 0xa4
 800c176:	18fb      	adds	r3, r7, r3
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2280      	movs	r2, #128	; 0x80
 800c17c:	4013      	ands	r3, r2
 800c17e:	d016      	beq.n	800c1ae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c180:	23a0      	movs	r3, #160	; 0xa0
 800c182:	18fb      	adds	r3, r7, r3
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2280      	movs	r2, #128	; 0x80
 800c188:	4013      	ands	r3, r2
 800c18a:	d106      	bne.n	800c19a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c18c:	239c      	movs	r3, #156	; 0x9c
 800c18e:	18fb      	adds	r3, r7, r3
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	2380      	movs	r3, #128	; 0x80
 800c194:	041b      	lsls	r3, r3, #16
 800c196:	4013      	ands	r3, r2
 800c198:	d009      	beq.n	800c1ae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d042      	beq.n	800c228 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	0010      	movs	r0, r2
 800c1aa:	4798      	blx	r3
    }
    return;
 800c1ac:	e03c      	b.n	800c228 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c1ae:	23a4      	movs	r3, #164	; 0xa4
 800c1b0:	18fb      	adds	r3, r7, r3
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2240      	movs	r2, #64	; 0x40
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	d00a      	beq.n	800c1d0 <HAL_UART_IRQHandler+0x5e0>
 800c1ba:	23a0      	movs	r3, #160	; 0xa0
 800c1bc:	18fb      	adds	r3, r7, r3
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2240      	movs	r2, #64	; 0x40
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	d004      	beq.n	800c1d0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	0018      	movs	r0, r3
 800c1ca:	f000 fc36 	bl	800ca3a <UART_EndTransmit_IT>
    return;
 800c1ce:	e02c      	b.n	800c22a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c1d0:	23a4      	movs	r3, #164	; 0xa4
 800c1d2:	18fb      	adds	r3, r7, r3
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	2380      	movs	r3, #128	; 0x80
 800c1d8:	041b      	lsls	r3, r3, #16
 800c1da:	4013      	ands	r3, r2
 800c1dc:	d00b      	beq.n	800c1f6 <HAL_UART_IRQHandler+0x606>
 800c1de:	23a0      	movs	r3, #160	; 0xa0
 800c1e0:	18fb      	adds	r3, r7, r3
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	2380      	movs	r3, #128	; 0x80
 800c1e6:	05db      	lsls	r3, r3, #23
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	d004      	beq.n	800c1f6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	f000 fc5f 	bl	800cab2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1f4:	e019      	b.n	800c22a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c1f6:	23a4      	movs	r3, #164	; 0xa4
 800c1f8:	18fb      	adds	r3, r7, r3
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	2380      	movs	r3, #128	; 0x80
 800c1fe:	045b      	lsls	r3, r3, #17
 800c200:	4013      	ands	r3, r2
 800c202:	d012      	beq.n	800c22a <HAL_UART_IRQHandler+0x63a>
 800c204:	23a0      	movs	r3, #160	; 0xa0
 800c206:	18fb      	adds	r3, r7, r3
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	da0d      	bge.n	800c22a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	0018      	movs	r0, r3
 800c212:	f000 fc46 	bl	800caa2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c216:	e008      	b.n	800c22a <HAL_UART_IRQHandler+0x63a>
      return;
 800c218:	46c0      	nop			; (mov r8, r8)
 800c21a:	e006      	b.n	800c22a <HAL_UART_IRQHandler+0x63a>
    return;
 800c21c:	46c0      	nop			; (mov r8, r8)
 800c21e:	e004      	b.n	800c22a <HAL_UART_IRQHandler+0x63a>
      return;
 800c220:	46c0      	nop			; (mov r8, r8)
 800c222:	e002      	b.n	800c22a <HAL_UART_IRQHandler+0x63a>
      return;
 800c224:	46c0      	nop			; (mov r8, r8)
 800c226:	e000      	b.n	800c22a <HAL_UART_IRQHandler+0x63a>
    return;
 800c228:	46c0      	nop			; (mov r8, r8)
  }
}
 800c22a:	46bd      	mov	sp, r7
 800c22c:	b02a      	add	sp, #168	; 0xa8
 800c22e:	bdb0      	pop	{r4, r5, r7, pc}
 800c230:	fffffeff 	.word	0xfffffeff
 800c234:	fffffedf 	.word	0xfffffedf
 800c238:	effffffe 	.word	0xeffffffe

0800c23c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c244:	46c0      	nop			; (mov r8, r8)
 800c246:	46bd      	mov	sp, r7
 800c248:	b002      	add	sp, #8
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	000a      	movs	r2, r1
 800c256:	1cbb      	adds	r3, r7, #2
 800c258:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c25a:	46c0      	nop			; (mov r8, r8)
 800c25c:	46bd      	mov	sp, r7
 800c25e:	b002      	add	sp, #8
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c26c:	231a      	movs	r3, #26
 800c26e:	18fb      	adds	r3, r7, r3
 800c270:	2200      	movs	r2, #0
 800c272:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689a      	ldr	r2, [r3, #8]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	431a      	orrs	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	695b      	ldr	r3, [r3, #20]
 800c282:	431a      	orrs	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	69db      	ldr	r3, [r3, #28]
 800c288:	4313      	orrs	r3, r2
 800c28a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4abc      	ldr	r2, [pc, #752]	; (800c584 <UART_SetConfig+0x320>)
 800c294:	4013      	ands	r3, r2
 800c296:	0019      	movs	r1, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	69fa      	ldr	r2, [r7, #28]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	4ab7      	ldr	r2, [pc, #732]	; (800c588 <UART_SetConfig+0x324>)
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	0019      	movs	r1, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68da      	ldr	r2, [r3, #12]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a1b      	ldr	r3, [r3, #32]
 800c2c4:	69fa      	ldr	r2, [r7, #28]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	4aae      	ldr	r2, [pc, #696]	; (800c58c <UART_SetConfig+0x328>)
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	0019      	movs	r1, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	69fa      	ldr	r2, [r7, #28]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e6:	220f      	movs	r2, #15
 800c2e8:	4393      	bics	r3, r2
 800c2ea:	0019      	movs	r1, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	430a      	orrs	r2, r1
 800c2f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4aa4      	ldr	r2, [pc, #656]	; (800c590 <UART_SetConfig+0x32c>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d127      	bne.n	800c352 <UART_SetConfig+0xee>
 800c302:	4ba4      	ldr	r3, [pc, #656]	; (800c594 <UART_SetConfig+0x330>)
 800c304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c306:	2203      	movs	r2, #3
 800c308:	4013      	ands	r3, r2
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d017      	beq.n	800c33e <UART_SetConfig+0xda>
 800c30e:	d81b      	bhi.n	800c348 <UART_SetConfig+0xe4>
 800c310:	2b02      	cmp	r3, #2
 800c312:	d00a      	beq.n	800c32a <UART_SetConfig+0xc6>
 800c314:	d818      	bhi.n	800c348 <UART_SetConfig+0xe4>
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <UART_SetConfig+0xbc>
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d00a      	beq.n	800c334 <UART_SetConfig+0xd0>
 800c31e:	e013      	b.n	800c348 <UART_SetConfig+0xe4>
 800c320:	231b      	movs	r3, #27
 800c322:	18fb      	adds	r3, r7, r3
 800c324:	2200      	movs	r2, #0
 800c326:	701a      	strb	r2, [r3, #0]
 800c328:	e058      	b.n	800c3dc <UART_SetConfig+0x178>
 800c32a:	231b      	movs	r3, #27
 800c32c:	18fb      	adds	r3, r7, r3
 800c32e:	2202      	movs	r2, #2
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	e053      	b.n	800c3dc <UART_SetConfig+0x178>
 800c334:	231b      	movs	r3, #27
 800c336:	18fb      	adds	r3, r7, r3
 800c338:	2204      	movs	r2, #4
 800c33a:	701a      	strb	r2, [r3, #0]
 800c33c:	e04e      	b.n	800c3dc <UART_SetConfig+0x178>
 800c33e:	231b      	movs	r3, #27
 800c340:	18fb      	adds	r3, r7, r3
 800c342:	2208      	movs	r2, #8
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	e049      	b.n	800c3dc <UART_SetConfig+0x178>
 800c348:	231b      	movs	r3, #27
 800c34a:	18fb      	adds	r3, r7, r3
 800c34c:	2210      	movs	r2, #16
 800c34e:	701a      	strb	r2, [r3, #0]
 800c350:	e044      	b.n	800c3dc <UART_SetConfig+0x178>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a90      	ldr	r2, [pc, #576]	; (800c598 <UART_SetConfig+0x334>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d127      	bne.n	800c3ac <UART_SetConfig+0x148>
 800c35c:	4b8d      	ldr	r3, [pc, #564]	; (800c594 <UART_SetConfig+0x330>)
 800c35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c360:	220c      	movs	r2, #12
 800c362:	4013      	ands	r3, r2
 800c364:	2b0c      	cmp	r3, #12
 800c366:	d017      	beq.n	800c398 <UART_SetConfig+0x134>
 800c368:	d81b      	bhi.n	800c3a2 <UART_SetConfig+0x13e>
 800c36a:	2b08      	cmp	r3, #8
 800c36c:	d00a      	beq.n	800c384 <UART_SetConfig+0x120>
 800c36e:	d818      	bhi.n	800c3a2 <UART_SetConfig+0x13e>
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <UART_SetConfig+0x116>
 800c374:	2b04      	cmp	r3, #4
 800c376:	d00a      	beq.n	800c38e <UART_SetConfig+0x12a>
 800c378:	e013      	b.n	800c3a2 <UART_SetConfig+0x13e>
 800c37a:	231b      	movs	r3, #27
 800c37c:	18fb      	adds	r3, r7, r3
 800c37e:	2200      	movs	r2, #0
 800c380:	701a      	strb	r2, [r3, #0]
 800c382:	e02b      	b.n	800c3dc <UART_SetConfig+0x178>
 800c384:	231b      	movs	r3, #27
 800c386:	18fb      	adds	r3, r7, r3
 800c388:	2202      	movs	r2, #2
 800c38a:	701a      	strb	r2, [r3, #0]
 800c38c:	e026      	b.n	800c3dc <UART_SetConfig+0x178>
 800c38e:	231b      	movs	r3, #27
 800c390:	18fb      	adds	r3, r7, r3
 800c392:	2204      	movs	r2, #4
 800c394:	701a      	strb	r2, [r3, #0]
 800c396:	e021      	b.n	800c3dc <UART_SetConfig+0x178>
 800c398:	231b      	movs	r3, #27
 800c39a:	18fb      	adds	r3, r7, r3
 800c39c:	2208      	movs	r2, #8
 800c39e:	701a      	strb	r2, [r3, #0]
 800c3a0:	e01c      	b.n	800c3dc <UART_SetConfig+0x178>
 800c3a2:	231b      	movs	r3, #27
 800c3a4:	18fb      	adds	r3, r7, r3
 800c3a6:	2210      	movs	r2, #16
 800c3a8:	701a      	strb	r2, [r3, #0]
 800c3aa:	e017      	b.n	800c3dc <UART_SetConfig+0x178>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a7a      	ldr	r2, [pc, #488]	; (800c59c <UART_SetConfig+0x338>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d104      	bne.n	800c3c0 <UART_SetConfig+0x15c>
 800c3b6:	231b      	movs	r3, #27
 800c3b8:	18fb      	adds	r3, r7, r3
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	e00d      	b.n	800c3dc <UART_SetConfig+0x178>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a76      	ldr	r2, [pc, #472]	; (800c5a0 <UART_SetConfig+0x33c>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d104      	bne.n	800c3d4 <UART_SetConfig+0x170>
 800c3ca:	231b      	movs	r3, #27
 800c3cc:	18fb      	adds	r3, r7, r3
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	701a      	strb	r2, [r3, #0]
 800c3d2:	e003      	b.n	800c3dc <UART_SetConfig+0x178>
 800c3d4:	231b      	movs	r3, #27
 800c3d6:	18fb      	adds	r3, r7, r3
 800c3d8:	2210      	movs	r2, #16
 800c3da:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	69da      	ldr	r2, [r3, #28]
 800c3e0:	2380      	movs	r3, #128	; 0x80
 800c3e2:	021b      	lsls	r3, r3, #8
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d000      	beq.n	800c3ea <UART_SetConfig+0x186>
 800c3e8:	e065      	b.n	800c4b6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800c3ea:	231b      	movs	r3, #27
 800c3ec:	18fb      	adds	r3, r7, r3
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b08      	cmp	r3, #8
 800c3f2:	d015      	beq.n	800c420 <UART_SetConfig+0x1bc>
 800c3f4:	dc18      	bgt.n	800c428 <UART_SetConfig+0x1c4>
 800c3f6:	2b04      	cmp	r3, #4
 800c3f8:	d00d      	beq.n	800c416 <UART_SetConfig+0x1b2>
 800c3fa:	dc15      	bgt.n	800c428 <UART_SetConfig+0x1c4>
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <UART_SetConfig+0x1a2>
 800c400:	2b02      	cmp	r3, #2
 800c402:	d005      	beq.n	800c410 <UART_SetConfig+0x1ac>
 800c404:	e010      	b.n	800c428 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c406:	f7fe f999 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800c40a:	0003      	movs	r3, r0
 800c40c:	617b      	str	r3, [r7, #20]
        break;
 800c40e:	e012      	b.n	800c436 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c410:	4b64      	ldr	r3, [pc, #400]	; (800c5a4 <UART_SetConfig+0x340>)
 800c412:	617b      	str	r3, [r7, #20]
        break;
 800c414:	e00f      	b.n	800c436 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c416:	f7fe f905 	bl	800a624 <HAL_RCC_GetSysClockFreq>
 800c41a:	0003      	movs	r3, r0
 800c41c:	617b      	str	r3, [r7, #20]
        break;
 800c41e:	e00a      	b.n	800c436 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c420:	2380      	movs	r3, #128	; 0x80
 800c422:	021b      	lsls	r3, r3, #8
 800c424:	617b      	str	r3, [r7, #20]
        break;
 800c426:	e006      	b.n	800c436 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800c428:	2300      	movs	r3, #0
 800c42a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c42c:	231a      	movs	r3, #26
 800c42e:	18fb      	adds	r3, r7, r3
 800c430:	2201      	movs	r2, #1
 800c432:	701a      	strb	r2, [r3, #0]
        break;
 800c434:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d100      	bne.n	800c43e <UART_SetConfig+0x1da>
 800c43c:	e08d      	b.n	800c55a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c442:	4b59      	ldr	r3, [pc, #356]	; (800c5a8 <UART_SetConfig+0x344>)
 800c444:	0052      	lsls	r2, r2, #1
 800c446:	5ad3      	ldrh	r3, [r2, r3]
 800c448:	0019      	movs	r1, r3
 800c44a:	6978      	ldr	r0, [r7, #20]
 800c44c:	f7f3 fe74 	bl	8000138 <__udivsi3>
 800c450:	0003      	movs	r3, r0
 800c452:	005a      	lsls	r2, r3, #1
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	085b      	lsrs	r3, r3, #1
 800c45a:	18d2      	adds	r2, r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	0019      	movs	r1, r3
 800c462:	0010      	movs	r0, r2
 800c464:	f7f3 fe68 	bl	8000138 <__udivsi3>
 800c468:	0003      	movs	r3, r0
 800c46a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	2b0f      	cmp	r3, #15
 800c470:	d91c      	bls.n	800c4ac <UART_SetConfig+0x248>
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	2380      	movs	r3, #128	; 0x80
 800c476:	025b      	lsls	r3, r3, #9
 800c478:	429a      	cmp	r2, r3
 800c47a:	d217      	bcs.n	800c4ac <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	b29a      	uxth	r2, r3
 800c480:	200e      	movs	r0, #14
 800c482:	183b      	adds	r3, r7, r0
 800c484:	210f      	movs	r1, #15
 800c486:	438a      	bics	r2, r1
 800c488:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	085b      	lsrs	r3, r3, #1
 800c48e:	b29b      	uxth	r3, r3
 800c490:	2207      	movs	r2, #7
 800c492:	4013      	ands	r3, r2
 800c494:	b299      	uxth	r1, r3
 800c496:	183b      	adds	r3, r7, r0
 800c498:	183a      	adds	r2, r7, r0
 800c49a:	8812      	ldrh	r2, [r2, #0]
 800c49c:	430a      	orrs	r2, r1
 800c49e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	183a      	adds	r2, r7, r0
 800c4a6:	8812      	ldrh	r2, [r2, #0]
 800c4a8:	60da      	str	r2, [r3, #12]
 800c4aa:	e056      	b.n	800c55a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800c4ac:	231a      	movs	r3, #26
 800c4ae:	18fb      	adds	r3, r7, r3
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	701a      	strb	r2, [r3, #0]
 800c4b4:	e051      	b.n	800c55a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c4b6:	231b      	movs	r3, #27
 800c4b8:	18fb      	adds	r3, r7, r3
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b08      	cmp	r3, #8
 800c4be:	d015      	beq.n	800c4ec <UART_SetConfig+0x288>
 800c4c0:	dc18      	bgt.n	800c4f4 <UART_SetConfig+0x290>
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d00d      	beq.n	800c4e2 <UART_SetConfig+0x27e>
 800c4c6:	dc15      	bgt.n	800c4f4 <UART_SetConfig+0x290>
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <UART_SetConfig+0x26e>
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d005      	beq.n	800c4dc <UART_SetConfig+0x278>
 800c4d0:	e010      	b.n	800c4f4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4d2:	f7fe f933 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800c4d6:	0003      	movs	r3, r0
 800c4d8:	617b      	str	r3, [r7, #20]
        break;
 800c4da:	e012      	b.n	800c502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4dc:	4b31      	ldr	r3, [pc, #196]	; (800c5a4 <UART_SetConfig+0x340>)
 800c4de:	617b      	str	r3, [r7, #20]
        break;
 800c4e0:	e00f      	b.n	800c502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4e2:	f7fe f89f 	bl	800a624 <HAL_RCC_GetSysClockFreq>
 800c4e6:	0003      	movs	r3, r0
 800c4e8:	617b      	str	r3, [r7, #20]
        break;
 800c4ea:	e00a      	b.n	800c502 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4ec:	2380      	movs	r3, #128	; 0x80
 800c4ee:	021b      	lsls	r3, r3, #8
 800c4f0:	617b      	str	r3, [r7, #20]
        break;
 800c4f2:	e006      	b.n	800c502 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c4f8:	231a      	movs	r3, #26
 800c4fa:	18fb      	adds	r3, r7, r3
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	701a      	strb	r2, [r3, #0]
        break;
 800c500:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d028      	beq.n	800c55a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c50c:	4b26      	ldr	r3, [pc, #152]	; (800c5a8 <UART_SetConfig+0x344>)
 800c50e:	0052      	lsls	r2, r2, #1
 800c510:	5ad3      	ldrh	r3, [r2, r3]
 800c512:	0019      	movs	r1, r3
 800c514:	6978      	ldr	r0, [r7, #20]
 800c516:	f7f3 fe0f 	bl	8000138 <__udivsi3>
 800c51a:	0003      	movs	r3, r0
 800c51c:	001a      	movs	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	085b      	lsrs	r3, r3, #1
 800c524:	18d2      	adds	r2, r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	0019      	movs	r1, r3
 800c52c:	0010      	movs	r0, r2
 800c52e:	f7f3 fe03 	bl	8000138 <__udivsi3>
 800c532:	0003      	movs	r3, r0
 800c534:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	2b0f      	cmp	r3, #15
 800c53a:	d90a      	bls.n	800c552 <UART_SetConfig+0x2ee>
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	2380      	movs	r3, #128	; 0x80
 800c540:	025b      	lsls	r3, r3, #9
 800c542:	429a      	cmp	r2, r3
 800c544:	d205      	bcs.n	800c552 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	b29a      	uxth	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	60da      	str	r2, [r3, #12]
 800c550:	e003      	b.n	800c55a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800c552:	231a      	movs	r3, #26
 800c554:	18fb      	adds	r3, r7, r3
 800c556:	2201      	movs	r2, #1
 800c558:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	226a      	movs	r2, #106	; 0x6a
 800c55e:	2101      	movs	r1, #1
 800c560:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2268      	movs	r2, #104	; 0x68
 800c566:	2101      	movs	r1, #1
 800c568:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c576:	231a      	movs	r3, #26
 800c578:	18fb      	adds	r3, r7, r3
 800c57a:	781b      	ldrb	r3, [r3, #0]
}
 800c57c:	0018      	movs	r0, r3
 800c57e:	46bd      	mov	sp, r7
 800c580:	b008      	add	sp, #32
 800c582:	bd80      	pop	{r7, pc}
 800c584:	cfff69f3 	.word	0xcfff69f3
 800c588:	ffffcfff 	.word	0xffffcfff
 800c58c:	11fff4ff 	.word	0x11fff4ff
 800c590:	40013800 	.word	0x40013800
 800c594:	40021000 	.word	0x40021000
 800c598:	40004400 	.word	0x40004400
 800c59c:	40004800 	.word	0x40004800
 800c5a0:	40004c00 	.word	0x40004c00
 800c5a4:	00f42400 	.word	0x00f42400
 800c5a8:	08010188 	.word	0x08010188

0800c5ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	d00b      	beq.n	800c5d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4a4a      	ldr	r2, [pc, #296]	; (800c6f0 <UART_AdvFeatureConfig+0x144>)
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	0019      	movs	r1, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5da:	2202      	movs	r2, #2
 800c5dc:	4013      	ands	r3, r2
 800c5de:	d00b      	beq.n	800c5f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	4a43      	ldr	r2, [pc, #268]	; (800c6f4 <UART_AdvFeatureConfig+0x148>)
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	0019      	movs	r1, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	430a      	orrs	r2, r1
 800c5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fc:	2204      	movs	r2, #4
 800c5fe:	4013      	ands	r3, r2
 800c600:	d00b      	beq.n	800c61a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	4a3b      	ldr	r2, [pc, #236]	; (800c6f8 <UART_AdvFeatureConfig+0x14c>)
 800c60a:	4013      	ands	r3, r2
 800c60c:	0019      	movs	r1, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	430a      	orrs	r2, r1
 800c618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61e:	2208      	movs	r2, #8
 800c620:	4013      	ands	r3, r2
 800c622:	d00b      	beq.n	800c63c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	4a34      	ldr	r2, [pc, #208]	; (800c6fc <UART_AdvFeatureConfig+0x150>)
 800c62c:	4013      	ands	r3, r2
 800c62e:	0019      	movs	r1, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	430a      	orrs	r2, r1
 800c63a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c640:	2210      	movs	r2, #16
 800c642:	4013      	ands	r3, r2
 800c644:	d00b      	beq.n	800c65e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	4a2c      	ldr	r2, [pc, #176]	; (800c700 <UART_AdvFeatureConfig+0x154>)
 800c64e:	4013      	ands	r3, r2
 800c650:	0019      	movs	r1, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c662:	2220      	movs	r2, #32
 800c664:	4013      	ands	r3, r2
 800c666:	d00b      	beq.n	800c680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	4a25      	ldr	r2, [pc, #148]	; (800c704 <UART_AdvFeatureConfig+0x158>)
 800c670:	4013      	ands	r3, r2
 800c672:	0019      	movs	r1, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	430a      	orrs	r2, r1
 800c67e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c684:	2240      	movs	r2, #64	; 0x40
 800c686:	4013      	ands	r3, r2
 800c688:	d01d      	beq.n	800c6c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	4a1d      	ldr	r2, [pc, #116]	; (800c708 <UART_AdvFeatureConfig+0x15c>)
 800c692:	4013      	ands	r3, r2
 800c694:	0019      	movs	r1, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	430a      	orrs	r2, r1
 800c6a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6a6:	2380      	movs	r3, #128	; 0x80
 800c6a8:	035b      	lsls	r3, r3, #13
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d10b      	bne.n	800c6c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	4a15      	ldr	r2, [pc, #84]	; (800c70c <UART_AdvFeatureConfig+0x160>)
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	0019      	movs	r1, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ca:	2280      	movs	r2, #128	; 0x80
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	d00b      	beq.n	800c6e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	4a0e      	ldr	r2, [pc, #56]	; (800c710 <UART_AdvFeatureConfig+0x164>)
 800c6d8:	4013      	ands	r3, r2
 800c6da:	0019      	movs	r1, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	430a      	orrs	r2, r1
 800c6e6:	605a      	str	r2, [r3, #4]
  }
}
 800c6e8:	46c0      	nop			; (mov r8, r8)
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	b002      	add	sp, #8
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	fffdffff 	.word	0xfffdffff
 800c6f4:	fffeffff 	.word	0xfffeffff
 800c6f8:	fffbffff 	.word	0xfffbffff
 800c6fc:	ffff7fff 	.word	0xffff7fff
 800c700:	ffffefff 	.word	0xffffefff
 800c704:	ffffdfff 	.word	0xffffdfff
 800c708:	ffefffff 	.word	0xffefffff
 800c70c:	ff9fffff 	.word	0xff9fffff
 800c710:	fff7ffff 	.word	0xfff7ffff

0800c714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af02      	add	r7, sp, #8
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2290      	movs	r2, #144	; 0x90
 800c720:	2100      	movs	r1, #0
 800c722:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c724:	f7fa fa34 	bl	8006b90 <HAL_GetTick>
 800c728:	0003      	movs	r3, r0
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2208      	movs	r2, #8
 800c734:	4013      	ands	r3, r2
 800c736:	2b08      	cmp	r3, #8
 800c738:	d10c      	bne.n	800c754 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2280      	movs	r2, #128	; 0x80
 800c73e:	0391      	lsls	r1, r2, #14
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	4a1a      	ldr	r2, [pc, #104]	; (800c7ac <UART_CheckIdleState+0x98>)
 800c744:	9200      	str	r2, [sp, #0]
 800c746:	2200      	movs	r2, #0
 800c748:	f000 f832 	bl	800c7b0 <UART_WaitOnFlagUntilTimeout>
 800c74c:	1e03      	subs	r3, r0, #0
 800c74e:	d001      	beq.n	800c754 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e026      	b.n	800c7a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2204      	movs	r2, #4
 800c75c:	4013      	ands	r3, r2
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d10c      	bne.n	800c77c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2280      	movs	r2, #128	; 0x80
 800c766:	03d1      	lsls	r1, r2, #15
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	4a10      	ldr	r2, [pc, #64]	; (800c7ac <UART_CheckIdleState+0x98>)
 800c76c:	9200      	str	r2, [sp, #0]
 800c76e:	2200      	movs	r2, #0
 800c770:	f000 f81e 	bl	800c7b0 <UART_WaitOnFlagUntilTimeout>
 800c774:	1e03      	subs	r3, r0, #0
 800c776:	d001      	beq.n	800c77c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e012      	b.n	800c7a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2288      	movs	r2, #136	; 0x88
 800c780:	2120      	movs	r1, #32
 800c782:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	228c      	movs	r2, #140	; 0x8c
 800c788:	2120      	movs	r1, #32
 800c78a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2284      	movs	r2, #132	; 0x84
 800c79c:	2100      	movs	r1, #0
 800c79e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	0018      	movs	r0, r3
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	b004      	add	sp, #16
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	46c0      	nop			; (mov r8, r8)
 800c7ac:	01ffffff 	.word	0x01ffffff

0800c7b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b094      	sub	sp, #80	; 0x50
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	1dfb      	adds	r3, r7, #7
 800c7be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7c0:	e0a7      	b.n	800c912 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	d100      	bne.n	800c7ca <UART_WaitOnFlagUntilTimeout+0x1a>
 800c7c8:	e0a3      	b.n	800c912 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7ca:	f7fa f9e1 	bl	8006b90 <HAL_GetTick>
 800c7ce:	0002      	movs	r2, r0
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d302      	bcc.n	800c7e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d13f      	bne.n	800c860 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c7e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c7e8:	647b      	str	r3, [r7, #68]	; 0x44
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	f383 8810 	msr	PRIMASK, r3
}
 800c7f4:	46c0      	nop			; (mov r8, r8)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	494e      	ldr	r1, [pc, #312]	; (800c93c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c802:	400a      	ands	r2, r1
 800c804:	601a      	str	r2, [r3, #0]
 800c806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c808:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	f383 8810 	msr	PRIMASK, r3
}
 800c810:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c812:	f3ef 8310 	mrs	r3, PRIMASK
 800c816:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800c818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c81a:	643b      	str	r3, [r7, #64]	; 0x40
 800c81c:	2301      	movs	r3, #1
 800c81e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	f383 8810 	msr	PRIMASK, r3
}
 800c826:	46c0      	nop			; (mov r8, r8)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	689a      	ldr	r2, [r3, #8]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2101      	movs	r1, #1
 800c834:	438a      	bics	r2, r1
 800c836:	609a      	str	r2, [r3, #8]
 800c838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c83e:	f383 8810 	msr	PRIMASK, r3
}
 800c842:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2288      	movs	r2, #136	; 0x88
 800c848:	2120      	movs	r1, #32
 800c84a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	228c      	movs	r2, #140	; 0x8c
 800c850:	2120      	movs	r1, #32
 800c852:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2284      	movs	r2, #132	; 0x84
 800c858:	2100      	movs	r1, #0
 800c85a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c85c:	2303      	movs	r3, #3
 800c85e:	e069      	b.n	800c934 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2204      	movs	r2, #4
 800c868:	4013      	ands	r3, r2
 800c86a:	d052      	beq.n	800c912 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	69da      	ldr	r2, [r3, #28]
 800c872:	2380      	movs	r3, #128	; 0x80
 800c874:	011b      	lsls	r3, r3, #4
 800c876:	401a      	ands	r2, r3
 800c878:	2380      	movs	r3, #128	; 0x80
 800c87a:	011b      	lsls	r3, r3, #4
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d148      	bne.n	800c912 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2280      	movs	r2, #128	; 0x80
 800c886:	0112      	lsls	r2, r2, #4
 800c888:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c88a:	f3ef 8310 	mrs	r3, PRIMASK
 800c88e:	613b      	str	r3, [r7, #16]
  return(result);
 800c890:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c892:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c894:	2301      	movs	r3, #1
 800c896:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	f383 8810 	msr	PRIMASK, r3
}
 800c89e:	46c0      	nop			; (mov r8, r8)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4924      	ldr	r1, [pc, #144]	; (800c93c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c8ac:	400a      	ands	r2, r1
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	f383 8810 	msr	PRIMASK, r3
}
 800c8ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8bc:	f3ef 8310 	mrs	r3, PRIMASK
 800c8c0:	61fb      	str	r3, [r7, #28]
  return(result);
 800c8c2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8ca:	6a3b      	ldr	r3, [r7, #32]
 800c8cc:	f383 8810 	msr	PRIMASK, r3
}
 800c8d0:	46c0      	nop			; (mov r8, r8)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	689a      	ldr	r2, [r3, #8]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2101      	movs	r1, #1
 800c8de:	438a      	bics	r2, r1
 800c8e0:	609a      	str	r2, [r3, #8]
 800c8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e8:	f383 8810 	msr	PRIMASK, r3
}
 800c8ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2288      	movs	r2, #136	; 0x88
 800c8f2:	2120      	movs	r1, #32
 800c8f4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	228c      	movs	r2, #140	; 0x8c
 800c8fa:	2120      	movs	r1, #32
 800c8fc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2290      	movs	r2, #144	; 0x90
 800c902:	2120      	movs	r1, #32
 800c904:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2284      	movs	r2, #132	; 0x84
 800c90a:	2100      	movs	r1, #0
 800c90c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c90e:	2303      	movs	r3, #3
 800c910:	e010      	b.n	800c934 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	69db      	ldr	r3, [r3, #28]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	4013      	ands	r3, r2
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	425a      	negs	r2, r3
 800c922:	4153      	adcs	r3, r2
 800c924:	b2db      	uxtb	r3, r3
 800c926:	001a      	movs	r2, r3
 800c928:	1dfb      	adds	r3, r7, #7
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d100      	bne.n	800c932 <UART_WaitOnFlagUntilTimeout+0x182>
 800c930:	e747      	b.n	800c7c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	0018      	movs	r0, r3
 800c936:	46bd      	mov	sp, r7
 800c938:	b014      	add	sp, #80	; 0x50
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	fffffe5f 	.word	0xfffffe5f

0800c940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08e      	sub	sp, #56	; 0x38
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c948:	f3ef 8310 	mrs	r3, PRIMASK
 800c94c:	617b      	str	r3, [r7, #20]
  return(result);
 800c94e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c950:	637b      	str	r3, [r7, #52]	; 0x34
 800c952:	2301      	movs	r3, #1
 800c954:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	f383 8810 	msr	PRIMASK, r3
}
 800c95c:	46c0      	nop			; (mov r8, r8)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4926      	ldr	r1, [pc, #152]	; (800ca04 <UART_EndRxTransfer+0xc4>)
 800c96a:	400a      	ands	r2, r1
 800c96c:	601a      	str	r2, [r3, #0]
 800c96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	f383 8810 	msr	PRIMASK, r3
}
 800c978:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c97a:	f3ef 8310 	mrs	r3, PRIMASK
 800c97e:	623b      	str	r3, [r7, #32]
  return(result);
 800c980:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c982:	633b      	str	r3, [r7, #48]	; 0x30
 800c984:	2301      	movs	r3, #1
 800c986:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98a:	f383 8810 	msr	PRIMASK, r3
}
 800c98e:	46c0      	nop			; (mov r8, r8)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	689a      	ldr	r2, [r3, #8]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	491b      	ldr	r1, [pc, #108]	; (800ca08 <UART_EndRxTransfer+0xc8>)
 800c99c:	400a      	ands	r2, r1
 800c99e:	609a      	str	r2, [r3, #8]
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a6:	f383 8810 	msr	PRIMASK, r3
}
 800c9aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d118      	bne.n	800c9e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800c9b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9be:	2301      	movs	r3, #1
 800c9c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f383 8810 	msr	PRIMASK, r3
}
 800c9c8:	46c0      	nop			; (mov r8, r8)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2110      	movs	r1, #16
 800c9d6:	438a      	bics	r2, r1
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	f383 8810 	msr	PRIMASK, r3
}
 800c9e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	228c      	movs	r2, #140	; 0x8c
 800c9ea:	2120      	movs	r1, #32
 800c9ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c9fa:	46c0      	nop			; (mov r8, r8)
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	b00e      	add	sp, #56	; 0x38
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	46c0      	nop			; (mov r8, r8)
 800ca04:	fffffedf 	.word	0xfffffedf
 800ca08:	effffffe 	.word	0xeffffffe

0800ca0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	225e      	movs	r2, #94	; 0x5e
 800ca1e:	2100      	movs	r1, #0
 800ca20:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2256      	movs	r2, #86	; 0x56
 800ca26:	2100      	movs	r1, #0
 800ca28:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	f7ff fc05 	bl	800c23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca32:	46c0      	nop			; (mov r8, r8)
 800ca34:	46bd      	mov	sp, r7
 800ca36:	b004      	add	sp, #16
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b086      	sub	sp, #24
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca42:	f3ef 8310 	mrs	r3, PRIMASK
 800ca46:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca48:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca4a:	617b      	str	r3, [r7, #20]
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f383 8810 	msr	PRIMASK, r3
}
 800ca56:	46c0      	nop			; (mov r8, r8)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2140      	movs	r1, #64	; 0x40
 800ca64:	438a      	bics	r2, r1
 800ca66:	601a      	str	r2, [r3, #0]
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	f383 8810 	msr	PRIMASK, r3
}
 800ca72:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2288      	movs	r2, #136	; 0x88
 800ca78:	2120      	movs	r1, #32
 800ca7a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	0018      	movs	r0, r3
 800ca86:	f7f7 f951 	bl	8003d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca8a:	46c0      	nop			; (mov r8, r8)
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	b006      	add	sp, #24
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca9a:	46c0      	nop			; (mov r8, r8)
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	b002      	add	sp, #8
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b082      	sub	sp, #8
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800caaa:	46c0      	nop			; (mov r8, r8)
 800caac:	46bd      	mov	sp, r7
 800caae:	b002      	add	sp, #8
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b082      	sub	sp, #8
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800caba:	46c0      	nop			; (mov r8, r8)
 800cabc:	46bd      	mov	sp, r7
 800cabe:	b002      	add	sp, #8
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2284      	movs	r2, #132	; 0x84
 800cad0:	5c9b      	ldrb	r3, [r3, r2]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d101      	bne.n	800cada <HAL_UARTEx_DisableFifoMode+0x16>
 800cad6:	2302      	movs	r3, #2
 800cad8:	e027      	b.n	800cb2a <HAL_UARTEx_DisableFifoMode+0x66>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2284      	movs	r2, #132	; 0x84
 800cade:	2101      	movs	r1, #1
 800cae0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2288      	movs	r2, #136	; 0x88
 800cae6:	2124      	movs	r1, #36	; 0x24
 800cae8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2101      	movs	r1, #1
 800cafe:	438a      	bics	r2, r1
 800cb00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	4a0b      	ldr	r2, [pc, #44]	; (800cb34 <HAL_UARTEx_DisableFifoMode+0x70>)
 800cb06:	4013      	ands	r3, r2
 800cb08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2288      	movs	r2, #136	; 0x88
 800cb1c:	2120      	movs	r1, #32
 800cb1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2284      	movs	r2, #132	; 0x84
 800cb24:	2100      	movs	r1, #0
 800cb26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	0018      	movs	r0, r3
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	b004      	add	sp, #16
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	46c0      	nop			; (mov r8, r8)
 800cb34:	dfffffff 	.word	0xdfffffff

0800cb38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2284      	movs	r2, #132	; 0x84
 800cb46:	5c9b      	ldrb	r3, [r3, r2]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d101      	bne.n	800cb50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	e02e      	b.n	800cbae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2284      	movs	r2, #132	; 0x84
 800cb54:	2101      	movs	r1, #1
 800cb56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2288      	movs	r2, #136	; 0x88
 800cb5c:	2124      	movs	r1, #36	; 0x24
 800cb5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2101      	movs	r1, #1
 800cb74:	438a      	bics	r2, r1
 800cb76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	00db      	lsls	r3, r3, #3
 800cb80:	08d9      	lsrs	r1, r3, #3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	430a      	orrs	r2, r1
 800cb8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	0018      	movs	r0, r3
 800cb90:	f000 f854 	bl	800cc3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2288      	movs	r2, #136	; 0x88
 800cba0:	2120      	movs	r1, #32
 800cba2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2284      	movs	r2, #132	; 0x84
 800cba8:	2100      	movs	r1, #0
 800cbaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	0018      	movs	r0, r3
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	b004      	add	sp, #16
 800cbb4:	bd80      	pop	{r7, pc}
	...

0800cbb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2284      	movs	r2, #132	; 0x84
 800cbc6:	5c9b      	ldrb	r3, [r3, r2]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d101      	bne.n	800cbd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cbcc:	2302      	movs	r3, #2
 800cbce:	e02f      	b.n	800cc30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2284      	movs	r2, #132	; 0x84
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2288      	movs	r2, #136	; 0x88
 800cbdc:	2124      	movs	r1, #36	; 0x24
 800cbde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2101      	movs	r1, #1
 800cbf4:	438a      	bics	r2, r1
 800cbf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	4a0e      	ldr	r2, [pc, #56]	; (800cc38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800cc00:	4013      	ands	r3, r2
 800cc02:	0019      	movs	r1, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	430a      	orrs	r2, r1
 800cc0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	0018      	movs	r0, r3
 800cc12:	f000 f813 	bl	800cc3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2288      	movs	r2, #136	; 0x88
 800cc22:	2120      	movs	r1, #32
 800cc24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2284      	movs	r2, #132	; 0x84
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	0018      	movs	r0, r3
 800cc32:	46bd      	mov	sp, r7
 800cc34:	b004      	add	sp, #16
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	f1ffffff 	.word	0xf1ffffff

0800cc3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d108      	bne.n	800cc5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	226a      	movs	r2, #106	; 0x6a
 800cc50:	2101      	movs	r1, #1
 800cc52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2268      	movs	r2, #104	; 0x68
 800cc58:	2101      	movs	r1, #1
 800cc5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc5c:	e043      	b.n	800cce6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc5e:	260f      	movs	r6, #15
 800cc60:	19bb      	adds	r3, r7, r6
 800cc62:	2208      	movs	r2, #8
 800cc64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc66:	200e      	movs	r0, #14
 800cc68:	183b      	adds	r3, r7, r0
 800cc6a:	2208      	movs	r2, #8
 800cc6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	0e5b      	lsrs	r3, r3, #25
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	240d      	movs	r4, #13
 800cc7a:	193b      	adds	r3, r7, r4
 800cc7c:	2107      	movs	r1, #7
 800cc7e:	400a      	ands	r2, r1
 800cc80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	0f5b      	lsrs	r3, r3, #29
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	250c      	movs	r5, #12
 800cc8e:	197b      	adds	r3, r7, r5
 800cc90:	2107      	movs	r1, #7
 800cc92:	400a      	ands	r2, r1
 800cc94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc96:	183b      	adds	r3, r7, r0
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	197a      	adds	r2, r7, r5
 800cc9c:	7812      	ldrb	r2, [r2, #0]
 800cc9e:	4914      	ldr	r1, [pc, #80]	; (800ccf0 <UARTEx_SetNbDataToProcess+0xb4>)
 800cca0:	5c8a      	ldrb	r2, [r1, r2]
 800cca2:	435a      	muls	r2, r3
 800cca4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800cca6:	197b      	adds	r3, r7, r5
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	4a12      	ldr	r2, [pc, #72]	; (800ccf4 <UARTEx_SetNbDataToProcess+0xb8>)
 800ccac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccae:	0019      	movs	r1, r3
 800ccb0:	f7f3 facc 	bl	800024c <__divsi3>
 800ccb4:	0003      	movs	r3, r0
 800ccb6:	b299      	uxth	r1, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	226a      	movs	r2, #106	; 0x6a
 800ccbc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ccbe:	19bb      	adds	r3, r7, r6
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	193a      	adds	r2, r7, r4
 800ccc4:	7812      	ldrb	r2, [r2, #0]
 800ccc6:	490a      	ldr	r1, [pc, #40]	; (800ccf0 <UARTEx_SetNbDataToProcess+0xb4>)
 800ccc8:	5c8a      	ldrb	r2, [r1, r2]
 800ccca:	435a      	muls	r2, r3
 800cccc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ccce:	193b      	adds	r3, r7, r4
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	4a08      	ldr	r2, [pc, #32]	; (800ccf4 <UARTEx_SetNbDataToProcess+0xb8>)
 800ccd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ccd6:	0019      	movs	r1, r3
 800ccd8:	f7f3 fab8 	bl	800024c <__divsi3>
 800ccdc:	0003      	movs	r3, r0
 800ccde:	b299      	uxth	r1, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2268      	movs	r2, #104	; 0x68
 800cce4:	5299      	strh	r1, [r3, r2]
}
 800cce6:	46c0      	nop			; (mov r8, r8)
 800cce8:	46bd      	mov	sp, r7
 800ccea:	b005      	add	sp, #20
 800ccec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccee:	46c0      	nop			; (mov r8, r8)
 800ccf0:	080101a0 	.word	0x080101a0
 800ccf4:	080101a8 	.word	0x080101a8

0800ccf8 <__errno>:
 800ccf8:	4b01      	ldr	r3, [pc, #4]	; (800cd00 <__errno+0x8>)
 800ccfa:	6818      	ldr	r0, [r3, #0]
 800ccfc:	4770      	bx	lr
 800ccfe:	46c0      	nop			; (mov r8, r8)
 800cd00:	20000018 	.word	0x20000018

0800cd04 <__libc_init_array>:
 800cd04:	b570      	push	{r4, r5, r6, lr}
 800cd06:	2600      	movs	r6, #0
 800cd08:	4d0c      	ldr	r5, [pc, #48]	; (800cd3c <__libc_init_array+0x38>)
 800cd0a:	4c0d      	ldr	r4, [pc, #52]	; (800cd40 <__libc_init_array+0x3c>)
 800cd0c:	1b64      	subs	r4, r4, r5
 800cd0e:	10a4      	asrs	r4, r4, #2
 800cd10:	42a6      	cmp	r6, r4
 800cd12:	d109      	bne.n	800cd28 <__libc_init_array+0x24>
 800cd14:	2600      	movs	r6, #0
 800cd16:	f002 ffc9 	bl	800fcac <_init>
 800cd1a:	4d0a      	ldr	r5, [pc, #40]	; (800cd44 <__libc_init_array+0x40>)
 800cd1c:	4c0a      	ldr	r4, [pc, #40]	; (800cd48 <__libc_init_array+0x44>)
 800cd1e:	1b64      	subs	r4, r4, r5
 800cd20:	10a4      	asrs	r4, r4, #2
 800cd22:	42a6      	cmp	r6, r4
 800cd24:	d105      	bne.n	800cd32 <__libc_init_array+0x2e>
 800cd26:	bd70      	pop	{r4, r5, r6, pc}
 800cd28:	00b3      	lsls	r3, r6, #2
 800cd2a:	58eb      	ldr	r3, [r5, r3]
 800cd2c:	4798      	blx	r3
 800cd2e:	3601      	adds	r6, #1
 800cd30:	e7ee      	b.n	800cd10 <__libc_init_array+0xc>
 800cd32:	00b3      	lsls	r3, r6, #2
 800cd34:	58eb      	ldr	r3, [r5, r3]
 800cd36:	4798      	blx	r3
 800cd38:	3601      	adds	r6, #1
 800cd3a:	e7f2      	b.n	800cd22 <__libc_init_array+0x1e>
 800cd3c:	0801058c 	.word	0x0801058c
 800cd40:	0801058c 	.word	0x0801058c
 800cd44:	0801058c 	.word	0x0801058c
 800cd48:	08010590 	.word	0x08010590

0800cd4c <malloc>:
 800cd4c:	b510      	push	{r4, lr}
 800cd4e:	4b03      	ldr	r3, [pc, #12]	; (800cd5c <malloc+0x10>)
 800cd50:	0001      	movs	r1, r0
 800cd52:	6818      	ldr	r0, [r3, #0]
 800cd54:	f000 f890 	bl	800ce78 <_malloc_r>
 800cd58:	bd10      	pop	{r4, pc}
 800cd5a:	46c0      	nop			; (mov r8, r8)
 800cd5c:	20000018 	.word	0x20000018

0800cd60 <memcmp>:
 800cd60:	b530      	push	{r4, r5, lr}
 800cd62:	2400      	movs	r4, #0
 800cd64:	3901      	subs	r1, #1
 800cd66:	42a2      	cmp	r2, r4
 800cd68:	d101      	bne.n	800cd6e <memcmp+0xe>
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	e005      	b.n	800cd7a <memcmp+0x1a>
 800cd6e:	5d03      	ldrb	r3, [r0, r4]
 800cd70:	3401      	adds	r4, #1
 800cd72:	5d0d      	ldrb	r5, [r1, r4]
 800cd74:	42ab      	cmp	r3, r5
 800cd76:	d0f6      	beq.n	800cd66 <memcmp+0x6>
 800cd78:	1b58      	subs	r0, r3, r5
 800cd7a:	bd30      	pop	{r4, r5, pc}

0800cd7c <memcpy>:
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	b510      	push	{r4, lr}
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d100      	bne.n	800cd86 <memcpy+0xa>
 800cd84:	bd10      	pop	{r4, pc}
 800cd86:	5ccc      	ldrb	r4, [r1, r3]
 800cd88:	54c4      	strb	r4, [r0, r3]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	e7f8      	b.n	800cd80 <memcpy+0x4>

0800cd8e <memset>:
 800cd8e:	0003      	movs	r3, r0
 800cd90:	1882      	adds	r2, r0, r2
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d100      	bne.n	800cd98 <memset+0xa>
 800cd96:	4770      	bx	lr
 800cd98:	7019      	strb	r1, [r3, #0]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	e7f9      	b.n	800cd92 <memset+0x4>
	...

0800cda0 <_free_r>:
 800cda0:	b570      	push	{r4, r5, r6, lr}
 800cda2:	0005      	movs	r5, r0
 800cda4:	2900      	cmp	r1, #0
 800cda6:	d010      	beq.n	800cdca <_free_r+0x2a>
 800cda8:	1f0c      	subs	r4, r1, #4
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	da00      	bge.n	800cdb2 <_free_r+0x12>
 800cdb0:	18e4      	adds	r4, r4, r3
 800cdb2:	0028      	movs	r0, r5
 800cdb4:	f001 fc2c 	bl	800e610 <__malloc_lock>
 800cdb8:	4a1d      	ldr	r2, [pc, #116]	; (800ce30 <_free_r+0x90>)
 800cdba:	6813      	ldr	r3, [r2, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d105      	bne.n	800cdcc <_free_r+0x2c>
 800cdc0:	6063      	str	r3, [r4, #4]
 800cdc2:	6014      	str	r4, [r2, #0]
 800cdc4:	0028      	movs	r0, r5
 800cdc6:	f001 fc2b 	bl	800e620 <__malloc_unlock>
 800cdca:	bd70      	pop	{r4, r5, r6, pc}
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	d908      	bls.n	800cde2 <_free_r+0x42>
 800cdd0:	6821      	ldr	r1, [r4, #0]
 800cdd2:	1860      	adds	r0, r4, r1
 800cdd4:	4283      	cmp	r3, r0
 800cdd6:	d1f3      	bne.n	800cdc0 <_free_r+0x20>
 800cdd8:	6818      	ldr	r0, [r3, #0]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	1841      	adds	r1, r0, r1
 800cdde:	6021      	str	r1, [r4, #0]
 800cde0:	e7ee      	b.n	800cdc0 <_free_r+0x20>
 800cde2:	001a      	movs	r2, r3
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <_free_r+0x4e>
 800cdea:	42a3      	cmp	r3, r4
 800cdec:	d9f9      	bls.n	800cde2 <_free_r+0x42>
 800cdee:	6811      	ldr	r1, [r2, #0]
 800cdf0:	1850      	adds	r0, r2, r1
 800cdf2:	42a0      	cmp	r0, r4
 800cdf4:	d10b      	bne.n	800ce0e <_free_r+0x6e>
 800cdf6:	6820      	ldr	r0, [r4, #0]
 800cdf8:	1809      	adds	r1, r1, r0
 800cdfa:	1850      	adds	r0, r2, r1
 800cdfc:	6011      	str	r1, [r2, #0]
 800cdfe:	4283      	cmp	r3, r0
 800ce00:	d1e0      	bne.n	800cdc4 <_free_r+0x24>
 800ce02:	6818      	ldr	r0, [r3, #0]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	1841      	adds	r1, r0, r1
 800ce08:	6011      	str	r1, [r2, #0]
 800ce0a:	6053      	str	r3, [r2, #4]
 800ce0c:	e7da      	b.n	800cdc4 <_free_r+0x24>
 800ce0e:	42a0      	cmp	r0, r4
 800ce10:	d902      	bls.n	800ce18 <_free_r+0x78>
 800ce12:	230c      	movs	r3, #12
 800ce14:	602b      	str	r3, [r5, #0]
 800ce16:	e7d5      	b.n	800cdc4 <_free_r+0x24>
 800ce18:	6821      	ldr	r1, [r4, #0]
 800ce1a:	1860      	adds	r0, r4, r1
 800ce1c:	4283      	cmp	r3, r0
 800ce1e:	d103      	bne.n	800ce28 <_free_r+0x88>
 800ce20:	6818      	ldr	r0, [r3, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	1841      	adds	r1, r0, r1
 800ce26:	6021      	str	r1, [r4, #0]
 800ce28:	6063      	str	r3, [r4, #4]
 800ce2a:	6054      	str	r4, [r2, #4]
 800ce2c:	e7ca      	b.n	800cdc4 <_free_r+0x24>
 800ce2e:	46c0      	nop			; (mov r8, r8)
 800ce30:	200009c8 	.word	0x200009c8

0800ce34 <sbrk_aligned>:
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	4e0f      	ldr	r6, [pc, #60]	; (800ce74 <sbrk_aligned+0x40>)
 800ce38:	000d      	movs	r5, r1
 800ce3a:	6831      	ldr	r1, [r6, #0]
 800ce3c:	0004      	movs	r4, r0
 800ce3e:	2900      	cmp	r1, #0
 800ce40:	d102      	bne.n	800ce48 <sbrk_aligned+0x14>
 800ce42:	f000 fcfd 	bl	800d840 <_sbrk_r>
 800ce46:	6030      	str	r0, [r6, #0]
 800ce48:	0029      	movs	r1, r5
 800ce4a:	0020      	movs	r0, r4
 800ce4c:	f000 fcf8 	bl	800d840 <_sbrk_r>
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	d00a      	beq.n	800ce6a <sbrk_aligned+0x36>
 800ce54:	2303      	movs	r3, #3
 800ce56:	1cc5      	adds	r5, r0, #3
 800ce58:	439d      	bics	r5, r3
 800ce5a:	42a8      	cmp	r0, r5
 800ce5c:	d007      	beq.n	800ce6e <sbrk_aligned+0x3a>
 800ce5e:	1a29      	subs	r1, r5, r0
 800ce60:	0020      	movs	r0, r4
 800ce62:	f000 fced 	bl	800d840 <_sbrk_r>
 800ce66:	1c43      	adds	r3, r0, #1
 800ce68:	d101      	bne.n	800ce6e <sbrk_aligned+0x3a>
 800ce6a:	2501      	movs	r5, #1
 800ce6c:	426d      	negs	r5, r5
 800ce6e:	0028      	movs	r0, r5
 800ce70:	bd70      	pop	{r4, r5, r6, pc}
 800ce72:	46c0      	nop			; (mov r8, r8)
 800ce74:	200009cc 	.word	0x200009cc

0800ce78 <_malloc_r>:
 800ce78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce7a:	2203      	movs	r2, #3
 800ce7c:	1ccb      	adds	r3, r1, #3
 800ce7e:	4393      	bics	r3, r2
 800ce80:	3308      	adds	r3, #8
 800ce82:	0006      	movs	r6, r0
 800ce84:	001f      	movs	r7, r3
 800ce86:	2b0c      	cmp	r3, #12
 800ce88:	d232      	bcs.n	800cef0 <_malloc_r+0x78>
 800ce8a:	270c      	movs	r7, #12
 800ce8c:	42b9      	cmp	r1, r7
 800ce8e:	d831      	bhi.n	800cef4 <_malloc_r+0x7c>
 800ce90:	0030      	movs	r0, r6
 800ce92:	f001 fbbd 	bl	800e610 <__malloc_lock>
 800ce96:	4d32      	ldr	r5, [pc, #200]	; (800cf60 <_malloc_r+0xe8>)
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	001c      	movs	r4, r3
 800ce9c:	2c00      	cmp	r4, #0
 800ce9e:	d12e      	bne.n	800cefe <_malloc_r+0x86>
 800cea0:	0039      	movs	r1, r7
 800cea2:	0030      	movs	r0, r6
 800cea4:	f7ff ffc6 	bl	800ce34 <sbrk_aligned>
 800cea8:	0004      	movs	r4, r0
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	d11e      	bne.n	800ceec <_malloc_r+0x74>
 800ceae:	682c      	ldr	r4, [r5, #0]
 800ceb0:	0025      	movs	r5, r4
 800ceb2:	2d00      	cmp	r5, #0
 800ceb4:	d14a      	bne.n	800cf4c <_malloc_r+0xd4>
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	0029      	movs	r1, r5
 800ceba:	18e3      	adds	r3, r4, r3
 800cebc:	0030      	movs	r0, r6
 800cebe:	9301      	str	r3, [sp, #4]
 800cec0:	f000 fcbe 	bl	800d840 <_sbrk_r>
 800cec4:	9b01      	ldr	r3, [sp, #4]
 800cec6:	4283      	cmp	r3, r0
 800cec8:	d143      	bne.n	800cf52 <_malloc_r+0xda>
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	3703      	adds	r7, #3
 800cece:	1aff      	subs	r7, r7, r3
 800ced0:	2303      	movs	r3, #3
 800ced2:	439f      	bics	r7, r3
 800ced4:	3708      	adds	r7, #8
 800ced6:	2f0c      	cmp	r7, #12
 800ced8:	d200      	bcs.n	800cedc <_malloc_r+0x64>
 800ceda:	270c      	movs	r7, #12
 800cedc:	0039      	movs	r1, r7
 800cede:	0030      	movs	r0, r6
 800cee0:	f7ff ffa8 	bl	800ce34 <sbrk_aligned>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d034      	beq.n	800cf52 <_malloc_r+0xda>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	19df      	adds	r7, r3, r7
 800ceec:	6027      	str	r7, [r4, #0]
 800ceee:	e013      	b.n	800cf18 <_malloc_r+0xa0>
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	dacb      	bge.n	800ce8c <_malloc_r+0x14>
 800cef4:	230c      	movs	r3, #12
 800cef6:	2500      	movs	r5, #0
 800cef8:	6033      	str	r3, [r6, #0]
 800cefa:	0028      	movs	r0, r5
 800cefc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cefe:	6822      	ldr	r2, [r4, #0]
 800cf00:	1bd1      	subs	r1, r2, r7
 800cf02:	d420      	bmi.n	800cf46 <_malloc_r+0xce>
 800cf04:	290b      	cmp	r1, #11
 800cf06:	d917      	bls.n	800cf38 <_malloc_r+0xc0>
 800cf08:	19e2      	adds	r2, r4, r7
 800cf0a:	6027      	str	r7, [r4, #0]
 800cf0c:	42a3      	cmp	r3, r4
 800cf0e:	d111      	bne.n	800cf34 <_malloc_r+0xbc>
 800cf10:	602a      	str	r2, [r5, #0]
 800cf12:	6863      	ldr	r3, [r4, #4]
 800cf14:	6011      	str	r1, [r2, #0]
 800cf16:	6053      	str	r3, [r2, #4]
 800cf18:	0030      	movs	r0, r6
 800cf1a:	0025      	movs	r5, r4
 800cf1c:	f001 fb80 	bl	800e620 <__malloc_unlock>
 800cf20:	2207      	movs	r2, #7
 800cf22:	350b      	adds	r5, #11
 800cf24:	1d23      	adds	r3, r4, #4
 800cf26:	4395      	bics	r5, r2
 800cf28:	1aea      	subs	r2, r5, r3
 800cf2a:	429d      	cmp	r5, r3
 800cf2c:	d0e5      	beq.n	800cefa <_malloc_r+0x82>
 800cf2e:	1b5b      	subs	r3, r3, r5
 800cf30:	50a3      	str	r3, [r4, r2]
 800cf32:	e7e2      	b.n	800cefa <_malloc_r+0x82>
 800cf34:	605a      	str	r2, [r3, #4]
 800cf36:	e7ec      	b.n	800cf12 <_malloc_r+0x9a>
 800cf38:	6862      	ldr	r2, [r4, #4]
 800cf3a:	42a3      	cmp	r3, r4
 800cf3c:	d101      	bne.n	800cf42 <_malloc_r+0xca>
 800cf3e:	602a      	str	r2, [r5, #0]
 800cf40:	e7ea      	b.n	800cf18 <_malloc_r+0xa0>
 800cf42:	605a      	str	r2, [r3, #4]
 800cf44:	e7e8      	b.n	800cf18 <_malloc_r+0xa0>
 800cf46:	0023      	movs	r3, r4
 800cf48:	6864      	ldr	r4, [r4, #4]
 800cf4a:	e7a7      	b.n	800ce9c <_malloc_r+0x24>
 800cf4c:	002c      	movs	r4, r5
 800cf4e:	686d      	ldr	r5, [r5, #4]
 800cf50:	e7af      	b.n	800ceb2 <_malloc_r+0x3a>
 800cf52:	230c      	movs	r3, #12
 800cf54:	0030      	movs	r0, r6
 800cf56:	6033      	str	r3, [r6, #0]
 800cf58:	f001 fb62 	bl	800e620 <__malloc_unlock>
 800cf5c:	e7cd      	b.n	800cefa <_malloc_r+0x82>
 800cf5e:	46c0      	nop			; (mov r8, r8)
 800cf60:	200009c8 	.word	0x200009c8

0800cf64 <__cvt>:
 800cf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf66:	001e      	movs	r6, r3
 800cf68:	2300      	movs	r3, #0
 800cf6a:	0014      	movs	r4, r2
 800cf6c:	b08b      	sub	sp, #44	; 0x2c
 800cf6e:	429e      	cmp	r6, r3
 800cf70:	da04      	bge.n	800cf7c <__cvt+0x18>
 800cf72:	2180      	movs	r1, #128	; 0x80
 800cf74:	0609      	lsls	r1, r1, #24
 800cf76:	1873      	adds	r3, r6, r1
 800cf78:	001e      	movs	r6, r3
 800cf7a:	232d      	movs	r3, #45	; 0x2d
 800cf7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf7e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800cf80:	7013      	strb	r3, [r2, #0]
 800cf82:	2320      	movs	r3, #32
 800cf84:	2203      	movs	r2, #3
 800cf86:	439f      	bics	r7, r3
 800cf88:	2f46      	cmp	r7, #70	; 0x46
 800cf8a:	d007      	beq.n	800cf9c <__cvt+0x38>
 800cf8c:	003b      	movs	r3, r7
 800cf8e:	3b45      	subs	r3, #69	; 0x45
 800cf90:	4259      	negs	r1, r3
 800cf92:	414b      	adcs	r3, r1
 800cf94:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cf96:	3a01      	subs	r2, #1
 800cf98:	18cb      	adds	r3, r1, r3
 800cf9a:	9310      	str	r3, [sp, #64]	; 0x40
 800cf9c:	ab09      	add	r3, sp, #36	; 0x24
 800cf9e:	9304      	str	r3, [sp, #16]
 800cfa0:	ab08      	add	r3, sp, #32
 800cfa2:	9303      	str	r3, [sp, #12]
 800cfa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfa6:	9200      	str	r2, [sp, #0]
 800cfa8:	9302      	str	r3, [sp, #8]
 800cfaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfac:	0022      	movs	r2, r4
 800cfae:	9301      	str	r3, [sp, #4]
 800cfb0:	0033      	movs	r3, r6
 800cfb2:	f000 fd03 	bl	800d9bc <_dtoa_r>
 800cfb6:	0005      	movs	r5, r0
 800cfb8:	2f47      	cmp	r7, #71	; 0x47
 800cfba:	d102      	bne.n	800cfc2 <__cvt+0x5e>
 800cfbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfbe:	07db      	lsls	r3, r3, #31
 800cfc0:	d528      	bpl.n	800d014 <__cvt+0xb0>
 800cfc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfc4:	18eb      	adds	r3, r5, r3
 800cfc6:	9307      	str	r3, [sp, #28]
 800cfc8:	2f46      	cmp	r7, #70	; 0x46
 800cfca:	d114      	bne.n	800cff6 <__cvt+0x92>
 800cfcc:	782b      	ldrb	r3, [r5, #0]
 800cfce:	2b30      	cmp	r3, #48	; 0x30
 800cfd0:	d10c      	bne.n	800cfec <__cvt+0x88>
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	0020      	movs	r0, r4
 800cfd8:	0031      	movs	r1, r6
 800cfda:	f7f3 fa33 	bl	8000444 <__aeabi_dcmpeq>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d104      	bne.n	800cfec <__cvt+0x88>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cfe6:	1a9b      	subs	r3, r3, r2
 800cfe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfee:	9a07      	ldr	r2, [sp, #28]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	18d3      	adds	r3, r2, r3
 800cff4:	9307      	str	r3, [sp, #28]
 800cff6:	2200      	movs	r2, #0
 800cff8:	2300      	movs	r3, #0
 800cffa:	0020      	movs	r0, r4
 800cffc:	0031      	movs	r1, r6
 800cffe:	f7f3 fa21 	bl	8000444 <__aeabi_dcmpeq>
 800d002:	2800      	cmp	r0, #0
 800d004:	d001      	beq.n	800d00a <__cvt+0xa6>
 800d006:	9b07      	ldr	r3, [sp, #28]
 800d008:	9309      	str	r3, [sp, #36]	; 0x24
 800d00a:	2230      	movs	r2, #48	; 0x30
 800d00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d00e:	9907      	ldr	r1, [sp, #28]
 800d010:	428b      	cmp	r3, r1
 800d012:	d306      	bcc.n	800d022 <__cvt+0xbe>
 800d014:	0028      	movs	r0, r5
 800d016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d018:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d01a:	1b5b      	subs	r3, r3, r5
 800d01c:	6013      	str	r3, [r2, #0]
 800d01e:	b00b      	add	sp, #44	; 0x2c
 800d020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d022:	1c59      	adds	r1, r3, #1
 800d024:	9109      	str	r1, [sp, #36]	; 0x24
 800d026:	701a      	strb	r2, [r3, #0]
 800d028:	e7f0      	b.n	800d00c <__cvt+0xa8>

0800d02a <__exponent>:
 800d02a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d02c:	1c83      	adds	r3, r0, #2
 800d02e:	b087      	sub	sp, #28
 800d030:	9303      	str	r3, [sp, #12]
 800d032:	0005      	movs	r5, r0
 800d034:	000c      	movs	r4, r1
 800d036:	232b      	movs	r3, #43	; 0x2b
 800d038:	7002      	strb	r2, [r0, #0]
 800d03a:	2900      	cmp	r1, #0
 800d03c:	da01      	bge.n	800d042 <__exponent+0x18>
 800d03e:	424c      	negs	r4, r1
 800d040:	3302      	adds	r3, #2
 800d042:	706b      	strb	r3, [r5, #1]
 800d044:	2c09      	cmp	r4, #9
 800d046:	dd31      	ble.n	800d0ac <__exponent+0x82>
 800d048:	270a      	movs	r7, #10
 800d04a:	ab04      	add	r3, sp, #16
 800d04c:	1dde      	adds	r6, r3, #7
 800d04e:	0020      	movs	r0, r4
 800d050:	0039      	movs	r1, r7
 800d052:	9601      	str	r6, [sp, #4]
 800d054:	f7f3 f9e0 	bl	8000418 <__aeabi_idivmod>
 800d058:	3e01      	subs	r6, #1
 800d05a:	3130      	adds	r1, #48	; 0x30
 800d05c:	0020      	movs	r0, r4
 800d05e:	7031      	strb	r1, [r6, #0]
 800d060:	0039      	movs	r1, r7
 800d062:	9402      	str	r4, [sp, #8]
 800d064:	f7f3 f8f2 	bl	800024c <__divsi3>
 800d068:	9b02      	ldr	r3, [sp, #8]
 800d06a:	0004      	movs	r4, r0
 800d06c:	2b63      	cmp	r3, #99	; 0x63
 800d06e:	dcee      	bgt.n	800d04e <__exponent+0x24>
 800d070:	9b01      	ldr	r3, [sp, #4]
 800d072:	3430      	adds	r4, #48	; 0x30
 800d074:	1e9a      	subs	r2, r3, #2
 800d076:	0013      	movs	r3, r2
 800d078:	9903      	ldr	r1, [sp, #12]
 800d07a:	7014      	strb	r4, [r2, #0]
 800d07c:	a804      	add	r0, sp, #16
 800d07e:	3007      	adds	r0, #7
 800d080:	4298      	cmp	r0, r3
 800d082:	d80e      	bhi.n	800d0a2 <__exponent+0x78>
 800d084:	ab04      	add	r3, sp, #16
 800d086:	3307      	adds	r3, #7
 800d088:	2000      	movs	r0, #0
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d804      	bhi.n	800d098 <__exponent+0x6e>
 800d08e:	ab04      	add	r3, sp, #16
 800d090:	3009      	adds	r0, #9
 800d092:	18c0      	adds	r0, r0, r3
 800d094:	9b01      	ldr	r3, [sp, #4]
 800d096:	1ac0      	subs	r0, r0, r3
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	1818      	adds	r0, r3, r0
 800d09c:	1b40      	subs	r0, r0, r5
 800d09e:	b007      	add	sp, #28
 800d0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0a2:	7818      	ldrb	r0, [r3, #0]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	7008      	strb	r0, [r1, #0]
 800d0a8:	3101      	adds	r1, #1
 800d0aa:	e7e7      	b.n	800d07c <__exponent+0x52>
 800d0ac:	2330      	movs	r3, #48	; 0x30
 800d0ae:	18e4      	adds	r4, r4, r3
 800d0b0:	70ab      	strb	r3, [r5, #2]
 800d0b2:	1d28      	adds	r0, r5, #4
 800d0b4:	70ec      	strb	r4, [r5, #3]
 800d0b6:	e7f1      	b.n	800d09c <__exponent+0x72>

0800d0b8 <_printf_float>:
 800d0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ba:	b095      	sub	sp, #84	; 0x54
 800d0bc:	000c      	movs	r4, r1
 800d0be:	9209      	str	r2, [sp, #36]	; 0x24
 800d0c0:	001e      	movs	r6, r3
 800d0c2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d0c4:	0007      	movs	r7, r0
 800d0c6:	f001 fa93 	bl	800e5f0 <_localeconv_r>
 800d0ca:	6803      	ldr	r3, [r0, #0]
 800d0cc:	0018      	movs	r0, r3
 800d0ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d0d0:	f7f3 f816 	bl	8000100 <strlen>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9312      	str	r3, [sp, #72]	; 0x48
 800d0d8:	7e23      	ldrb	r3, [r4, #24]
 800d0da:	2207      	movs	r2, #7
 800d0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	900e      	str	r0, [sp, #56]	; 0x38
 800d0e2:	930d      	str	r3, [sp, #52]	; 0x34
 800d0e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d0e6:	682b      	ldr	r3, [r5, #0]
 800d0e8:	05c9      	lsls	r1, r1, #23
 800d0ea:	d547      	bpl.n	800d17c <_printf_float+0xc4>
 800d0ec:	189b      	adds	r3, r3, r2
 800d0ee:	4393      	bics	r3, r2
 800d0f0:	001a      	movs	r2, r3
 800d0f2:	3208      	adds	r2, #8
 800d0f4:	602a      	str	r2, [r5, #0]
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	64a2      	str	r2, [r4, #72]	; 0x48
 800d0fc:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d0fe:	2201      	movs	r2, #1
 800d100:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d102:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d104:	930b      	str	r3, [sp, #44]	; 0x2c
 800d106:	006b      	lsls	r3, r5, #1
 800d108:	085b      	lsrs	r3, r3, #1
 800d10a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d10c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d10e:	4ba7      	ldr	r3, [pc, #668]	; (800d3ac <_printf_float+0x2f4>)
 800d110:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d112:	4252      	negs	r2, r2
 800d114:	f7f5 fab8 	bl	8002688 <__aeabi_dcmpun>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d131      	bne.n	800d180 <_printf_float+0xc8>
 800d11c:	2201      	movs	r2, #1
 800d11e:	4ba3      	ldr	r3, [pc, #652]	; (800d3ac <_printf_float+0x2f4>)
 800d120:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d122:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d124:	4252      	negs	r2, r2
 800d126:	f7f3 f99d 	bl	8000464 <__aeabi_dcmple>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d128      	bne.n	800d180 <_printf_float+0xc8>
 800d12e:	2200      	movs	r2, #0
 800d130:	2300      	movs	r3, #0
 800d132:	0029      	movs	r1, r5
 800d134:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d136:	f7f3 f98b 	bl	8000450 <__aeabi_dcmplt>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d003      	beq.n	800d146 <_printf_float+0x8e>
 800d13e:	0023      	movs	r3, r4
 800d140:	222d      	movs	r2, #45	; 0x2d
 800d142:	3343      	adds	r3, #67	; 0x43
 800d144:	701a      	strb	r2, [r3, #0]
 800d146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d148:	4d99      	ldr	r5, [pc, #612]	; (800d3b0 <_printf_float+0x2f8>)
 800d14a:	2b47      	cmp	r3, #71	; 0x47
 800d14c:	d900      	bls.n	800d150 <_printf_float+0x98>
 800d14e:	4d99      	ldr	r5, [pc, #612]	; (800d3b4 <_printf_float+0x2fc>)
 800d150:	2303      	movs	r3, #3
 800d152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d154:	6123      	str	r3, [r4, #16]
 800d156:	3301      	adds	r3, #1
 800d158:	439a      	bics	r2, r3
 800d15a:	2300      	movs	r3, #0
 800d15c:	6022      	str	r2, [r4, #0]
 800d15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d162:	0021      	movs	r1, r4
 800d164:	0038      	movs	r0, r7
 800d166:	9600      	str	r6, [sp, #0]
 800d168:	aa13      	add	r2, sp, #76	; 0x4c
 800d16a:	f000 f9e7 	bl	800d53c <_printf_common>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	d000      	beq.n	800d174 <_printf_float+0xbc>
 800d172:	e0a2      	b.n	800d2ba <_printf_float+0x202>
 800d174:	2001      	movs	r0, #1
 800d176:	4240      	negs	r0, r0
 800d178:	b015      	add	sp, #84	; 0x54
 800d17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d17c:	3307      	adds	r3, #7
 800d17e:	e7b6      	b.n	800d0ee <_printf_float+0x36>
 800d180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d182:	002b      	movs	r3, r5
 800d184:	0010      	movs	r0, r2
 800d186:	0029      	movs	r1, r5
 800d188:	f7f5 fa7e 	bl	8002688 <__aeabi_dcmpun>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d00b      	beq.n	800d1a8 <_printf_float+0xf0>
 800d190:	2d00      	cmp	r5, #0
 800d192:	da03      	bge.n	800d19c <_printf_float+0xe4>
 800d194:	0023      	movs	r3, r4
 800d196:	222d      	movs	r2, #45	; 0x2d
 800d198:	3343      	adds	r3, #67	; 0x43
 800d19a:	701a      	strb	r2, [r3, #0]
 800d19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d19e:	4d86      	ldr	r5, [pc, #536]	; (800d3b8 <_printf_float+0x300>)
 800d1a0:	2b47      	cmp	r3, #71	; 0x47
 800d1a2:	d9d5      	bls.n	800d150 <_printf_float+0x98>
 800d1a4:	4d85      	ldr	r5, [pc, #532]	; (800d3bc <_printf_float+0x304>)
 800d1a6:	e7d3      	b.n	800d150 <_printf_float+0x98>
 800d1a8:	2220      	movs	r2, #32
 800d1aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d1ac:	6863      	ldr	r3, [r4, #4]
 800d1ae:	4391      	bics	r1, r2
 800d1b0:	910f      	str	r1, [sp, #60]	; 0x3c
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	d149      	bne.n	800d24a <_printf_float+0x192>
 800d1b6:	3307      	adds	r3, #7
 800d1b8:	6063      	str	r3, [r4, #4]
 800d1ba:	2380      	movs	r3, #128	; 0x80
 800d1bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1be:	00db      	lsls	r3, r3, #3
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	9206      	str	r2, [sp, #24]
 800d1c6:	aa12      	add	r2, sp, #72	; 0x48
 800d1c8:	9205      	str	r2, [sp, #20]
 800d1ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1cc:	a908      	add	r1, sp, #32
 800d1ce:	9204      	str	r2, [sp, #16]
 800d1d0:	aa11      	add	r2, sp, #68	; 0x44
 800d1d2:	9203      	str	r2, [sp, #12]
 800d1d4:	2223      	movs	r2, #35	; 0x23
 800d1d6:	6023      	str	r3, [r4, #0]
 800d1d8:	9301      	str	r3, [sp, #4]
 800d1da:	6863      	ldr	r3, [r4, #4]
 800d1dc:	1852      	adds	r2, r2, r1
 800d1de:	9202      	str	r2, [sp, #8]
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	0038      	movs	r0, r7
 800d1e4:	002b      	movs	r3, r5
 800d1e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1e8:	f7ff febc 	bl	800cf64 <__cvt>
 800d1ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1ee:	0005      	movs	r5, r0
 800d1f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d1f2:	2b47      	cmp	r3, #71	; 0x47
 800d1f4:	d108      	bne.n	800d208 <_printf_float+0x150>
 800d1f6:	1ccb      	adds	r3, r1, #3
 800d1f8:	db02      	blt.n	800d200 <_printf_float+0x148>
 800d1fa:	6863      	ldr	r3, [r4, #4]
 800d1fc:	4299      	cmp	r1, r3
 800d1fe:	dd48      	ble.n	800d292 <_printf_float+0x1da>
 800d200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d202:	3b02      	subs	r3, #2
 800d204:	b2db      	uxtb	r3, r3
 800d206:	930a      	str	r3, [sp, #40]	; 0x28
 800d208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d20a:	2b65      	cmp	r3, #101	; 0x65
 800d20c:	d824      	bhi.n	800d258 <_printf_float+0x1a0>
 800d20e:	0020      	movs	r0, r4
 800d210:	001a      	movs	r2, r3
 800d212:	3901      	subs	r1, #1
 800d214:	3050      	adds	r0, #80	; 0x50
 800d216:	9111      	str	r1, [sp, #68]	; 0x44
 800d218:	f7ff ff07 	bl	800d02a <__exponent>
 800d21c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d21e:	900b      	str	r0, [sp, #44]	; 0x2c
 800d220:	1813      	adds	r3, r2, r0
 800d222:	6123      	str	r3, [r4, #16]
 800d224:	2a01      	cmp	r2, #1
 800d226:	dc02      	bgt.n	800d22e <_printf_float+0x176>
 800d228:	6822      	ldr	r2, [r4, #0]
 800d22a:	07d2      	lsls	r2, r2, #31
 800d22c:	d501      	bpl.n	800d232 <_printf_float+0x17a>
 800d22e:	3301      	adds	r3, #1
 800d230:	6123      	str	r3, [r4, #16]
 800d232:	2323      	movs	r3, #35	; 0x23
 800d234:	aa08      	add	r2, sp, #32
 800d236:	189b      	adds	r3, r3, r2
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d100      	bne.n	800d240 <_printf_float+0x188>
 800d23e:	e78f      	b.n	800d160 <_printf_float+0xa8>
 800d240:	0023      	movs	r3, r4
 800d242:	222d      	movs	r2, #45	; 0x2d
 800d244:	3343      	adds	r3, #67	; 0x43
 800d246:	701a      	strb	r2, [r3, #0]
 800d248:	e78a      	b.n	800d160 <_printf_float+0xa8>
 800d24a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d24c:	2a47      	cmp	r2, #71	; 0x47
 800d24e:	d1b4      	bne.n	800d1ba <_printf_float+0x102>
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1b2      	bne.n	800d1ba <_printf_float+0x102>
 800d254:	3301      	adds	r3, #1
 800d256:	e7af      	b.n	800d1b8 <_printf_float+0x100>
 800d258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d25a:	2b66      	cmp	r3, #102	; 0x66
 800d25c:	d11b      	bne.n	800d296 <_printf_float+0x1de>
 800d25e:	6863      	ldr	r3, [r4, #4]
 800d260:	2900      	cmp	r1, #0
 800d262:	dd0d      	ble.n	800d280 <_printf_float+0x1c8>
 800d264:	6121      	str	r1, [r4, #16]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d102      	bne.n	800d270 <_printf_float+0x1b8>
 800d26a:	6822      	ldr	r2, [r4, #0]
 800d26c:	07d2      	lsls	r2, r2, #31
 800d26e:	d502      	bpl.n	800d276 <_printf_float+0x1be>
 800d270:	3301      	adds	r3, #1
 800d272:	1859      	adds	r1, r3, r1
 800d274:	6121      	str	r1, [r4, #16]
 800d276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d278:	65a3      	str	r3, [r4, #88]	; 0x58
 800d27a:	2300      	movs	r3, #0
 800d27c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d27e:	e7d8      	b.n	800d232 <_printf_float+0x17a>
 800d280:	2b00      	cmp	r3, #0
 800d282:	d103      	bne.n	800d28c <_printf_float+0x1d4>
 800d284:	2201      	movs	r2, #1
 800d286:	6821      	ldr	r1, [r4, #0]
 800d288:	4211      	tst	r1, r2
 800d28a:	d000      	beq.n	800d28e <_printf_float+0x1d6>
 800d28c:	1c9a      	adds	r2, r3, #2
 800d28e:	6122      	str	r2, [r4, #16]
 800d290:	e7f1      	b.n	800d276 <_printf_float+0x1be>
 800d292:	2367      	movs	r3, #103	; 0x67
 800d294:	930a      	str	r3, [sp, #40]	; 0x28
 800d296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d298:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d29a:	4293      	cmp	r3, r2
 800d29c:	db06      	blt.n	800d2ac <_printf_float+0x1f4>
 800d29e:	6822      	ldr	r2, [r4, #0]
 800d2a0:	6123      	str	r3, [r4, #16]
 800d2a2:	07d2      	lsls	r2, r2, #31
 800d2a4:	d5e7      	bpl.n	800d276 <_printf_float+0x1be>
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	6123      	str	r3, [r4, #16]
 800d2aa:	e7e4      	b.n	800d276 <_printf_float+0x1be>
 800d2ac:	2101      	movs	r1, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	dc01      	bgt.n	800d2b6 <_printf_float+0x1fe>
 800d2b2:	1849      	adds	r1, r1, r1
 800d2b4:	1ac9      	subs	r1, r1, r3
 800d2b6:	1852      	adds	r2, r2, r1
 800d2b8:	e7e9      	b.n	800d28e <_printf_float+0x1d6>
 800d2ba:	6822      	ldr	r2, [r4, #0]
 800d2bc:	0553      	lsls	r3, r2, #21
 800d2be:	d407      	bmi.n	800d2d0 <_printf_float+0x218>
 800d2c0:	6923      	ldr	r3, [r4, #16]
 800d2c2:	002a      	movs	r2, r5
 800d2c4:	0038      	movs	r0, r7
 800d2c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2c8:	47b0      	blx	r6
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	d128      	bne.n	800d320 <_printf_float+0x268>
 800d2ce:	e751      	b.n	800d174 <_printf_float+0xbc>
 800d2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2d2:	2b65      	cmp	r3, #101	; 0x65
 800d2d4:	d800      	bhi.n	800d2d8 <_printf_float+0x220>
 800d2d6:	e0e1      	b.n	800d49c <_printf_float+0x3e4>
 800d2d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d2da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d2dc:	2200      	movs	r2, #0
 800d2de:	2300      	movs	r3, #0
 800d2e0:	f7f3 f8b0 	bl	8000444 <__aeabi_dcmpeq>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d031      	beq.n	800d34c <_printf_float+0x294>
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	0038      	movs	r0, r7
 800d2ec:	4a34      	ldr	r2, [pc, #208]	; (800d3c0 <_printf_float+0x308>)
 800d2ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2f0:	47b0      	blx	r6
 800d2f2:	1c43      	adds	r3, r0, #1
 800d2f4:	d100      	bne.n	800d2f8 <_printf_float+0x240>
 800d2f6:	e73d      	b.n	800d174 <_printf_float+0xbc>
 800d2f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	db02      	blt.n	800d306 <_printf_float+0x24e>
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	07db      	lsls	r3, r3, #31
 800d304:	d50c      	bpl.n	800d320 <_printf_float+0x268>
 800d306:	0038      	movs	r0, r7
 800d308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d30a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d30c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d30e:	47b0      	blx	r6
 800d310:	2500      	movs	r5, #0
 800d312:	1c43      	adds	r3, r0, #1
 800d314:	d100      	bne.n	800d318 <_printf_float+0x260>
 800d316:	e72d      	b.n	800d174 <_printf_float+0xbc>
 800d318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d31a:	3b01      	subs	r3, #1
 800d31c:	42ab      	cmp	r3, r5
 800d31e:	dc0a      	bgt.n	800d336 <_printf_float+0x27e>
 800d320:	6823      	ldr	r3, [r4, #0]
 800d322:	079b      	lsls	r3, r3, #30
 800d324:	d500      	bpl.n	800d328 <_printf_float+0x270>
 800d326:	e106      	b.n	800d536 <_printf_float+0x47e>
 800d328:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d32a:	68e0      	ldr	r0, [r4, #12]
 800d32c:	4298      	cmp	r0, r3
 800d32e:	db00      	blt.n	800d332 <_printf_float+0x27a>
 800d330:	e722      	b.n	800d178 <_printf_float+0xc0>
 800d332:	0018      	movs	r0, r3
 800d334:	e720      	b.n	800d178 <_printf_float+0xc0>
 800d336:	0022      	movs	r2, r4
 800d338:	2301      	movs	r3, #1
 800d33a:	0038      	movs	r0, r7
 800d33c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d33e:	321a      	adds	r2, #26
 800d340:	47b0      	blx	r6
 800d342:	1c43      	adds	r3, r0, #1
 800d344:	d100      	bne.n	800d348 <_printf_float+0x290>
 800d346:	e715      	b.n	800d174 <_printf_float+0xbc>
 800d348:	3501      	adds	r5, #1
 800d34a:	e7e5      	b.n	800d318 <_printf_float+0x260>
 800d34c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d34e:	2b00      	cmp	r3, #0
 800d350:	dc38      	bgt.n	800d3c4 <_printf_float+0x30c>
 800d352:	2301      	movs	r3, #1
 800d354:	0038      	movs	r0, r7
 800d356:	4a1a      	ldr	r2, [pc, #104]	; (800d3c0 <_printf_float+0x308>)
 800d358:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d35a:	47b0      	blx	r6
 800d35c:	1c43      	adds	r3, r0, #1
 800d35e:	d100      	bne.n	800d362 <_printf_float+0x2aa>
 800d360:	e708      	b.n	800d174 <_printf_float+0xbc>
 800d362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d366:	4313      	orrs	r3, r2
 800d368:	d102      	bne.n	800d370 <_printf_float+0x2b8>
 800d36a:	6823      	ldr	r3, [r4, #0]
 800d36c:	07db      	lsls	r3, r3, #31
 800d36e:	d5d7      	bpl.n	800d320 <_printf_float+0x268>
 800d370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d372:	0038      	movs	r0, r7
 800d374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d376:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d378:	47b0      	blx	r6
 800d37a:	1c43      	adds	r3, r0, #1
 800d37c:	d100      	bne.n	800d380 <_printf_float+0x2c8>
 800d37e:	e6f9      	b.n	800d174 <_printf_float+0xbc>
 800d380:	2300      	movs	r3, #0
 800d382:	930a      	str	r3, [sp, #40]	; 0x28
 800d384:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d388:	425b      	negs	r3, r3
 800d38a:	4293      	cmp	r3, r2
 800d38c:	dc01      	bgt.n	800d392 <_printf_float+0x2da>
 800d38e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d390:	e797      	b.n	800d2c2 <_printf_float+0x20a>
 800d392:	0022      	movs	r2, r4
 800d394:	2301      	movs	r3, #1
 800d396:	0038      	movs	r0, r7
 800d398:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d39a:	321a      	adds	r2, #26
 800d39c:	47b0      	blx	r6
 800d39e:	1c43      	adds	r3, r0, #1
 800d3a0:	d100      	bne.n	800d3a4 <_printf_float+0x2ec>
 800d3a2:	e6e7      	b.n	800d174 <_printf_float+0xbc>
 800d3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	e7eb      	b.n	800d382 <_printf_float+0x2ca>
 800d3aa:	46c0      	nop			; (mov r8, r8)
 800d3ac:	7fefffff 	.word	0x7fefffff
 800d3b0:	080101b4 	.word	0x080101b4
 800d3b4:	080101b8 	.word	0x080101b8
 800d3b8:	080101bc 	.word	0x080101bc
 800d3bc:	080101c0 	.word	0x080101c0
 800d3c0:	080101c4 	.word	0x080101c4
 800d3c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3c8:	920a      	str	r2, [sp, #40]	; 0x28
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	dd00      	ble.n	800d3d0 <_printf_float+0x318>
 800d3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800d3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	dc3c      	bgt.n	800d450 <_printf_float+0x398>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	930d      	str	r3, [sp, #52]	; 0x34
 800d3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3dc:	43db      	mvns	r3, r3
 800d3de:	17db      	asrs	r3, r3, #31
 800d3e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d3e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ea:	4013      	ands	r3, r2
 800d3ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	dc34      	bgt.n	800d460 <_printf_float+0x3a8>
 800d3f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	db3d      	blt.n	800d47a <_printf_float+0x3c2>
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	07db      	lsls	r3, r3, #31
 800d402:	d43a      	bmi.n	800d47a <_printf_float+0x3c2>
 800d404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d408:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	1a52      	subs	r2, r2, r1
 800d40e:	920a      	str	r2, [sp, #40]	; 0x28
 800d410:	429a      	cmp	r2, r3
 800d412:	dd00      	ble.n	800d416 <_printf_float+0x35e>
 800d414:	930a      	str	r3, [sp, #40]	; 0x28
 800d416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d418:	2b00      	cmp	r3, #0
 800d41a:	dc36      	bgt.n	800d48a <_printf_float+0x3d2>
 800d41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d41e:	2500      	movs	r5, #0
 800d420:	43db      	mvns	r3, r3
 800d422:	17db      	asrs	r3, r3, #31
 800d424:	930b      	str	r3, [sp, #44]	; 0x2c
 800d426:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d428:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d42a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d42c:	1a9b      	subs	r3, r3, r2
 800d42e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d430:	400a      	ands	r2, r1
 800d432:	1a9b      	subs	r3, r3, r2
 800d434:	42ab      	cmp	r3, r5
 800d436:	dc00      	bgt.n	800d43a <_printf_float+0x382>
 800d438:	e772      	b.n	800d320 <_printf_float+0x268>
 800d43a:	0022      	movs	r2, r4
 800d43c:	2301      	movs	r3, #1
 800d43e:	0038      	movs	r0, r7
 800d440:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d442:	321a      	adds	r2, #26
 800d444:	47b0      	blx	r6
 800d446:	1c43      	adds	r3, r0, #1
 800d448:	d100      	bne.n	800d44c <_printf_float+0x394>
 800d44a:	e693      	b.n	800d174 <_printf_float+0xbc>
 800d44c:	3501      	adds	r5, #1
 800d44e:	e7ea      	b.n	800d426 <_printf_float+0x36e>
 800d450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d452:	002a      	movs	r2, r5
 800d454:	0038      	movs	r0, r7
 800d456:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d458:	47b0      	blx	r6
 800d45a:	1c43      	adds	r3, r0, #1
 800d45c:	d1bb      	bne.n	800d3d6 <_printf_float+0x31e>
 800d45e:	e689      	b.n	800d174 <_printf_float+0xbc>
 800d460:	0022      	movs	r2, r4
 800d462:	2301      	movs	r3, #1
 800d464:	0038      	movs	r0, r7
 800d466:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d468:	321a      	adds	r2, #26
 800d46a:	47b0      	blx	r6
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d100      	bne.n	800d472 <_printf_float+0x3ba>
 800d470:	e680      	b.n	800d174 <_printf_float+0xbc>
 800d472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d474:	3301      	adds	r3, #1
 800d476:	930d      	str	r3, [sp, #52]	; 0x34
 800d478:	e7b3      	b.n	800d3e2 <_printf_float+0x32a>
 800d47a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d47c:	0038      	movs	r0, r7
 800d47e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d480:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d482:	47b0      	blx	r6
 800d484:	1c43      	adds	r3, r0, #1
 800d486:	d1bd      	bne.n	800d404 <_printf_float+0x34c>
 800d488:	e674      	b.n	800d174 <_printf_float+0xbc>
 800d48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d48c:	0038      	movs	r0, r7
 800d48e:	18ea      	adds	r2, r5, r3
 800d490:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d494:	47b0      	blx	r6
 800d496:	1c43      	adds	r3, r0, #1
 800d498:	d1c0      	bne.n	800d41c <_printf_float+0x364>
 800d49a:	e66b      	b.n	800d174 <_printf_float+0xbc>
 800d49c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	dc02      	bgt.n	800d4a8 <_printf_float+0x3f0>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	421a      	tst	r2, r3
 800d4a6:	d034      	beq.n	800d512 <_printf_float+0x45a>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	002a      	movs	r2, r5
 800d4ac:	0038      	movs	r0, r7
 800d4ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4b0:	47b0      	blx	r6
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	d100      	bne.n	800d4b8 <_printf_float+0x400>
 800d4b6:	e65d      	b.n	800d174 <_printf_float+0xbc>
 800d4b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4ba:	0038      	movs	r0, r7
 800d4bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4c0:	47b0      	blx	r6
 800d4c2:	1c43      	adds	r3, r0, #1
 800d4c4:	d100      	bne.n	800d4c8 <_printf_float+0x410>
 800d4c6:	e655      	b.n	800d174 <_printf_float+0xbc>
 800d4c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d4ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f7f2 ffb8 	bl	8000444 <__aeabi_dcmpeq>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d11a      	bne.n	800d50e <_printf_float+0x456>
 800d4d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4da:	1c6a      	adds	r2, r5, #1
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	0038      	movs	r0, r7
 800d4e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4e2:	47b0      	blx	r6
 800d4e4:	1c43      	adds	r3, r0, #1
 800d4e6:	d10e      	bne.n	800d506 <_printf_float+0x44e>
 800d4e8:	e644      	b.n	800d174 <_printf_float+0xbc>
 800d4ea:	0022      	movs	r2, r4
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	0038      	movs	r0, r7
 800d4f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4f2:	321a      	adds	r2, #26
 800d4f4:	47b0      	blx	r6
 800d4f6:	1c43      	adds	r3, r0, #1
 800d4f8:	d100      	bne.n	800d4fc <_printf_float+0x444>
 800d4fa:	e63b      	b.n	800d174 <_printf_float+0xbc>
 800d4fc:	3501      	adds	r5, #1
 800d4fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d500:	3b01      	subs	r3, #1
 800d502:	42ab      	cmp	r3, r5
 800d504:	dcf1      	bgt.n	800d4ea <_printf_float+0x432>
 800d506:	0022      	movs	r2, r4
 800d508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d50a:	3250      	adds	r2, #80	; 0x50
 800d50c:	e6da      	b.n	800d2c4 <_printf_float+0x20c>
 800d50e:	2500      	movs	r5, #0
 800d510:	e7f5      	b.n	800d4fe <_printf_float+0x446>
 800d512:	002a      	movs	r2, r5
 800d514:	e7e3      	b.n	800d4de <_printf_float+0x426>
 800d516:	0022      	movs	r2, r4
 800d518:	2301      	movs	r3, #1
 800d51a:	0038      	movs	r0, r7
 800d51c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d51e:	3219      	adds	r2, #25
 800d520:	47b0      	blx	r6
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	d100      	bne.n	800d528 <_printf_float+0x470>
 800d526:	e625      	b.n	800d174 <_printf_float+0xbc>
 800d528:	3501      	adds	r5, #1
 800d52a:	68e3      	ldr	r3, [r4, #12]
 800d52c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d52e:	1a9b      	subs	r3, r3, r2
 800d530:	42ab      	cmp	r3, r5
 800d532:	dcf0      	bgt.n	800d516 <_printf_float+0x45e>
 800d534:	e6f8      	b.n	800d328 <_printf_float+0x270>
 800d536:	2500      	movs	r5, #0
 800d538:	e7f7      	b.n	800d52a <_printf_float+0x472>
 800d53a:	46c0      	nop			; (mov r8, r8)

0800d53c <_printf_common>:
 800d53c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d53e:	0015      	movs	r5, r2
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	688a      	ldr	r2, [r1, #8]
 800d544:	690b      	ldr	r3, [r1, #16]
 800d546:	000c      	movs	r4, r1
 800d548:	9000      	str	r0, [sp, #0]
 800d54a:	4293      	cmp	r3, r2
 800d54c:	da00      	bge.n	800d550 <_printf_common+0x14>
 800d54e:	0013      	movs	r3, r2
 800d550:	0022      	movs	r2, r4
 800d552:	602b      	str	r3, [r5, #0]
 800d554:	3243      	adds	r2, #67	; 0x43
 800d556:	7812      	ldrb	r2, [r2, #0]
 800d558:	2a00      	cmp	r2, #0
 800d55a:	d001      	beq.n	800d560 <_printf_common+0x24>
 800d55c:	3301      	adds	r3, #1
 800d55e:	602b      	str	r3, [r5, #0]
 800d560:	6823      	ldr	r3, [r4, #0]
 800d562:	069b      	lsls	r3, r3, #26
 800d564:	d502      	bpl.n	800d56c <_printf_common+0x30>
 800d566:	682b      	ldr	r3, [r5, #0]
 800d568:	3302      	adds	r3, #2
 800d56a:	602b      	str	r3, [r5, #0]
 800d56c:	6822      	ldr	r2, [r4, #0]
 800d56e:	2306      	movs	r3, #6
 800d570:	0017      	movs	r7, r2
 800d572:	401f      	ands	r7, r3
 800d574:	421a      	tst	r2, r3
 800d576:	d027      	beq.n	800d5c8 <_printf_common+0x8c>
 800d578:	0023      	movs	r3, r4
 800d57a:	3343      	adds	r3, #67	; 0x43
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	1e5a      	subs	r2, r3, #1
 800d580:	4193      	sbcs	r3, r2
 800d582:	6822      	ldr	r2, [r4, #0]
 800d584:	0692      	lsls	r2, r2, #26
 800d586:	d430      	bmi.n	800d5ea <_printf_common+0xae>
 800d588:	0022      	movs	r2, r4
 800d58a:	9901      	ldr	r1, [sp, #4]
 800d58c:	9800      	ldr	r0, [sp, #0]
 800d58e:	9e08      	ldr	r6, [sp, #32]
 800d590:	3243      	adds	r2, #67	; 0x43
 800d592:	47b0      	blx	r6
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d025      	beq.n	800d5e4 <_printf_common+0xa8>
 800d598:	2306      	movs	r3, #6
 800d59a:	6820      	ldr	r0, [r4, #0]
 800d59c:	682a      	ldr	r2, [r5, #0]
 800d59e:	68e1      	ldr	r1, [r4, #12]
 800d5a0:	2500      	movs	r5, #0
 800d5a2:	4003      	ands	r3, r0
 800d5a4:	2b04      	cmp	r3, #4
 800d5a6:	d103      	bne.n	800d5b0 <_printf_common+0x74>
 800d5a8:	1a8d      	subs	r5, r1, r2
 800d5aa:	43eb      	mvns	r3, r5
 800d5ac:	17db      	asrs	r3, r3, #31
 800d5ae:	401d      	ands	r5, r3
 800d5b0:	68a3      	ldr	r3, [r4, #8]
 800d5b2:	6922      	ldr	r2, [r4, #16]
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	dd01      	ble.n	800d5bc <_printf_common+0x80>
 800d5b8:	1a9b      	subs	r3, r3, r2
 800d5ba:	18ed      	adds	r5, r5, r3
 800d5bc:	2700      	movs	r7, #0
 800d5be:	42bd      	cmp	r5, r7
 800d5c0:	d120      	bne.n	800d604 <_printf_common+0xc8>
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	e010      	b.n	800d5e8 <_printf_common+0xac>
 800d5c6:	3701      	adds	r7, #1
 800d5c8:	68e3      	ldr	r3, [r4, #12]
 800d5ca:	682a      	ldr	r2, [r5, #0]
 800d5cc:	1a9b      	subs	r3, r3, r2
 800d5ce:	42bb      	cmp	r3, r7
 800d5d0:	ddd2      	ble.n	800d578 <_printf_common+0x3c>
 800d5d2:	0022      	movs	r2, r4
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	9901      	ldr	r1, [sp, #4]
 800d5d8:	9800      	ldr	r0, [sp, #0]
 800d5da:	9e08      	ldr	r6, [sp, #32]
 800d5dc:	3219      	adds	r2, #25
 800d5de:	47b0      	blx	r6
 800d5e0:	1c43      	adds	r3, r0, #1
 800d5e2:	d1f0      	bne.n	800d5c6 <_printf_common+0x8a>
 800d5e4:	2001      	movs	r0, #1
 800d5e6:	4240      	negs	r0, r0
 800d5e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5ea:	2030      	movs	r0, #48	; 0x30
 800d5ec:	18e1      	adds	r1, r4, r3
 800d5ee:	3143      	adds	r1, #67	; 0x43
 800d5f0:	7008      	strb	r0, [r1, #0]
 800d5f2:	0021      	movs	r1, r4
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	3145      	adds	r1, #69	; 0x45
 800d5f8:	7809      	ldrb	r1, [r1, #0]
 800d5fa:	18a2      	adds	r2, r4, r2
 800d5fc:	3243      	adds	r2, #67	; 0x43
 800d5fe:	3302      	adds	r3, #2
 800d600:	7011      	strb	r1, [r2, #0]
 800d602:	e7c1      	b.n	800d588 <_printf_common+0x4c>
 800d604:	0022      	movs	r2, r4
 800d606:	2301      	movs	r3, #1
 800d608:	9901      	ldr	r1, [sp, #4]
 800d60a:	9800      	ldr	r0, [sp, #0]
 800d60c:	9e08      	ldr	r6, [sp, #32]
 800d60e:	321a      	adds	r2, #26
 800d610:	47b0      	blx	r6
 800d612:	1c43      	adds	r3, r0, #1
 800d614:	d0e6      	beq.n	800d5e4 <_printf_common+0xa8>
 800d616:	3701      	adds	r7, #1
 800d618:	e7d1      	b.n	800d5be <_printf_common+0x82>
	...

0800d61c <_printf_i>:
 800d61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d61e:	b08b      	sub	sp, #44	; 0x2c
 800d620:	9206      	str	r2, [sp, #24]
 800d622:	000a      	movs	r2, r1
 800d624:	3243      	adds	r2, #67	; 0x43
 800d626:	9307      	str	r3, [sp, #28]
 800d628:	9005      	str	r0, [sp, #20]
 800d62a:	9204      	str	r2, [sp, #16]
 800d62c:	7e0a      	ldrb	r2, [r1, #24]
 800d62e:	000c      	movs	r4, r1
 800d630:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d632:	2a78      	cmp	r2, #120	; 0x78
 800d634:	d807      	bhi.n	800d646 <_printf_i+0x2a>
 800d636:	2a62      	cmp	r2, #98	; 0x62
 800d638:	d809      	bhi.n	800d64e <_printf_i+0x32>
 800d63a:	2a00      	cmp	r2, #0
 800d63c:	d100      	bne.n	800d640 <_printf_i+0x24>
 800d63e:	e0c1      	b.n	800d7c4 <_printf_i+0x1a8>
 800d640:	2a58      	cmp	r2, #88	; 0x58
 800d642:	d100      	bne.n	800d646 <_printf_i+0x2a>
 800d644:	e08c      	b.n	800d760 <_printf_i+0x144>
 800d646:	0026      	movs	r6, r4
 800d648:	3642      	adds	r6, #66	; 0x42
 800d64a:	7032      	strb	r2, [r6, #0]
 800d64c:	e022      	b.n	800d694 <_printf_i+0x78>
 800d64e:	0010      	movs	r0, r2
 800d650:	3863      	subs	r0, #99	; 0x63
 800d652:	2815      	cmp	r0, #21
 800d654:	d8f7      	bhi.n	800d646 <_printf_i+0x2a>
 800d656:	f7f2 fd65 	bl	8000124 <__gnu_thumb1_case_shi>
 800d65a:	0016      	.short	0x0016
 800d65c:	fff6001f 	.word	0xfff6001f
 800d660:	fff6fff6 	.word	0xfff6fff6
 800d664:	001ffff6 	.word	0x001ffff6
 800d668:	fff6fff6 	.word	0xfff6fff6
 800d66c:	fff6fff6 	.word	0xfff6fff6
 800d670:	003600a8 	.word	0x003600a8
 800d674:	fff6009a 	.word	0xfff6009a
 800d678:	00b9fff6 	.word	0x00b9fff6
 800d67c:	0036fff6 	.word	0x0036fff6
 800d680:	fff6fff6 	.word	0xfff6fff6
 800d684:	009e      	.short	0x009e
 800d686:	0026      	movs	r6, r4
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	3642      	adds	r6, #66	; 0x42
 800d68c:	1d11      	adds	r1, r2, #4
 800d68e:	6019      	str	r1, [r3, #0]
 800d690:	6813      	ldr	r3, [r2, #0]
 800d692:	7033      	strb	r3, [r6, #0]
 800d694:	2301      	movs	r3, #1
 800d696:	e0a7      	b.n	800d7e8 <_printf_i+0x1cc>
 800d698:	6808      	ldr	r0, [r1, #0]
 800d69a:	6819      	ldr	r1, [r3, #0]
 800d69c:	1d0a      	adds	r2, r1, #4
 800d69e:	0605      	lsls	r5, r0, #24
 800d6a0:	d50b      	bpl.n	800d6ba <_printf_i+0x9e>
 800d6a2:	680d      	ldr	r5, [r1, #0]
 800d6a4:	601a      	str	r2, [r3, #0]
 800d6a6:	2d00      	cmp	r5, #0
 800d6a8:	da03      	bge.n	800d6b2 <_printf_i+0x96>
 800d6aa:	232d      	movs	r3, #45	; 0x2d
 800d6ac:	9a04      	ldr	r2, [sp, #16]
 800d6ae:	426d      	negs	r5, r5
 800d6b0:	7013      	strb	r3, [r2, #0]
 800d6b2:	4b61      	ldr	r3, [pc, #388]	; (800d838 <_printf_i+0x21c>)
 800d6b4:	270a      	movs	r7, #10
 800d6b6:	9303      	str	r3, [sp, #12]
 800d6b8:	e01b      	b.n	800d6f2 <_printf_i+0xd6>
 800d6ba:	680d      	ldr	r5, [r1, #0]
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	0641      	lsls	r1, r0, #25
 800d6c0:	d5f1      	bpl.n	800d6a6 <_printf_i+0x8a>
 800d6c2:	b22d      	sxth	r5, r5
 800d6c4:	e7ef      	b.n	800d6a6 <_printf_i+0x8a>
 800d6c6:	680d      	ldr	r5, [r1, #0]
 800d6c8:	6819      	ldr	r1, [r3, #0]
 800d6ca:	1d08      	adds	r0, r1, #4
 800d6cc:	6018      	str	r0, [r3, #0]
 800d6ce:	062e      	lsls	r6, r5, #24
 800d6d0:	d501      	bpl.n	800d6d6 <_printf_i+0xba>
 800d6d2:	680d      	ldr	r5, [r1, #0]
 800d6d4:	e003      	b.n	800d6de <_printf_i+0xc2>
 800d6d6:	066d      	lsls	r5, r5, #25
 800d6d8:	d5fb      	bpl.n	800d6d2 <_printf_i+0xb6>
 800d6da:	680d      	ldr	r5, [r1, #0]
 800d6dc:	b2ad      	uxth	r5, r5
 800d6de:	4b56      	ldr	r3, [pc, #344]	; (800d838 <_printf_i+0x21c>)
 800d6e0:	2708      	movs	r7, #8
 800d6e2:	9303      	str	r3, [sp, #12]
 800d6e4:	2a6f      	cmp	r2, #111	; 0x6f
 800d6e6:	d000      	beq.n	800d6ea <_printf_i+0xce>
 800d6e8:	3702      	adds	r7, #2
 800d6ea:	0023      	movs	r3, r4
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	3343      	adds	r3, #67	; 0x43
 800d6f0:	701a      	strb	r2, [r3, #0]
 800d6f2:	6863      	ldr	r3, [r4, #4]
 800d6f4:	60a3      	str	r3, [r4, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	db03      	blt.n	800d702 <_printf_i+0xe6>
 800d6fa:	2204      	movs	r2, #4
 800d6fc:	6821      	ldr	r1, [r4, #0]
 800d6fe:	4391      	bics	r1, r2
 800d700:	6021      	str	r1, [r4, #0]
 800d702:	2d00      	cmp	r5, #0
 800d704:	d102      	bne.n	800d70c <_printf_i+0xf0>
 800d706:	9e04      	ldr	r6, [sp, #16]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00c      	beq.n	800d726 <_printf_i+0x10a>
 800d70c:	9e04      	ldr	r6, [sp, #16]
 800d70e:	0028      	movs	r0, r5
 800d710:	0039      	movs	r1, r7
 800d712:	f7f2 fd97 	bl	8000244 <__aeabi_uidivmod>
 800d716:	9b03      	ldr	r3, [sp, #12]
 800d718:	3e01      	subs	r6, #1
 800d71a:	5c5b      	ldrb	r3, [r3, r1]
 800d71c:	7033      	strb	r3, [r6, #0]
 800d71e:	002b      	movs	r3, r5
 800d720:	0005      	movs	r5, r0
 800d722:	429f      	cmp	r7, r3
 800d724:	d9f3      	bls.n	800d70e <_printf_i+0xf2>
 800d726:	2f08      	cmp	r7, #8
 800d728:	d109      	bne.n	800d73e <_printf_i+0x122>
 800d72a:	6823      	ldr	r3, [r4, #0]
 800d72c:	07db      	lsls	r3, r3, #31
 800d72e:	d506      	bpl.n	800d73e <_printf_i+0x122>
 800d730:	6863      	ldr	r3, [r4, #4]
 800d732:	6922      	ldr	r2, [r4, #16]
 800d734:	4293      	cmp	r3, r2
 800d736:	dc02      	bgt.n	800d73e <_printf_i+0x122>
 800d738:	2330      	movs	r3, #48	; 0x30
 800d73a:	3e01      	subs	r6, #1
 800d73c:	7033      	strb	r3, [r6, #0]
 800d73e:	9b04      	ldr	r3, [sp, #16]
 800d740:	1b9b      	subs	r3, r3, r6
 800d742:	6123      	str	r3, [r4, #16]
 800d744:	9b07      	ldr	r3, [sp, #28]
 800d746:	0021      	movs	r1, r4
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	9805      	ldr	r0, [sp, #20]
 800d74c:	9b06      	ldr	r3, [sp, #24]
 800d74e:	aa09      	add	r2, sp, #36	; 0x24
 800d750:	f7ff fef4 	bl	800d53c <_printf_common>
 800d754:	1c43      	adds	r3, r0, #1
 800d756:	d14c      	bne.n	800d7f2 <_printf_i+0x1d6>
 800d758:	2001      	movs	r0, #1
 800d75a:	4240      	negs	r0, r0
 800d75c:	b00b      	add	sp, #44	; 0x2c
 800d75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d760:	3145      	adds	r1, #69	; 0x45
 800d762:	700a      	strb	r2, [r1, #0]
 800d764:	4a34      	ldr	r2, [pc, #208]	; (800d838 <_printf_i+0x21c>)
 800d766:	9203      	str	r2, [sp, #12]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	6821      	ldr	r1, [r4, #0]
 800d76c:	ca20      	ldmia	r2!, {r5}
 800d76e:	601a      	str	r2, [r3, #0]
 800d770:	0608      	lsls	r0, r1, #24
 800d772:	d516      	bpl.n	800d7a2 <_printf_i+0x186>
 800d774:	07cb      	lsls	r3, r1, #31
 800d776:	d502      	bpl.n	800d77e <_printf_i+0x162>
 800d778:	2320      	movs	r3, #32
 800d77a:	4319      	orrs	r1, r3
 800d77c:	6021      	str	r1, [r4, #0]
 800d77e:	2710      	movs	r7, #16
 800d780:	2d00      	cmp	r5, #0
 800d782:	d1b2      	bne.n	800d6ea <_printf_i+0xce>
 800d784:	2320      	movs	r3, #32
 800d786:	6822      	ldr	r2, [r4, #0]
 800d788:	439a      	bics	r2, r3
 800d78a:	6022      	str	r2, [r4, #0]
 800d78c:	e7ad      	b.n	800d6ea <_printf_i+0xce>
 800d78e:	2220      	movs	r2, #32
 800d790:	6809      	ldr	r1, [r1, #0]
 800d792:	430a      	orrs	r2, r1
 800d794:	6022      	str	r2, [r4, #0]
 800d796:	0022      	movs	r2, r4
 800d798:	2178      	movs	r1, #120	; 0x78
 800d79a:	3245      	adds	r2, #69	; 0x45
 800d79c:	7011      	strb	r1, [r2, #0]
 800d79e:	4a27      	ldr	r2, [pc, #156]	; (800d83c <_printf_i+0x220>)
 800d7a0:	e7e1      	b.n	800d766 <_printf_i+0x14a>
 800d7a2:	0648      	lsls	r0, r1, #25
 800d7a4:	d5e6      	bpl.n	800d774 <_printf_i+0x158>
 800d7a6:	b2ad      	uxth	r5, r5
 800d7a8:	e7e4      	b.n	800d774 <_printf_i+0x158>
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	680d      	ldr	r5, [r1, #0]
 800d7ae:	1d10      	adds	r0, r2, #4
 800d7b0:	6949      	ldr	r1, [r1, #20]
 800d7b2:	6018      	str	r0, [r3, #0]
 800d7b4:	6813      	ldr	r3, [r2, #0]
 800d7b6:	062e      	lsls	r6, r5, #24
 800d7b8:	d501      	bpl.n	800d7be <_printf_i+0x1a2>
 800d7ba:	6019      	str	r1, [r3, #0]
 800d7bc:	e002      	b.n	800d7c4 <_printf_i+0x1a8>
 800d7be:	066d      	lsls	r5, r5, #25
 800d7c0:	d5fb      	bpl.n	800d7ba <_printf_i+0x19e>
 800d7c2:	8019      	strh	r1, [r3, #0]
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	9e04      	ldr	r6, [sp, #16]
 800d7c8:	6123      	str	r3, [r4, #16]
 800d7ca:	e7bb      	b.n	800d744 <_printf_i+0x128>
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	1d11      	adds	r1, r2, #4
 800d7d0:	6019      	str	r1, [r3, #0]
 800d7d2:	6816      	ldr	r6, [r2, #0]
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	0030      	movs	r0, r6
 800d7d8:	6862      	ldr	r2, [r4, #4]
 800d7da:	f000 ff0d 	bl	800e5f8 <memchr>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d001      	beq.n	800d7e6 <_printf_i+0x1ca>
 800d7e2:	1b80      	subs	r0, r0, r6
 800d7e4:	6060      	str	r0, [r4, #4]
 800d7e6:	6863      	ldr	r3, [r4, #4]
 800d7e8:	6123      	str	r3, [r4, #16]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	9a04      	ldr	r2, [sp, #16]
 800d7ee:	7013      	strb	r3, [r2, #0]
 800d7f0:	e7a8      	b.n	800d744 <_printf_i+0x128>
 800d7f2:	6923      	ldr	r3, [r4, #16]
 800d7f4:	0032      	movs	r2, r6
 800d7f6:	9906      	ldr	r1, [sp, #24]
 800d7f8:	9805      	ldr	r0, [sp, #20]
 800d7fa:	9d07      	ldr	r5, [sp, #28]
 800d7fc:	47a8      	blx	r5
 800d7fe:	1c43      	adds	r3, r0, #1
 800d800:	d0aa      	beq.n	800d758 <_printf_i+0x13c>
 800d802:	6823      	ldr	r3, [r4, #0]
 800d804:	079b      	lsls	r3, r3, #30
 800d806:	d415      	bmi.n	800d834 <_printf_i+0x218>
 800d808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d80a:	68e0      	ldr	r0, [r4, #12]
 800d80c:	4298      	cmp	r0, r3
 800d80e:	daa5      	bge.n	800d75c <_printf_i+0x140>
 800d810:	0018      	movs	r0, r3
 800d812:	e7a3      	b.n	800d75c <_printf_i+0x140>
 800d814:	0022      	movs	r2, r4
 800d816:	2301      	movs	r3, #1
 800d818:	9906      	ldr	r1, [sp, #24]
 800d81a:	9805      	ldr	r0, [sp, #20]
 800d81c:	9e07      	ldr	r6, [sp, #28]
 800d81e:	3219      	adds	r2, #25
 800d820:	47b0      	blx	r6
 800d822:	1c43      	adds	r3, r0, #1
 800d824:	d098      	beq.n	800d758 <_printf_i+0x13c>
 800d826:	3501      	adds	r5, #1
 800d828:	68e3      	ldr	r3, [r4, #12]
 800d82a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d82c:	1a9b      	subs	r3, r3, r2
 800d82e:	42ab      	cmp	r3, r5
 800d830:	dcf0      	bgt.n	800d814 <_printf_i+0x1f8>
 800d832:	e7e9      	b.n	800d808 <_printf_i+0x1ec>
 800d834:	2500      	movs	r5, #0
 800d836:	e7f7      	b.n	800d828 <_printf_i+0x20c>
 800d838:	080101c6 	.word	0x080101c6
 800d83c:	080101d7 	.word	0x080101d7

0800d840 <_sbrk_r>:
 800d840:	2300      	movs	r3, #0
 800d842:	b570      	push	{r4, r5, r6, lr}
 800d844:	4d06      	ldr	r5, [pc, #24]	; (800d860 <_sbrk_r+0x20>)
 800d846:	0004      	movs	r4, r0
 800d848:	0008      	movs	r0, r1
 800d84a:	602b      	str	r3, [r5, #0]
 800d84c:	f7f8 fe62 	bl	8006514 <_sbrk>
 800d850:	1c43      	adds	r3, r0, #1
 800d852:	d103      	bne.n	800d85c <_sbrk_r+0x1c>
 800d854:	682b      	ldr	r3, [r5, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d000      	beq.n	800d85c <_sbrk_r+0x1c>
 800d85a:	6023      	str	r3, [r4, #0]
 800d85c:	bd70      	pop	{r4, r5, r6, pc}
 800d85e:	46c0      	nop			; (mov r8, r8)
 800d860:	200009d0 	.word	0x200009d0

0800d864 <siprintf>:
 800d864:	b40e      	push	{r1, r2, r3}
 800d866:	b500      	push	{lr}
 800d868:	490b      	ldr	r1, [pc, #44]	; (800d898 <siprintf+0x34>)
 800d86a:	b09c      	sub	sp, #112	; 0x70
 800d86c:	ab1d      	add	r3, sp, #116	; 0x74
 800d86e:	9002      	str	r0, [sp, #8]
 800d870:	9006      	str	r0, [sp, #24]
 800d872:	9107      	str	r1, [sp, #28]
 800d874:	9104      	str	r1, [sp, #16]
 800d876:	4809      	ldr	r0, [pc, #36]	; (800d89c <siprintf+0x38>)
 800d878:	4909      	ldr	r1, [pc, #36]	; (800d8a0 <siprintf+0x3c>)
 800d87a:	cb04      	ldmia	r3!, {r2}
 800d87c:	9105      	str	r1, [sp, #20]
 800d87e:	6800      	ldr	r0, [r0, #0]
 800d880:	a902      	add	r1, sp, #8
 800d882:	9301      	str	r3, [sp, #4]
 800d884:	f001 fafe 	bl	800ee84 <_svfiprintf_r>
 800d888:	2300      	movs	r3, #0
 800d88a:	9a02      	ldr	r2, [sp, #8]
 800d88c:	7013      	strb	r3, [r2, #0]
 800d88e:	b01c      	add	sp, #112	; 0x70
 800d890:	bc08      	pop	{r3}
 800d892:	b003      	add	sp, #12
 800d894:	4718      	bx	r3
 800d896:	46c0      	nop			; (mov r8, r8)
 800d898:	7fffffff 	.word	0x7fffffff
 800d89c:	20000018 	.word	0x20000018
 800d8a0:	ffff0208 	.word	0xffff0208

0800d8a4 <quorem>:
 800d8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8a6:	0006      	movs	r6, r0
 800d8a8:	690b      	ldr	r3, [r1, #16]
 800d8aa:	6932      	ldr	r2, [r6, #16]
 800d8ac:	b087      	sub	sp, #28
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	9103      	str	r1, [sp, #12]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	db65      	blt.n	800d982 <quorem+0xde>
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	009c      	lsls	r4, r3, #2
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	000b      	movs	r3, r1
 800d8be:	3314      	adds	r3, #20
 800d8c0:	9305      	str	r3, [sp, #20]
 800d8c2:	191b      	adds	r3, r3, r4
 800d8c4:	9304      	str	r3, [sp, #16]
 800d8c6:	0033      	movs	r3, r6
 800d8c8:	3314      	adds	r3, #20
 800d8ca:	9302      	str	r3, [sp, #8]
 800d8cc:	191c      	adds	r4, r3, r4
 800d8ce:	9b04      	ldr	r3, [sp, #16]
 800d8d0:	6827      	ldr	r7, [r4, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	0038      	movs	r0, r7
 800d8d6:	1c5d      	adds	r5, r3, #1
 800d8d8:	0029      	movs	r1, r5
 800d8da:	9301      	str	r3, [sp, #4]
 800d8dc:	f7f2 fc2c 	bl	8000138 <__udivsi3>
 800d8e0:	9001      	str	r0, [sp, #4]
 800d8e2:	42af      	cmp	r7, r5
 800d8e4:	d324      	bcc.n	800d930 <quorem+0x8c>
 800d8e6:	2500      	movs	r5, #0
 800d8e8:	46ac      	mov	ip, r5
 800d8ea:	9802      	ldr	r0, [sp, #8]
 800d8ec:	9f05      	ldr	r7, [sp, #20]
 800d8ee:	cf08      	ldmia	r7!, {r3}
 800d8f0:	9a01      	ldr	r2, [sp, #4]
 800d8f2:	b299      	uxth	r1, r3
 800d8f4:	4351      	muls	r1, r2
 800d8f6:	0c1b      	lsrs	r3, r3, #16
 800d8f8:	4353      	muls	r3, r2
 800d8fa:	1949      	adds	r1, r1, r5
 800d8fc:	0c0a      	lsrs	r2, r1, #16
 800d8fe:	189b      	adds	r3, r3, r2
 800d900:	6802      	ldr	r2, [r0, #0]
 800d902:	b289      	uxth	r1, r1
 800d904:	b292      	uxth	r2, r2
 800d906:	4462      	add	r2, ip
 800d908:	1a52      	subs	r2, r2, r1
 800d90a:	6801      	ldr	r1, [r0, #0]
 800d90c:	0c1d      	lsrs	r5, r3, #16
 800d90e:	0c09      	lsrs	r1, r1, #16
 800d910:	b29b      	uxth	r3, r3
 800d912:	1acb      	subs	r3, r1, r3
 800d914:	1411      	asrs	r1, r2, #16
 800d916:	185b      	adds	r3, r3, r1
 800d918:	1419      	asrs	r1, r3, #16
 800d91a:	b292      	uxth	r2, r2
 800d91c:	041b      	lsls	r3, r3, #16
 800d91e:	431a      	orrs	r2, r3
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	468c      	mov	ip, r1
 800d924:	c004      	stmia	r0!, {r2}
 800d926:	42bb      	cmp	r3, r7
 800d928:	d2e1      	bcs.n	800d8ee <quorem+0x4a>
 800d92a:	6823      	ldr	r3, [r4, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d030      	beq.n	800d992 <quorem+0xee>
 800d930:	0030      	movs	r0, r6
 800d932:	9903      	ldr	r1, [sp, #12]
 800d934:	f001 f900 	bl	800eb38 <__mcmp>
 800d938:	2800      	cmp	r0, #0
 800d93a:	db21      	blt.n	800d980 <quorem+0xdc>
 800d93c:	0030      	movs	r0, r6
 800d93e:	2400      	movs	r4, #0
 800d940:	9b01      	ldr	r3, [sp, #4]
 800d942:	9903      	ldr	r1, [sp, #12]
 800d944:	3301      	adds	r3, #1
 800d946:	9301      	str	r3, [sp, #4]
 800d948:	3014      	adds	r0, #20
 800d94a:	3114      	adds	r1, #20
 800d94c:	6803      	ldr	r3, [r0, #0]
 800d94e:	c920      	ldmia	r1!, {r5}
 800d950:	b29a      	uxth	r2, r3
 800d952:	1914      	adds	r4, r2, r4
 800d954:	b2aa      	uxth	r2, r5
 800d956:	1aa2      	subs	r2, r4, r2
 800d958:	0c1b      	lsrs	r3, r3, #16
 800d95a:	0c2d      	lsrs	r5, r5, #16
 800d95c:	1414      	asrs	r4, r2, #16
 800d95e:	1b5b      	subs	r3, r3, r5
 800d960:	191b      	adds	r3, r3, r4
 800d962:	141c      	asrs	r4, r3, #16
 800d964:	b292      	uxth	r2, r2
 800d966:	041b      	lsls	r3, r3, #16
 800d968:	4313      	orrs	r3, r2
 800d96a:	c008      	stmia	r0!, {r3}
 800d96c:	9b04      	ldr	r3, [sp, #16]
 800d96e:	428b      	cmp	r3, r1
 800d970:	d2ec      	bcs.n	800d94c <quorem+0xa8>
 800d972:	9b00      	ldr	r3, [sp, #0]
 800d974:	9a02      	ldr	r2, [sp, #8]
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	18d3      	adds	r3, r2, r3
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	2a00      	cmp	r2, #0
 800d97e:	d015      	beq.n	800d9ac <quorem+0x108>
 800d980:	9801      	ldr	r0, [sp, #4]
 800d982:	b007      	add	sp, #28
 800d984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <quorem+0xf6>
 800d98c:	9b00      	ldr	r3, [sp, #0]
 800d98e:	3b01      	subs	r3, #1
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	9b02      	ldr	r3, [sp, #8]
 800d994:	3c04      	subs	r4, #4
 800d996:	42a3      	cmp	r3, r4
 800d998:	d3f5      	bcc.n	800d986 <quorem+0xe2>
 800d99a:	9b00      	ldr	r3, [sp, #0]
 800d99c:	6133      	str	r3, [r6, #16]
 800d99e:	e7c7      	b.n	800d930 <quorem+0x8c>
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	2a00      	cmp	r2, #0
 800d9a4:	d106      	bne.n	800d9b4 <quorem+0x110>
 800d9a6:	9a00      	ldr	r2, [sp, #0]
 800d9a8:	3a01      	subs	r2, #1
 800d9aa:	9200      	str	r2, [sp, #0]
 800d9ac:	9a02      	ldr	r2, [sp, #8]
 800d9ae:	3b04      	subs	r3, #4
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d3f5      	bcc.n	800d9a0 <quorem+0xfc>
 800d9b4:	9b00      	ldr	r3, [sp, #0]
 800d9b6:	6133      	str	r3, [r6, #16]
 800d9b8:	e7e2      	b.n	800d980 <quorem+0xdc>
	...

0800d9bc <_dtoa_r>:
 800d9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9be:	b09d      	sub	sp, #116	; 0x74
 800d9c0:	9202      	str	r2, [sp, #8]
 800d9c2:	9303      	str	r3, [sp, #12]
 800d9c4:	9b02      	ldr	r3, [sp, #8]
 800d9c6:	9c03      	ldr	r4, [sp, #12]
 800d9c8:	9308      	str	r3, [sp, #32]
 800d9ca:	9409      	str	r4, [sp, #36]	; 0x24
 800d9cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d9ce:	0007      	movs	r7, r0
 800d9d0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800d9d2:	2c00      	cmp	r4, #0
 800d9d4:	d10e      	bne.n	800d9f4 <_dtoa_r+0x38>
 800d9d6:	2010      	movs	r0, #16
 800d9d8:	f7ff f9b8 	bl	800cd4c <malloc>
 800d9dc:	1e02      	subs	r2, r0, #0
 800d9de:	6278      	str	r0, [r7, #36]	; 0x24
 800d9e0:	d104      	bne.n	800d9ec <_dtoa_r+0x30>
 800d9e2:	21ea      	movs	r1, #234	; 0xea
 800d9e4:	4bc7      	ldr	r3, [pc, #796]	; (800dd04 <_dtoa_r+0x348>)
 800d9e6:	48c8      	ldr	r0, [pc, #800]	; (800dd08 <_dtoa_r+0x34c>)
 800d9e8:	f001 fb4c 	bl	800f084 <__assert_func>
 800d9ec:	6044      	str	r4, [r0, #4]
 800d9ee:	6084      	str	r4, [r0, #8]
 800d9f0:	6004      	str	r4, [r0, #0]
 800d9f2:	60c4      	str	r4, [r0, #12]
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f6:	6819      	ldr	r1, [r3, #0]
 800d9f8:	2900      	cmp	r1, #0
 800d9fa:	d00a      	beq.n	800da12 <_dtoa_r+0x56>
 800d9fc:	685a      	ldr	r2, [r3, #4]
 800d9fe:	2301      	movs	r3, #1
 800da00:	4093      	lsls	r3, r2
 800da02:	604a      	str	r2, [r1, #4]
 800da04:	608b      	str	r3, [r1, #8]
 800da06:	0038      	movs	r0, r7
 800da08:	f000 fe56 	bl	800e6b8 <_Bfree>
 800da0c:	2200      	movs	r2, #0
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da10:	601a      	str	r2, [r3, #0]
 800da12:	9b03      	ldr	r3, [sp, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	da20      	bge.n	800da5a <_dtoa_r+0x9e>
 800da18:	2301      	movs	r3, #1
 800da1a:	602b      	str	r3, [r5, #0]
 800da1c:	9b03      	ldr	r3, [sp, #12]
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	085b      	lsrs	r3, r3, #1
 800da22:	9309      	str	r3, [sp, #36]	; 0x24
 800da24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800da26:	4bb9      	ldr	r3, [pc, #740]	; (800dd0c <_dtoa_r+0x350>)
 800da28:	4ab8      	ldr	r2, [pc, #736]	; (800dd0c <_dtoa_r+0x350>)
 800da2a:	402b      	ands	r3, r5
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d117      	bne.n	800da60 <_dtoa_r+0xa4>
 800da30:	4bb7      	ldr	r3, [pc, #732]	; (800dd10 <_dtoa_r+0x354>)
 800da32:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800da34:	0328      	lsls	r0, r5, #12
 800da36:	6013      	str	r3, [r2, #0]
 800da38:	9b02      	ldr	r3, [sp, #8]
 800da3a:	0b00      	lsrs	r0, r0, #12
 800da3c:	4318      	orrs	r0, r3
 800da3e:	d101      	bne.n	800da44 <_dtoa_r+0x88>
 800da40:	f000 fdbf 	bl	800e5c2 <_dtoa_r+0xc06>
 800da44:	48b3      	ldr	r0, [pc, #716]	; (800dd14 <_dtoa_r+0x358>)
 800da46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da48:	9006      	str	r0, [sp, #24]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d002      	beq.n	800da54 <_dtoa_r+0x98>
 800da4e:	4bb2      	ldr	r3, [pc, #712]	; (800dd18 <_dtoa_r+0x35c>)
 800da50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800da52:	6013      	str	r3, [r2, #0]
 800da54:	9806      	ldr	r0, [sp, #24]
 800da56:	b01d      	add	sp, #116	; 0x74
 800da58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da5a:	2300      	movs	r3, #0
 800da5c:	602b      	str	r3, [r5, #0]
 800da5e:	e7e1      	b.n	800da24 <_dtoa_r+0x68>
 800da60:	9b08      	ldr	r3, [sp, #32]
 800da62:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800da64:	9312      	str	r3, [sp, #72]	; 0x48
 800da66:	9413      	str	r4, [sp, #76]	; 0x4c
 800da68:	9812      	ldr	r0, [sp, #72]	; 0x48
 800da6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800da6c:	2200      	movs	r2, #0
 800da6e:	2300      	movs	r3, #0
 800da70:	f7f2 fce8 	bl	8000444 <__aeabi_dcmpeq>
 800da74:	1e04      	subs	r4, r0, #0
 800da76:	d009      	beq.n	800da8c <_dtoa_r+0xd0>
 800da78:	2301      	movs	r3, #1
 800da7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800da7c:	6013      	str	r3, [r2, #0]
 800da7e:	4ba7      	ldr	r3, [pc, #668]	; (800dd1c <_dtoa_r+0x360>)
 800da80:	9306      	str	r3, [sp, #24]
 800da82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da84:	2b00      	cmp	r3, #0
 800da86:	d0e5      	beq.n	800da54 <_dtoa_r+0x98>
 800da88:	4ba5      	ldr	r3, [pc, #660]	; (800dd20 <_dtoa_r+0x364>)
 800da8a:	e7e1      	b.n	800da50 <_dtoa_r+0x94>
 800da8c:	ab1a      	add	r3, sp, #104	; 0x68
 800da8e:	9301      	str	r3, [sp, #4]
 800da90:	ab1b      	add	r3, sp, #108	; 0x6c
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	0038      	movs	r0, r7
 800da96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da9a:	f001 f901 	bl	800eca0 <__d2b>
 800da9e:	006e      	lsls	r6, r5, #1
 800daa0:	9005      	str	r0, [sp, #20]
 800daa2:	0d76      	lsrs	r6, r6, #21
 800daa4:	d100      	bne.n	800daa8 <_dtoa_r+0xec>
 800daa6:	e07c      	b.n	800dba2 <_dtoa_r+0x1e6>
 800daa8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800daaa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800daac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800daae:	4a9d      	ldr	r2, [pc, #628]	; (800dd24 <_dtoa_r+0x368>)
 800dab0:	031b      	lsls	r3, r3, #12
 800dab2:	0b1b      	lsrs	r3, r3, #12
 800dab4:	431a      	orrs	r2, r3
 800dab6:	0011      	movs	r1, r2
 800dab8:	4b9b      	ldr	r3, [pc, #620]	; (800dd28 <_dtoa_r+0x36c>)
 800daba:	9418      	str	r4, [sp, #96]	; 0x60
 800dabc:	18f6      	adds	r6, r6, r3
 800dabe:	2200      	movs	r2, #0
 800dac0:	4b9a      	ldr	r3, [pc, #616]	; (800dd2c <_dtoa_r+0x370>)
 800dac2:	f7f4 fa4f 	bl	8001f64 <__aeabi_dsub>
 800dac6:	4a9a      	ldr	r2, [pc, #616]	; (800dd30 <_dtoa_r+0x374>)
 800dac8:	4b9a      	ldr	r3, [pc, #616]	; (800dd34 <_dtoa_r+0x378>)
 800daca:	f7f3 ffdf 	bl	8001a8c <__aeabi_dmul>
 800dace:	4a9a      	ldr	r2, [pc, #616]	; (800dd38 <_dtoa_r+0x37c>)
 800dad0:	4b9a      	ldr	r3, [pc, #616]	; (800dd3c <_dtoa_r+0x380>)
 800dad2:	f7f3 f89d 	bl	8000c10 <__aeabi_dadd>
 800dad6:	0004      	movs	r4, r0
 800dad8:	0030      	movs	r0, r6
 800dada:	000d      	movs	r5, r1
 800dadc:	f7f4 fe28 	bl	8002730 <__aeabi_i2d>
 800dae0:	4a97      	ldr	r2, [pc, #604]	; (800dd40 <_dtoa_r+0x384>)
 800dae2:	4b98      	ldr	r3, [pc, #608]	; (800dd44 <_dtoa_r+0x388>)
 800dae4:	f7f3 ffd2 	bl	8001a8c <__aeabi_dmul>
 800dae8:	0002      	movs	r2, r0
 800daea:	000b      	movs	r3, r1
 800daec:	0020      	movs	r0, r4
 800daee:	0029      	movs	r1, r5
 800daf0:	f7f3 f88e 	bl	8000c10 <__aeabi_dadd>
 800daf4:	0004      	movs	r4, r0
 800daf6:	000d      	movs	r5, r1
 800daf8:	f7f4 fde4 	bl	80026c4 <__aeabi_d2iz>
 800dafc:	2200      	movs	r2, #0
 800dafe:	9002      	str	r0, [sp, #8]
 800db00:	2300      	movs	r3, #0
 800db02:	0020      	movs	r0, r4
 800db04:	0029      	movs	r1, r5
 800db06:	f7f2 fca3 	bl	8000450 <__aeabi_dcmplt>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d00b      	beq.n	800db26 <_dtoa_r+0x16a>
 800db0e:	9802      	ldr	r0, [sp, #8]
 800db10:	f7f4 fe0e 	bl	8002730 <__aeabi_i2d>
 800db14:	002b      	movs	r3, r5
 800db16:	0022      	movs	r2, r4
 800db18:	f7f2 fc94 	bl	8000444 <__aeabi_dcmpeq>
 800db1c:	4243      	negs	r3, r0
 800db1e:	4158      	adcs	r0, r3
 800db20:	9b02      	ldr	r3, [sp, #8]
 800db22:	1a1b      	subs	r3, r3, r0
 800db24:	9302      	str	r3, [sp, #8]
 800db26:	2301      	movs	r3, #1
 800db28:	9316      	str	r3, [sp, #88]	; 0x58
 800db2a:	9b02      	ldr	r3, [sp, #8]
 800db2c:	2b16      	cmp	r3, #22
 800db2e:	d80f      	bhi.n	800db50 <_dtoa_r+0x194>
 800db30:	9812      	ldr	r0, [sp, #72]	; 0x48
 800db32:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800db34:	00da      	lsls	r2, r3, #3
 800db36:	4b84      	ldr	r3, [pc, #528]	; (800dd48 <_dtoa_r+0x38c>)
 800db38:	189b      	adds	r3, r3, r2
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	f7f2 fc87 	bl	8000450 <__aeabi_dcmplt>
 800db42:	2800      	cmp	r0, #0
 800db44:	d049      	beq.n	800dbda <_dtoa_r+0x21e>
 800db46:	9b02      	ldr	r3, [sp, #8]
 800db48:	3b01      	subs	r3, #1
 800db4a:	9302      	str	r3, [sp, #8]
 800db4c:	2300      	movs	r3, #0
 800db4e:	9316      	str	r3, [sp, #88]	; 0x58
 800db50:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800db52:	1b9e      	subs	r6, r3, r6
 800db54:	2300      	movs	r3, #0
 800db56:	930a      	str	r3, [sp, #40]	; 0x28
 800db58:	0033      	movs	r3, r6
 800db5a:	3b01      	subs	r3, #1
 800db5c:	930d      	str	r3, [sp, #52]	; 0x34
 800db5e:	d504      	bpl.n	800db6a <_dtoa_r+0x1ae>
 800db60:	2301      	movs	r3, #1
 800db62:	1b9b      	subs	r3, r3, r6
 800db64:	930a      	str	r3, [sp, #40]	; 0x28
 800db66:	2300      	movs	r3, #0
 800db68:	930d      	str	r3, [sp, #52]	; 0x34
 800db6a:	9b02      	ldr	r3, [sp, #8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	db36      	blt.n	800dbde <_dtoa_r+0x222>
 800db70:	9a02      	ldr	r2, [sp, #8]
 800db72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db74:	4694      	mov	ip, r2
 800db76:	4463      	add	r3, ip
 800db78:	930d      	str	r3, [sp, #52]	; 0x34
 800db7a:	2300      	movs	r3, #0
 800db7c:	9215      	str	r2, [sp, #84]	; 0x54
 800db7e:	930e      	str	r3, [sp, #56]	; 0x38
 800db80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db82:	2401      	movs	r4, #1
 800db84:	2b09      	cmp	r3, #9
 800db86:	d864      	bhi.n	800dc52 <_dtoa_r+0x296>
 800db88:	2b05      	cmp	r3, #5
 800db8a:	dd02      	ble.n	800db92 <_dtoa_r+0x1d6>
 800db8c:	2400      	movs	r4, #0
 800db8e:	3b04      	subs	r3, #4
 800db90:	9322      	str	r3, [sp, #136]	; 0x88
 800db92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db94:	1e98      	subs	r0, r3, #2
 800db96:	2803      	cmp	r0, #3
 800db98:	d864      	bhi.n	800dc64 <_dtoa_r+0x2a8>
 800db9a:	f7f2 fab9 	bl	8000110 <__gnu_thumb1_case_uqi>
 800db9e:	3829      	.short	0x3829
 800dba0:	5836      	.short	0x5836
 800dba2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dba4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dba6:	189e      	adds	r6, r3, r2
 800dba8:	4b68      	ldr	r3, [pc, #416]	; (800dd4c <_dtoa_r+0x390>)
 800dbaa:	18f2      	adds	r2, r6, r3
 800dbac:	2a20      	cmp	r2, #32
 800dbae:	dd0f      	ble.n	800dbd0 <_dtoa_r+0x214>
 800dbb0:	2340      	movs	r3, #64	; 0x40
 800dbb2:	1a9b      	subs	r3, r3, r2
 800dbb4:	409d      	lsls	r5, r3
 800dbb6:	4b66      	ldr	r3, [pc, #408]	; (800dd50 <_dtoa_r+0x394>)
 800dbb8:	9802      	ldr	r0, [sp, #8]
 800dbba:	18f3      	adds	r3, r6, r3
 800dbbc:	40d8      	lsrs	r0, r3
 800dbbe:	4328      	orrs	r0, r5
 800dbc0:	f7f4 fde6 	bl	8002790 <__aeabi_ui2d>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	4c63      	ldr	r4, [pc, #396]	; (800dd54 <_dtoa_r+0x398>)
 800dbc8:	3e01      	subs	r6, #1
 800dbca:	1909      	adds	r1, r1, r4
 800dbcc:	9318      	str	r3, [sp, #96]	; 0x60
 800dbce:	e776      	b.n	800dabe <_dtoa_r+0x102>
 800dbd0:	2320      	movs	r3, #32
 800dbd2:	9802      	ldr	r0, [sp, #8]
 800dbd4:	1a9b      	subs	r3, r3, r2
 800dbd6:	4098      	lsls	r0, r3
 800dbd8:	e7f2      	b.n	800dbc0 <_dtoa_r+0x204>
 800dbda:	9016      	str	r0, [sp, #88]	; 0x58
 800dbdc:	e7b8      	b.n	800db50 <_dtoa_r+0x194>
 800dbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbe0:	9a02      	ldr	r2, [sp, #8]
 800dbe2:	1a9b      	subs	r3, r3, r2
 800dbe4:	930a      	str	r3, [sp, #40]	; 0x28
 800dbe6:	4253      	negs	r3, r2
 800dbe8:	930e      	str	r3, [sp, #56]	; 0x38
 800dbea:	2300      	movs	r3, #0
 800dbec:	9315      	str	r3, [sp, #84]	; 0x54
 800dbee:	e7c7      	b.n	800db80 <_dtoa_r+0x1c4>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dbf6:	930c      	str	r3, [sp, #48]	; 0x30
 800dbf8:	9307      	str	r3, [sp, #28]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	dc13      	bgt.n	800dc26 <_dtoa_r+0x26a>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	001a      	movs	r2, r3
 800dc02:	930c      	str	r3, [sp, #48]	; 0x30
 800dc04:	9307      	str	r3, [sp, #28]
 800dc06:	9223      	str	r2, [sp, #140]	; 0x8c
 800dc08:	e00d      	b.n	800dc26 <_dtoa_r+0x26a>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e7f1      	b.n	800dbf2 <_dtoa_r+0x236>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800dc12:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc14:	4694      	mov	ip, r2
 800dc16:	9b02      	ldr	r3, [sp, #8]
 800dc18:	4463      	add	r3, ip
 800dc1a:	930c      	str	r3, [sp, #48]	; 0x30
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	9307      	str	r3, [sp, #28]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dc00      	bgt.n	800dc26 <_dtoa_r+0x26a>
 800dc24:	2301      	movs	r3, #1
 800dc26:	2200      	movs	r2, #0
 800dc28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc2a:	6042      	str	r2, [r0, #4]
 800dc2c:	3204      	adds	r2, #4
 800dc2e:	0015      	movs	r5, r2
 800dc30:	3514      	adds	r5, #20
 800dc32:	6841      	ldr	r1, [r0, #4]
 800dc34:	429d      	cmp	r5, r3
 800dc36:	d919      	bls.n	800dc6c <_dtoa_r+0x2b0>
 800dc38:	0038      	movs	r0, r7
 800dc3a:	f000 fcf9 	bl	800e630 <_Balloc>
 800dc3e:	9006      	str	r0, [sp, #24]
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d117      	bne.n	800dc74 <_dtoa_r+0x2b8>
 800dc44:	21d5      	movs	r1, #213	; 0xd5
 800dc46:	0002      	movs	r2, r0
 800dc48:	4b43      	ldr	r3, [pc, #268]	; (800dd58 <_dtoa_r+0x39c>)
 800dc4a:	0049      	lsls	r1, r1, #1
 800dc4c:	e6cb      	b.n	800d9e6 <_dtoa_r+0x2a>
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e7de      	b.n	800dc10 <_dtoa_r+0x254>
 800dc52:	2300      	movs	r3, #0
 800dc54:	940f      	str	r4, [sp, #60]	; 0x3c
 800dc56:	9322      	str	r3, [sp, #136]	; 0x88
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	930c      	str	r3, [sp, #48]	; 0x30
 800dc5c:	9307      	str	r3, [sp, #28]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	3313      	adds	r3, #19
 800dc62:	e7d0      	b.n	800dc06 <_dtoa_r+0x24a>
 800dc64:	2301      	movs	r3, #1
 800dc66:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc68:	3b02      	subs	r3, #2
 800dc6a:	e7f6      	b.n	800dc5a <_dtoa_r+0x29e>
 800dc6c:	3101      	adds	r1, #1
 800dc6e:	6041      	str	r1, [r0, #4]
 800dc70:	0052      	lsls	r2, r2, #1
 800dc72:	e7dc      	b.n	800dc2e <_dtoa_r+0x272>
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	9a06      	ldr	r2, [sp, #24]
 800dc78:	601a      	str	r2, [r3, #0]
 800dc7a:	9b07      	ldr	r3, [sp, #28]
 800dc7c:	2b0e      	cmp	r3, #14
 800dc7e:	d900      	bls.n	800dc82 <_dtoa_r+0x2c6>
 800dc80:	e0eb      	b.n	800de5a <_dtoa_r+0x49e>
 800dc82:	2c00      	cmp	r4, #0
 800dc84:	d100      	bne.n	800dc88 <_dtoa_r+0x2cc>
 800dc86:	e0e8      	b.n	800de5a <_dtoa_r+0x49e>
 800dc88:	9b02      	ldr	r3, [sp, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	dd68      	ble.n	800dd60 <_dtoa_r+0x3a4>
 800dc8e:	001a      	movs	r2, r3
 800dc90:	210f      	movs	r1, #15
 800dc92:	4b2d      	ldr	r3, [pc, #180]	; (800dd48 <_dtoa_r+0x38c>)
 800dc94:	400a      	ands	r2, r1
 800dc96:	00d2      	lsls	r2, r2, #3
 800dc98:	189b      	adds	r3, r3, r2
 800dc9a:	681d      	ldr	r5, [r3, #0]
 800dc9c:	685e      	ldr	r6, [r3, #4]
 800dc9e:	9b02      	ldr	r3, [sp, #8]
 800dca0:	111c      	asrs	r4, r3, #4
 800dca2:	2302      	movs	r3, #2
 800dca4:	9310      	str	r3, [sp, #64]	; 0x40
 800dca6:	9b02      	ldr	r3, [sp, #8]
 800dca8:	05db      	lsls	r3, r3, #23
 800dcaa:	d50b      	bpl.n	800dcc4 <_dtoa_r+0x308>
 800dcac:	4b2b      	ldr	r3, [pc, #172]	; (800dd5c <_dtoa_r+0x3a0>)
 800dcae:	400c      	ands	r4, r1
 800dcb0:	6a1a      	ldr	r2, [r3, #32]
 800dcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dcb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dcb8:	f7f3 fae6 	bl	8001288 <__aeabi_ddiv>
 800dcbc:	2303      	movs	r3, #3
 800dcbe:	9008      	str	r0, [sp, #32]
 800dcc0:	9109      	str	r1, [sp, #36]	; 0x24
 800dcc2:	9310      	str	r3, [sp, #64]	; 0x40
 800dcc4:	4b25      	ldr	r3, [pc, #148]	; (800dd5c <_dtoa_r+0x3a0>)
 800dcc6:	9314      	str	r3, [sp, #80]	; 0x50
 800dcc8:	2c00      	cmp	r4, #0
 800dcca:	d108      	bne.n	800dcde <_dtoa_r+0x322>
 800dccc:	9808      	ldr	r0, [sp, #32]
 800dcce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcd0:	002a      	movs	r2, r5
 800dcd2:	0033      	movs	r3, r6
 800dcd4:	f7f3 fad8 	bl	8001288 <__aeabi_ddiv>
 800dcd8:	9008      	str	r0, [sp, #32]
 800dcda:	9109      	str	r1, [sp, #36]	; 0x24
 800dcdc:	e05c      	b.n	800dd98 <_dtoa_r+0x3dc>
 800dcde:	2301      	movs	r3, #1
 800dce0:	421c      	tst	r4, r3
 800dce2:	d00b      	beq.n	800dcfc <_dtoa_r+0x340>
 800dce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dce6:	0028      	movs	r0, r5
 800dce8:	3301      	adds	r3, #1
 800dcea:	9310      	str	r3, [sp, #64]	; 0x40
 800dcec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcee:	0031      	movs	r1, r6
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	f7f3 feca 	bl	8001a8c <__aeabi_dmul>
 800dcf8:	0005      	movs	r5, r0
 800dcfa:	000e      	movs	r6, r1
 800dcfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcfe:	1064      	asrs	r4, r4, #1
 800dd00:	3308      	adds	r3, #8
 800dd02:	e7e0      	b.n	800dcc6 <_dtoa_r+0x30a>
 800dd04:	080101f5 	.word	0x080101f5
 800dd08:	0801020c 	.word	0x0801020c
 800dd0c:	7ff00000 	.word	0x7ff00000
 800dd10:	0000270f 	.word	0x0000270f
 800dd14:	080101f1 	.word	0x080101f1
 800dd18:	080101f4 	.word	0x080101f4
 800dd1c:	080101c4 	.word	0x080101c4
 800dd20:	080101c5 	.word	0x080101c5
 800dd24:	3ff00000 	.word	0x3ff00000
 800dd28:	fffffc01 	.word	0xfffffc01
 800dd2c:	3ff80000 	.word	0x3ff80000
 800dd30:	636f4361 	.word	0x636f4361
 800dd34:	3fd287a7 	.word	0x3fd287a7
 800dd38:	8b60c8b3 	.word	0x8b60c8b3
 800dd3c:	3fc68a28 	.word	0x3fc68a28
 800dd40:	509f79fb 	.word	0x509f79fb
 800dd44:	3fd34413 	.word	0x3fd34413
 800dd48:	08010300 	.word	0x08010300
 800dd4c:	00000432 	.word	0x00000432
 800dd50:	00000412 	.word	0x00000412
 800dd54:	fe100000 	.word	0xfe100000
 800dd58:	08010267 	.word	0x08010267
 800dd5c:	080102d8 	.word	0x080102d8
 800dd60:	2302      	movs	r3, #2
 800dd62:	9310      	str	r3, [sp, #64]	; 0x40
 800dd64:	9b02      	ldr	r3, [sp, #8]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d016      	beq.n	800dd98 <_dtoa_r+0x3dc>
 800dd6a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dd6c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dd6e:	425c      	negs	r4, r3
 800dd70:	230f      	movs	r3, #15
 800dd72:	4ab6      	ldr	r2, [pc, #728]	; (800e04c <_dtoa_r+0x690>)
 800dd74:	4023      	ands	r3, r4
 800dd76:	00db      	lsls	r3, r3, #3
 800dd78:	18d3      	adds	r3, r2, r3
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	f7f3 fe85 	bl	8001a8c <__aeabi_dmul>
 800dd82:	2601      	movs	r6, #1
 800dd84:	2300      	movs	r3, #0
 800dd86:	9008      	str	r0, [sp, #32]
 800dd88:	9109      	str	r1, [sp, #36]	; 0x24
 800dd8a:	4db1      	ldr	r5, [pc, #708]	; (800e050 <_dtoa_r+0x694>)
 800dd8c:	1124      	asrs	r4, r4, #4
 800dd8e:	2c00      	cmp	r4, #0
 800dd90:	d000      	beq.n	800dd94 <_dtoa_r+0x3d8>
 800dd92:	e094      	b.n	800debe <_dtoa_r+0x502>
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d19f      	bne.n	800dcd8 <_dtoa_r+0x31c>
 800dd98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d100      	bne.n	800dda0 <_dtoa_r+0x3e4>
 800dd9e:	e09b      	b.n	800ded8 <_dtoa_r+0x51c>
 800dda0:	9c08      	ldr	r4, [sp, #32]
 800dda2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dda4:	2200      	movs	r2, #0
 800dda6:	0020      	movs	r0, r4
 800dda8:	0029      	movs	r1, r5
 800ddaa:	4baa      	ldr	r3, [pc, #680]	; (800e054 <_dtoa_r+0x698>)
 800ddac:	f7f2 fb50 	bl	8000450 <__aeabi_dcmplt>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d100      	bne.n	800ddb6 <_dtoa_r+0x3fa>
 800ddb4:	e090      	b.n	800ded8 <_dtoa_r+0x51c>
 800ddb6:	9b07      	ldr	r3, [sp, #28]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d100      	bne.n	800ddbe <_dtoa_r+0x402>
 800ddbc:	e08c      	b.n	800ded8 <_dtoa_r+0x51c>
 800ddbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	dd46      	ble.n	800de52 <_dtoa_r+0x496>
 800ddc4:	9b02      	ldr	r3, [sp, #8]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	0020      	movs	r0, r4
 800ddca:	0029      	movs	r1, r5
 800ddcc:	1e5e      	subs	r6, r3, #1
 800ddce:	4ba2      	ldr	r3, [pc, #648]	; (800e058 <_dtoa_r+0x69c>)
 800ddd0:	f7f3 fe5c 	bl	8001a8c <__aeabi_dmul>
 800ddd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ddd6:	9008      	str	r0, [sp, #32]
 800ddd8:	9109      	str	r1, [sp, #36]	; 0x24
 800ddda:	3301      	adds	r3, #1
 800dddc:	9310      	str	r3, [sp, #64]	; 0x40
 800ddde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dde0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dde2:	9c08      	ldr	r4, [sp, #32]
 800dde4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dde6:	9314      	str	r3, [sp, #80]	; 0x50
 800dde8:	f7f4 fca2 	bl	8002730 <__aeabi_i2d>
 800ddec:	0022      	movs	r2, r4
 800ddee:	002b      	movs	r3, r5
 800ddf0:	f7f3 fe4c 	bl	8001a8c <__aeabi_dmul>
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	4b99      	ldr	r3, [pc, #612]	; (800e05c <_dtoa_r+0x6a0>)
 800ddf8:	f7f2 ff0a 	bl	8000c10 <__aeabi_dadd>
 800ddfc:	9010      	str	r0, [sp, #64]	; 0x40
 800ddfe:	9111      	str	r1, [sp, #68]	; 0x44
 800de00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de04:	9208      	str	r2, [sp, #32]
 800de06:	9309      	str	r3, [sp, #36]	; 0x24
 800de08:	4a95      	ldr	r2, [pc, #596]	; (800e060 <_dtoa_r+0x6a4>)
 800de0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de0c:	4694      	mov	ip, r2
 800de0e:	4463      	add	r3, ip
 800de10:	9317      	str	r3, [sp, #92]	; 0x5c
 800de12:	9309      	str	r3, [sp, #36]	; 0x24
 800de14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de16:	2b00      	cmp	r3, #0
 800de18:	d161      	bne.n	800dede <_dtoa_r+0x522>
 800de1a:	2200      	movs	r2, #0
 800de1c:	0020      	movs	r0, r4
 800de1e:	0029      	movs	r1, r5
 800de20:	4b90      	ldr	r3, [pc, #576]	; (800e064 <_dtoa_r+0x6a8>)
 800de22:	f7f4 f89f 	bl	8001f64 <__aeabi_dsub>
 800de26:	9a08      	ldr	r2, [sp, #32]
 800de28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de2a:	0004      	movs	r4, r0
 800de2c:	000d      	movs	r5, r1
 800de2e:	f7f2 fb23 	bl	8000478 <__aeabi_dcmpgt>
 800de32:	2800      	cmp	r0, #0
 800de34:	d000      	beq.n	800de38 <_dtoa_r+0x47c>
 800de36:	e2af      	b.n	800e398 <_dtoa_r+0x9dc>
 800de38:	488b      	ldr	r0, [pc, #556]	; (800e068 <_dtoa_r+0x6ac>)
 800de3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800de3c:	4684      	mov	ip, r0
 800de3e:	4461      	add	r1, ip
 800de40:	000b      	movs	r3, r1
 800de42:	0020      	movs	r0, r4
 800de44:	0029      	movs	r1, r5
 800de46:	9a08      	ldr	r2, [sp, #32]
 800de48:	f7f2 fb02 	bl	8000450 <__aeabi_dcmplt>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d000      	beq.n	800de52 <_dtoa_r+0x496>
 800de50:	e29f      	b.n	800e392 <_dtoa_r+0x9d6>
 800de52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de54:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800de56:	9308      	str	r3, [sp, #32]
 800de58:	9409      	str	r4, [sp, #36]	; 0x24
 800de5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	da00      	bge.n	800de62 <_dtoa_r+0x4a6>
 800de60:	e172      	b.n	800e148 <_dtoa_r+0x78c>
 800de62:	9a02      	ldr	r2, [sp, #8]
 800de64:	2a0e      	cmp	r2, #14
 800de66:	dd00      	ble.n	800de6a <_dtoa_r+0x4ae>
 800de68:	e16e      	b.n	800e148 <_dtoa_r+0x78c>
 800de6a:	4b78      	ldr	r3, [pc, #480]	; (800e04c <_dtoa_r+0x690>)
 800de6c:	00d2      	lsls	r2, r2, #3
 800de6e:	189b      	adds	r3, r3, r2
 800de70:	685c      	ldr	r4, [r3, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	930a      	str	r3, [sp, #40]	; 0x28
 800de76:	940b      	str	r4, [sp, #44]	; 0x2c
 800de78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	db00      	blt.n	800de80 <_dtoa_r+0x4c4>
 800de7e:	e0f7      	b.n	800e070 <_dtoa_r+0x6b4>
 800de80:	9b07      	ldr	r3, [sp, #28]
 800de82:	2b00      	cmp	r3, #0
 800de84:	dd00      	ble.n	800de88 <_dtoa_r+0x4cc>
 800de86:	e0f3      	b.n	800e070 <_dtoa_r+0x6b4>
 800de88:	d000      	beq.n	800de8c <_dtoa_r+0x4d0>
 800de8a:	e282      	b.n	800e392 <_dtoa_r+0x9d6>
 800de8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de90:	2200      	movs	r2, #0
 800de92:	4b74      	ldr	r3, [pc, #464]	; (800e064 <_dtoa_r+0x6a8>)
 800de94:	f7f3 fdfa 	bl	8001a8c <__aeabi_dmul>
 800de98:	9a08      	ldr	r2, [sp, #32]
 800de9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de9c:	f7f2 faf6 	bl	800048c <__aeabi_dcmpge>
 800dea0:	9e07      	ldr	r6, [sp, #28]
 800dea2:	0035      	movs	r5, r6
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d000      	beq.n	800deaa <_dtoa_r+0x4ee>
 800dea8:	e259      	b.n	800e35e <_dtoa_r+0x9a2>
 800deaa:	9b06      	ldr	r3, [sp, #24]
 800deac:	9a06      	ldr	r2, [sp, #24]
 800deae:	3301      	adds	r3, #1
 800deb0:	9308      	str	r3, [sp, #32]
 800deb2:	2331      	movs	r3, #49	; 0x31
 800deb4:	7013      	strb	r3, [r2, #0]
 800deb6:	9b02      	ldr	r3, [sp, #8]
 800deb8:	3301      	adds	r3, #1
 800deba:	9302      	str	r3, [sp, #8]
 800debc:	e254      	b.n	800e368 <_dtoa_r+0x9ac>
 800debe:	4234      	tst	r4, r6
 800dec0:	d007      	beq.n	800ded2 <_dtoa_r+0x516>
 800dec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dec4:	3301      	adds	r3, #1
 800dec6:	9310      	str	r3, [sp, #64]	; 0x40
 800dec8:	682a      	ldr	r2, [r5, #0]
 800deca:	686b      	ldr	r3, [r5, #4]
 800decc:	f7f3 fdde 	bl	8001a8c <__aeabi_dmul>
 800ded0:	0033      	movs	r3, r6
 800ded2:	1064      	asrs	r4, r4, #1
 800ded4:	3508      	adds	r5, #8
 800ded6:	e75a      	b.n	800dd8e <_dtoa_r+0x3d2>
 800ded8:	9e02      	ldr	r6, [sp, #8]
 800deda:	9b07      	ldr	r3, [sp, #28]
 800dedc:	e780      	b.n	800dde0 <_dtoa_r+0x424>
 800dede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dee2:	1e5a      	subs	r2, r3, #1
 800dee4:	4b59      	ldr	r3, [pc, #356]	; (800e04c <_dtoa_r+0x690>)
 800dee6:	00d2      	lsls	r2, r2, #3
 800dee8:	189b      	adds	r3, r3, r2
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	2900      	cmp	r1, #0
 800def0:	d051      	beq.n	800df96 <_dtoa_r+0x5da>
 800def2:	2000      	movs	r0, #0
 800def4:	495d      	ldr	r1, [pc, #372]	; (800e06c <_dtoa_r+0x6b0>)
 800def6:	f7f3 f9c7 	bl	8001288 <__aeabi_ddiv>
 800defa:	9a08      	ldr	r2, [sp, #32]
 800defc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800defe:	f7f4 f831 	bl	8001f64 <__aeabi_dsub>
 800df02:	9a06      	ldr	r2, [sp, #24]
 800df04:	9b06      	ldr	r3, [sp, #24]
 800df06:	4694      	mov	ip, r2
 800df08:	9317      	str	r3, [sp, #92]	; 0x5c
 800df0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df0c:	9010      	str	r0, [sp, #64]	; 0x40
 800df0e:	9111      	str	r1, [sp, #68]	; 0x44
 800df10:	4463      	add	r3, ip
 800df12:	9319      	str	r3, [sp, #100]	; 0x64
 800df14:	0029      	movs	r1, r5
 800df16:	0020      	movs	r0, r4
 800df18:	f7f4 fbd4 	bl	80026c4 <__aeabi_d2iz>
 800df1c:	9014      	str	r0, [sp, #80]	; 0x50
 800df1e:	f7f4 fc07 	bl	8002730 <__aeabi_i2d>
 800df22:	0002      	movs	r2, r0
 800df24:	000b      	movs	r3, r1
 800df26:	0020      	movs	r0, r4
 800df28:	0029      	movs	r1, r5
 800df2a:	f7f4 f81b 	bl	8001f64 <__aeabi_dsub>
 800df2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800df32:	3301      	adds	r3, #1
 800df34:	9308      	str	r3, [sp, #32]
 800df36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df38:	0004      	movs	r4, r0
 800df3a:	3330      	adds	r3, #48	; 0x30
 800df3c:	7013      	strb	r3, [r2, #0]
 800df3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df42:	000d      	movs	r5, r1
 800df44:	f7f2 fa84 	bl	8000450 <__aeabi_dcmplt>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d175      	bne.n	800e038 <_dtoa_r+0x67c>
 800df4c:	0022      	movs	r2, r4
 800df4e:	002b      	movs	r3, r5
 800df50:	2000      	movs	r0, #0
 800df52:	4940      	ldr	r1, [pc, #256]	; (800e054 <_dtoa_r+0x698>)
 800df54:	f7f4 f806 	bl	8001f64 <__aeabi_dsub>
 800df58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df5c:	f7f2 fa78 	bl	8000450 <__aeabi_dcmplt>
 800df60:	2800      	cmp	r0, #0
 800df62:	d000      	beq.n	800df66 <_dtoa_r+0x5aa>
 800df64:	e0d2      	b.n	800e10c <_dtoa_r+0x750>
 800df66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df68:	9a08      	ldr	r2, [sp, #32]
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d100      	bne.n	800df70 <_dtoa_r+0x5b4>
 800df6e:	e770      	b.n	800de52 <_dtoa_r+0x496>
 800df70:	9810      	ldr	r0, [sp, #64]	; 0x40
 800df72:	9911      	ldr	r1, [sp, #68]	; 0x44
 800df74:	2200      	movs	r2, #0
 800df76:	4b38      	ldr	r3, [pc, #224]	; (800e058 <_dtoa_r+0x69c>)
 800df78:	f7f3 fd88 	bl	8001a8c <__aeabi_dmul>
 800df7c:	4b36      	ldr	r3, [pc, #216]	; (800e058 <_dtoa_r+0x69c>)
 800df7e:	9010      	str	r0, [sp, #64]	; 0x40
 800df80:	9111      	str	r1, [sp, #68]	; 0x44
 800df82:	2200      	movs	r2, #0
 800df84:	0020      	movs	r0, r4
 800df86:	0029      	movs	r1, r5
 800df88:	f7f3 fd80 	bl	8001a8c <__aeabi_dmul>
 800df8c:	9b08      	ldr	r3, [sp, #32]
 800df8e:	0004      	movs	r4, r0
 800df90:	000d      	movs	r5, r1
 800df92:	9317      	str	r3, [sp, #92]	; 0x5c
 800df94:	e7be      	b.n	800df14 <_dtoa_r+0x558>
 800df96:	9808      	ldr	r0, [sp, #32]
 800df98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df9a:	f7f3 fd77 	bl	8001a8c <__aeabi_dmul>
 800df9e:	9a06      	ldr	r2, [sp, #24]
 800dfa0:	9b06      	ldr	r3, [sp, #24]
 800dfa2:	4694      	mov	ip, r2
 800dfa4:	9308      	str	r3, [sp, #32]
 800dfa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfa8:	9010      	str	r0, [sp, #64]	; 0x40
 800dfaa:	9111      	str	r1, [sp, #68]	; 0x44
 800dfac:	4463      	add	r3, ip
 800dfae:	9319      	str	r3, [sp, #100]	; 0x64
 800dfb0:	0029      	movs	r1, r5
 800dfb2:	0020      	movs	r0, r4
 800dfb4:	f7f4 fb86 	bl	80026c4 <__aeabi_d2iz>
 800dfb8:	9017      	str	r0, [sp, #92]	; 0x5c
 800dfba:	f7f4 fbb9 	bl	8002730 <__aeabi_i2d>
 800dfbe:	0002      	movs	r2, r0
 800dfc0:	000b      	movs	r3, r1
 800dfc2:	0020      	movs	r0, r4
 800dfc4:	0029      	movs	r1, r5
 800dfc6:	f7f3 ffcd 	bl	8001f64 <__aeabi_dsub>
 800dfca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfcc:	9a08      	ldr	r2, [sp, #32]
 800dfce:	3330      	adds	r3, #48	; 0x30
 800dfd0:	7013      	strb	r3, [r2, #0]
 800dfd2:	0013      	movs	r3, r2
 800dfd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	0004      	movs	r4, r0
 800dfda:	000d      	movs	r5, r1
 800dfdc:	9308      	str	r3, [sp, #32]
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d12c      	bne.n	800e03c <_dtoa_r+0x680>
 800dfe2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dfe4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dfe6:	9a06      	ldr	r2, [sp, #24]
 800dfe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfea:	4694      	mov	ip, r2
 800dfec:	4463      	add	r3, ip
 800dfee:	2200      	movs	r2, #0
 800dff0:	9308      	str	r3, [sp, #32]
 800dff2:	4b1e      	ldr	r3, [pc, #120]	; (800e06c <_dtoa_r+0x6b0>)
 800dff4:	f7f2 fe0c 	bl	8000c10 <__aeabi_dadd>
 800dff8:	0002      	movs	r2, r0
 800dffa:	000b      	movs	r3, r1
 800dffc:	0020      	movs	r0, r4
 800dffe:	0029      	movs	r1, r5
 800e000:	f7f2 fa3a 	bl	8000478 <__aeabi_dcmpgt>
 800e004:	2800      	cmp	r0, #0
 800e006:	d000      	beq.n	800e00a <_dtoa_r+0x64e>
 800e008:	e080      	b.n	800e10c <_dtoa_r+0x750>
 800e00a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e00c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e00e:	2000      	movs	r0, #0
 800e010:	4916      	ldr	r1, [pc, #88]	; (800e06c <_dtoa_r+0x6b0>)
 800e012:	f7f3 ffa7 	bl	8001f64 <__aeabi_dsub>
 800e016:	0002      	movs	r2, r0
 800e018:	000b      	movs	r3, r1
 800e01a:	0020      	movs	r0, r4
 800e01c:	0029      	movs	r1, r5
 800e01e:	f7f2 fa17 	bl	8000450 <__aeabi_dcmplt>
 800e022:	2800      	cmp	r0, #0
 800e024:	d100      	bne.n	800e028 <_dtoa_r+0x66c>
 800e026:	e714      	b.n	800de52 <_dtoa_r+0x496>
 800e028:	9b08      	ldr	r3, [sp, #32]
 800e02a:	001a      	movs	r2, r3
 800e02c:	3a01      	subs	r2, #1
 800e02e:	9208      	str	r2, [sp, #32]
 800e030:	7812      	ldrb	r2, [r2, #0]
 800e032:	2a30      	cmp	r2, #48	; 0x30
 800e034:	d0f8      	beq.n	800e028 <_dtoa_r+0x66c>
 800e036:	9308      	str	r3, [sp, #32]
 800e038:	9602      	str	r6, [sp, #8]
 800e03a:	e055      	b.n	800e0e8 <_dtoa_r+0x72c>
 800e03c:	2200      	movs	r2, #0
 800e03e:	4b06      	ldr	r3, [pc, #24]	; (800e058 <_dtoa_r+0x69c>)
 800e040:	f7f3 fd24 	bl	8001a8c <__aeabi_dmul>
 800e044:	0004      	movs	r4, r0
 800e046:	000d      	movs	r5, r1
 800e048:	e7b2      	b.n	800dfb0 <_dtoa_r+0x5f4>
 800e04a:	46c0      	nop			; (mov r8, r8)
 800e04c:	08010300 	.word	0x08010300
 800e050:	080102d8 	.word	0x080102d8
 800e054:	3ff00000 	.word	0x3ff00000
 800e058:	40240000 	.word	0x40240000
 800e05c:	401c0000 	.word	0x401c0000
 800e060:	fcc00000 	.word	0xfcc00000
 800e064:	40140000 	.word	0x40140000
 800e068:	7cc00000 	.word	0x7cc00000
 800e06c:	3fe00000 	.word	0x3fe00000
 800e070:	9b07      	ldr	r3, [sp, #28]
 800e072:	9e06      	ldr	r6, [sp, #24]
 800e074:	3b01      	subs	r3, #1
 800e076:	199b      	adds	r3, r3, r6
 800e078:	930c      	str	r3, [sp, #48]	; 0x30
 800e07a:	9c08      	ldr	r4, [sp, #32]
 800e07c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e07e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e082:	0020      	movs	r0, r4
 800e084:	0029      	movs	r1, r5
 800e086:	f7f3 f8ff 	bl	8001288 <__aeabi_ddiv>
 800e08a:	f7f4 fb1b 	bl	80026c4 <__aeabi_d2iz>
 800e08e:	9007      	str	r0, [sp, #28]
 800e090:	f7f4 fb4e 	bl	8002730 <__aeabi_i2d>
 800e094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e098:	f7f3 fcf8 	bl	8001a8c <__aeabi_dmul>
 800e09c:	0002      	movs	r2, r0
 800e09e:	000b      	movs	r3, r1
 800e0a0:	0020      	movs	r0, r4
 800e0a2:	0029      	movs	r1, r5
 800e0a4:	f7f3 ff5e 	bl	8001f64 <__aeabi_dsub>
 800e0a8:	0033      	movs	r3, r6
 800e0aa:	9a07      	ldr	r2, [sp, #28]
 800e0ac:	3601      	adds	r6, #1
 800e0ae:	3230      	adds	r2, #48	; 0x30
 800e0b0:	701a      	strb	r2, [r3, #0]
 800e0b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0b4:	9608      	str	r6, [sp, #32]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d139      	bne.n	800e12e <_dtoa_r+0x772>
 800e0ba:	0002      	movs	r2, r0
 800e0bc:	000b      	movs	r3, r1
 800e0be:	f7f2 fda7 	bl	8000c10 <__aeabi_dadd>
 800e0c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0c6:	0004      	movs	r4, r0
 800e0c8:	000d      	movs	r5, r1
 800e0ca:	f7f2 f9d5 	bl	8000478 <__aeabi_dcmpgt>
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d11b      	bne.n	800e10a <_dtoa_r+0x74e>
 800e0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0d6:	0020      	movs	r0, r4
 800e0d8:	0029      	movs	r1, r5
 800e0da:	f7f2 f9b3 	bl	8000444 <__aeabi_dcmpeq>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d002      	beq.n	800e0e8 <_dtoa_r+0x72c>
 800e0e2:	9b07      	ldr	r3, [sp, #28]
 800e0e4:	07db      	lsls	r3, r3, #31
 800e0e6:	d410      	bmi.n	800e10a <_dtoa_r+0x74e>
 800e0e8:	0038      	movs	r0, r7
 800e0ea:	9905      	ldr	r1, [sp, #20]
 800e0ec:	f000 fae4 	bl	800e6b8 <_Bfree>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	9a08      	ldr	r2, [sp, #32]
 800e0f4:	9802      	ldr	r0, [sp, #8]
 800e0f6:	7013      	strb	r3, [r2, #0]
 800e0f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	6018      	str	r0, [r3, #0]
 800e0fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e100:	2b00      	cmp	r3, #0
 800e102:	d100      	bne.n	800e106 <_dtoa_r+0x74a>
 800e104:	e4a6      	b.n	800da54 <_dtoa_r+0x98>
 800e106:	601a      	str	r2, [r3, #0]
 800e108:	e4a4      	b.n	800da54 <_dtoa_r+0x98>
 800e10a:	9e02      	ldr	r6, [sp, #8]
 800e10c:	9b08      	ldr	r3, [sp, #32]
 800e10e:	9308      	str	r3, [sp, #32]
 800e110:	3b01      	subs	r3, #1
 800e112:	781a      	ldrb	r2, [r3, #0]
 800e114:	2a39      	cmp	r2, #57	; 0x39
 800e116:	d106      	bne.n	800e126 <_dtoa_r+0x76a>
 800e118:	9a06      	ldr	r2, [sp, #24]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d1f7      	bne.n	800e10e <_dtoa_r+0x752>
 800e11e:	2230      	movs	r2, #48	; 0x30
 800e120:	9906      	ldr	r1, [sp, #24]
 800e122:	3601      	adds	r6, #1
 800e124:	700a      	strb	r2, [r1, #0]
 800e126:	781a      	ldrb	r2, [r3, #0]
 800e128:	3201      	adds	r2, #1
 800e12a:	701a      	strb	r2, [r3, #0]
 800e12c:	e784      	b.n	800e038 <_dtoa_r+0x67c>
 800e12e:	2200      	movs	r2, #0
 800e130:	4baa      	ldr	r3, [pc, #680]	; (800e3dc <_dtoa_r+0xa20>)
 800e132:	f7f3 fcab 	bl	8001a8c <__aeabi_dmul>
 800e136:	2200      	movs	r2, #0
 800e138:	2300      	movs	r3, #0
 800e13a:	0004      	movs	r4, r0
 800e13c:	000d      	movs	r5, r1
 800e13e:	f7f2 f981 	bl	8000444 <__aeabi_dcmpeq>
 800e142:	2800      	cmp	r0, #0
 800e144:	d09b      	beq.n	800e07e <_dtoa_r+0x6c2>
 800e146:	e7cf      	b.n	800e0e8 <_dtoa_r+0x72c>
 800e148:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e14a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e14c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e14e:	2d00      	cmp	r5, #0
 800e150:	d012      	beq.n	800e178 <_dtoa_r+0x7bc>
 800e152:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e154:	2a01      	cmp	r2, #1
 800e156:	dc66      	bgt.n	800e226 <_dtoa_r+0x86a>
 800e158:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e15a:	2a00      	cmp	r2, #0
 800e15c:	d05d      	beq.n	800e21a <_dtoa_r+0x85e>
 800e15e:	4aa0      	ldr	r2, [pc, #640]	; (800e3e0 <_dtoa_r+0xa24>)
 800e160:	189b      	adds	r3, r3, r2
 800e162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e164:	2101      	movs	r1, #1
 800e166:	18d2      	adds	r2, r2, r3
 800e168:	920a      	str	r2, [sp, #40]	; 0x28
 800e16a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e16c:	0038      	movs	r0, r7
 800e16e:	18d3      	adds	r3, r2, r3
 800e170:	930d      	str	r3, [sp, #52]	; 0x34
 800e172:	f000 fb51 	bl	800e818 <__i2b>
 800e176:	0005      	movs	r5, r0
 800e178:	2c00      	cmp	r4, #0
 800e17a:	dd0e      	ble.n	800e19a <_dtoa_r+0x7de>
 800e17c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e17e:	2b00      	cmp	r3, #0
 800e180:	dd0b      	ble.n	800e19a <_dtoa_r+0x7de>
 800e182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e184:	0023      	movs	r3, r4
 800e186:	4294      	cmp	r4, r2
 800e188:	dd00      	ble.n	800e18c <_dtoa_r+0x7d0>
 800e18a:	0013      	movs	r3, r2
 800e18c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e18e:	1ae4      	subs	r4, r4, r3
 800e190:	1ad2      	subs	r2, r2, r3
 800e192:	920a      	str	r2, [sp, #40]	; 0x28
 800e194:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e196:	1ad3      	subs	r3, r2, r3
 800e198:	930d      	str	r3, [sp, #52]	; 0x34
 800e19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d01f      	beq.n	800e1e0 <_dtoa_r+0x824>
 800e1a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d054      	beq.n	800e250 <_dtoa_r+0x894>
 800e1a6:	2e00      	cmp	r6, #0
 800e1a8:	dd11      	ble.n	800e1ce <_dtoa_r+0x812>
 800e1aa:	0029      	movs	r1, r5
 800e1ac:	0032      	movs	r2, r6
 800e1ae:	0038      	movs	r0, r7
 800e1b0:	f000 fbf8 	bl	800e9a4 <__pow5mult>
 800e1b4:	9a05      	ldr	r2, [sp, #20]
 800e1b6:	0001      	movs	r1, r0
 800e1b8:	0005      	movs	r5, r0
 800e1ba:	0038      	movs	r0, r7
 800e1bc:	f000 fb42 	bl	800e844 <__multiply>
 800e1c0:	9905      	ldr	r1, [sp, #20]
 800e1c2:	9014      	str	r0, [sp, #80]	; 0x50
 800e1c4:	0038      	movs	r0, r7
 800e1c6:	f000 fa77 	bl	800e6b8 <_Bfree>
 800e1ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e1cc:	9305      	str	r3, [sp, #20]
 800e1ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1d0:	1b9a      	subs	r2, r3, r6
 800e1d2:	42b3      	cmp	r3, r6
 800e1d4:	d004      	beq.n	800e1e0 <_dtoa_r+0x824>
 800e1d6:	0038      	movs	r0, r7
 800e1d8:	9905      	ldr	r1, [sp, #20]
 800e1da:	f000 fbe3 	bl	800e9a4 <__pow5mult>
 800e1de:	9005      	str	r0, [sp, #20]
 800e1e0:	2101      	movs	r1, #1
 800e1e2:	0038      	movs	r0, r7
 800e1e4:	f000 fb18 	bl	800e818 <__i2b>
 800e1e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1ea:	0006      	movs	r6, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	dd31      	ble.n	800e254 <_dtoa_r+0x898>
 800e1f0:	001a      	movs	r2, r3
 800e1f2:	0001      	movs	r1, r0
 800e1f4:	0038      	movs	r0, r7
 800e1f6:	f000 fbd5 	bl	800e9a4 <__pow5mult>
 800e1fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e1fc:	0006      	movs	r6, r0
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	dd2d      	ble.n	800e25e <_dtoa_r+0x8a2>
 800e202:	2300      	movs	r3, #0
 800e204:	930e      	str	r3, [sp, #56]	; 0x38
 800e206:	6933      	ldr	r3, [r6, #16]
 800e208:	3303      	adds	r3, #3
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	18f3      	adds	r3, r6, r3
 800e20e:	6858      	ldr	r0, [r3, #4]
 800e210:	f000 faba 	bl	800e788 <__hi0bits>
 800e214:	2320      	movs	r3, #32
 800e216:	1a18      	subs	r0, r3, r0
 800e218:	e039      	b.n	800e28e <_dtoa_r+0x8d2>
 800e21a:	2336      	movs	r3, #54	; 0x36
 800e21c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e21e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e220:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e222:	1a9b      	subs	r3, r3, r2
 800e224:	e79d      	b.n	800e162 <_dtoa_r+0x7a6>
 800e226:	9b07      	ldr	r3, [sp, #28]
 800e228:	1e5e      	subs	r6, r3, #1
 800e22a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e22c:	42b3      	cmp	r3, r6
 800e22e:	db07      	blt.n	800e240 <_dtoa_r+0x884>
 800e230:	1b9e      	subs	r6, r3, r6
 800e232:	9b07      	ldr	r3, [sp, #28]
 800e234:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e236:	2b00      	cmp	r3, #0
 800e238:	da93      	bge.n	800e162 <_dtoa_r+0x7a6>
 800e23a:	1ae4      	subs	r4, r4, r3
 800e23c:	2300      	movs	r3, #0
 800e23e:	e790      	b.n	800e162 <_dtoa_r+0x7a6>
 800e240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e244:	1af3      	subs	r3, r6, r3
 800e246:	18d3      	adds	r3, r2, r3
 800e248:	960e      	str	r6, [sp, #56]	; 0x38
 800e24a:	9315      	str	r3, [sp, #84]	; 0x54
 800e24c:	2600      	movs	r6, #0
 800e24e:	e7f0      	b.n	800e232 <_dtoa_r+0x876>
 800e250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e252:	e7c0      	b.n	800e1d6 <_dtoa_r+0x81a>
 800e254:	2300      	movs	r3, #0
 800e256:	930e      	str	r3, [sp, #56]	; 0x38
 800e258:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	dc13      	bgt.n	800e286 <_dtoa_r+0x8ca>
 800e25e:	2300      	movs	r3, #0
 800e260:	930e      	str	r3, [sp, #56]	; 0x38
 800e262:	9b08      	ldr	r3, [sp, #32]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10e      	bne.n	800e286 <_dtoa_r+0x8ca>
 800e268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e26a:	031b      	lsls	r3, r3, #12
 800e26c:	d10b      	bne.n	800e286 <_dtoa_r+0x8ca>
 800e26e:	4b5d      	ldr	r3, [pc, #372]	; (800e3e4 <_dtoa_r+0xa28>)
 800e270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e272:	4213      	tst	r3, r2
 800e274:	d007      	beq.n	800e286 <_dtoa_r+0x8ca>
 800e276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e278:	3301      	adds	r3, #1
 800e27a:	930a      	str	r3, [sp, #40]	; 0x28
 800e27c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e27e:	3301      	adds	r3, #1
 800e280:	930d      	str	r3, [sp, #52]	; 0x34
 800e282:	2301      	movs	r3, #1
 800e284:	930e      	str	r3, [sp, #56]	; 0x38
 800e286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e288:	2001      	movs	r0, #1
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1bb      	bne.n	800e206 <_dtoa_r+0x84a>
 800e28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e290:	221f      	movs	r2, #31
 800e292:	1818      	adds	r0, r3, r0
 800e294:	0003      	movs	r3, r0
 800e296:	4013      	ands	r3, r2
 800e298:	4210      	tst	r0, r2
 800e29a:	d046      	beq.n	800e32a <_dtoa_r+0x96e>
 800e29c:	3201      	adds	r2, #1
 800e29e:	1ad2      	subs	r2, r2, r3
 800e2a0:	2a04      	cmp	r2, #4
 800e2a2:	dd3f      	ble.n	800e324 <_dtoa_r+0x968>
 800e2a4:	221c      	movs	r2, #28
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2aa:	18e4      	adds	r4, r4, r3
 800e2ac:	18d2      	adds	r2, r2, r3
 800e2ae:	920a      	str	r2, [sp, #40]	; 0x28
 800e2b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2b2:	18d3      	adds	r3, r2, r3
 800e2b4:	930d      	str	r3, [sp, #52]	; 0x34
 800e2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	dd05      	ble.n	800e2c8 <_dtoa_r+0x90c>
 800e2bc:	001a      	movs	r2, r3
 800e2be:	0038      	movs	r0, r7
 800e2c0:	9905      	ldr	r1, [sp, #20]
 800e2c2:	f000 fbcb 	bl	800ea5c <__lshift>
 800e2c6:	9005      	str	r0, [sp, #20]
 800e2c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	dd05      	ble.n	800e2da <_dtoa_r+0x91e>
 800e2ce:	0031      	movs	r1, r6
 800e2d0:	001a      	movs	r2, r3
 800e2d2:	0038      	movs	r0, r7
 800e2d4:	f000 fbc2 	bl	800ea5c <__lshift>
 800e2d8:	0006      	movs	r6, r0
 800e2da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d026      	beq.n	800e32e <_dtoa_r+0x972>
 800e2e0:	0031      	movs	r1, r6
 800e2e2:	9805      	ldr	r0, [sp, #20]
 800e2e4:	f000 fc28 	bl	800eb38 <__mcmp>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	da20      	bge.n	800e32e <_dtoa_r+0x972>
 800e2ec:	9b02      	ldr	r3, [sp, #8]
 800e2ee:	220a      	movs	r2, #10
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	9302      	str	r3, [sp, #8]
 800e2f4:	0038      	movs	r0, r7
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	9905      	ldr	r1, [sp, #20]
 800e2fa:	f000 fa01 	bl	800e700 <__multadd>
 800e2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e300:	9005      	str	r0, [sp, #20]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d100      	bne.n	800e308 <_dtoa_r+0x94c>
 800e306:	e166      	b.n	800e5d6 <_dtoa_r+0xc1a>
 800e308:	2300      	movs	r3, #0
 800e30a:	0029      	movs	r1, r5
 800e30c:	220a      	movs	r2, #10
 800e30e:	0038      	movs	r0, r7
 800e310:	f000 f9f6 	bl	800e700 <__multadd>
 800e314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e316:	0005      	movs	r5, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	dc47      	bgt.n	800e3ac <_dtoa_r+0x9f0>
 800e31c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e31e:	2b02      	cmp	r3, #2
 800e320:	dc0d      	bgt.n	800e33e <_dtoa_r+0x982>
 800e322:	e043      	b.n	800e3ac <_dtoa_r+0x9f0>
 800e324:	2a04      	cmp	r2, #4
 800e326:	d0c6      	beq.n	800e2b6 <_dtoa_r+0x8fa>
 800e328:	0013      	movs	r3, r2
 800e32a:	331c      	adds	r3, #28
 800e32c:	e7bc      	b.n	800e2a8 <_dtoa_r+0x8ec>
 800e32e:	9b07      	ldr	r3, [sp, #28]
 800e330:	2b00      	cmp	r3, #0
 800e332:	dc35      	bgt.n	800e3a0 <_dtoa_r+0x9e4>
 800e334:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e336:	2b02      	cmp	r3, #2
 800e338:	dd32      	ble.n	800e3a0 <_dtoa_r+0x9e4>
 800e33a:	9b07      	ldr	r3, [sp, #28]
 800e33c:	930c      	str	r3, [sp, #48]	; 0x30
 800e33e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e340:	2b00      	cmp	r3, #0
 800e342:	d10c      	bne.n	800e35e <_dtoa_r+0x9a2>
 800e344:	0031      	movs	r1, r6
 800e346:	2205      	movs	r2, #5
 800e348:	0038      	movs	r0, r7
 800e34a:	f000 f9d9 	bl	800e700 <__multadd>
 800e34e:	0006      	movs	r6, r0
 800e350:	0001      	movs	r1, r0
 800e352:	9805      	ldr	r0, [sp, #20]
 800e354:	f000 fbf0 	bl	800eb38 <__mcmp>
 800e358:	2800      	cmp	r0, #0
 800e35a:	dd00      	ble.n	800e35e <_dtoa_r+0x9a2>
 800e35c:	e5a5      	b.n	800deaa <_dtoa_r+0x4ee>
 800e35e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e360:	43db      	mvns	r3, r3
 800e362:	9302      	str	r3, [sp, #8]
 800e364:	9b06      	ldr	r3, [sp, #24]
 800e366:	9308      	str	r3, [sp, #32]
 800e368:	2400      	movs	r4, #0
 800e36a:	0031      	movs	r1, r6
 800e36c:	0038      	movs	r0, r7
 800e36e:	f000 f9a3 	bl	800e6b8 <_Bfree>
 800e372:	2d00      	cmp	r5, #0
 800e374:	d100      	bne.n	800e378 <_dtoa_r+0x9bc>
 800e376:	e6b7      	b.n	800e0e8 <_dtoa_r+0x72c>
 800e378:	2c00      	cmp	r4, #0
 800e37a:	d005      	beq.n	800e388 <_dtoa_r+0x9cc>
 800e37c:	42ac      	cmp	r4, r5
 800e37e:	d003      	beq.n	800e388 <_dtoa_r+0x9cc>
 800e380:	0021      	movs	r1, r4
 800e382:	0038      	movs	r0, r7
 800e384:	f000 f998 	bl	800e6b8 <_Bfree>
 800e388:	0029      	movs	r1, r5
 800e38a:	0038      	movs	r0, r7
 800e38c:	f000 f994 	bl	800e6b8 <_Bfree>
 800e390:	e6aa      	b.n	800e0e8 <_dtoa_r+0x72c>
 800e392:	2600      	movs	r6, #0
 800e394:	0035      	movs	r5, r6
 800e396:	e7e2      	b.n	800e35e <_dtoa_r+0x9a2>
 800e398:	9602      	str	r6, [sp, #8]
 800e39a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800e39c:	0035      	movs	r5, r6
 800e39e:	e584      	b.n	800deaa <_dtoa_r+0x4ee>
 800e3a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d100      	bne.n	800e3a8 <_dtoa_r+0x9ec>
 800e3a6:	e0ce      	b.n	800e546 <_dtoa_r+0xb8a>
 800e3a8:	9b07      	ldr	r3, [sp, #28]
 800e3aa:	930c      	str	r3, [sp, #48]	; 0x30
 800e3ac:	2c00      	cmp	r4, #0
 800e3ae:	dd05      	ble.n	800e3bc <_dtoa_r+0xa00>
 800e3b0:	0029      	movs	r1, r5
 800e3b2:	0022      	movs	r2, r4
 800e3b4:	0038      	movs	r0, r7
 800e3b6:	f000 fb51 	bl	800ea5c <__lshift>
 800e3ba:	0005      	movs	r5, r0
 800e3bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3be:	0028      	movs	r0, r5
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d022      	beq.n	800e40a <_dtoa_r+0xa4e>
 800e3c4:	0038      	movs	r0, r7
 800e3c6:	6869      	ldr	r1, [r5, #4]
 800e3c8:	f000 f932 	bl	800e630 <_Balloc>
 800e3cc:	1e04      	subs	r4, r0, #0
 800e3ce:	d10f      	bne.n	800e3f0 <_dtoa_r+0xa34>
 800e3d0:	0002      	movs	r2, r0
 800e3d2:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <_dtoa_r+0xa2c>)
 800e3d4:	4905      	ldr	r1, [pc, #20]	; (800e3ec <_dtoa_r+0xa30>)
 800e3d6:	f7ff fb06 	bl	800d9e6 <_dtoa_r+0x2a>
 800e3da:	46c0      	nop			; (mov r8, r8)
 800e3dc:	40240000 	.word	0x40240000
 800e3e0:	00000433 	.word	0x00000433
 800e3e4:	7ff00000 	.word	0x7ff00000
 800e3e8:	08010267 	.word	0x08010267
 800e3ec:	000002ea 	.word	0x000002ea
 800e3f0:	0029      	movs	r1, r5
 800e3f2:	692b      	ldr	r3, [r5, #16]
 800e3f4:	310c      	adds	r1, #12
 800e3f6:	1c9a      	adds	r2, r3, #2
 800e3f8:	0092      	lsls	r2, r2, #2
 800e3fa:	300c      	adds	r0, #12
 800e3fc:	f7fe fcbe 	bl	800cd7c <memcpy>
 800e400:	2201      	movs	r2, #1
 800e402:	0021      	movs	r1, r4
 800e404:	0038      	movs	r0, r7
 800e406:	f000 fb29 	bl	800ea5c <__lshift>
 800e40a:	9b06      	ldr	r3, [sp, #24]
 800e40c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e40e:	930a      	str	r3, [sp, #40]	; 0x28
 800e410:	3b01      	subs	r3, #1
 800e412:	189b      	adds	r3, r3, r2
 800e414:	2201      	movs	r2, #1
 800e416:	002c      	movs	r4, r5
 800e418:	0005      	movs	r5, r0
 800e41a:	9314      	str	r3, [sp, #80]	; 0x50
 800e41c:	9b08      	ldr	r3, [sp, #32]
 800e41e:	4013      	ands	r3, r2
 800e420:	930f      	str	r3, [sp, #60]	; 0x3c
 800e422:	0031      	movs	r1, r6
 800e424:	9805      	ldr	r0, [sp, #20]
 800e426:	f7ff fa3d 	bl	800d8a4 <quorem>
 800e42a:	0003      	movs	r3, r0
 800e42c:	0021      	movs	r1, r4
 800e42e:	3330      	adds	r3, #48	; 0x30
 800e430:	900d      	str	r0, [sp, #52]	; 0x34
 800e432:	9805      	ldr	r0, [sp, #20]
 800e434:	9307      	str	r3, [sp, #28]
 800e436:	f000 fb7f 	bl	800eb38 <__mcmp>
 800e43a:	002a      	movs	r2, r5
 800e43c:	900e      	str	r0, [sp, #56]	; 0x38
 800e43e:	0031      	movs	r1, r6
 800e440:	0038      	movs	r0, r7
 800e442:	f000 fb95 	bl	800eb70 <__mdiff>
 800e446:	68c3      	ldr	r3, [r0, #12]
 800e448:	9008      	str	r0, [sp, #32]
 800e44a:	9310      	str	r3, [sp, #64]	; 0x40
 800e44c:	2301      	movs	r3, #1
 800e44e:	930c      	str	r3, [sp, #48]	; 0x30
 800e450:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e452:	2b00      	cmp	r3, #0
 800e454:	d104      	bne.n	800e460 <_dtoa_r+0xaa4>
 800e456:	0001      	movs	r1, r0
 800e458:	9805      	ldr	r0, [sp, #20]
 800e45a:	f000 fb6d 	bl	800eb38 <__mcmp>
 800e45e:	900c      	str	r0, [sp, #48]	; 0x30
 800e460:	0038      	movs	r0, r7
 800e462:	9908      	ldr	r1, [sp, #32]
 800e464:	f000 f928 	bl	800e6b8 <_Bfree>
 800e468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e46a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e46c:	3301      	adds	r3, #1
 800e46e:	9308      	str	r3, [sp, #32]
 800e470:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e472:	4313      	orrs	r3, r2
 800e474:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e476:	4313      	orrs	r3, r2
 800e478:	d10c      	bne.n	800e494 <_dtoa_r+0xad8>
 800e47a:	9b07      	ldr	r3, [sp, #28]
 800e47c:	2b39      	cmp	r3, #57	; 0x39
 800e47e:	d026      	beq.n	800e4ce <_dtoa_r+0xb12>
 800e480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e482:	2b00      	cmp	r3, #0
 800e484:	dd02      	ble.n	800e48c <_dtoa_r+0xad0>
 800e486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e488:	3331      	adds	r3, #49	; 0x31
 800e48a:	9307      	str	r3, [sp, #28]
 800e48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e48e:	9a07      	ldr	r2, [sp, #28]
 800e490:	701a      	strb	r2, [r3, #0]
 800e492:	e76a      	b.n	800e36a <_dtoa_r+0x9ae>
 800e494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e496:	2b00      	cmp	r3, #0
 800e498:	db04      	blt.n	800e4a4 <_dtoa_r+0xae8>
 800e49a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e49c:	4313      	orrs	r3, r2
 800e49e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	d11f      	bne.n	800e4e4 <_dtoa_r+0xb28>
 800e4a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	ddf0      	ble.n	800e48c <_dtoa_r+0xad0>
 800e4aa:	9905      	ldr	r1, [sp, #20]
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	0038      	movs	r0, r7
 800e4b0:	f000 fad4 	bl	800ea5c <__lshift>
 800e4b4:	0031      	movs	r1, r6
 800e4b6:	9005      	str	r0, [sp, #20]
 800e4b8:	f000 fb3e 	bl	800eb38 <__mcmp>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	dc03      	bgt.n	800e4c8 <_dtoa_r+0xb0c>
 800e4c0:	d1e4      	bne.n	800e48c <_dtoa_r+0xad0>
 800e4c2:	9b07      	ldr	r3, [sp, #28]
 800e4c4:	07db      	lsls	r3, r3, #31
 800e4c6:	d5e1      	bpl.n	800e48c <_dtoa_r+0xad0>
 800e4c8:	9b07      	ldr	r3, [sp, #28]
 800e4ca:	2b39      	cmp	r3, #57	; 0x39
 800e4cc:	d1db      	bne.n	800e486 <_dtoa_r+0xaca>
 800e4ce:	2339      	movs	r3, #57	; 0x39
 800e4d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4d2:	7013      	strb	r3, [r2, #0]
 800e4d4:	9b08      	ldr	r3, [sp, #32]
 800e4d6:	9308      	str	r3, [sp, #32]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	2a39      	cmp	r2, #57	; 0x39
 800e4de:	d068      	beq.n	800e5b2 <_dtoa_r+0xbf6>
 800e4e0:	3201      	adds	r2, #1
 800e4e2:	e7d5      	b.n	800e490 <_dtoa_r+0xad4>
 800e4e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	dd07      	ble.n	800e4fa <_dtoa_r+0xb3e>
 800e4ea:	9b07      	ldr	r3, [sp, #28]
 800e4ec:	2b39      	cmp	r3, #57	; 0x39
 800e4ee:	d0ee      	beq.n	800e4ce <_dtoa_r+0xb12>
 800e4f0:	9b07      	ldr	r3, [sp, #28]
 800e4f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	7013      	strb	r3, [r2, #0]
 800e4f8:	e737      	b.n	800e36a <_dtoa_r+0x9ae>
 800e4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4fc:	9a07      	ldr	r2, [sp, #28]
 800e4fe:	701a      	strb	r2, [r3, #0]
 800e500:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e504:	4293      	cmp	r3, r2
 800e506:	d03e      	beq.n	800e586 <_dtoa_r+0xbca>
 800e508:	2300      	movs	r3, #0
 800e50a:	220a      	movs	r2, #10
 800e50c:	9905      	ldr	r1, [sp, #20]
 800e50e:	0038      	movs	r0, r7
 800e510:	f000 f8f6 	bl	800e700 <__multadd>
 800e514:	2300      	movs	r3, #0
 800e516:	9005      	str	r0, [sp, #20]
 800e518:	220a      	movs	r2, #10
 800e51a:	0021      	movs	r1, r4
 800e51c:	0038      	movs	r0, r7
 800e51e:	42ac      	cmp	r4, r5
 800e520:	d106      	bne.n	800e530 <_dtoa_r+0xb74>
 800e522:	f000 f8ed 	bl	800e700 <__multadd>
 800e526:	0004      	movs	r4, r0
 800e528:	0005      	movs	r5, r0
 800e52a:	9b08      	ldr	r3, [sp, #32]
 800e52c:	930a      	str	r3, [sp, #40]	; 0x28
 800e52e:	e778      	b.n	800e422 <_dtoa_r+0xa66>
 800e530:	f000 f8e6 	bl	800e700 <__multadd>
 800e534:	0029      	movs	r1, r5
 800e536:	0004      	movs	r4, r0
 800e538:	2300      	movs	r3, #0
 800e53a:	220a      	movs	r2, #10
 800e53c:	0038      	movs	r0, r7
 800e53e:	f000 f8df 	bl	800e700 <__multadd>
 800e542:	0005      	movs	r5, r0
 800e544:	e7f1      	b.n	800e52a <_dtoa_r+0xb6e>
 800e546:	9b07      	ldr	r3, [sp, #28]
 800e548:	930c      	str	r3, [sp, #48]	; 0x30
 800e54a:	2400      	movs	r4, #0
 800e54c:	0031      	movs	r1, r6
 800e54e:	9805      	ldr	r0, [sp, #20]
 800e550:	f7ff f9a8 	bl	800d8a4 <quorem>
 800e554:	9b06      	ldr	r3, [sp, #24]
 800e556:	3030      	adds	r0, #48	; 0x30
 800e558:	5518      	strb	r0, [r3, r4]
 800e55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e55c:	3401      	adds	r4, #1
 800e55e:	9007      	str	r0, [sp, #28]
 800e560:	42a3      	cmp	r3, r4
 800e562:	dd07      	ble.n	800e574 <_dtoa_r+0xbb8>
 800e564:	2300      	movs	r3, #0
 800e566:	220a      	movs	r2, #10
 800e568:	0038      	movs	r0, r7
 800e56a:	9905      	ldr	r1, [sp, #20]
 800e56c:	f000 f8c8 	bl	800e700 <__multadd>
 800e570:	9005      	str	r0, [sp, #20]
 800e572:	e7eb      	b.n	800e54c <_dtoa_r+0xb90>
 800e574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e576:	2001      	movs	r0, #1
 800e578:	2b00      	cmp	r3, #0
 800e57a:	dd00      	ble.n	800e57e <_dtoa_r+0xbc2>
 800e57c:	0018      	movs	r0, r3
 800e57e:	2400      	movs	r4, #0
 800e580:	9b06      	ldr	r3, [sp, #24]
 800e582:	181b      	adds	r3, r3, r0
 800e584:	9308      	str	r3, [sp, #32]
 800e586:	9905      	ldr	r1, [sp, #20]
 800e588:	2201      	movs	r2, #1
 800e58a:	0038      	movs	r0, r7
 800e58c:	f000 fa66 	bl	800ea5c <__lshift>
 800e590:	0031      	movs	r1, r6
 800e592:	9005      	str	r0, [sp, #20]
 800e594:	f000 fad0 	bl	800eb38 <__mcmp>
 800e598:	2800      	cmp	r0, #0
 800e59a:	dc9b      	bgt.n	800e4d4 <_dtoa_r+0xb18>
 800e59c:	d102      	bne.n	800e5a4 <_dtoa_r+0xbe8>
 800e59e:	9b07      	ldr	r3, [sp, #28]
 800e5a0:	07db      	lsls	r3, r3, #31
 800e5a2:	d497      	bmi.n	800e4d4 <_dtoa_r+0xb18>
 800e5a4:	9b08      	ldr	r3, [sp, #32]
 800e5a6:	9308      	str	r3, [sp, #32]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	781a      	ldrb	r2, [r3, #0]
 800e5ac:	2a30      	cmp	r2, #48	; 0x30
 800e5ae:	d0fa      	beq.n	800e5a6 <_dtoa_r+0xbea>
 800e5b0:	e6db      	b.n	800e36a <_dtoa_r+0x9ae>
 800e5b2:	9a06      	ldr	r2, [sp, #24]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d18e      	bne.n	800e4d6 <_dtoa_r+0xb1a>
 800e5b8:	9b02      	ldr	r3, [sp, #8]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	9302      	str	r3, [sp, #8]
 800e5be:	2331      	movs	r3, #49	; 0x31
 800e5c0:	e799      	b.n	800e4f6 <_dtoa_r+0xb3a>
 800e5c2:	4b09      	ldr	r3, [pc, #36]	; (800e5e8 <_dtoa_r+0xc2c>)
 800e5c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e5c6:	9306      	str	r3, [sp, #24]
 800e5c8:	4b08      	ldr	r3, [pc, #32]	; (800e5ec <_dtoa_r+0xc30>)
 800e5ca:	2a00      	cmp	r2, #0
 800e5cc:	d001      	beq.n	800e5d2 <_dtoa_r+0xc16>
 800e5ce:	f7ff fa3f 	bl	800da50 <_dtoa_r+0x94>
 800e5d2:	f7ff fa3f 	bl	800da54 <_dtoa_r+0x98>
 800e5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	dcb6      	bgt.n	800e54a <_dtoa_r+0xb8e>
 800e5dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	dd00      	ble.n	800e5e4 <_dtoa_r+0xc28>
 800e5e2:	e6ac      	b.n	800e33e <_dtoa_r+0x982>
 800e5e4:	e7b1      	b.n	800e54a <_dtoa_r+0xb8e>
 800e5e6:	46c0      	nop			; (mov r8, r8)
 800e5e8:	080101e8 	.word	0x080101e8
 800e5ec:	080101f0 	.word	0x080101f0

0800e5f0 <_localeconv_r>:
 800e5f0:	4800      	ldr	r0, [pc, #0]	; (800e5f4 <_localeconv_r+0x4>)
 800e5f2:	4770      	bx	lr
 800e5f4:	2000016c 	.word	0x2000016c

0800e5f8 <memchr>:
 800e5f8:	b2c9      	uxtb	r1, r1
 800e5fa:	1882      	adds	r2, r0, r2
 800e5fc:	4290      	cmp	r0, r2
 800e5fe:	d101      	bne.n	800e604 <memchr+0xc>
 800e600:	2000      	movs	r0, #0
 800e602:	4770      	bx	lr
 800e604:	7803      	ldrb	r3, [r0, #0]
 800e606:	428b      	cmp	r3, r1
 800e608:	d0fb      	beq.n	800e602 <memchr+0xa>
 800e60a:	3001      	adds	r0, #1
 800e60c:	e7f6      	b.n	800e5fc <memchr+0x4>
	...

0800e610 <__malloc_lock>:
 800e610:	b510      	push	{r4, lr}
 800e612:	4802      	ldr	r0, [pc, #8]	; (800e61c <__malloc_lock+0xc>)
 800e614:	f000 fd65 	bl	800f0e2 <__retarget_lock_acquire_recursive>
 800e618:	bd10      	pop	{r4, pc}
 800e61a:	46c0      	nop			; (mov r8, r8)
 800e61c:	200009d4 	.word	0x200009d4

0800e620 <__malloc_unlock>:
 800e620:	b510      	push	{r4, lr}
 800e622:	4802      	ldr	r0, [pc, #8]	; (800e62c <__malloc_unlock+0xc>)
 800e624:	f000 fd5e 	bl	800f0e4 <__retarget_lock_release_recursive>
 800e628:	bd10      	pop	{r4, pc}
 800e62a:	46c0      	nop			; (mov r8, r8)
 800e62c:	200009d4 	.word	0x200009d4

0800e630 <_Balloc>:
 800e630:	b570      	push	{r4, r5, r6, lr}
 800e632:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e634:	0006      	movs	r6, r0
 800e636:	000c      	movs	r4, r1
 800e638:	2d00      	cmp	r5, #0
 800e63a:	d10e      	bne.n	800e65a <_Balloc+0x2a>
 800e63c:	2010      	movs	r0, #16
 800e63e:	f7fe fb85 	bl	800cd4c <malloc>
 800e642:	1e02      	subs	r2, r0, #0
 800e644:	6270      	str	r0, [r6, #36]	; 0x24
 800e646:	d104      	bne.n	800e652 <_Balloc+0x22>
 800e648:	2166      	movs	r1, #102	; 0x66
 800e64a:	4b19      	ldr	r3, [pc, #100]	; (800e6b0 <_Balloc+0x80>)
 800e64c:	4819      	ldr	r0, [pc, #100]	; (800e6b4 <_Balloc+0x84>)
 800e64e:	f000 fd19 	bl	800f084 <__assert_func>
 800e652:	6045      	str	r5, [r0, #4]
 800e654:	6085      	str	r5, [r0, #8]
 800e656:	6005      	str	r5, [r0, #0]
 800e658:	60c5      	str	r5, [r0, #12]
 800e65a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800e65c:	68eb      	ldr	r3, [r5, #12]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d013      	beq.n	800e68a <_Balloc+0x5a>
 800e662:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e664:	00a2      	lsls	r2, r4, #2
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	189b      	adds	r3, r3, r2
 800e66a:	6818      	ldr	r0, [r3, #0]
 800e66c:	2800      	cmp	r0, #0
 800e66e:	d118      	bne.n	800e6a2 <_Balloc+0x72>
 800e670:	2101      	movs	r1, #1
 800e672:	000d      	movs	r5, r1
 800e674:	40a5      	lsls	r5, r4
 800e676:	1d6a      	adds	r2, r5, #5
 800e678:	0030      	movs	r0, r6
 800e67a:	0092      	lsls	r2, r2, #2
 800e67c:	f000 fb74 	bl	800ed68 <_calloc_r>
 800e680:	2800      	cmp	r0, #0
 800e682:	d00c      	beq.n	800e69e <_Balloc+0x6e>
 800e684:	6044      	str	r4, [r0, #4]
 800e686:	6085      	str	r5, [r0, #8]
 800e688:	e00d      	b.n	800e6a6 <_Balloc+0x76>
 800e68a:	2221      	movs	r2, #33	; 0x21
 800e68c:	2104      	movs	r1, #4
 800e68e:	0030      	movs	r0, r6
 800e690:	f000 fb6a 	bl	800ed68 <_calloc_r>
 800e694:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e696:	60e8      	str	r0, [r5, #12]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1e1      	bne.n	800e662 <_Balloc+0x32>
 800e69e:	2000      	movs	r0, #0
 800e6a0:	bd70      	pop	{r4, r5, r6, pc}
 800e6a2:	6802      	ldr	r2, [r0, #0]
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	6103      	str	r3, [r0, #16]
 800e6aa:	60c3      	str	r3, [r0, #12]
 800e6ac:	e7f8      	b.n	800e6a0 <_Balloc+0x70>
 800e6ae:	46c0      	nop			; (mov r8, r8)
 800e6b0:	080101f5 	.word	0x080101f5
 800e6b4:	08010278 	.word	0x08010278

0800e6b8 <_Bfree>:
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e6bc:	0005      	movs	r5, r0
 800e6be:	000c      	movs	r4, r1
 800e6c0:	2e00      	cmp	r6, #0
 800e6c2:	d10e      	bne.n	800e6e2 <_Bfree+0x2a>
 800e6c4:	2010      	movs	r0, #16
 800e6c6:	f7fe fb41 	bl	800cd4c <malloc>
 800e6ca:	1e02      	subs	r2, r0, #0
 800e6cc:	6268      	str	r0, [r5, #36]	; 0x24
 800e6ce:	d104      	bne.n	800e6da <_Bfree+0x22>
 800e6d0:	218a      	movs	r1, #138	; 0x8a
 800e6d2:	4b09      	ldr	r3, [pc, #36]	; (800e6f8 <_Bfree+0x40>)
 800e6d4:	4809      	ldr	r0, [pc, #36]	; (800e6fc <_Bfree+0x44>)
 800e6d6:	f000 fcd5 	bl	800f084 <__assert_func>
 800e6da:	6046      	str	r6, [r0, #4]
 800e6dc:	6086      	str	r6, [r0, #8]
 800e6de:	6006      	str	r6, [r0, #0]
 800e6e0:	60c6      	str	r6, [r0, #12]
 800e6e2:	2c00      	cmp	r4, #0
 800e6e4:	d007      	beq.n	800e6f6 <_Bfree+0x3e>
 800e6e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e6e8:	6862      	ldr	r2, [r4, #4]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	0092      	lsls	r2, r2, #2
 800e6ee:	189b      	adds	r3, r3, r2
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	6022      	str	r2, [r4, #0]
 800e6f4:	601c      	str	r4, [r3, #0]
 800e6f6:	bd70      	pop	{r4, r5, r6, pc}
 800e6f8:	080101f5 	.word	0x080101f5
 800e6fc:	08010278 	.word	0x08010278

0800e700 <__multadd>:
 800e700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e702:	000e      	movs	r6, r1
 800e704:	9001      	str	r0, [sp, #4]
 800e706:	000c      	movs	r4, r1
 800e708:	001d      	movs	r5, r3
 800e70a:	2000      	movs	r0, #0
 800e70c:	690f      	ldr	r7, [r1, #16]
 800e70e:	3614      	adds	r6, #20
 800e710:	6833      	ldr	r3, [r6, #0]
 800e712:	3001      	adds	r0, #1
 800e714:	b299      	uxth	r1, r3
 800e716:	4351      	muls	r1, r2
 800e718:	0c1b      	lsrs	r3, r3, #16
 800e71a:	4353      	muls	r3, r2
 800e71c:	1949      	adds	r1, r1, r5
 800e71e:	0c0d      	lsrs	r5, r1, #16
 800e720:	195b      	adds	r3, r3, r5
 800e722:	0c1d      	lsrs	r5, r3, #16
 800e724:	b289      	uxth	r1, r1
 800e726:	041b      	lsls	r3, r3, #16
 800e728:	185b      	adds	r3, r3, r1
 800e72a:	c608      	stmia	r6!, {r3}
 800e72c:	4287      	cmp	r7, r0
 800e72e:	dcef      	bgt.n	800e710 <__multadd+0x10>
 800e730:	2d00      	cmp	r5, #0
 800e732:	d022      	beq.n	800e77a <__multadd+0x7a>
 800e734:	68a3      	ldr	r3, [r4, #8]
 800e736:	42bb      	cmp	r3, r7
 800e738:	dc19      	bgt.n	800e76e <__multadd+0x6e>
 800e73a:	6863      	ldr	r3, [r4, #4]
 800e73c:	9801      	ldr	r0, [sp, #4]
 800e73e:	1c59      	adds	r1, r3, #1
 800e740:	f7ff ff76 	bl	800e630 <_Balloc>
 800e744:	1e06      	subs	r6, r0, #0
 800e746:	d105      	bne.n	800e754 <__multadd+0x54>
 800e748:	0002      	movs	r2, r0
 800e74a:	21b5      	movs	r1, #181	; 0xb5
 800e74c:	4b0c      	ldr	r3, [pc, #48]	; (800e780 <__multadd+0x80>)
 800e74e:	480d      	ldr	r0, [pc, #52]	; (800e784 <__multadd+0x84>)
 800e750:	f000 fc98 	bl	800f084 <__assert_func>
 800e754:	0021      	movs	r1, r4
 800e756:	6923      	ldr	r3, [r4, #16]
 800e758:	310c      	adds	r1, #12
 800e75a:	1c9a      	adds	r2, r3, #2
 800e75c:	0092      	lsls	r2, r2, #2
 800e75e:	300c      	adds	r0, #12
 800e760:	f7fe fb0c 	bl	800cd7c <memcpy>
 800e764:	0021      	movs	r1, r4
 800e766:	9801      	ldr	r0, [sp, #4]
 800e768:	f7ff ffa6 	bl	800e6b8 <_Bfree>
 800e76c:	0034      	movs	r4, r6
 800e76e:	1d3b      	adds	r3, r7, #4
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	18e3      	adds	r3, r4, r3
 800e774:	605d      	str	r5, [r3, #4]
 800e776:	1c7b      	adds	r3, r7, #1
 800e778:	6123      	str	r3, [r4, #16]
 800e77a:	0020      	movs	r0, r4
 800e77c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	08010267 	.word	0x08010267
 800e784:	08010278 	.word	0x08010278

0800e788 <__hi0bits>:
 800e788:	0003      	movs	r3, r0
 800e78a:	0c02      	lsrs	r2, r0, #16
 800e78c:	2000      	movs	r0, #0
 800e78e:	4282      	cmp	r2, r0
 800e790:	d101      	bne.n	800e796 <__hi0bits+0xe>
 800e792:	041b      	lsls	r3, r3, #16
 800e794:	3010      	adds	r0, #16
 800e796:	0e1a      	lsrs	r2, r3, #24
 800e798:	d101      	bne.n	800e79e <__hi0bits+0x16>
 800e79a:	3008      	adds	r0, #8
 800e79c:	021b      	lsls	r3, r3, #8
 800e79e:	0f1a      	lsrs	r2, r3, #28
 800e7a0:	d101      	bne.n	800e7a6 <__hi0bits+0x1e>
 800e7a2:	3004      	adds	r0, #4
 800e7a4:	011b      	lsls	r3, r3, #4
 800e7a6:	0f9a      	lsrs	r2, r3, #30
 800e7a8:	d101      	bne.n	800e7ae <__hi0bits+0x26>
 800e7aa:	3002      	adds	r0, #2
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	db03      	blt.n	800e7ba <__hi0bits+0x32>
 800e7b2:	3001      	adds	r0, #1
 800e7b4:	005b      	lsls	r3, r3, #1
 800e7b6:	d400      	bmi.n	800e7ba <__hi0bits+0x32>
 800e7b8:	2020      	movs	r0, #32
 800e7ba:	4770      	bx	lr

0800e7bc <__lo0bits>:
 800e7bc:	6803      	ldr	r3, [r0, #0]
 800e7be:	0002      	movs	r2, r0
 800e7c0:	2107      	movs	r1, #7
 800e7c2:	0018      	movs	r0, r3
 800e7c4:	4008      	ands	r0, r1
 800e7c6:	420b      	tst	r3, r1
 800e7c8:	d00d      	beq.n	800e7e6 <__lo0bits+0x2a>
 800e7ca:	3906      	subs	r1, #6
 800e7cc:	2000      	movs	r0, #0
 800e7ce:	420b      	tst	r3, r1
 800e7d0:	d105      	bne.n	800e7de <__lo0bits+0x22>
 800e7d2:	3002      	adds	r0, #2
 800e7d4:	4203      	tst	r3, r0
 800e7d6:	d003      	beq.n	800e7e0 <__lo0bits+0x24>
 800e7d8:	40cb      	lsrs	r3, r1
 800e7da:	0008      	movs	r0, r1
 800e7dc:	6013      	str	r3, [r2, #0]
 800e7de:	4770      	bx	lr
 800e7e0:	089b      	lsrs	r3, r3, #2
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	e7fb      	b.n	800e7de <__lo0bits+0x22>
 800e7e6:	b299      	uxth	r1, r3
 800e7e8:	2900      	cmp	r1, #0
 800e7ea:	d101      	bne.n	800e7f0 <__lo0bits+0x34>
 800e7ec:	2010      	movs	r0, #16
 800e7ee:	0c1b      	lsrs	r3, r3, #16
 800e7f0:	b2d9      	uxtb	r1, r3
 800e7f2:	2900      	cmp	r1, #0
 800e7f4:	d101      	bne.n	800e7fa <__lo0bits+0x3e>
 800e7f6:	3008      	adds	r0, #8
 800e7f8:	0a1b      	lsrs	r3, r3, #8
 800e7fa:	0719      	lsls	r1, r3, #28
 800e7fc:	d101      	bne.n	800e802 <__lo0bits+0x46>
 800e7fe:	3004      	adds	r0, #4
 800e800:	091b      	lsrs	r3, r3, #4
 800e802:	0799      	lsls	r1, r3, #30
 800e804:	d101      	bne.n	800e80a <__lo0bits+0x4e>
 800e806:	3002      	adds	r0, #2
 800e808:	089b      	lsrs	r3, r3, #2
 800e80a:	07d9      	lsls	r1, r3, #31
 800e80c:	d4e9      	bmi.n	800e7e2 <__lo0bits+0x26>
 800e80e:	3001      	adds	r0, #1
 800e810:	085b      	lsrs	r3, r3, #1
 800e812:	d1e6      	bne.n	800e7e2 <__lo0bits+0x26>
 800e814:	2020      	movs	r0, #32
 800e816:	e7e2      	b.n	800e7de <__lo0bits+0x22>

0800e818 <__i2b>:
 800e818:	b510      	push	{r4, lr}
 800e81a:	000c      	movs	r4, r1
 800e81c:	2101      	movs	r1, #1
 800e81e:	f7ff ff07 	bl	800e630 <_Balloc>
 800e822:	2800      	cmp	r0, #0
 800e824:	d106      	bne.n	800e834 <__i2b+0x1c>
 800e826:	21a0      	movs	r1, #160	; 0xa0
 800e828:	0002      	movs	r2, r0
 800e82a:	4b04      	ldr	r3, [pc, #16]	; (800e83c <__i2b+0x24>)
 800e82c:	4804      	ldr	r0, [pc, #16]	; (800e840 <__i2b+0x28>)
 800e82e:	0049      	lsls	r1, r1, #1
 800e830:	f000 fc28 	bl	800f084 <__assert_func>
 800e834:	2301      	movs	r3, #1
 800e836:	6144      	str	r4, [r0, #20]
 800e838:	6103      	str	r3, [r0, #16]
 800e83a:	bd10      	pop	{r4, pc}
 800e83c:	08010267 	.word	0x08010267
 800e840:	08010278 	.word	0x08010278

0800e844 <__multiply>:
 800e844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e846:	690b      	ldr	r3, [r1, #16]
 800e848:	0014      	movs	r4, r2
 800e84a:	6912      	ldr	r2, [r2, #16]
 800e84c:	000d      	movs	r5, r1
 800e84e:	b089      	sub	sp, #36	; 0x24
 800e850:	4293      	cmp	r3, r2
 800e852:	da01      	bge.n	800e858 <__multiply+0x14>
 800e854:	0025      	movs	r5, r4
 800e856:	000c      	movs	r4, r1
 800e858:	692f      	ldr	r7, [r5, #16]
 800e85a:	6926      	ldr	r6, [r4, #16]
 800e85c:	6869      	ldr	r1, [r5, #4]
 800e85e:	19bb      	adds	r3, r7, r6
 800e860:	9302      	str	r3, [sp, #8]
 800e862:	68ab      	ldr	r3, [r5, #8]
 800e864:	19ba      	adds	r2, r7, r6
 800e866:	4293      	cmp	r3, r2
 800e868:	da00      	bge.n	800e86c <__multiply+0x28>
 800e86a:	3101      	adds	r1, #1
 800e86c:	f7ff fee0 	bl	800e630 <_Balloc>
 800e870:	9001      	str	r0, [sp, #4]
 800e872:	2800      	cmp	r0, #0
 800e874:	d106      	bne.n	800e884 <__multiply+0x40>
 800e876:	215e      	movs	r1, #94	; 0x5e
 800e878:	0002      	movs	r2, r0
 800e87a:	4b48      	ldr	r3, [pc, #288]	; (800e99c <__multiply+0x158>)
 800e87c:	4848      	ldr	r0, [pc, #288]	; (800e9a0 <__multiply+0x15c>)
 800e87e:	31ff      	adds	r1, #255	; 0xff
 800e880:	f000 fc00 	bl	800f084 <__assert_func>
 800e884:	9b01      	ldr	r3, [sp, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	3314      	adds	r3, #20
 800e88a:	469c      	mov	ip, r3
 800e88c:	19bb      	adds	r3, r7, r6
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	4463      	add	r3, ip
 800e892:	9303      	str	r3, [sp, #12]
 800e894:	4663      	mov	r3, ip
 800e896:	9903      	ldr	r1, [sp, #12]
 800e898:	428b      	cmp	r3, r1
 800e89a:	d32c      	bcc.n	800e8f6 <__multiply+0xb2>
 800e89c:	002b      	movs	r3, r5
 800e89e:	0022      	movs	r2, r4
 800e8a0:	3314      	adds	r3, #20
 800e8a2:	00bf      	lsls	r7, r7, #2
 800e8a4:	3214      	adds	r2, #20
 800e8a6:	9306      	str	r3, [sp, #24]
 800e8a8:	00b6      	lsls	r6, r6, #2
 800e8aa:	19db      	adds	r3, r3, r7
 800e8ac:	9304      	str	r3, [sp, #16]
 800e8ae:	1993      	adds	r3, r2, r6
 800e8b0:	9307      	str	r3, [sp, #28]
 800e8b2:	2304      	movs	r3, #4
 800e8b4:	9305      	str	r3, [sp, #20]
 800e8b6:	002b      	movs	r3, r5
 800e8b8:	9904      	ldr	r1, [sp, #16]
 800e8ba:	3315      	adds	r3, #21
 800e8bc:	9200      	str	r2, [sp, #0]
 800e8be:	4299      	cmp	r1, r3
 800e8c0:	d305      	bcc.n	800e8ce <__multiply+0x8a>
 800e8c2:	1b4b      	subs	r3, r1, r5
 800e8c4:	3b15      	subs	r3, #21
 800e8c6:	089b      	lsrs	r3, r3, #2
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	9305      	str	r3, [sp, #20]
 800e8ce:	9b07      	ldr	r3, [sp, #28]
 800e8d0:	9a00      	ldr	r2, [sp, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d311      	bcc.n	800e8fa <__multiply+0xb6>
 800e8d6:	9b02      	ldr	r3, [sp, #8]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	dd06      	ble.n	800e8ea <__multiply+0xa6>
 800e8dc:	9b03      	ldr	r3, [sp, #12]
 800e8de:	3b04      	subs	r3, #4
 800e8e0:	9303      	str	r3, [sp, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d053      	beq.n	800e992 <__multiply+0x14e>
 800e8ea:	9b01      	ldr	r3, [sp, #4]
 800e8ec:	9a02      	ldr	r2, [sp, #8]
 800e8ee:	0018      	movs	r0, r3
 800e8f0:	611a      	str	r2, [r3, #16]
 800e8f2:	b009      	add	sp, #36	; 0x24
 800e8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f6:	c304      	stmia	r3!, {r2}
 800e8f8:	e7cd      	b.n	800e896 <__multiply+0x52>
 800e8fa:	9b00      	ldr	r3, [sp, #0]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	b298      	uxth	r0, r3
 800e900:	2800      	cmp	r0, #0
 800e902:	d01b      	beq.n	800e93c <__multiply+0xf8>
 800e904:	4667      	mov	r7, ip
 800e906:	2400      	movs	r4, #0
 800e908:	9e06      	ldr	r6, [sp, #24]
 800e90a:	ce02      	ldmia	r6!, {r1}
 800e90c:	683a      	ldr	r2, [r7, #0]
 800e90e:	b28b      	uxth	r3, r1
 800e910:	4343      	muls	r3, r0
 800e912:	b292      	uxth	r2, r2
 800e914:	189b      	adds	r3, r3, r2
 800e916:	191b      	adds	r3, r3, r4
 800e918:	0c0c      	lsrs	r4, r1, #16
 800e91a:	4344      	muls	r4, r0
 800e91c:	683a      	ldr	r2, [r7, #0]
 800e91e:	0c11      	lsrs	r1, r2, #16
 800e920:	1861      	adds	r1, r4, r1
 800e922:	0c1c      	lsrs	r4, r3, #16
 800e924:	1909      	adds	r1, r1, r4
 800e926:	0c0c      	lsrs	r4, r1, #16
 800e928:	b29b      	uxth	r3, r3
 800e92a:	0409      	lsls	r1, r1, #16
 800e92c:	430b      	orrs	r3, r1
 800e92e:	c708      	stmia	r7!, {r3}
 800e930:	9b04      	ldr	r3, [sp, #16]
 800e932:	42b3      	cmp	r3, r6
 800e934:	d8e9      	bhi.n	800e90a <__multiply+0xc6>
 800e936:	4663      	mov	r3, ip
 800e938:	9a05      	ldr	r2, [sp, #20]
 800e93a:	509c      	str	r4, [r3, r2]
 800e93c:	9b00      	ldr	r3, [sp, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	0c1e      	lsrs	r6, r3, #16
 800e942:	d020      	beq.n	800e986 <__multiply+0x142>
 800e944:	4663      	mov	r3, ip
 800e946:	002c      	movs	r4, r5
 800e948:	4660      	mov	r0, ip
 800e94a:	2700      	movs	r7, #0
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3414      	adds	r4, #20
 800e950:	6822      	ldr	r2, [r4, #0]
 800e952:	b29b      	uxth	r3, r3
 800e954:	b291      	uxth	r1, r2
 800e956:	4371      	muls	r1, r6
 800e958:	6802      	ldr	r2, [r0, #0]
 800e95a:	0c12      	lsrs	r2, r2, #16
 800e95c:	1889      	adds	r1, r1, r2
 800e95e:	19cf      	adds	r7, r1, r7
 800e960:	0439      	lsls	r1, r7, #16
 800e962:	430b      	orrs	r3, r1
 800e964:	6003      	str	r3, [r0, #0]
 800e966:	cc02      	ldmia	r4!, {r1}
 800e968:	6843      	ldr	r3, [r0, #4]
 800e96a:	0c09      	lsrs	r1, r1, #16
 800e96c:	4371      	muls	r1, r6
 800e96e:	b29b      	uxth	r3, r3
 800e970:	0c3f      	lsrs	r7, r7, #16
 800e972:	18cb      	adds	r3, r1, r3
 800e974:	9a04      	ldr	r2, [sp, #16]
 800e976:	19db      	adds	r3, r3, r7
 800e978:	0c1f      	lsrs	r7, r3, #16
 800e97a:	3004      	adds	r0, #4
 800e97c:	42a2      	cmp	r2, r4
 800e97e:	d8e7      	bhi.n	800e950 <__multiply+0x10c>
 800e980:	4662      	mov	r2, ip
 800e982:	9905      	ldr	r1, [sp, #20]
 800e984:	5053      	str	r3, [r2, r1]
 800e986:	9b00      	ldr	r3, [sp, #0]
 800e988:	3304      	adds	r3, #4
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	2304      	movs	r3, #4
 800e98e:	449c      	add	ip, r3
 800e990:	e79d      	b.n	800e8ce <__multiply+0x8a>
 800e992:	9b02      	ldr	r3, [sp, #8]
 800e994:	3b01      	subs	r3, #1
 800e996:	9302      	str	r3, [sp, #8]
 800e998:	e79d      	b.n	800e8d6 <__multiply+0x92>
 800e99a:	46c0      	nop			; (mov r8, r8)
 800e99c:	08010267 	.word	0x08010267
 800e9a0:	08010278 	.word	0x08010278

0800e9a4 <__pow5mult>:
 800e9a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	0015      	movs	r5, r2
 800e9aa:	0007      	movs	r7, r0
 800e9ac:	000e      	movs	r6, r1
 800e9ae:	401a      	ands	r2, r3
 800e9b0:	421d      	tst	r5, r3
 800e9b2:	d008      	beq.n	800e9c6 <__pow5mult+0x22>
 800e9b4:	4925      	ldr	r1, [pc, #148]	; (800ea4c <__pow5mult+0xa8>)
 800e9b6:	3a01      	subs	r2, #1
 800e9b8:	0092      	lsls	r2, r2, #2
 800e9ba:	5852      	ldr	r2, [r2, r1]
 800e9bc:	2300      	movs	r3, #0
 800e9be:	0031      	movs	r1, r6
 800e9c0:	f7ff fe9e 	bl	800e700 <__multadd>
 800e9c4:	0006      	movs	r6, r0
 800e9c6:	10ad      	asrs	r5, r5, #2
 800e9c8:	d03d      	beq.n	800ea46 <__pow5mult+0xa2>
 800e9ca:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e9cc:	2c00      	cmp	r4, #0
 800e9ce:	d10f      	bne.n	800e9f0 <__pow5mult+0x4c>
 800e9d0:	2010      	movs	r0, #16
 800e9d2:	f7fe f9bb 	bl	800cd4c <malloc>
 800e9d6:	1e02      	subs	r2, r0, #0
 800e9d8:	6278      	str	r0, [r7, #36]	; 0x24
 800e9da:	d105      	bne.n	800e9e8 <__pow5mult+0x44>
 800e9dc:	21d7      	movs	r1, #215	; 0xd7
 800e9de:	4b1c      	ldr	r3, [pc, #112]	; (800ea50 <__pow5mult+0xac>)
 800e9e0:	481c      	ldr	r0, [pc, #112]	; (800ea54 <__pow5mult+0xb0>)
 800e9e2:	0049      	lsls	r1, r1, #1
 800e9e4:	f000 fb4e 	bl	800f084 <__assert_func>
 800e9e8:	6044      	str	r4, [r0, #4]
 800e9ea:	6084      	str	r4, [r0, #8]
 800e9ec:	6004      	str	r4, [r0, #0]
 800e9ee:	60c4      	str	r4, [r0, #12]
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	689c      	ldr	r4, [r3, #8]
 800e9f4:	9301      	str	r3, [sp, #4]
 800e9f6:	2c00      	cmp	r4, #0
 800e9f8:	d108      	bne.n	800ea0c <__pow5mult+0x68>
 800e9fa:	0038      	movs	r0, r7
 800e9fc:	4916      	ldr	r1, [pc, #88]	; (800ea58 <__pow5mult+0xb4>)
 800e9fe:	f7ff ff0b 	bl	800e818 <__i2b>
 800ea02:	9b01      	ldr	r3, [sp, #4]
 800ea04:	0004      	movs	r4, r0
 800ea06:	6098      	str	r0, [r3, #8]
 800ea08:	2300      	movs	r3, #0
 800ea0a:	6003      	str	r3, [r0, #0]
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	421d      	tst	r5, r3
 800ea10:	d00a      	beq.n	800ea28 <__pow5mult+0x84>
 800ea12:	0031      	movs	r1, r6
 800ea14:	0022      	movs	r2, r4
 800ea16:	0038      	movs	r0, r7
 800ea18:	f7ff ff14 	bl	800e844 <__multiply>
 800ea1c:	0031      	movs	r1, r6
 800ea1e:	9001      	str	r0, [sp, #4]
 800ea20:	0038      	movs	r0, r7
 800ea22:	f7ff fe49 	bl	800e6b8 <_Bfree>
 800ea26:	9e01      	ldr	r6, [sp, #4]
 800ea28:	106d      	asrs	r5, r5, #1
 800ea2a:	d00c      	beq.n	800ea46 <__pow5mult+0xa2>
 800ea2c:	6820      	ldr	r0, [r4, #0]
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d107      	bne.n	800ea42 <__pow5mult+0x9e>
 800ea32:	0022      	movs	r2, r4
 800ea34:	0021      	movs	r1, r4
 800ea36:	0038      	movs	r0, r7
 800ea38:	f7ff ff04 	bl	800e844 <__multiply>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	6020      	str	r0, [r4, #0]
 800ea40:	6003      	str	r3, [r0, #0]
 800ea42:	0004      	movs	r4, r0
 800ea44:	e7e2      	b.n	800ea0c <__pow5mult+0x68>
 800ea46:	0030      	movs	r0, r6
 800ea48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ea4a:	46c0      	nop			; (mov r8, r8)
 800ea4c:	080103c8 	.word	0x080103c8
 800ea50:	080101f5 	.word	0x080101f5
 800ea54:	08010278 	.word	0x08010278
 800ea58:	00000271 	.word	0x00000271

0800ea5c <__lshift>:
 800ea5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea5e:	000c      	movs	r4, r1
 800ea60:	0017      	movs	r7, r2
 800ea62:	6923      	ldr	r3, [r4, #16]
 800ea64:	1155      	asrs	r5, r2, #5
 800ea66:	b087      	sub	sp, #28
 800ea68:	18eb      	adds	r3, r5, r3
 800ea6a:	9302      	str	r3, [sp, #8]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	9301      	str	r3, [sp, #4]
 800ea70:	6849      	ldr	r1, [r1, #4]
 800ea72:	68a3      	ldr	r3, [r4, #8]
 800ea74:	9004      	str	r0, [sp, #16]
 800ea76:	9a01      	ldr	r2, [sp, #4]
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	db10      	blt.n	800ea9e <__lshift+0x42>
 800ea7c:	9804      	ldr	r0, [sp, #16]
 800ea7e:	f7ff fdd7 	bl	800e630 <_Balloc>
 800ea82:	2300      	movs	r3, #0
 800ea84:	0002      	movs	r2, r0
 800ea86:	0006      	movs	r6, r0
 800ea88:	0019      	movs	r1, r3
 800ea8a:	3214      	adds	r2, #20
 800ea8c:	4298      	cmp	r0, r3
 800ea8e:	d10c      	bne.n	800eaaa <__lshift+0x4e>
 800ea90:	21da      	movs	r1, #218	; 0xda
 800ea92:	0002      	movs	r2, r0
 800ea94:	4b26      	ldr	r3, [pc, #152]	; (800eb30 <__lshift+0xd4>)
 800ea96:	4827      	ldr	r0, [pc, #156]	; (800eb34 <__lshift+0xd8>)
 800ea98:	31ff      	adds	r1, #255	; 0xff
 800ea9a:	f000 faf3 	bl	800f084 <__assert_func>
 800ea9e:	3101      	adds	r1, #1
 800eaa0:	005b      	lsls	r3, r3, #1
 800eaa2:	e7e8      	b.n	800ea76 <__lshift+0x1a>
 800eaa4:	0098      	lsls	r0, r3, #2
 800eaa6:	5011      	str	r1, [r2, r0]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	42ab      	cmp	r3, r5
 800eaac:	dbfa      	blt.n	800eaa4 <__lshift+0x48>
 800eaae:	43eb      	mvns	r3, r5
 800eab0:	17db      	asrs	r3, r3, #31
 800eab2:	401d      	ands	r5, r3
 800eab4:	211f      	movs	r1, #31
 800eab6:	0023      	movs	r3, r4
 800eab8:	0038      	movs	r0, r7
 800eaba:	00ad      	lsls	r5, r5, #2
 800eabc:	1955      	adds	r5, r2, r5
 800eabe:	6922      	ldr	r2, [r4, #16]
 800eac0:	3314      	adds	r3, #20
 800eac2:	0092      	lsls	r2, r2, #2
 800eac4:	4008      	ands	r0, r1
 800eac6:	4684      	mov	ip, r0
 800eac8:	189a      	adds	r2, r3, r2
 800eaca:	420f      	tst	r7, r1
 800eacc:	d02a      	beq.n	800eb24 <__lshift+0xc8>
 800eace:	3101      	adds	r1, #1
 800ead0:	1a09      	subs	r1, r1, r0
 800ead2:	9105      	str	r1, [sp, #20]
 800ead4:	2100      	movs	r1, #0
 800ead6:	9503      	str	r5, [sp, #12]
 800ead8:	4667      	mov	r7, ip
 800eada:	6818      	ldr	r0, [r3, #0]
 800eadc:	40b8      	lsls	r0, r7
 800eade:	4301      	orrs	r1, r0
 800eae0:	9803      	ldr	r0, [sp, #12]
 800eae2:	c002      	stmia	r0!, {r1}
 800eae4:	cb02      	ldmia	r3!, {r1}
 800eae6:	9003      	str	r0, [sp, #12]
 800eae8:	9805      	ldr	r0, [sp, #20]
 800eaea:	40c1      	lsrs	r1, r0
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d8f3      	bhi.n	800ead8 <__lshift+0x7c>
 800eaf0:	0020      	movs	r0, r4
 800eaf2:	3015      	adds	r0, #21
 800eaf4:	2304      	movs	r3, #4
 800eaf6:	4282      	cmp	r2, r0
 800eaf8:	d304      	bcc.n	800eb04 <__lshift+0xa8>
 800eafa:	1b13      	subs	r3, r2, r4
 800eafc:	3b15      	subs	r3, #21
 800eafe:	089b      	lsrs	r3, r3, #2
 800eb00:	3301      	adds	r3, #1
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	50e9      	str	r1, [r5, r3]
 800eb06:	2900      	cmp	r1, #0
 800eb08:	d002      	beq.n	800eb10 <__lshift+0xb4>
 800eb0a:	9b02      	ldr	r3, [sp, #8]
 800eb0c:	3302      	adds	r3, #2
 800eb0e:	9301      	str	r3, [sp, #4]
 800eb10:	9b01      	ldr	r3, [sp, #4]
 800eb12:	9804      	ldr	r0, [sp, #16]
 800eb14:	3b01      	subs	r3, #1
 800eb16:	0021      	movs	r1, r4
 800eb18:	6133      	str	r3, [r6, #16]
 800eb1a:	f7ff fdcd 	bl	800e6b8 <_Bfree>
 800eb1e:	0030      	movs	r0, r6
 800eb20:	b007      	add	sp, #28
 800eb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb24:	cb02      	ldmia	r3!, {r1}
 800eb26:	c502      	stmia	r5!, {r1}
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d8fb      	bhi.n	800eb24 <__lshift+0xc8>
 800eb2c:	e7f0      	b.n	800eb10 <__lshift+0xb4>
 800eb2e:	46c0      	nop			; (mov r8, r8)
 800eb30:	08010267 	.word	0x08010267
 800eb34:	08010278 	.word	0x08010278

0800eb38 <__mcmp>:
 800eb38:	6902      	ldr	r2, [r0, #16]
 800eb3a:	690b      	ldr	r3, [r1, #16]
 800eb3c:	b530      	push	{r4, r5, lr}
 800eb3e:	0004      	movs	r4, r0
 800eb40:	1ad0      	subs	r0, r2, r3
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d10d      	bne.n	800eb62 <__mcmp+0x2a>
 800eb46:	009b      	lsls	r3, r3, #2
 800eb48:	3414      	adds	r4, #20
 800eb4a:	3114      	adds	r1, #20
 800eb4c:	18e2      	adds	r2, r4, r3
 800eb4e:	18c9      	adds	r1, r1, r3
 800eb50:	3a04      	subs	r2, #4
 800eb52:	3904      	subs	r1, #4
 800eb54:	6815      	ldr	r5, [r2, #0]
 800eb56:	680b      	ldr	r3, [r1, #0]
 800eb58:	429d      	cmp	r5, r3
 800eb5a:	d003      	beq.n	800eb64 <__mcmp+0x2c>
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	429d      	cmp	r5, r3
 800eb60:	d303      	bcc.n	800eb6a <__mcmp+0x32>
 800eb62:	bd30      	pop	{r4, r5, pc}
 800eb64:	4294      	cmp	r4, r2
 800eb66:	d3f3      	bcc.n	800eb50 <__mcmp+0x18>
 800eb68:	e7fb      	b.n	800eb62 <__mcmp+0x2a>
 800eb6a:	4240      	negs	r0, r0
 800eb6c:	e7f9      	b.n	800eb62 <__mcmp+0x2a>
	...

0800eb70 <__mdiff>:
 800eb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb72:	000e      	movs	r6, r1
 800eb74:	0007      	movs	r7, r0
 800eb76:	0011      	movs	r1, r2
 800eb78:	0030      	movs	r0, r6
 800eb7a:	b087      	sub	sp, #28
 800eb7c:	0014      	movs	r4, r2
 800eb7e:	f7ff ffdb 	bl	800eb38 <__mcmp>
 800eb82:	1e05      	subs	r5, r0, #0
 800eb84:	d110      	bne.n	800eba8 <__mdiff+0x38>
 800eb86:	0001      	movs	r1, r0
 800eb88:	0038      	movs	r0, r7
 800eb8a:	f7ff fd51 	bl	800e630 <_Balloc>
 800eb8e:	1e02      	subs	r2, r0, #0
 800eb90:	d104      	bne.n	800eb9c <__mdiff+0x2c>
 800eb92:	4b40      	ldr	r3, [pc, #256]	; (800ec94 <__mdiff+0x124>)
 800eb94:	4940      	ldr	r1, [pc, #256]	; (800ec98 <__mdiff+0x128>)
 800eb96:	4841      	ldr	r0, [pc, #260]	; (800ec9c <__mdiff+0x12c>)
 800eb98:	f000 fa74 	bl	800f084 <__assert_func>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	6145      	str	r5, [r0, #20]
 800eba0:	6103      	str	r3, [r0, #16]
 800eba2:	0010      	movs	r0, r2
 800eba4:	b007      	add	sp, #28
 800eba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba8:	2301      	movs	r3, #1
 800ebaa:	9301      	str	r3, [sp, #4]
 800ebac:	2800      	cmp	r0, #0
 800ebae:	db04      	blt.n	800ebba <__mdiff+0x4a>
 800ebb0:	0023      	movs	r3, r4
 800ebb2:	0034      	movs	r4, r6
 800ebb4:	001e      	movs	r6, r3
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	9301      	str	r3, [sp, #4]
 800ebba:	0038      	movs	r0, r7
 800ebbc:	6861      	ldr	r1, [r4, #4]
 800ebbe:	f7ff fd37 	bl	800e630 <_Balloc>
 800ebc2:	1e02      	subs	r2, r0, #0
 800ebc4:	d103      	bne.n	800ebce <__mdiff+0x5e>
 800ebc6:	2190      	movs	r1, #144	; 0x90
 800ebc8:	4b32      	ldr	r3, [pc, #200]	; (800ec94 <__mdiff+0x124>)
 800ebca:	0089      	lsls	r1, r1, #2
 800ebcc:	e7e3      	b.n	800eb96 <__mdiff+0x26>
 800ebce:	9b01      	ldr	r3, [sp, #4]
 800ebd0:	2700      	movs	r7, #0
 800ebd2:	60c3      	str	r3, [r0, #12]
 800ebd4:	6920      	ldr	r0, [r4, #16]
 800ebd6:	3414      	adds	r4, #20
 800ebd8:	9401      	str	r4, [sp, #4]
 800ebda:	9b01      	ldr	r3, [sp, #4]
 800ebdc:	0084      	lsls	r4, r0, #2
 800ebde:	191b      	adds	r3, r3, r4
 800ebe0:	0034      	movs	r4, r6
 800ebe2:	9302      	str	r3, [sp, #8]
 800ebe4:	6933      	ldr	r3, [r6, #16]
 800ebe6:	3414      	adds	r4, #20
 800ebe8:	0099      	lsls	r1, r3, #2
 800ebea:	1863      	adds	r3, r4, r1
 800ebec:	9303      	str	r3, [sp, #12]
 800ebee:	0013      	movs	r3, r2
 800ebf0:	3314      	adds	r3, #20
 800ebf2:	469c      	mov	ip, r3
 800ebf4:	9305      	str	r3, [sp, #20]
 800ebf6:	9b01      	ldr	r3, [sp, #4]
 800ebf8:	9304      	str	r3, [sp, #16]
 800ebfa:	9b04      	ldr	r3, [sp, #16]
 800ebfc:	cc02      	ldmia	r4!, {r1}
 800ebfe:	cb20      	ldmia	r3!, {r5}
 800ec00:	9304      	str	r3, [sp, #16]
 800ec02:	b2ab      	uxth	r3, r5
 800ec04:	19df      	adds	r7, r3, r7
 800ec06:	b28b      	uxth	r3, r1
 800ec08:	1afb      	subs	r3, r7, r3
 800ec0a:	0c09      	lsrs	r1, r1, #16
 800ec0c:	0c2d      	lsrs	r5, r5, #16
 800ec0e:	1a6d      	subs	r5, r5, r1
 800ec10:	1419      	asrs	r1, r3, #16
 800ec12:	186d      	adds	r5, r5, r1
 800ec14:	4661      	mov	r1, ip
 800ec16:	142f      	asrs	r7, r5, #16
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	042d      	lsls	r5, r5, #16
 800ec1c:	432b      	orrs	r3, r5
 800ec1e:	c108      	stmia	r1!, {r3}
 800ec20:	9b03      	ldr	r3, [sp, #12]
 800ec22:	468c      	mov	ip, r1
 800ec24:	42a3      	cmp	r3, r4
 800ec26:	d8e8      	bhi.n	800ebfa <__mdiff+0x8a>
 800ec28:	0031      	movs	r1, r6
 800ec2a:	9c03      	ldr	r4, [sp, #12]
 800ec2c:	3115      	adds	r1, #21
 800ec2e:	2304      	movs	r3, #4
 800ec30:	428c      	cmp	r4, r1
 800ec32:	d304      	bcc.n	800ec3e <__mdiff+0xce>
 800ec34:	1ba3      	subs	r3, r4, r6
 800ec36:	3b15      	subs	r3, #21
 800ec38:	089b      	lsrs	r3, r3, #2
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	9901      	ldr	r1, [sp, #4]
 800ec40:	18cc      	adds	r4, r1, r3
 800ec42:	9905      	ldr	r1, [sp, #20]
 800ec44:	0026      	movs	r6, r4
 800ec46:	18cb      	adds	r3, r1, r3
 800ec48:	469c      	mov	ip, r3
 800ec4a:	9902      	ldr	r1, [sp, #8]
 800ec4c:	428e      	cmp	r6, r1
 800ec4e:	d310      	bcc.n	800ec72 <__mdiff+0x102>
 800ec50:	9e02      	ldr	r6, [sp, #8]
 800ec52:	1ee1      	subs	r1, r4, #3
 800ec54:	2500      	movs	r5, #0
 800ec56:	428e      	cmp	r6, r1
 800ec58:	d304      	bcc.n	800ec64 <__mdiff+0xf4>
 800ec5a:	0031      	movs	r1, r6
 800ec5c:	3103      	adds	r1, #3
 800ec5e:	1b0c      	subs	r4, r1, r4
 800ec60:	08a4      	lsrs	r4, r4, #2
 800ec62:	00a5      	lsls	r5, r4, #2
 800ec64:	195b      	adds	r3, r3, r5
 800ec66:	3b04      	subs	r3, #4
 800ec68:	6819      	ldr	r1, [r3, #0]
 800ec6a:	2900      	cmp	r1, #0
 800ec6c:	d00f      	beq.n	800ec8e <__mdiff+0x11e>
 800ec6e:	6110      	str	r0, [r2, #16]
 800ec70:	e797      	b.n	800eba2 <__mdiff+0x32>
 800ec72:	ce02      	ldmia	r6!, {r1}
 800ec74:	b28d      	uxth	r5, r1
 800ec76:	19ed      	adds	r5, r5, r7
 800ec78:	0c0f      	lsrs	r7, r1, #16
 800ec7a:	1429      	asrs	r1, r5, #16
 800ec7c:	1879      	adds	r1, r7, r1
 800ec7e:	140f      	asrs	r7, r1, #16
 800ec80:	b2ad      	uxth	r5, r5
 800ec82:	0409      	lsls	r1, r1, #16
 800ec84:	430d      	orrs	r5, r1
 800ec86:	4661      	mov	r1, ip
 800ec88:	c120      	stmia	r1!, {r5}
 800ec8a:	468c      	mov	ip, r1
 800ec8c:	e7dd      	b.n	800ec4a <__mdiff+0xda>
 800ec8e:	3801      	subs	r0, #1
 800ec90:	e7e9      	b.n	800ec66 <__mdiff+0xf6>
 800ec92:	46c0      	nop			; (mov r8, r8)
 800ec94:	08010267 	.word	0x08010267
 800ec98:	00000232 	.word	0x00000232
 800ec9c:	08010278 	.word	0x08010278

0800eca0 <__d2b>:
 800eca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eca2:	2101      	movs	r1, #1
 800eca4:	0014      	movs	r4, r2
 800eca6:	001e      	movs	r6, r3
 800eca8:	9f08      	ldr	r7, [sp, #32]
 800ecaa:	f7ff fcc1 	bl	800e630 <_Balloc>
 800ecae:	1e05      	subs	r5, r0, #0
 800ecb0:	d105      	bne.n	800ecbe <__d2b+0x1e>
 800ecb2:	0002      	movs	r2, r0
 800ecb4:	4b26      	ldr	r3, [pc, #152]	; (800ed50 <__d2b+0xb0>)
 800ecb6:	4927      	ldr	r1, [pc, #156]	; (800ed54 <__d2b+0xb4>)
 800ecb8:	4827      	ldr	r0, [pc, #156]	; (800ed58 <__d2b+0xb8>)
 800ecba:	f000 f9e3 	bl	800f084 <__assert_func>
 800ecbe:	0333      	lsls	r3, r6, #12
 800ecc0:	0076      	lsls	r6, r6, #1
 800ecc2:	0b1b      	lsrs	r3, r3, #12
 800ecc4:	0d76      	lsrs	r6, r6, #21
 800ecc6:	d124      	bne.n	800ed12 <__d2b+0x72>
 800ecc8:	9301      	str	r3, [sp, #4]
 800ecca:	2c00      	cmp	r4, #0
 800eccc:	d027      	beq.n	800ed1e <__d2b+0x7e>
 800ecce:	4668      	mov	r0, sp
 800ecd0:	9400      	str	r4, [sp, #0]
 800ecd2:	f7ff fd73 	bl	800e7bc <__lo0bits>
 800ecd6:	9c00      	ldr	r4, [sp, #0]
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d01e      	beq.n	800ed1a <__d2b+0x7a>
 800ecdc:	9b01      	ldr	r3, [sp, #4]
 800ecde:	2120      	movs	r1, #32
 800ece0:	001a      	movs	r2, r3
 800ece2:	1a09      	subs	r1, r1, r0
 800ece4:	408a      	lsls	r2, r1
 800ece6:	40c3      	lsrs	r3, r0
 800ece8:	4322      	orrs	r2, r4
 800ecea:	616a      	str	r2, [r5, #20]
 800ecec:	9301      	str	r3, [sp, #4]
 800ecee:	9c01      	ldr	r4, [sp, #4]
 800ecf0:	61ac      	str	r4, [r5, #24]
 800ecf2:	1e63      	subs	r3, r4, #1
 800ecf4:	419c      	sbcs	r4, r3
 800ecf6:	3401      	adds	r4, #1
 800ecf8:	612c      	str	r4, [r5, #16]
 800ecfa:	2e00      	cmp	r6, #0
 800ecfc:	d018      	beq.n	800ed30 <__d2b+0x90>
 800ecfe:	4b17      	ldr	r3, [pc, #92]	; (800ed5c <__d2b+0xbc>)
 800ed00:	18f6      	adds	r6, r6, r3
 800ed02:	2335      	movs	r3, #53	; 0x35
 800ed04:	1836      	adds	r6, r6, r0
 800ed06:	1a18      	subs	r0, r3, r0
 800ed08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed0a:	603e      	str	r6, [r7, #0]
 800ed0c:	6018      	str	r0, [r3, #0]
 800ed0e:	0028      	movs	r0, r5
 800ed10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ed12:	2280      	movs	r2, #128	; 0x80
 800ed14:	0352      	lsls	r2, r2, #13
 800ed16:	4313      	orrs	r3, r2
 800ed18:	e7d6      	b.n	800ecc8 <__d2b+0x28>
 800ed1a:	616c      	str	r4, [r5, #20]
 800ed1c:	e7e7      	b.n	800ecee <__d2b+0x4e>
 800ed1e:	a801      	add	r0, sp, #4
 800ed20:	f7ff fd4c 	bl	800e7bc <__lo0bits>
 800ed24:	2401      	movs	r4, #1
 800ed26:	9b01      	ldr	r3, [sp, #4]
 800ed28:	612c      	str	r4, [r5, #16]
 800ed2a:	616b      	str	r3, [r5, #20]
 800ed2c:	3020      	adds	r0, #32
 800ed2e:	e7e4      	b.n	800ecfa <__d2b+0x5a>
 800ed30:	4b0b      	ldr	r3, [pc, #44]	; (800ed60 <__d2b+0xc0>)
 800ed32:	18c0      	adds	r0, r0, r3
 800ed34:	4b0b      	ldr	r3, [pc, #44]	; (800ed64 <__d2b+0xc4>)
 800ed36:	6038      	str	r0, [r7, #0]
 800ed38:	18e3      	adds	r3, r4, r3
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	18eb      	adds	r3, r5, r3
 800ed3e:	6958      	ldr	r0, [r3, #20]
 800ed40:	f7ff fd22 	bl	800e788 <__hi0bits>
 800ed44:	0164      	lsls	r4, r4, #5
 800ed46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed48:	1a24      	subs	r4, r4, r0
 800ed4a:	601c      	str	r4, [r3, #0]
 800ed4c:	e7df      	b.n	800ed0e <__d2b+0x6e>
 800ed4e:	46c0      	nop			; (mov r8, r8)
 800ed50:	08010267 	.word	0x08010267
 800ed54:	0000030a 	.word	0x0000030a
 800ed58:	08010278 	.word	0x08010278
 800ed5c:	fffffbcd 	.word	0xfffffbcd
 800ed60:	fffffbce 	.word	0xfffffbce
 800ed64:	3fffffff 	.word	0x3fffffff

0800ed68 <_calloc_r>:
 800ed68:	b570      	push	{r4, r5, r6, lr}
 800ed6a:	0c13      	lsrs	r3, r2, #16
 800ed6c:	0c0d      	lsrs	r5, r1, #16
 800ed6e:	d11e      	bne.n	800edae <_calloc_r+0x46>
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10c      	bne.n	800ed8e <_calloc_r+0x26>
 800ed74:	b289      	uxth	r1, r1
 800ed76:	b294      	uxth	r4, r2
 800ed78:	434c      	muls	r4, r1
 800ed7a:	0021      	movs	r1, r4
 800ed7c:	f7fe f87c 	bl	800ce78 <_malloc_r>
 800ed80:	1e05      	subs	r5, r0, #0
 800ed82:	d01b      	beq.n	800edbc <_calloc_r+0x54>
 800ed84:	0022      	movs	r2, r4
 800ed86:	2100      	movs	r1, #0
 800ed88:	f7fe f801 	bl	800cd8e <memset>
 800ed8c:	e016      	b.n	800edbc <_calloc_r+0x54>
 800ed8e:	1c1d      	adds	r5, r3, #0
 800ed90:	1c0b      	adds	r3, r1, #0
 800ed92:	b292      	uxth	r2, r2
 800ed94:	b289      	uxth	r1, r1
 800ed96:	b29c      	uxth	r4, r3
 800ed98:	4351      	muls	r1, r2
 800ed9a:	b2ab      	uxth	r3, r5
 800ed9c:	4363      	muls	r3, r4
 800ed9e:	0c0c      	lsrs	r4, r1, #16
 800eda0:	191c      	adds	r4, r3, r4
 800eda2:	0c22      	lsrs	r2, r4, #16
 800eda4:	d107      	bne.n	800edb6 <_calloc_r+0x4e>
 800eda6:	0424      	lsls	r4, r4, #16
 800eda8:	b289      	uxth	r1, r1
 800edaa:	430c      	orrs	r4, r1
 800edac:	e7e5      	b.n	800ed7a <_calloc_r+0x12>
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d101      	bne.n	800edb6 <_calloc_r+0x4e>
 800edb2:	1c13      	adds	r3, r2, #0
 800edb4:	e7ed      	b.n	800ed92 <_calloc_r+0x2a>
 800edb6:	230c      	movs	r3, #12
 800edb8:	2500      	movs	r5, #0
 800edba:	6003      	str	r3, [r0, #0]
 800edbc:	0028      	movs	r0, r5
 800edbe:	bd70      	pop	{r4, r5, r6, pc}

0800edc0 <__ssputs_r>:
 800edc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edc2:	688e      	ldr	r6, [r1, #8]
 800edc4:	b085      	sub	sp, #20
 800edc6:	0007      	movs	r7, r0
 800edc8:	000c      	movs	r4, r1
 800edca:	9203      	str	r2, [sp, #12]
 800edcc:	9301      	str	r3, [sp, #4]
 800edce:	429e      	cmp	r6, r3
 800edd0:	d83c      	bhi.n	800ee4c <__ssputs_r+0x8c>
 800edd2:	2390      	movs	r3, #144	; 0x90
 800edd4:	898a      	ldrh	r2, [r1, #12]
 800edd6:	00db      	lsls	r3, r3, #3
 800edd8:	421a      	tst	r2, r3
 800edda:	d034      	beq.n	800ee46 <__ssputs_r+0x86>
 800eddc:	6909      	ldr	r1, [r1, #16]
 800edde:	6823      	ldr	r3, [r4, #0]
 800ede0:	6960      	ldr	r0, [r4, #20]
 800ede2:	1a5b      	subs	r3, r3, r1
 800ede4:	9302      	str	r3, [sp, #8]
 800ede6:	2303      	movs	r3, #3
 800ede8:	4343      	muls	r3, r0
 800edea:	0fdd      	lsrs	r5, r3, #31
 800edec:	18ed      	adds	r5, r5, r3
 800edee:	9b01      	ldr	r3, [sp, #4]
 800edf0:	9802      	ldr	r0, [sp, #8]
 800edf2:	3301      	adds	r3, #1
 800edf4:	181b      	adds	r3, r3, r0
 800edf6:	106d      	asrs	r5, r5, #1
 800edf8:	42ab      	cmp	r3, r5
 800edfa:	d900      	bls.n	800edfe <__ssputs_r+0x3e>
 800edfc:	001d      	movs	r5, r3
 800edfe:	0553      	lsls	r3, r2, #21
 800ee00:	d532      	bpl.n	800ee68 <__ssputs_r+0xa8>
 800ee02:	0029      	movs	r1, r5
 800ee04:	0038      	movs	r0, r7
 800ee06:	f7fe f837 	bl	800ce78 <_malloc_r>
 800ee0a:	1e06      	subs	r6, r0, #0
 800ee0c:	d109      	bne.n	800ee22 <__ssputs_r+0x62>
 800ee0e:	230c      	movs	r3, #12
 800ee10:	603b      	str	r3, [r7, #0]
 800ee12:	2340      	movs	r3, #64	; 0x40
 800ee14:	2001      	movs	r0, #1
 800ee16:	89a2      	ldrh	r2, [r4, #12]
 800ee18:	4240      	negs	r0, r0
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	81a3      	strh	r3, [r4, #12]
 800ee1e:	b005      	add	sp, #20
 800ee20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee22:	9a02      	ldr	r2, [sp, #8]
 800ee24:	6921      	ldr	r1, [r4, #16]
 800ee26:	f7fd ffa9 	bl	800cd7c <memcpy>
 800ee2a:	89a3      	ldrh	r3, [r4, #12]
 800ee2c:	4a14      	ldr	r2, [pc, #80]	; (800ee80 <__ssputs_r+0xc0>)
 800ee2e:	401a      	ands	r2, r3
 800ee30:	2380      	movs	r3, #128	; 0x80
 800ee32:	4313      	orrs	r3, r2
 800ee34:	81a3      	strh	r3, [r4, #12]
 800ee36:	9b02      	ldr	r3, [sp, #8]
 800ee38:	6126      	str	r6, [r4, #16]
 800ee3a:	18f6      	adds	r6, r6, r3
 800ee3c:	6026      	str	r6, [r4, #0]
 800ee3e:	6165      	str	r5, [r4, #20]
 800ee40:	9e01      	ldr	r6, [sp, #4]
 800ee42:	1aed      	subs	r5, r5, r3
 800ee44:	60a5      	str	r5, [r4, #8]
 800ee46:	9b01      	ldr	r3, [sp, #4]
 800ee48:	429e      	cmp	r6, r3
 800ee4a:	d900      	bls.n	800ee4e <__ssputs_r+0x8e>
 800ee4c:	9e01      	ldr	r6, [sp, #4]
 800ee4e:	0032      	movs	r2, r6
 800ee50:	9903      	ldr	r1, [sp, #12]
 800ee52:	6820      	ldr	r0, [r4, #0]
 800ee54:	f000 f959 	bl	800f10a <memmove>
 800ee58:	68a3      	ldr	r3, [r4, #8]
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	1b9b      	subs	r3, r3, r6
 800ee5e:	60a3      	str	r3, [r4, #8]
 800ee60:	6823      	ldr	r3, [r4, #0]
 800ee62:	199e      	adds	r6, r3, r6
 800ee64:	6026      	str	r6, [r4, #0]
 800ee66:	e7da      	b.n	800ee1e <__ssputs_r+0x5e>
 800ee68:	002a      	movs	r2, r5
 800ee6a:	0038      	movs	r0, r7
 800ee6c:	f000 f960 	bl	800f130 <_realloc_r>
 800ee70:	1e06      	subs	r6, r0, #0
 800ee72:	d1e0      	bne.n	800ee36 <__ssputs_r+0x76>
 800ee74:	0038      	movs	r0, r7
 800ee76:	6921      	ldr	r1, [r4, #16]
 800ee78:	f7fd ff92 	bl	800cda0 <_free_r>
 800ee7c:	e7c7      	b.n	800ee0e <__ssputs_r+0x4e>
 800ee7e:	46c0      	nop			; (mov r8, r8)
 800ee80:	fffffb7f 	.word	0xfffffb7f

0800ee84 <_svfiprintf_r>:
 800ee84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee86:	b0a1      	sub	sp, #132	; 0x84
 800ee88:	9003      	str	r0, [sp, #12]
 800ee8a:	001d      	movs	r5, r3
 800ee8c:	898b      	ldrh	r3, [r1, #12]
 800ee8e:	000f      	movs	r7, r1
 800ee90:	0016      	movs	r6, r2
 800ee92:	061b      	lsls	r3, r3, #24
 800ee94:	d511      	bpl.n	800eeba <_svfiprintf_r+0x36>
 800ee96:	690b      	ldr	r3, [r1, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d10e      	bne.n	800eeba <_svfiprintf_r+0x36>
 800ee9c:	2140      	movs	r1, #64	; 0x40
 800ee9e:	f7fd ffeb 	bl	800ce78 <_malloc_r>
 800eea2:	6038      	str	r0, [r7, #0]
 800eea4:	6138      	str	r0, [r7, #16]
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d105      	bne.n	800eeb6 <_svfiprintf_r+0x32>
 800eeaa:	230c      	movs	r3, #12
 800eeac:	9a03      	ldr	r2, [sp, #12]
 800eeae:	3801      	subs	r0, #1
 800eeb0:	6013      	str	r3, [r2, #0]
 800eeb2:	b021      	add	sp, #132	; 0x84
 800eeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb6:	2340      	movs	r3, #64	; 0x40
 800eeb8:	617b      	str	r3, [r7, #20]
 800eeba:	2300      	movs	r3, #0
 800eebc:	ac08      	add	r4, sp, #32
 800eebe:	6163      	str	r3, [r4, #20]
 800eec0:	3320      	adds	r3, #32
 800eec2:	7663      	strb	r3, [r4, #25]
 800eec4:	3310      	adds	r3, #16
 800eec6:	76a3      	strb	r3, [r4, #26]
 800eec8:	9507      	str	r5, [sp, #28]
 800eeca:	0035      	movs	r5, r6
 800eecc:	782b      	ldrb	r3, [r5, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d001      	beq.n	800eed6 <_svfiprintf_r+0x52>
 800eed2:	2b25      	cmp	r3, #37	; 0x25
 800eed4:	d147      	bne.n	800ef66 <_svfiprintf_r+0xe2>
 800eed6:	1bab      	subs	r3, r5, r6
 800eed8:	9305      	str	r3, [sp, #20]
 800eeda:	42b5      	cmp	r5, r6
 800eedc:	d00c      	beq.n	800eef8 <_svfiprintf_r+0x74>
 800eede:	0032      	movs	r2, r6
 800eee0:	0039      	movs	r1, r7
 800eee2:	9803      	ldr	r0, [sp, #12]
 800eee4:	f7ff ff6c 	bl	800edc0 <__ssputs_r>
 800eee8:	1c43      	adds	r3, r0, #1
 800eeea:	d100      	bne.n	800eeee <_svfiprintf_r+0x6a>
 800eeec:	e0ae      	b.n	800f04c <_svfiprintf_r+0x1c8>
 800eeee:	6962      	ldr	r2, [r4, #20]
 800eef0:	9b05      	ldr	r3, [sp, #20]
 800eef2:	4694      	mov	ip, r2
 800eef4:	4463      	add	r3, ip
 800eef6:	6163      	str	r3, [r4, #20]
 800eef8:	782b      	ldrb	r3, [r5, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d100      	bne.n	800ef00 <_svfiprintf_r+0x7c>
 800eefe:	e0a5      	b.n	800f04c <_svfiprintf_r+0x1c8>
 800ef00:	2201      	movs	r2, #1
 800ef02:	2300      	movs	r3, #0
 800ef04:	4252      	negs	r2, r2
 800ef06:	6062      	str	r2, [r4, #4]
 800ef08:	a904      	add	r1, sp, #16
 800ef0a:	3254      	adds	r2, #84	; 0x54
 800ef0c:	1852      	adds	r2, r2, r1
 800ef0e:	1c6e      	adds	r6, r5, #1
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	60e3      	str	r3, [r4, #12]
 800ef14:	60a3      	str	r3, [r4, #8]
 800ef16:	7013      	strb	r3, [r2, #0]
 800ef18:	65a3      	str	r3, [r4, #88]	; 0x58
 800ef1a:	2205      	movs	r2, #5
 800ef1c:	7831      	ldrb	r1, [r6, #0]
 800ef1e:	4854      	ldr	r0, [pc, #336]	; (800f070 <_svfiprintf_r+0x1ec>)
 800ef20:	f7ff fb6a 	bl	800e5f8 <memchr>
 800ef24:	1c75      	adds	r5, r6, #1
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d11f      	bne.n	800ef6a <_svfiprintf_r+0xe6>
 800ef2a:	6822      	ldr	r2, [r4, #0]
 800ef2c:	06d3      	lsls	r3, r2, #27
 800ef2e:	d504      	bpl.n	800ef3a <_svfiprintf_r+0xb6>
 800ef30:	2353      	movs	r3, #83	; 0x53
 800ef32:	a904      	add	r1, sp, #16
 800ef34:	185b      	adds	r3, r3, r1
 800ef36:	2120      	movs	r1, #32
 800ef38:	7019      	strb	r1, [r3, #0]
 800ef3a:	0713      	lsls	r3, r2, #28
 800ef3c:	d504      	bpl.n	800ef48 <_svfiprintf_r+0xc4>
 800ef3e:	2353      	movs	r3, #83	; 0x53
 800ef40:	a904      	add	r1, sp, #16
 800ef42:	185b      	adds	r3, r3, r1
 800ef44:	212b      	movs	r1, #43	; 0x2b
 800ef46:	7019      	strb	r1, [r3, #0]
 800ef48:	7833      	ldrb	r3, [r6, #0]
 800ef4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef4c:	d016      	beq.n	800ef7c <_svfiprintf_r+0xf8>
 800ef4e:	0035      	movs	r5, r6
 800ef50:	2100      	movs	r1, #0
 800ef52:	200a      	movs	r0, #10
 800ef54:	68e3      	ldr	r3, [r4, #12]
 800ef56:	782a      	ldrb	r2, [r5, #0]
 800ef58:	1c6e      	adds	r6, r5, #1
 800ef5a:	3a30      	subs	r2, #48	; 0x30
 800ef5c:	2a09      	cmp	r2, #9
 800ef5e:	d94e      	bls.n	800effe <_svfiprintf_r+0x17a>
 800ef60:	2900      	cmp	r1, #0
 800ef62:	d111      	bne.n	800ef88 <_svfiprintf_r+0x104>
 800ef64:	e017      	b.n	800ef96 <_svfiprintf_r+0x112>
 800ef66:	3501      	adds	r5, #1
 800ef68:	e7b0      	b.n	800eecc <_svfiprintf_r+0x48>
 800ef6a:	4b41      	ldr	r3, [pc, #260]	; (800f070 <_svfiprintf_r+0x1ec>)
 800ef6c:	6822      	ldr	r2, [r4, #0]
 800ef6e:	1ac0      	subs	r0, r0, r3
 800ef70:	2301      	movs	r3, #1
 800ef72:	4083      	lsls	r3, r0
 800ef74:	4313      	orrs	r3, r2
 800ef76:	002e      	movs	r6, r5
 800ef78:	6023      	str	r3, [r4, #0]
 800ef7a:	e7ce      	b.n	800ef1a <_svfiprintf_r+0x96>
 800ef7c:	9b07      	ldr	r3, [sp, #28]
 800ef7e:	1d19      	adds	r1, r3, #4
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	9107      	str	r1, [sp, #28]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	db01      	blt.n	800ef8c <_svfiprintf_r+0x108>
 800ef88:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef8a:	e004      	b.n	800ef96 <_svfiprintf_r+0x112>
 800ef8c:	425b      	negs	r3, r3
 800ef8e:	60e3      	str	r3, [r4, #12]
 800ef90:	2302      	movs	r3, #2
 800ef92:	4313      	orrs	r3, r2
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	782b      	ldrb	r3, [r5, #0]
 800ef98:	2b2e      	cmp	r3, #46	; 0x2e
 800ef9a:	d10a      	bne.n	800efb2 <_svfiprintf_r+0x12e>
 800ef9c:	786b      	ldrb	r3, [r5, #1]
 800ef9e:	2b2a      	cmp	r3, #42	; 0x2a
 800efa0:	d135      	bne.n	800f00e <_svfiprintf_r+0x18a>
 800efa2:	9b07      	ldr	r3, [sp, #28]
 800efa4:	3502      	adds	r5, #2
 800efa6:	1d1a      	adds	r2, r3, #4
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	9207      	str	r2, [sp, #28]
 800efac:	2b00      	cmp	r3, #0
 800efae:	db2b      	blt.n	800f008 <_svfiprintf_r+0x184>
 800efb0:	9309      	str	r3, [sp, #36]	; 0x24
 800efb2:	4e30      	ldr	r6, [pc, #192]	; (800f074 <_svfiprintf_r+0x1f0>)
 800efb4:	2203      	movs	r2, #3
 800efb6:	0030      	movs	r0, r6
 800efb8:	7829      	ldrb	r1, [r5, #0]
 800efba:	f7ff fb1d 	bl	800e5f8 <memchr>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d006      	beq.n	800efd0 <_svfiprintf_r+0x14c>
 800efc2:	2340      	movs	r3, #64	; 0x40
 800efc4:	1b80      	subs	r0, r0, r6
 800efc6:	4083      	lsls	r3, r0
 800efc8:	6822      	ldr	r2, [r4, #0]
 800efca:	3501      	adds	r5, #1
 800efcc:	4313      	orrs	r3, r2
 800efce:	6023      	str	r3, [r4, #0]
 800efd0:	7829      	ldrb	r1, [r5, #0]
 800efd2:	2206      	movs	r2, #6
 800efd4:	4828      	ldr	r0, [pc, #160]	; (800f078 <_svfiprintf_r+0x1f4>)
 800efd6:	1c6e      	adds	r6, r5, #1
 800efd8:	7621      	strb	r1, [r4, #24]
 800efda:	f7ff fb0d 	bl	800e5f8 <memchr>
 800efde:	2800      	cmp	r0, #0
 800efe0:	d03c      	beq.n	800f05c <_svfiprintf_r+0x1d8>
 800efe2:	4b26      	ldr	r3, [pc, #152]	; (800f07c <_svfiprintf_r+0x1f8>)
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d125      	bne.n	800f034 <_svfiprintf_r+0x1b0>
 800efe8:	2207      	movs	r2, #7
 800efea:	9b07      	ldr	r3, [sp, #28]
 800efec:	3307      	adds	r3, #7
 800efee:	4393      	bics	r3, r2
 800eff0:	3308      	adds	r3, #8
 800eff2:	9307      	str	r3, [sp, #28]
 800eff4:	6963      	ldr	r3, [r4, #20]
 800eff6:	9a04      	ldr	r2, [sp, #16]
 800eff8:	189b      	adds	r3, r3, r2
 800effa:	6163      	str	r3, [r4, #20]
 800effc:	e765      	b.n	800eeca <_svfiprintf_r+0x46>
 800effe:	4343      	muls	r3, r0
 800f000:	0035      	movs	r5, r6
 800f002:	2101      	movs	r1, #1
 800f004:	189b      	adds	r3, r3, r2
 800f006:	e7a6      	b.n	800ef56 <_svfiprintf_r+0xd2>
 800f008:	2301      	movs	r3, #1
 800f00a:	425b      	negs	r3, r3
 800f00c:	e7d0      	b.n	800efb0 <_svfiprintf_r+0x12c>
 800f00e:	2300      	movs	r3, #0
 800f010:	200a      	movs	r0, #10
 800f012:	001a      	movs	r2, r3
 800f014:	3501      	adds	r5, #1
 800f016:	6063      	str	r3, [r4, #4]
 800f018:	7829      	ldrb	r1, [r5, #0]
 800f01a:	1c6e      	adds	r6, r5, #1
 800f01c:	3930      	subs	r1, #48	; 0x30
 800f01e:	2909      	cmp	r1, #9
 800f020:	d903      	bls.n	800f02a <_svfiprintf_r+0x1a6>
 800f022:	2b00      	cmp	r3, #0
 800f024:	d0c5      	beq.n	800efb2 <_svfiprintf_r+0x12e>
 800f026:	9209      	str	r2, [sp, #36]	; 0x24
 800f028:	e7c3      	b.n	800efb2 <_svfiprintf_r+0x12e>
 800f02a:	4342      	muls	r2, r0
 800f02c:	0035      	movs	r5, r6
 800f02e:	2301      	movs	r3, #1
 800f030:	1852      	adds	r2, r2, r1
 800f032:	e7f1      	b.n	800f018 <_svfiprintf_r+0x194>
 800f034:	ab07      	add	r3, sp, #28
 800f036:	9300      	str	r3, [sp, #0]
 800f038:	003a      	movs	r2, r7
 800f03a:	0021      	movs	r1, r4
 800f03c:	4b10      	ldr	r3, [pc, #64]	; (800f080 <_svfiprintf_r+0x1fc>)
 800f03e:	9803      	ldr	r0, [sp, #12]
 800f040:	f7fe f83a 	bl	800d0b8 <_printf_float>
 800f044:	9004      	str	r0, [sp, #16]
 800f046:	9b04      	ldr	r3, [sp, #16]
 800f048:	3301      	adds	r3, #1
 800f04a:	d1d3      	bne.n	800eff4 <_svfiprintf_r+0x170>
 800f04c:	89bb      	ldrh	r3, [r7, #12]
 800f04e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f050:	065b      	lsls	r3, r3, #25
 800f052:	d400      	bmi.n	800f056 <_svfiprintf_r+0x1d2>
 800f054:	e72d      	b.n	800eeb2 <_svfiprintf_r+0x2e>
 800f056:	2001      	movs	r0, #1
 800f058:	4240      	negs	r0, r0
 800f05a:	e72a      	b.n	800eeb2 <_svfiprintf_r+0x2e>
 800f05c:	ab07      	add	r3, sp, #28
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	003a      	movs	r2, r7
 800f062:	0021      	movs	r1, r4
 800f064:	4b06      	ldr	r3, [pc, #24]	; (800f080 <_svfiprintf_r+0x1fc>)
 800f066:	9803      	ldr	r0, [sp, #12]
 800f068:	f7fe fad8 	bl	800d61c <_printf_i>
 800f06c:	e7ea      	b.n	800f044 <_svfiprintf_r+0x1c0>
 800f06e:	46c0      	nop			; (mov r8, r8)
 800f070:	080103d4 	.word	0x080103d4
 800f074:	080103da 	.word	0x080103da
 800f078:	080103de 	.word	0x080103de
 800f07c:	0800d0b9 	.word	0x0800d0b9
 800f080:	0800edc1 	.word	0x0800edc1

0800f084 <__assert_func>:
 800f084:	b530      	push	{r4, r5, lr}
 800f086:	0014      	movs	r4, r2
 800f088:	001a      	movs	r2, r3
 800f08a:	4b09      	ldr	r3, [pc, #36]	; (800f0b0 <__assert_func+0x2c>)
 800f08c:	0005      	movs	r5, r0
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	b085      	sub	sp, #20
 800f092:	68d8      	ldr	r0, [r3, #12]
 800f094:	4b07      	ldr	r3, [pc, #28]	; (800f0b4 <__assert_func+0x30>)
 800f096:	2c00      	cmp	r4, #0
 800f098:	d101      	bne.n	800f09e <__assert_func+0x1a>
 800f09a:	4b07      	ldr	r3, [pc, #28]	; (800f0b8 <__assert_func+0x34>)
 800f09c:	001c      	movs	r4, r3
 800f09e:	9301      	str	r3, [sp, #4]
 800f0a0:	9100      	str	r1, [sp, #0]
 800f0a2:	002b      	movs	r3, r5
 800f0a4:	4905      	ldr	r1, [pc, #20]	; (800f0bc <__assert_func+0x38>)
 800f0a6:	9402      	str	r4, [sp, #8]
 800f0a8:	f000 f80a 	bl	800f0c0 <fiprintf>
 800f0ac:	f000 faac 	bl	800f608 <abort>
 800f0b0:	20000018 	.word	0x20000018
 800f0b4:	080103e5 	.word	0x080103e5
 800f0b8:	08010420 	.word	0x08010420
 800f0bc:	080103f2 	.word	0x080103f2

0800f0c0 <fiprintf>:
 800f0c0:	b40e      	push	{r1, r2, r3}
 800f0c2:	b503      	push	{r0, r1, lr}
 800f0c4:	0001      	movs	r1, r0
 800f0c6:	ab03      	add	r3, sp, #12
 800f0c8:	4804      	ldr	r0, [pc, #16]	; (800f0dc <fiprintf+0x1c>)
 800f0ca:	cb04      	ldmia	r3!, {r2}
 800f0cc:	6800      	ldr	r0, [r0, #0]
 800f0ce:	9301      	str	r3, [sp, #4]
 800f0d0:	f000 f884 	bl	800f1dc <_vfiprintf_r>
 800f0d4:	b002      	add	sp, #8
 800f0d6:	bc08      	pop	{r3}
 800f0d8:	b003      	add	sp, #12
 800f0da:	4718      	bx	r3
 800f0dc:	20000018 	.word	0x20000018

0800f0e0 <__retarget_lock_init_recursive>:
 800f0e0:	4770      	bx	lr

0800f0e2 <__retarget_lock_acquire_recursive>:
 800f0e2:	4770      	bx	lr

0800f0e4 <__retarget_lock_release_recursive>:
 800f0e4:	4770      	bx	lr

0800f0e6 <__ascii_mbtowc>:
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	2900      	cmp	r1, #0
 800f0ea:	d100      	bne.n	800f0ee <__ascii_mbtowc+0x8>
 800f0ec:	a901      	add	r1, sp, #4
 800f0ee:	1e10      	subs	r0, r2, #0
 800f0f0:	d006      	beq.n	800f100 <__ascii_mbtowc+0x1a>
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d006      	beq.n	800f104 <__ascii_mbtowc+0x1e>
 800f0f6:	7813      	ldrb	r3, [r2, #0]
 800f0f8:	600b      	str	r3, [r1, #0]
 800f0fa:	7810      	ldrb	r0, [r2, #0]
 800f0fc:	1e43      	subs	r3, r0, #1
 800f0fe:	4198      	sbcs	r0, r3
 800f100:	b002      	add	sp, #8
 800f102:	4770      	bx	lr
 800f104:	2002      	movs	r0, #2
 800f106:	4240      	negs	r0, r0
 800f108:	e7fa      	b.n	800f100 <__ascii_mbtowc+0x1a>

0800f10a <memmove>:
 800f10a:	b510      	push	{r4, lr}
 800f10c:	4288      	cmp	r0, r1
 800f10e:	d902      	bls.n	800f116 <memmove+0xc>
 800f110:	188b      	adds	r3, r1, r2
 800f112:	4298      	cmp	r0, r3
 800f114:	d303      	bcc.n	800f11e <memmove+0x14>
 800f116:	2300      	movs	r3, #0
 800f118:	e007      	b.n	800f12a <memmove+0x20>
 800f11a:	5c8b      	ldrb	r3, [r1, r2]
 800f11c:	5483      	strb	r3, [r0, r2]
 800f11e:	3a01      	subs	r2, #1
 800f120:	d2fb      	bcs.n	800f11a <memmove+0x10>
 800f122:	bd10      	pop	{r4, pc}
 800f124:	5ccc      	ldrb	r4, [r1, r3]
 800f126:	54c4      	strb	r4, [r0, r3]
 800f128:	3301      	adds	r3, #1
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d1fa      	bne.n	800f124 <memmove+0x1a>
 800f12e:	e7f8      	b.n	800f122 <memmove+0x18>

0800f130 <_realloc_r>:
 800f130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f132:	0007      	movs	r7, r0
 800f134:	000e      	movs	r6, r1
 800f136:	0014      	movs	r4, r2
 800f138:	2900      	cmp	r1, #0
 800f13a:	d105      	bne.n	800f148 <_realloc_r+0x18>
 800f13c:	0011      	movs	r1, r2
 800f13e:	f7fd fe9b 	bl	800ce78 <_malloc_r>
 800f142:	0005      	movs	r5, r0
 800f144:	0028      	movs	r0, r5
 800f146:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f148:	2a00      	cmp	r2, #0
 800f14a:	d103      	bne.n	800f154 <_realloc_r+0x24>
 800f14c:	f7fd fe28 	bl	800cda0 <_free_r>
 800f150:	0025      	movs	r5, r4
 800f152:	e7f7      	b.n	800f144 <_realloc_r+0x14>
 800f154:	f000 fc9a 	bl	800fa8c <_malloc_usable_size_r>
 800f158:	9001      	str	r0, [sp, #4]
 800f15a:	4284      	cmp	r4, r0
 800f15c:	d803      	bhi.n	800f166 <_realloc_r+0x36>
 800f15e:	0035      	movs	r5, r6
 800f160:	0843      	lsrs	r3, r0, #1
 800f162:	42a3      	cmp	r3, r4
 800f164:	d3ee      	bcc.n	800f144 <_realloc_r+0x14>
 800f166:	0021      	movs	r1, r4
 800f168:	0038      	movs	r0, r7
 800f16a:	f7fd fe85 	bl	800ce78 <_malloc_r>
 800f16e:	1e05      	subs	r5, r0, #0
 800f170:	d0e8      	beq.n	800f144 <_realloc_r+0x14>
 800f172:	9b01      	ldr	r3, [sp, #4]
 800f174:	0022      	movs	r2, r4
 800f176:	429c      	cmp	r4, r3
 800f178:	d900      	bls.n	800f17c <_realloc_r+0x4c>
 800f17a:	001a      	movs	r2, r3
 800f17c:	0031      	movs	r1, r6
 800f17e:	0028      	movs	r0, r5
 800f180:	f7fd fdfc 	bl	800cd7c <memcpy>
 800f184:	0031      	movs	r1, r6
 800f186:	0038      	movs	r0, r7
 800f188:	f7fd fe0a 	bl	800cda0 <_free_r>
 800f18c:	e7da      	b.n	800f144 <_realloc_r+0x14>

0800f18e <__sfputc_r>:
 800f18e:	6893      	ldr	r3, [r2, #8]
 800f190:	b510      	push	{r4, lr}
 800f192:	3b01      	subs	r3, #1
 800f194:	6093      	str	r3, [r2, #8]
 800f196:	2b00      	cmp	r3, #0
 800f198:	da04      	bge.n	800f1a4 <__sfputc_r+0x16>
 800f19a:	6994      	ldr	r4, [r2, #24]
 800f19c:	42a3      	cmp	r3, r4
 800f19e:	db07      	blt.n	800f1b0 <__sfputc_r+0x22>
 800f1a0:	290a      	cmp	r1, #10
 800f1a2:	d005      	beq.n	800f1b0 <__sfputc_r+0x22>
 800f1a4:	6813      	ldr	r3, [r2, #0]
 800f1a6:	1c58      	adds	r0, r3, #1
 800f1a8:	6010      	str	r0, [r2, #0]
 800f1aa:	7019      	strb	r1, [r3, #0]
 800f1ac:	0008      	movs	r0, r1
 800f1ae:	bd10      	pop	{r4, pc}
 800f1b0:	f000 f94e 	bl	800f450 <__swbuf_r>
 800f1b4:	0001      	movs	r1, r0
 800f1b6:	e7f9      	b.n	800f1ac <__sfputc_r+0x1e>

0800f1b8 <__sfputs_r>:
 800f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ba:	0006      	movs	r6, r0
 800f1bc:	000f      	movs	r7, r1
 800f1be:	0014      	movs	r4, r2
 800f1c0:	18d5      	adds	r5, r2, r3
 800f1c2:	42ac      	cmp	r4, r5
 800f1c4:	d101      	bne.n	800f1ca <__sfputs_r+0x12>
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	e007      	b.n	800f1da <__sfputs_r+0x22>
 800f1ca:	7821      	ldrb	r1, [r4, #0]
 800f1cc:	003a      	movs	r2, r7
 800f1ce:	0030      	movs	r0, r6
 800f1d0:	f7ff ffdd 	bl	800f18e <__sfputc_r>
 800f1d4:	3401      	adds	r4, #1
 800f1d6:	1c43      	adds	r3, r0, #1
 800f1d8:	d1f3      	bne.n	800f1c2 <__sfputs_r+0xa>
 800f1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1dc <_vfiprintf_r>:
 800f1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1de:	b0a1      	sub	sp, #132	; 0x84
 800f1e0:	0006      	movs	r6, r0
 800f1e2:	000c      	movs	r4, r1
 800f1e4:	001f      	movs	r7, r3
 800f1e6:	9203      	str	r2, [sp, #12]
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d004      	beq.n	800f1f6 <_vfiprintf_r+0x1a>
 800f1ec:	6983      	ldr	r3, [r0, #24]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d101      	bne.n	800f1f6 <_vfiprintf_r+0x1a>
 800f1f2:	f000 fb3f 	bl	800f874 <__sinit>
 800f1f6:	4b8e      	ldr	r3, [pc, #568]	; (800f430 <_vfiprintf_r+0x254>)
 800f1f8:	429c      	cmp	r4, r3
 800f1fa:	d11c      	bne.n	800f236 <_vfiprintf_r+0x5a>
 800f1fc:	6874      	ldr	r4, [r6, #4]
 800f1fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f200:	07db      	lsls	r3, r3, #31
 800f202:	d405      	bmi.n	800f210 <_vfiprintf_r+0x34>
 800f204:	89a3      	ldrh	r3, [r4, #12]
 800f206:	059b      	lsls	r3, r3, #22
 800f208:	d402      	bmi.n	800f210 <_vfiprintf_r+0x34>
 800f20a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f20c:	f7ff ff69 	bl	800f0e2 <__retarget_lock_acquire_recursive>
 800f210:	89a3      	ldrh	r3, [r4, #12]
 800f212:	071b      	lsls	r3, r3, #28
 800f214:	d502      	bpl.n	800f21c <_vfiprintf_r+0x40>
 800f216:	6923      	ldr	r3, [r4, #16]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d11d      	bne.n	800f258 <_vfiprintf_r+0x7c>
 800f21c:	0021      	movs	r1, r4
 800f21e:	0030      	movs	r0, r6
 800f220:	f000 f97a 	bl	800f518 <__swsetup_r>
 800f224:	2800      	cmp	r0, #0
 800f226:	d017      	beq.n	800f258 <_vfiprintf_r+0x7c>
 800f228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f22a:	07db      	lsls	r3, r3, #31
 800f22c:	d50d      	bpl.n	800f24a <_vfiprintf_r+0x6e>
 800f22e:	2001      	movs	r0, #1
 800f230:	4240      	negs	r0, r0
 800f232:	b021      	add	sp, #132	; 0x84
 800f234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f236:	4b7f      	ldr	r3, [pc, #508]	; (800f434 <_vfiprintf_r+0x258>)
 800f238:	429c      	cmp	r4, r3
 800f23a:	d101      	bne.n	800f240 <_vfiprintf_r+0x64>
 800f23c:	68b4      	ldr	r4, [r6, #8]
 800f23e:	e7de      	b.n	800f1fe <_vfiprintf_r+0x22>
 800f240:	4b7d      	ldr	r3, [pc, #500]	; (800f438 <_vfiprintf_r+0x25c>)
 800f242:	429c      	cmp	r4, r3
 800f244:	d1db      	bne.n	800f1fe <_vfiprintf_r+0x22>
 800f246:	68f4      	ldr	r4, [r6, #12]
 800f248:	e7d9      	b.n	800f1fe <_vfiprintf_r+0x22>
 800f24a:	89a3      	ldrh	r3, [r4, #12]
 800f24c:	059b      	lsls	r3, r3, #22
 800f24e:	d4ee      	bmi.n	800f22e <_vfiprintf_r+0x52>
 800f250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f252:	f7ff ff47 	bl	800f0e4 <__retarget_lock_release_recursive>
 800f256:	e7ea      	b.n	800f22e <_vfiprintf_r+0x52>
 800f258:	2300      	movs	r3, #0
 800f25a:	ad08      	add	r5, sp, #32
 800f25c:	616b      	str	r3, [r5, #20]
 800f25e:	3320      	adds	r3, #32
 800f260:	766b      	strb	r3, [r5, #25]
 800f262:	3310      	adds	r3, #16
 800f264:	76ab      	strb	r3, [r5, #26]
 800f266:	9707      	str	r7, [sp, #28]
 800f268:	9f03      	ldr	r7, [sp, #12]
 800f26a:	783b      	ldrb	r3, [r7, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <_vfiprintf_r+0x98>
 800f270:	2b25      	cmp	r3, #37	; 0x25
 800f272:	d14e      	bne.n	800f312 <_vfiprintf_r+0x136>
 800f274:	9b03      	ldr	r3, [sp, #12]
 800f276:	1afb      	subs	r3, r7, r3
 800f278:	9305      	str	r3, [sp, #20]
 800f27a:	9b03      	ldr	r3, [sp, #12]
 800f27c:	429f      	cmp	r7, r3
 800f27e:	d00d      	beq.n	800f29c <_vfiprintf_r+0xc0>
 800f280:	9b05      	ldr	r3, [sp, #20]
 800f282:	0021      	movs	r1, r4
 800f284:	0030      	movs	r0, r6
 800f286:	9a03      	ldr	r2, [sp, #12]
 800f288:	f7ff ff96 	bl	800f1b8 <__sfputs_r>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d100      	bne.n	800f292 <_vfiprintf_r+0xb6>
 800f290:	e0b5      	b.n	800f3fe <_vfiprintf_r+0x222>
 800f292:	696a      	ldr	r2, [r5, #20]
 800f294:	9b05      	ldr	r3, [sp, #20]
 800f296:	4694      	mov	ip, r2
 800f298:	4463      	add	r3, ip
 800f29a:	616b      	str	r3, [r5, #20]
 800f29c:	783b      	ldrb	r3, [r7, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d100      	bne.n	800f2a4 <_vfiprintf_r+0xc8>
 800f2a2:	e0ac      	b.n	800f3fe <_vfiprintf_r+0x222>
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	1c7b      	adds	r3, r7, #1
 800f2a8:	9303      	str	r3, [sp, #12]
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	4252      	negs	r2, r2
 800f2ae:	606a      	str	r2, [r5, #4]
 800f2b0:	a904      	add	r1, sp, #16
 800f2b2:	3254      	adds	r2, #84	; 0x54
 800f2b4:	1852      	adds	r2, r2, r1
 800f2b6:	602b      	str	r3, [r5, #0]
 800f2b8:	60eb      	str	r3, [r5, #12]
 800f2ba:	60ab      	str	r3, [r5, #8]
 800f2bc:	7013      	strb	r3, [r2, #0]
 800f2be:	65ab      	str	r3, [r5, #88]	; 0x58
 800f2c0:	9b03      	ldr	r3, [sp, #12]
 800f2c2:	2205      	movs	r2, #5
 800f2c4:	7819      	ldrb	r1, [r3, #0]
 800f2c6:	485d      	ldr	r0, [pc, #372]	; (800f43c <_vfiprintf_r+0x260>)
 800f2c8:	f7ff f996 	bl	800e5f8 <memchr>
 800f2cc:	9b03      	ldr	r3, [sp, #12]
 800f2ce:	1c5f      	adds	r7, r3, #1
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	d120      	bne.n	800f316 <_vfiprintf_r+0x13a>
 800f2d4:	682a      	ldr	r2, [r5, #0]
 800f2d6:	06d3      	lsls	r3, r2, #27
 800f2d8:	d504      	bpl.n	800f2e4 <_vfiprintf_r+0x108>
 800f2da:	2353      	movs	r3, #83	; 0x53
 800f2dc:	a904      	add	r1, sp, #16
 800f2de:	185b      	adds	r3, r3, r1
 800f2e0:	2120      	movs	r1, #32
 800f2e2:	7019      	strb	r1, [r3, #0]
 800f2e4:	0713      	lsls	r3, r2, #28
 800f2e6:	d504      	bpl.n	800f2f2 <_vfiprintf_r+0x116>
 800f2e8:	2353      	movs	r3, #83	; 0x53
 800f2ea:	a904      	add	r1, sp, #16
 800f2ec:	185b      	adds	r3, r3, r1
 800f2ee:	212b      	movs	r1, #43	; 0x2b
 800f2f0:	7019      	strb	r1, [r3, #0]
 800f2f2:	9b03      	ldr	r3, [sp, #12]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f2f8:	d016      	beq.n	800f328 <_vfiprintf_r+0x14c>
 800f2fa:	2100      	movs	r1, #0
 800f2fc:	68eb      	ldr	r3, [r5, #12]
 800f2fe:	9f03      	ldr	r7, [sp, #12]
 800f300:	783a      	ldrb	r2, [r7, #0]
 800f302:	1c78      	adds	r0, r7, #1
 800f304:	3a30      	subs	r2, #48	; 0x30
 800f306:	4684      	mov	ip, r0
 800f308:	2a09      	cmp	r2, #9
 800f30a:	d94f      	bls.n	800f3ac <_vfiprintf_r+0x1d0>
 800f30c:	2900      	cmp	r1, #0
 800f30e:	d111      	bne.n	800f334 <_vfiprintf_r+0x158>
 800f310:	e017      	b.n	800f342 <_vfiprintf_r+0x166>
 800f312:	3701      	adds	r7, #1
 800f314:	e7a9      	b.n	800f26a <_vfiprintf_r+0x8e>
 800f316:	4b49      	ldr	r3, [pc, #292]	; (800f43c <_vfiprintf_r+0x260>)
 800f318:	682a      	ldr	r2, [r5, #0]
 800f31a:	1ac0      	subs	r0, r0, r3
 800f31c:	2301      	movs	r3, #1
 800f31e:	4083      	lsls	r3, r0
 800f320:	4313      	orrs	r3, r2
 800f322:	602b      	str	r3, [r5, #0]
 800f324:	9703      	str	r7, [sp, #12]
 800f326:	e7cb      	b.n	800f2c0 <_vfiprintf_r+0xe4>
 800f328:	9b07      	ldr	r3, [sp, #28]
 800f32a:	1d19      	adds	r1, r3, #4
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	9107      	str	r1, [sp, #28]
 800f330:	2b00      	cmp	r3, #0
 800f332:	db01      	blt.n	800f338 <_vfiprintf_r+0x15c>
 800f334:	930b      	str	r3, [sp, #44]	; 0x2c
 800f336:	e004      	b.n	800f342 <_vfiprintf_r+0x166>
 800f338:	425b      	negs	r3, r3
 800f33a:	60eb      	str	r3, [r5, #12]
 800f33c:	2302      	movs	r3, #2
 800f33e:	4313      	orrs	r3, r2
 800f340:	602b      	str	r3, [r5, #0]
 800f342:	783b      	ldrb	r3, [r7, #0]
 800f344:	2b2e      	cmp	r3, #46	; 0x2e
 800f346:	d10a      	bne.n	800f35e <_vfiprintf_r+0x182>
 800f348:	787b      	ldrb	r3, [r7, #1]
 800f34a:	2b2a      	cmp	r3, #42	; 0x2a
 800f34c:	d137      	bne.n	800f3be <_vfiprintf_r+0x1e2>
 800f34e:	9b07      	ldr	r3, [sp, #28]
 800f350:	3702      	adds	r7, #2
 800f352:	1d1a      	adds	r2, r3, #4
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	9207      	str	r2, [sp, #28]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	db2d      	blt.n	800f3b8 <_vfiprintf_r+0x1dc>
 800f35c:	9309      	str	r3, [sp, #36]	; 0x24
 800f35e:	2203      	movs	r2, #3
 800f360:	7839      	ldrb	r1, [r7, #0]
 800f362:	4837      	ldr	r0, [pc, #220]	; (800f440 <_vfiprintf_r+0x264>)
 800f364:	f7ff f948 	bl	800e5f8 <memchr>
 800f368:	2800      	cmp	r0, #0
 800f36a:	d007      	beq.n	800f37c <_vfiprintf_r+0x1a0>
 800f36c:	4b34      	ldr	r3, [pc, #208]	; (800f440 <_vfiprintf_r+0x264>)
 800f36e:	682a      	ldr	r2, [r5, #0]
 800f370:	1ac0      	subs	r0, r0, r3
 800f372:	2340      	movs	r3, #64	; 0x40
 800f374:	4083      	lsls	r3, r0
 800f376:	4313      	orrs	r3, r2
 800f378:	3701      	adds	r7, #1
 800f37a:	602b      	str	r3, [r5, #0]
 800f37c:	7839      	ldrb	r1, [r7, #0]
 800f37e:	1c7b      	adds	r3, r7, #1
 800f380:	2206      	movs	r2, #6
 800f382:	4830      	ldr	r0, [pc, #192]	; (800f444 <_vfiprintf_r+0x268>)
 800f384:	9303      	str	r3, [sp, #12]
 800f386:	7629      	strb	r1, [r5, #24]
 800f388:	f7ff f936 	bl	800e5f8 <memchr>
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d045      	beq.n	800f41c <_vfiprintf_r+0x240>
 800f390:	4b2d      	ldr	r3, [pc, #180]	; (800f448 <_vfiprintf_r+0x26c>)
 800f392:	2b00      	cmp	r3, #0
 800f394:	d127      	bne.n	800f3e6 <_vfiprintf_r+0x20a>
 800f396:	2207      	movs	r2, #7
 800f398:	9b07      	ldr	r3, [sp, #28]
 800f39a:	3307      	adds	r3, #7
 800f39c:	4393      	bics	r3, r2
 800f39e:	3308      	adds	r3, #8
 800f3a0:	9307      	str	r3, [sp, #28]
 800f3a2:	696b      	ldr	r3, [r5, #20]
 800f3a4:	9a04      	ldr	r2, [sp, #16]
 800f3a6:	189b      	adds	r3, r3, r2
 800f3a8:	616b      	str	r3, [r5, #20]
 800f3aa:	e75d      	b.n	800f268 <_vfiprintf_r+0x8c>
 800f3ac:	210a      	movs	r1, #10
 800f3ae:	434b      	muls	r3, r1
 800f3b0:	4667      	mov	r7, ip
 800f3b2:	189b      	adds	r3, r3, r2
 800f3b4:	3909      	subs	r1, #9
 800f3b6:	e7a3      	b.n	800f300 <_vfiprintf_r+0x124>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	425b      	negs	r3, r3
 800f3bc:	e7ce      	b.n	800f35c <_vfiprintf_r+0x180>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	001a      	movs	r2, r3
 800f3c2:	3701      	adds	r7, #1
 800f3c4:	606b      	str	r3, [r5, #4]
 800f3c6:	7839      	ldrb	r1, [r7, #0]
 800f3c8:	1c78      	adds	r0, r7, #1
 800f3ca:	3930      	subs	r1, #48	; 0x30
 800f3cc:	4684      	mov	ip, r0
 800f3ce:	2909      	cmp	r1, #9
 800f3d0:	d903      	bls.n	800f3da <_vfiprintf_r+0x1fe>
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d0c3      	beq.n	800f35e <_vfiprintf_r+0x182>
 800f3d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f3d8:	e7c1      	b.n	800f35e <_vfiprintf_r+0x182>
 800f3da:	230a      	movs	r3, #10
 800f3dc:	435a      	muls	r2, r3
 800f3de:	4667      	mov	r7, ip
 800f3e0:	1852      	adds	r2, r2, r1
 800f3e2:	3b09      	subs	r3, #9
 800f3e4:	e7ef      	b.n	800f3c6 <_vfiprintf_r+0x1ea>
 800f3e6:	ab07      	add	r3, sp, #28
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	0022      	movs	r2, r4
 800f3ec:	0029      	movs	r1, r5
 800f3ee:	0030      	movs	r0, r6
 800f3f0:	4b16      	ldr	r3, [pc, #88]	; (800f44c <_vfiprintf_r+0x270>)
 800f3f2:	f7fd fe61 	bl	800d0b8 <_printf_float>
 800f3f6:	9004      	str	r0, [sp, #16]
 800f3f8:	9b04      	ldr	r3, [sp, #16]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	d1d1      	bne.n	800f3a2 <_vfiprintf_r+0x1c6>
 800f3fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f400:	07db      	lsls	r3, r3, #31
 800f402:	d405      	bmi.n	800f410 <_vfiprintf_r+0x234>
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	059b      	lsls	r3, r3, #22
 800f408:	d402      	bmi.n	800f410 <_vfiprintf_r+0x234>
 800f40a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f40c:	f7ff fe6a 	bl	800f0e4 <__retarget_lock_release_recursive>
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	065b      	lsls	r3, r3, #25
 800f414:	d500      	bpl.n	800f418 <_vfiprintf_r+0x23c>
 800f416:	e70a      	b.n	800f22e <_vfiprintf_r+0x52>
 800f418:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f41a:	e70a      	b.n	800f232 <_vfiprintf_r+0x56>
 800f41c:	ab07      	add	r3, sp, #28
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	0022      	movs	r2, r4
 800f422:	0029      	movs	r1, r5
 800f424:	0030      	movs	r0, r6
 800f426:	4b09      	ldr	r3, [pc, #36]	; (800f44c <_vfiprintf_r+0x270>)
 800f428:	f7fe f8f8 	bl	800d61c <_printf_i>
 800f42c:	e7e3      	b.n	800f3f6 <_vfiprintf_r+0x21a>
 800f42e:	46c0      	nop			; (mov r8, r8)
 800f430:	0801054c 	.word	0x0801054c
 800f434:	0801056c 	.word	0x0801056c
 800f438:	0801052c 	.word	0x0801052c
 800f43c:	080103d4 	.word	0x080103d4
 800f440:	080103da 	.word	0x080103da
 800f444:	080103de 	.word	0x080103de
 800f448:	0800d0b9 	.word	0x0800d0b9
 800f44c:	0800f1b9 	.word	0x0800f1b9

0800f450 <__swbuf_r>:
 800f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f452:	0005      	movs	r5, r0
 800f454:	000e      	movs	r6, r1
 800f456:	0014      	movs	r4, r2
 800f458:	2800      	cmp	r0, #0
 800f45a:	d004      	beq.n	800f466 <__swbuf_r+0x16>
 800f45c:	6983      	ldr	r3, [r0, #24]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d101      	bne.n	800f466 <__swbuf_r+0x16>
 800f462:	f000 fa07 	bl	800f874 <__sinit>
 800f466:	4b22      	ldr	r3, [pc, #136]	; (800f4f0 <__swbuf_r+0xa0>)
 800f468:	429c      	cmp	r4, r3
 800f46a:	d12e      	bne.n	800f4ca <__swbuf_r+0x7a>
 800f46c:	686c      	ldr	r4, [r5, #4]
 800f46e:	69a3      	ldr	r3, [r4, #24]
 800f470:	60a3      	str	r3, [r4, #8]
 800f472:	89a3      	ldrh	r3, [r4, #12]
 800f474:	071b      	lsls	r3, r3, #28
 800f476:	d532      	bpl.n	800f4de <__swbuf_r+0x8e>
 800f478:	6923      	ldr	r3, [r4, #16]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d02f      	beq.n	800f4de <__swbuf_r+0x8e>
 800f47e:	6823      	ldr	r3, [r4, #0]
 800f480:	6922      	ldr	r2, [r4, #16]
 800f482:	b2f7      	uxtb	r7, r6
 800f484:	1a98      	subs	r0, r3, r2
 800f486:	6963      	ldr	r3, [r4, #20]
 800f488:	b2f6      	uxtb	r6, r6
 800f48a:	4283      	cmp	r3, r0
 800f48c:	dc05      	bgt.n	800f49a <__swbuf_r+0x4a>
 800f48e:	0021      	movs	r1, r4
 800f490:	0028      	movs	r0, r5
 800f492:	f000 f94d 	bl	800f730 <_fflush_r>
 800f496:	2800      	cmp	r0, #0
 800f498:	d127      	bne.n	800f4ea <__swbuf_r+0x9a>
 800f49a:	68a3      	ldr	r3, [r4, #8]
 800f49c:	3001      	adds	r0, #1
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	60a3      	str	r3, [r4, #8]
 800f4a2:	6823      	ldr	r3, [r4, #0]
 800f4a4:	1c5a      	adds	r2, r3, #1
 800f4a6:	6022      	str	r2, [r4, #0]
 800f4a8:	701f      	strb	r7, [r3, #0]
 800f4aa:	6963      	ldr	r3, [r4, #20]
 800f4ac:	4283      	cmp	r3, r0
 800f4ae:	d004      	beq.n	800f4ba <__swbuf_r+0x6a>
 800f4b0:	89a3      	ldrh	r3, [r4, #12]
 800f4b2:	07db      	lsls	r3, r3, #31
 800f4b4:	d507      	bpl.n	800f4c6 <__swbuf_r+0x76>
 800f4b6:	2e0a      	cmp	r6, #10
 800f4b8:	d105      	bne.n	800f4c6 <__swbuf_r+0x76>
 800f4ba:	0021      	movs	r1, r4
 800f4bc:	0028      	movs	r0, r5
 800f4be:	f000 f937 	bl	800f730 <_fflush_r>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d111      	bne.n	800f4ea <__swbuf_r+0x9a>
 800f4c6:	0030      	movs	r0, r6
 800f4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ca:	4b0a      	ldr	r3, [pc, #40]	; (800f4f4 <__swbuf_r+0xa4>)
 800f4cc:	429c      	cmp	r4, r3
 800f4ce:	d101      	bne.n	800f4d4 <__swbuf_r+0x84>
 800f4d0:	68ac      	ldr	r4, [r5, #8]
 800f4d2:	e7cc      	b.n	800f46e <__swbuf_r+0x1e>
 800f4d4:	4b08      	ldr	r3, [pc, #32]	; (800f4f8 <__swbuf_r+0xa8>)
 800f4d6:	429c      	cmp	r4, r3
 800f4d8:	d1c9      	bne.n	800f46e <__swbuf_r+0x1e>
 800f4da:	68ec      	ldr	r4, [r5, #12]
 800f4dc:	e7c7      	b.n	800f46e <__swbuf_r+0x1e>
 800f4de:	0021      	movs	r1, r4
 800f4e0:	0028      	movs	r0, r5
 800f4e2:	f000 f819 	bl	800f518 <__swsetup_r>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d0c9      	beq.n	800f47e <__swbuf_r+0x2e>
 800f4ea:	2601      	movs	r6, #1
 800f4ec:	4276      	negs	r6, r6
 800f4ee:	e7ea      	b.n	800f4c6 <__swbuf_r+0x76>
 800f4f0:	0801054c 	.word	0x0801054c
 800f4f4:	0801056c 	.word	0x0801056c
 800f4f8:	0801052c 	.word	0x0801052c

0800f4fc <__ascii_wctomb>:
 800f4fc:	0003      	movs	r3, r0
 800f4fe:	1e08      	subs	r0, r1, #0
 800f500:	d005      	beq.n	800f50e <__ascii_wctomb+0x12>
 800f502:	2aff      	cmp	r2, #255	; 0xff
 800f504:	d904      	bls.n	800f510 <__ascii_wctomb+0x14>
 800f506:	228a      	movs	r2, #138	; 0x8a
 800f508:	2001      	movs	r0, #1
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	4240      	negs	r0, r0
 800f50e:	4770      	bx	lr
 800f510:	2001      	movs	r0, #1
 800f512:	700a      	strb	r2, [r1, #0]
 800f514:	e7fb      	b.n	800f50e <__ascii_wctomb+0x12>
	...

0800f518 <__swsetup_r>:
 800f518:	4b37      	ldr	r3, [pc, #220]	; (800f5f8 <__swsetup_r+0xe0>)
 800f51a:	b570      	push	{r4, r5, r6, lr}
 800f51c:	681d      	ldr	r5, [r3, #0]
 800f51e:	0006      	movs	r6, r0
 800f520:	000c      	movs	r4, r1
 800f522:	2d00      	cmp	r5, #0
 800f524:	d005      	beq.n	800f532 <__swsetup_r+0x1a>
 800f526:	69ab      	ldr	r3, [r5, #24]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d102      	bne.n	800f532 <__swsetup_r+0x1a>
 800f52c:	0028      	movs	r0, r5
 800f52e:	f000 f9a1 	bl	800f874 <__sinit>
 800f532:	4b32      	ldr	r3, [pc, #200]	; (800f5fc <__swsetup_r+0xe4>)
 800f534:	429c      	cmp	r4, r3
 800f536:	d10f      	bne.n	800f558 <__swsetup_r+0x40>
 800f538:	686c      	ldr	r4, [r5, #4]
 800f53a:	230c      	movs	r3, #12
 800f53c:	5ee2      	ldrsh	r2, [r4, r3]
 800f53e:	b293      	uxth	r3, r2
 800f540:	0711      	lsls	r1, r2, #28
 800f542:	d42d      	bmi.n	800f5a0 <__swsetup_r+0x88>
 800f544:	06d9      	lsls	r1, r3, #27
 800f546:	d411      	bmi.n	800f56c <__swsetup_r+0x54>
 800f548:	2309      	movs	r3, #9
 800f54a:	2001      	movs	r0, #1
 800f54c:	6033      	str	r3, [r6, #0]
 800f54e:	3337      	adds	r3, #55	; 0x37
 800f550:	4313      	orrs	r3, r2
 800f552:	81a3      	strh	r3, [r4, #12]
 800f554:	4240      	negs	r0, r0
 800f556:	bd70      	pop	{r4, r5, r6, pc}
 800f558:	4b29      	ldr	r3, [pc, #164]	; (800f600 <__swsetup_r+0xe8>)
 800f55a:	429c      	cmp	r4, r3
 800f55c:	d101      	bne.n	800f562 <__swsetup_r+0x4a>
 800f55e:	68ac      	ldr	r4, [r5, #8]
 800f560:	e7eb      	b.n	800f53a <__swsetup_r+0x22>
 800f562:	4b28      	ldr	r3, [pc, #160]	; (800f604 <__swsetup_r+0xec>)
 800f564:	429c      	cmp	r4, r3
 800f566:	d1e8      	bne.n	800f53a <__swsetup_r+0x22>
 800f568:	68ec      	ldr	r4, [r5, #12]
 800f56a:	e7e6      	b.n	800f53a <__swsetup_r+0x22>
 800f56c:	075b      	lsls	r3, r3, #29
 800f56e:	d513      	bpl.n	800f598 <__swsetup_r+0x80>
 800f570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f572:	2900      	cmp	r1, #0
 800f574:	d008      	beq.n	800f588 <__swsetup_r+0x70>
 800f576:	0023      	movs	r3, r4
 800f578:	3344      	adds	r3, #68	; 0x44
 800f57a:	4299      	cmp	r1, r3
 800f57c:	d002      	beq.n	800f584 <__swsetup_r+0x6c>
 800f57e:	0030      	movs	r0, r6
 800f580:	f7fd fc0e 	bl	800cda0 <_free_r>
 800f584:	2300      	movs	r3, #0
 800f586:	6363      	str	r3, [r4, #52]	; 0x34
 800f588:	2224      	movs	r2, #36	; 0x24
 800f58a:	89a3      	ldrh	r3, [r4, #12]
 800f58c:	4393      	bics	r3, r2
 800f58e:	81a3      	strh	r3, [r4, #12]
 800f590:	2300      	movs	r3, #0
 800f592:	6063      	str	r3, [r4, #4]
 800f594:	6923      	ldr	r3, [r4, #16]
 800f596:	6023      	str	r3, [r4, #0]
 800f598:	2308      	movs	r3, #8
 800f59a:	89a2      	ldrh	r2, [r4, #12]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	81a3      	strh	r3, [r4, #12]
 800f5a0:	6923      	ldr	r3, [r4, #16]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d10b      	bne.n	800f5be <__swsetup_r+0xa6>
 800f5a6:	21a0      	movs	r1, #160	; 0xa0
 800f5a8:	2280      	movs	r2, #128	; 0x80
 800f5aa:	89a3      	ldrh	r3, [r4, #12]
 800f5ac:	0089      	lsls	r1, r1, #2
 800f5ae:	0092      	lsls	r2, r2, #2
 800f5b0:	400b      	ands	r3, r1
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d003      	beq.n	800f5be <__swsetup_r+0xa6>
 800f5b6:	0021      	movs	r1, r4
 800f5b8:	0030      	movs	r0, r6
 800f5ba:	f000 fa23 	bl	800fa04 <__smakebuf_r>
 800f5be:	220c      	movs	r2, #12
 800f5c0:	5ea3      	ldrsh	r3, [r4, r2]
 800f5c2:	2001      	movs	r0, #1
 800f5c4:	001a      	movs	r2, r3
 800f5c6:	b299      	uxth	r1, r3
 800f5c8:	4002      	ands	r2, r0
 800f5ca:	4203      	tst	r3, r0
 800f5cc:	d00f      	beq.n	800f5ee <__swsetup_r+0xd6>
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	60a2      	str	r2, [r4, #8]
 800f5d2:	6962      	ldr	r2, [r4, #20]
 800f5d4:	4252      	negs	r2, r2
 800f5d6:	61a2      	str	r2, [r4, #24]
 800f5d8:	2000      	movs	r0, #0
 800f5da:	6922      	ldr	r2, [r4, #16]
 800f5dc:	4282      	cmp	r2, r0
 800f5de:	d1ba      	bne.n	800f556 <__swsetup_r+0x3e>
 800f5e0:	060a      	lsls	r2, r1, #24
 800f5e2:	d5b8      	bpl.n	800f556 <__swsetup_r+0x3e>
 800f5e4:	2240      	movs	r2, #64	; 0x40
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	81a3      	strh	r3, [r4, #12]
 800f5ea:	3801      	subs	r0, #1
 800f5ec:	e7b3      	b.n	800f556 <__swsetup_r+0x3e>
 800f5ee:	0788      	lsls	r0, r1, #30
 800f5f0:	d400      	bmi.n	800f5f4 <__swsetup_r+0xdc>
 800f5f2:	6962      	ldr	r2, [r4, #20]
 800f5f4:	60a2      	str	r2, [r4, #8]
 800f5f6:	e7ef      	b.n	800f5d8 <__swsetup_r+0xc0>
 800f5f8:	20000018 	.word	0x20000018
 800f5fc:	0801054c 	.word	0x0801054c
 800f600:	0801056c 	.word	0x0801056c
 800f604:	0801052c 	.word	0x0801052c

0800f608 <abort>:
 800f608:	2006      	movs	r0, #6
 800f60a:	b510      	push	{r4, lr}
 800f60c:	f000 fa70 	bl	800faf0 <raise>
 800f610:	2001      	movs	r0, #1
 800f612:	f7f6 ff0d 	bl	8006430 <_exit>
	...

0800f618 <__sflush_r>:
 800f618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f61a:	898b      	ldrh	r3, [r1, #12]
 800f61c:	0005      	movs	r5, r0
 800f61e:	000c      	movs	r4, r1
 800f620:	071a      	lsls	r2, r3, #28
 800f622:	d45f      	bmi.n	800f6e4 <__sflush_r+0xcc>
 800f624:	684a      	ldr	r2, [r1, #4]
 800f626:	2a00      	cmp	r2, #0
 800f628:	dc04      	bgt.n	800f634 <__sflush_r+0x1c>
 800f62a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800f62c:	2a00      	cmp	r2, #0
 800f62e:	dc01      	bgt.n	800f634 <__sflush_r+0x1c>
 800f630:	2000      	movs	r0, #0
 800f632:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f634:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f636:	2f00      	cmp	r7, #0
 800f638:	d0fa      	beq.n	800f630 <__sflush_r+0x18>
 800f63a:	2200      	movs	r2, #0
 800f63c:	2180      	movs	r1, #128	; 0x80
 800f63e:	682e      	ldr	r6, [r5, #0]
 800f640:	602a      	str	r2, [r5, #0]
 800f642:	001a      	movs	r2, r3
 800f644:	0149      	lsls	r1, r1, #5
 800f646:	400a      	ands	r2, r1
 800f648:	420b      	tst	r3, r1
 800f64a:	d034      	beq.n	800f6b6 <__sflush_r+0x9e>
 800f64c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	075b      	lsls	r3, r3, #29
 800f652:	d506      	bpl.n	800f662 <__sflush_r+0x4a>
 800f654:	6863      	ldr	r3, [r4, #4]
 800f656:	1ac0      	subs	r0, r0, r3
 800f658:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <__sflush_r+0x4a>
 800f65e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f660:	1ac0      	subs	r0, r0, r3
 800f662:	0002      	movs	r2, r0
 800f664:	6a21      	ldr	r1, [r4, #32]
 800f666:	2300      	movs	r3, #0
 800f668:	0028      	movs	r0, r5
 800f66a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f66c:	47b8      	blx	r7
 800f66e:	89a1      	ldrh	r1, [r4, #12]
 800f670:	1c43      	adds	r3, r0, #1
 800f672:	d106      	bne.n	800f682 <__sflush_r+0x6a>
 800f674:	682b      	ldr	r3, [r5, #0]
 800f676:	2b1d      	cmp	r3, #29
 800f678:	d831      	bhi.n	800f6de <__sflush_r+0xc6>
 800f67a:	4a2c      	ldr	r2, [pc, #176]	; (800f72c <__sflush_r+0x114>)
 800f67c:	40da      	lsrs	r2, r3
 800f67e:	07d3      	lsls	r3, r2, #31
 800f680:	d52d      	bpl.n	800f6de <__sflush_r+0xc6>
 800f682:	2300      	movs	r3, #0
 800f684:	6063      	str	r3, [r4, #4]
 800f686:	6923      	ldr	r3, [r4, #16]
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	04cb      	lsls	r3, r1, #19
 800f68c:	d505      	bpl.n	800f69a <__sflush_r+0x82>
 800f68e:	1c43      	adds	r3, r0, #1
 800f690:	d102      	bne.n	800f698 <__sflush_r+0x80>
 800f692:	682b      	ldr	r3, [r5, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d100      	bne.n	800f69a <__sflush_r+0x82>
 800f698:	6560      	str	r0, [r4, #84]	; 0x54
 800f69a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f69c:	602e      	str	r6, [r5, #0]
 800f69e:	2900      	cmp	r1, #0
 800f6a0:	d0c6      	beq.n	800f630 <__sflush_r+0x18>
 800f6a2:	0023      	movs	r3, r4
 800f6a4:	3344      	adds	r3, #68	; 0x44
 800f6a6:	4299      	cmp	r1, r3
 800f6a8:	d002      	beq.n	800f6b0 <__sflush_r+0x98>
 800f6aa:	0028      	movs	r0, r5
 800f6ac:	f7fd fb78 	bl	800cda0 <_free_r>
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	6360      	str	r0, [r4, #52]	; 0x34
 800f6b4:	e7bd      	b.n	800f632 <__sflush_r+0x1a>
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	0028      	movs	r0, r5
 800f6ba:	6a21      	ldr	r1, [r4, #32]
 800f6bc:	47b8      	blx	r7
 800f6be:	1c43      	adds	r3, r0, #1
 800f6c0:	d1c5      	bne.n	800f64e <__sflush_r+0x36>
 800f6c2:	682b      	ldr	r3, [r5, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d0c2      	beq.n	800f64e <__sflush_r+0x36>
 800f6c8:	2b1d      	cmp	r3, #29
 800f6ca:	d001      	beq.n	800f6d0 <__sflush_r+0xb8>
 800f6cc:	2b16      	cmp	r3, #22
 800f6ce:	d101      	bne.n	800f6d4 <__sflush_r+0xbc>
 800f6d0:	602e      	str	r6, [r5, #0]
 800f6d2:	e7ad      	b.n	800f630 <__sflush_r+0x18>
 800f6d4:	2340      	movs	r3, #64	; 0x40
 800f6d6:	89a2      	ldrh	r2, [r4, #12]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	81a3      	strh	r3, [r4, #12]
 800f6dc:	e7a9      	b.n	800f632 <__sflush_r+0x1a>
 800f6de:	2340      	movs	r3, #64	; 0x40
 800f6e0:	430b      	orrs	r3, r1
 800f6e2:	e7fa      	b.n	800f6da <__sflush_r+0xc2>
 800f6e4:	690f      	ldr	r7, [r1, #16]
 800f6e6:	2f00      	cmp	r7, #0
 800f6e8:	d0a2      	beq.n	800f630 <__sflush_r+0x18>
 800f6ea:	680a      	ldr	r2, [r1, #0]
 800f6ec:	600f      	str	r7, [r1, #0]
 800f6ee:	1bd2      	subs	r2, r2, r7
 800f6f0:	9201      	str	r2, [sp, #4]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	079b      	lsls	r3, r3, #30
 800f6f6:	d100      	bne.n	800f6fa <__sflush_r+0xe2>
 800f6f8:	694a      	ldr	r2, [r1, #20]
 800f6fa:	60a2      	str	r2, [r4, #8]
 800f6fc:	9b01      	ldr	r3, [sp, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	dc00      	bgt.n	800f704 <__sflush_r+0xec>
 800f702:	e795      	b.n	800f630 <__sflush_r+0x18>
 800f704:	003a      	movs	r2, r7
 800f706:	0028      	movs	r0, r5
 800f708:	9b01      	ldr	r3, [sp, #4]
 800f70a:	6a21      	ldr	r1, [r4, #32]
 800f70c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f70e:	47b0      	blx	r6
 800f710:	2800      	cmp	r0, #0
 800f712:	dc06      	bgt.n	800f722 <__sflush_r+0x10a>
 800f714:	2340      	movs	r3, #64	; 0x40
 800f716:	2001      	movs	r0, #1
 800f718:	89a2      	ldrh	r2, [r4, #12]
 800f71a:	4240      	negs	r0, r0
 800f71c:	4313      	orrs	r3, r2
 800f71e:	81a3      	strh	r3, [r4, #12]
 800f720:	e787      	b.n	800f632 <__sflush_r+0x1a>
 800f722:	9b01      	ldr	r3, [sp, #4]
 800f724:	183f      	adds	r7, r7, r0
 800f726:	1a1b      	subs	r3, r3, r0
 800f728:	9301      	str	r3, [sp, #4]
 800f72a:	e7e7      	b.n	800f6fc <__sflush_r+0xe4>
 800f72c:	20400001 	.word	0x20400001

0800f730 <_fflush_r>:
 800f730:	690b      	ldr	r3, [r1, #16]
 800f732:	b570      	push	{r4, r5, r6, lr}
 800f734:	0005      	movs	r5, r0
 800f736:	000c      	movs	r4, r1
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d102      	bne.n	800f742 <_fflush_r+0x12>
 800f73c:	2500      	movs	r5, #0
 800f73e:	0028      	movs	r0, r5
 800f740:	bd70      	pop	{r4, r5, r6, pc}
 800f742:	2800      	cmp	r0, #0
 800f744:	d004      	beq.n	800f750 <_fflush_r+0x20>
 800f746:	6983      	ldr	r3, [r0, #24]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d101      	bne.n	800f750 <_fflush_r+0x20>
 800f74c:	f000 f892 	bl	800f874 <__sinit>
 800f750:	4b14      	ldr	r3, [pc, #80]	; (800f7a4 <_fflush_r+0x74>)
 800f752:	429c      	cmp	r4, r3
 800f754:	d11b      	bne.n	800f78e <_fflush_r+0x5e>
 800f756:	686c      	ldr	r4, [r5, #4]
 800f758:	220c      	movs	r2, #12
 800f75a:	5ea3      	ldrsh	r3, [r4, r2]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d0ed      	beq.n	800f73c <_fflush_r+0xc>
 800f760:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f762:	07d2      	lsls	r2, r2, #31
 800f764:	d404      	bmi.n	800f770 <_fflush_r+0x40>
 800f766:	059b      	lsls	r3, r3, #22
 800f768:	d402      	bmi.n	800f770 <_fflush_r+0x40>
 800f76a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f76c:	f7ff fcb9 	bl	800f0e2 <__retarget_lock_acquire_recursive>
 800f770:	0028      	movs	r0, r5
 800f772:	0021      	movs	r1, r4
 800f774:	f7ff ff50 	bl	800f618 <__sflush_r>
 800f778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f77a:	0005      	movs	r5, r0
 800f77c:	07db      	lsls	r3, r3, #31
 800f77e:	d4de      	bmi.n	800f73e <_fflush_r+0xe>
 800f780:	89a3      	ldrh	r3, [r4, #12]
 800f782:	059b      	lsls	r3, r3, #22
 800f784:	d4db      	bmi.n	800f73e <_fflush_r+0xe>
 800f786:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f788:	f7ff fcac 	bl	800f0e4 <__retarget_lock_release_recursive>
 800f78c:	e7d7      	b.n	800f73e <_fflush_r+0xe>
 800f78e:	4b06      	ldr	r3, [pc, #24]	; (800f7a8 <_fflush_r+0x78>)
 800f790:	429c      	cmp	r4, r3
 800f792:	d101      	bne.n	800f798 <_fflush_r+0x68>
 800f794:	68ac      	ldr	r4, [r5, #8]
 800f796:	e7df      	b.n	800f758 <_fflush_r+0x28>
 800f798:	4b04      	ldr	r3, [pc, #16]	; (800f7ac <_fflush_r+0x7c>)
 800f79a:	429c      	cmp	r4, r3
 800f79c:	d1dc      	bne.n	800f758 <_fflush_r+0x28>
 800f79e:	68ec      	ldr	r4, [r5, #12]
 800f7a0:	e7da      	b.n	800f758 <_fflush_r+0x28>
 800f7a2:	46c0      	nop			; (mov r8, r8)
 800f7a4:	0801054c 	.word	0x0801054c
 800f7a8:	0801056c 	.word	0x0801056c
 800f7ac:	0801052c 	.word	0x0801052c

0800f7b0 <std>:
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	b510      	push	{r4, lr}
 800f7b4:	0004      	movs	r4, r0
 800f7b6:	6003      	str	r3, [r0, #0]
 800f7b8:	6043      	str	r3, [r0, #4]
 800f7ba:	6083      	str	r3, [r0, #8]
 800f7bc:	8181      	strh	r1, [r0, #12]
 800f7be:	6643      	str	r3, [r0, #100]	; 0x64
 800f7c0:	0019      	movs	r1, r3
 800f7c2:	81c2      	strh	r2, [r0, #14]
 800f7c4:	6103      	str	r3, [r0, #16]
 800f7c6:	6143      	str	r3, [r0, #20]
 800f7c8:	6183      	str	r3, [r0, #24]
 800f7ca:	2208      	movs	r2, #8
 800f7cc:	305c      	adds	r0, #92	; 0x5c
 800f7ce:	f7fd fade 	bl	800cd8e <memset>
 800f7d2:	4b05      	ldr	r3, [pc, #20]	; (800f7e8 <std+0x38>)
 800f7d4:	6224      	str	r4, [r4, #32]
 800f7d6:	6263      	str	r3, [r4, #36]	; 0x24
 800f7d8:	4b04      	ldr	r3, [pc, #16]	; (800f7ec <std+0x3c>)
 800f7da:	62a3      	str	r3, [r4, #40]	; 0x28
 800f7dc:	4b04      	ldr	r3, [pc, #16]	; (800f7f0 <std+0x40>)
 800f7de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f7e0:	4b04      	ldr	r3, [pc, #16]	; (800f7f4 <std+0x44>)
 800f7e2:	6323      	str	r3, [r4, #48]	; 0x30
 800f7e4:	bd10      	pop	{r4, pc}
 800f7e6:	46c0      	nop			; (mov r8, r8)
 800f7e8:	0800fb31 	.word	0x0800fb31
 800f7ec:	0800fb59 	.word	0x0800fb59
 800f7f0:	0800fb91 	.word	0x0800fb91
 800f7f4:	0800fbbd 	.word	0x0800fbbd

0800f7f8 <_cleanup_r>:
 800f7f8:	b510      	push	{r4, lr}
 800f7fa:	4902      	ldr	r1, [pc, #8]	; (800f804 <_cleanup_r+0xc>)
 800f7fc:	f000 f8ba 	bl	800f974 <_fwalk_reent>
 800f800:	bd10      	pop	{r4, pc}
 800f802:	46c0      	nop			; (mov r8, r8)
 800f804:	0800f731 	.word	0x0800f731

0800f808 <__sfmoreglue>:
 800f808:	b570      	push	{r4, r5, r6, lr}
 800f80a:	2568      	movs	r5, #104	; 0x68
 800f80c:	1e4a      	subs	r2, r1, #1
 800f80e:	4355      	muls	r5, r2
 800f810:	000e      	movs	r6, r1
 800f812:	0029      	movs	r1, r5
 800f814:	3174      	adds	r1, #116	; 0x74
 800f816:	f7fd fb2f 	bl	800ce78 <_malloc_r>
 800f81a:	1e04      	subs	r4, r0, #0
 800f81c:	d008      	beq.n	800f830 <__sfmoreglue+0x28>
 800f81e:	2100      	movs	r1, #0
 800f820:	002a      	movs	r2, r5
 800f822:	6001      	str	r1, [r0, #0]
 800f824:	6046      	str	r6, [r0, #4]
 800f826:	300c      	adds	r0, #12
 800f828:	60a0      	str	r0, [r4, #8]
 800f82a:	3268      	adds	r2, #104	; 0x68
 800f82c:	f7fd faaf 	bl	800cd8e <memset>
 800f830:	0020      	movs	r0, r4
 800f832:	bd70      	pop	{r4, r5, r6, pc}

0800f834 <__sfp_lock_acquire>:
 800f834:	b510      	push	{r4, lr}
 800f836:	4802      	ldr	r0, [pc, #8]	; (800f840 <__sfp_lock_acquire+0xc>)
 800f838:	f7ff fc53 	bl	800f0e2 <__retarget_lock_acquire_recursive>
 800f83c:	bd10      	pop	{r4, pc}
 800f83e:	46c0      	nop			; (mov r8, r8)
 800f840:	200009d5 	.word	0x200009d5

0800f844 <__sfp_lock_release>:
 800f844:	b510      	push	{r4, lr}
 800f846:	4802      	ldr	r0, [pc, #8]	; (800f850 <__sfp_lock_release+0xc>)
 800f848:	f7ff fc4c 	bl	800f0e4 <__retarget_lock_release_recursive>
 800f84c:	bd10      	pop	{r4, pc}
 800f84e:	46c0      	nop			; (mov r8, r8)
 800f850:	200009d5 	.word	0x200009d5

0800f854 <__sinit_lock_acquire>:
 800f854:	b510      	push	{r4, lr}
 800f856:	4802      	ldr	r0, [pc, #8]	; (800f860 <__sinit_lock_acquire+0xc>)
 800f858:	f7ff fc43 	bl	800f0e2 <__retarget_lock_acquire_recursive>
 800f85c:	bd10      	pop	{r4, pc}
 800f85e:	46c0      	nop			; (mov r8, r8)
 800f860:	200009d6 	.word	0x200009d6

0800f864 <__sinit_lock_release>:
 800f864:	b510      	push	{r4, lr}
 800f866:	4802      	ldr	r0, [pc, #8]	; (800f870 <__sinit_lock_release+0xc>)
 800f868:	f7ff fc3c 	bl	800f0e4 <__retarget_lock_release_recursive>
 800f86c:	bd10      	pop	{r4, pc}
 800f86e:	46c0      	nop			; (mov r8, r8)
 800f870:	200009d6 	.word	0x200009d6

0800f874 <__sinit>:
 800f874:	b513      	push	{r0, r1, r4, lr}
 800f876:	0004      	movs	r4, r0
 800f878:	f7ff ffec 	bl	800f854 <__sinit_lock_acquire>
 800f87c:	69a3      	ldr	r3, [r4, #24]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d002      	beq.n	800f888 <__sinit+0x14>
 800f882:	f7ff ffef 	bl	800f864 <__sinit_lock_release>
 800f886:	bd13      	pop	{r0, r1, r4, pc}
 800f888:	64a3      	str	r3, [r4, #72]	; 0x48
 800f88a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f88c:	6523      	str	r3, [r4, #80]	; 0x50
 800f88e:	4b13      	ldr	r3, [pc, #76]	; (800f8dc <__sinit+0x68>)
 800f890:	4a13      	ldr	r2, [pc, #76]	; (800f8e0 <__sinit+0x6c>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	62a2      	str	r2, [r4, #40]	; 0x28
 800f896:	9301      	str	r3, [sp, #4]
 800f898:	42a3      	cmp	r3, r4
 800f89a:	d101      	bne.n	800f8a0 <__sinit+0x2c>
 800f89c:	2301      	movs	r3, #1
 800f89e:	61a3      	str	r3, [r4, #24]
 800f8a0:	0020      	movs	r0, r4
 800f8a2:	f000 f81f 	bl	800f8e4 <__sfp>
 800f8a6:	6060      	str	r0, [r4, #4]
 800f8a8:	0020      	movs	r0, r4
 800f8aa:	f000 f81b 	bl	800f8e4 <__sfp>
 800f8ae:	60a0      	str	r0, [r4, #8]
 800f8b0:	0020      	movs	r0, r4
 800f8b2:	f000 f817 	bl	800f8e4 <__sfp>
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	2104      	movs	r1, #4
 800f8ba:	60e0      	str	r0, [r4, #12]
 800f8bc:	6860      	ldr	r0, [r4, #4]
 800f8be:	f7ff ff77 	bl	800f7b0 <std>
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	2109      	movs	r1, #9
 800f8c6:	68a0      	ldr	r0, [r4, #8]
 800f8c8:	f7ff ff72 	bl	800f7b0 <std>
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	2112      	movs	r1, #18
 800f8d0:	68e0      	ldr	r0, [r4, #12]
 800f8d2:	f7ff ff6d 	bl	800f7b0 <std>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	61a3      	str	r3, [r4, #24]
 800f8da:	e7d2      	b.n	800f882 <__sinit+0xe>
 800f8dc:	080101b0 	.word	0x080101b0
 800f8e0:	0800f7f9 	.word	0x0800f7f9

0800f8e4 <__sfp>:
 800f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e6:	0007      	movs	r7, r0
 800f8e8:	f7ff ffa4 	bl	800f834 <__sfp_lock_acquire>
 800f8ec:	4b1f      	ldr	r3, [pc, #124]	; (800f96c <__sfp+0x88>)
 800f8ee:	681e      	ldr	r6, [r3, #0]
 800f8f0:	69b3      	ldr	r3, [r6, #24]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d102      	bne.n	800f8fc <__sfp+0x18>
 800f8f6:	0030      	movs	r0, r6
 800f8f8:	f7ff ffbc 	bl	800f874 <__sinit>
 800f8fc:	3648      	adds	r6, #72	; 0x48
 800f8fe:	68b4      	ldr	r4, [r6, #8]
 800f900:	6873      	ldr	r3, [r6, #4]
 800f902:	3b01      	subs	r3, #1
 800f904:	d504      	bpl.n	800f910 <__sfp+0x2c>
 800f906:	6833      	ldr	r3, [r6, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d022      	beq.n	800f952 <__sfp+0x6e>
 800f90c:	6836      	ldr	r6, [r6, #0]
 800f90e:	e7f6      	b.n	800f8fe <__sfp+0x1a>
 800f910:	220c      	movs	r2, #12
 800f912:	5ea5      	ldrsh	r5, [r4, r2]
 800f914:	2d00      	cmp	r5, #0
 800f916:	d11a      	bne.n	800f94e <__sfp+0x6a>
 800f918:	0020      	movs	r0, r4
 800f91a:	4b15      	ldr	r3, [pc, #84]	; (800f970 <__sfp+0x8c>)
 800f91c:	3058      	adds	r0, #88	; 0x58
 800f91e:	60e3      	str	r3, [r4, #12]
 800f920:	6665      	str	r5, [r4, #100]	; 0x64
 800f922:	f7ff fbdd 	bl	800f0e0 <__retarget_lock_init_recursive>
 800f926:	f7ff ff8d 	bl	800f844 <__sfp_lock_release>
 800f92a:	0020      	movs	r0, r4
 800f92c:	2208      	movs	r2, #8
 800f92e:	0029      	movs	r1, r5
 800f930:	6025      	str	r5, [r4, #0]
 800f932:	60a5      	str	r5, [r4, #8]
 800f934:	6065      	str	r5, [r4, #4]
 800f936:	6125      	str	r5, [r4, #16]
 800f938:	6165      	str	r5, [r4, #20]
 800f93a:	61a5      	str	r5, [r4, #24]
 800f93c:	305c      	adds	r0, #92	; 0x5c
 800f93e:	f7fd fa26 	bl	800cd8e <memset>
 800f942:	6365      	str	r5, [r4, #52]	; 0x34
 800f944:	63a5      	str	r5, [r4, #56]	; 0x38
 800f946:	64a5      	str	r5, [r4, #72]	; 0x48
 800f948:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f94a:	0020      	movs	r0, r4
 800f94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f94e:	3468      	adds	r4, #104	; 0x68
 800f950:	e7d7      	b.n	800f902 <__sfp+0x1e>
 800f952:	2104      	movs	r1, #4
 800f954:	0038      	movs	r0, r7
 800f956:	f7ff ff57 	bl	800f808 <__sfmoreglue>
 800f95a:	1e04      	subs	r4, r0, #0
 800f95c:	6030      	str	r0, [r6, #0]
 800f95e:	d1d5      	bne.n	800f90c <__sfp+0x28>
 800f960:	f7ff ff70 	bl	800f844 <__sfp_lock_release>
 800f964:	230c      	movs	r3, #12
 800f966:	603b      	str	r3, [r7, #0]
 800f968:	e7ef      	b.n	800f94a <__sfp+0x66>
 800f96a:	46c0      	nop			; (mov r8, r8)
 800f96c:	080101b0 	.word	0x080101b0
 800f970:	ffff0001 	.word	0xffff0001

0800f974 <_fwalk_reent>:
 800f974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f976:	0004      	movs	r4, r0
 800f978:	0006      	movs	r6, r0
 800f97a:	2700      	movs	r7, #0
 800f97c:	9101      	str	r1, [sp, #4]
 800f97e:	3448      	adds	r4, #72	; 0x48
 800f980:	6863      	ldr	r3, [r4, #4]
 800f982:	68a5      	ldr	r5, [r4, #8]
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	9b00      	ldr	r3, [sp, #0]
 800f988:	3b01      	subs	r3, #1
 800f98a:	9300      	str	r3, [sp, #0]
 800f98c:	d504      	bpl.n	800f998 <_fwalk_reent+0x24>
 800f98e:	6824      	ldr	r4, [r4, #0]
 800f990:	2c00      	cmp	r4, #0
 800f992:	d1f5      	bne.n	800f980 <_fwalk_reent+0xc>
 800f994:	0038      	movs	r0, r7
 800f996:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f998:	89ab      	ldrh	r3, [r5, #12]
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d908      	bls.n	800f9b0 <_fwalk_reent+0x3c>
 800f99e:	220e      	movs	r2, #14
 800f9a0:	5eab      	ldrsh	r3, [r5, r2]
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	d004      	beq.n	800f9b0 <_fwalk_reent+0x3c>
 800f9a6:	0029      	movs	r1, r5
 800f9a8:	0030      	movs	r0, r6
 800f9aa:	9b01      	ldr	r3, [sp, #4]
 800f9ac:	4798      	blx	r3
 800f9ae:	4307      	orrs	r7, r0
 800f9b0:	3568      	adds	r5, #104	; 0x68
 800f9b2:	e7e8      	b.n	800f986 <_fwalk_reent+0x12>

0800f9b4 <__swhatbuf_r>:
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	000e      	movs	r6, r1
 800f9b8:	001d      	movs	r5, r3
 800f9ba:	230e      	movs	r3, #14
 800f9bc:	5ec9      	ldrsh	r1, [r1, r3]
 800f9be:	0014      	movs	r4, r2
 800f9c0:	b096      	sub	sp, #88	; 0x58
 800f9c2:	2900      	cmp	r1, #0
 800f9c4:	da08      	bge.n	800f9d8 <__swhatbuf_r+0x24>
 800f9c6:	220c      	movs	r2, #12
 800f9c8:	5eb3      	ldrsh	r3, [r6, r2]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	602a      	str	r2, [r5, #0]
 800f9ce:	061b      	lsls	r3, r3, #24
 800f9d0:	d411      	bmi.n	800f9f6 <__swhatbuf_r+0x42>
 800f9d2:	2380      	movs	r3, #128	; 0x80
 800f9d4:	00db      	lsls	r3, r3, #3
 800f9d6:	e00f      	b.n	800f9f8 <__swhatbuf_r+0x44>
 800f9d8:	466a      	mov	r2, sp
 800f9da:	f000 f91b 	bl	800fc14 <_fstat_r>
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	dbf1      	blt.n	800f9c6 <__swhatbuf_r+0x12>
 800f9e2:	23f0      	movs	r3, #240	; 0xf0
 800f9e4:	9901      	ldr	r1, [sp, #4]
 800f9e6:	021b      	lsls	r3, r3, #8
 800f9e8:	4019      	ands	r1, r3
 800f9ea:	4b05      	ldr	r3, [pc, #20]	; (800fa00 <__swhatbuf_r+0x4c>)
 800f9ec:	18c9      	adds	r1, r1, r3
 800f9ee:	424b      	negs	r3, r1
 800f9f0:	4159      	adcs	r1, r3
 800f9f2:	6029      	str	r1, [r5, #0]
 800f9f4:	e7ed      	b.n	800f9d2 <__swhatbuf_r+0x1e>
 800f9f6:	2340      	movs	r3, #64	; 0x40
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	6023      	str	r3, [r4, #0]
 800f9fc:	b016      	add	sp, #88	; 0x58
 800f9fe:	bd70      	pop	{r4, r5, r6, pc}
 800fa00:	ffffe000 	.word	0xffffe000

0800fa04 <__smakebuf_r>:
 800fa04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa06:	2602      	movs	r6, #2
 800fa08:	898b      	ldrh	r3, [r1, #12]
 800fa0a:	0005      	movs	r5, r0
 800fa0c:	000c      	movs	r4, r1
 800fa0e:	4233      	tst	r3, r6
 800fa10:	d006      	beq.n	800fa20 <__smakebuf_r+0x1c>
 800fa12:	0023      	movs	r3, r4
 800fa14:	3347      	adds	r3, #71	; 0x47
 800fa16:	6023      	str	r3, [r4, #0]
 800fa18:	6123      	str	r3, [r4, #16]
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	6163      	str	r3, [r4, #20]
 800fa1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800fa20:	466a      	mov	r2, sp
 800fa22:	ab01      	add	r3, sp, #4
 800fa24:	f7ff ffc6 	bl	800f9b4 <__swhatbuf_r>
 800fa28:	9900      	ldr	r1, [sp, #0]
 800fa2a:	0007      	movs	r7, r0
 800fa2c:	0028      	movs	r0, r5
 800fa2e:	f7fd fa23 	bl	800ce78 <_malloc_r>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d108      	bne.n	800fa48 <__smakebuf_r+0x44>
 800fa36:	220c      	movs	r2, #12
 800fa38:	5ea3      	ldrsh	r3, [r4, r2]
 800fa3a:	059a      	lsls	r2, r3, #22
 800fa3c:	d4ef      	bmi.n	800fa1e <__smakebuf_r+0x1a>
 800fa3e:	2203      	movs	r2, #3
 800fa40:	4393      	bics	r3, r2
 800fa42:	431e      	orrs	r6, r3
 800fa44:	81a6      	strh	r6, [r4, #12]
 800fa46:	e7e4      	b.n	800fa12 <__smakebuf_r+0xe>
 800fa48:	4b0f      	ldr	r3, [pc, #60]	; (800fa88 <__smakebuf_r+0x84>)
 800fa4a:	62ab      	str	r3, [r5, #40]	; 0x28
 800fa4c:	2380      	movs	r3, #128	; 0x80
 800fa4e:	89a2      	ldrh	r2, [r4, #12]
 800fa50:	6020      	str	r0, [r4, #0]
 800fa52:	4313      	orrs	r3, r2
 800fa54:	81a3      	strh	r3, [r4, #12]
 800fa56:	9b00      	ldr	r3, [sp, #0]
 800fa58:	6120      	str	r0, [r4, #16]
 800fa5a:	6163      	str	r3, [r4, #20]
 800fa5c:	9b01      	ldr	r3, [sp, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00d      	beq.n	800fa7e <__smakebuf_r+0x7a>
 800fa62:	0028      	movs	r0, r5
 800fa64:	230e      	movs	r3, #14
 800fa66:	5ee1      	ldrsh	r1, [r4, r3]
 800fa68:	f000 f8e6 	bl	800fc38 <_isatty_r>
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	d006      	beq.n	800fa7e <__smakebuf_r+0x7a>
 800fa70:	2203      	movs	r2, #3
 800fa72:	89a3      	ldrh	r3, [r4, #12]
 800fa74:	4393      	bics	r3, r2
 800fa76:	001a      	movs	r2, r3
 800fa78:	2301      	movs	r3, #1
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	81a3      	strh	r3, [r4, #12]
 800fa7e:	89a0      	ldrh	r0, [r4, #12]
 800fa80:	4307      	orrs	r7, r0
 800fa82:	81a7      	strh	r7, [r4, #12]
 800fa84:	e7cb      	b.n	800fa1e <__smakebuf_r+0x1a>
 800fa86:	46c0      	nop			; (mov r8, r8)
 800fa88:	0800f7f9 	.word	0x0800f7f9

0800fa8c <_malloc_usable_size_r>:
 800fa8c:	1f0b      	subs	r3, r1, #4
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	1f18      	subs	r0, r3, #4
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	da01      	bge.n	800fa9a <_malloc_usable_size_r+0xe>
 800fa96:	580b      	ldr	r3, [r1, r0]
 800fa98:	18c0      	adds	r0, r0, r3
 800fa9a:	4770      	bx	lr

0800fa9c <_raise_r>:
 800fa9c:	b570      	push	{r4, r5, r6, lr}
 800fa9e:	0004      	movs	r4, r0
 800faa0:	000d      	movs	r5, r1
 800faa2:	291f      	cmp	r1, #31
 800faa4:	d904      	bls.n	800fab0 <_raise_r+0x14>
 800faa6:	2316      	movs	r3, #22
 800faa8:	6003      	str	r3, [r0, #0]
 800faaa:	2001      	movs	r0, #1
 800faac:	4240      	negs	r0, r0
 800faae:	bd70      	pop	{r4, r5, r6, pc}
 800fab0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d004      	beq.n	800fac0 <_raise_r+0x24>
 800fab6:	008a      	lsls	r2, r1, #2
 800fab8:	189b      	adds	r3, r3, r2
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	2a00      	cmp	r2, #0
 800fabe:	d108      	bne.n	800fad2 <_raise_r+0x36>
 800fac0:	0020      	movs	r0, r4
 800fac2:	f000 f831 	bl	800fb28 <_getpid_r>
 800fac6:	002a      	movs	r2, r5
 800fac8:	0001      	movs	r1, r0
 800faca:	0020      	movs	r0, r4
 800facc:	f000 f81a 	bl	800fb04 <_kill_r>
 800fad0:	e7ed      	b.n	800faae <_raise_r+0x12>
 800fad2:	2000      	movs	r0, #0
 800fad4:	2a01      	cmp	r2, #1
 800fad6:	d0ea      	beq.n	800faae <_raise_r+0x12>
 800fad8:	1c51      	adds	r1, r2, #1
 800fada:	d103      	bne.n	800fae4 <_raise_r+0x48>
 800fadc:	2316      	movs	r3, #22
 800fade:	3001      	adds	r0, #1
 800fae0:	6023      	str	r3, [r4, #0]
 800fae2:	e7e4      	b.n	800faae <_raise_r+0x12>
 800fae4:	2400      	movs	r4, #0
 800fae6:	0028      	movs	r0, r5
 800fae8:	601c      	str	r4, [r3, #0]
 800faea:	4790      	blx	r2
 800faec:	0020      	movs	r0, r4
 800faee:	e7de      	b.n	800faae <_raise_r+0x12>

0800faf0 <raise>:
 800faf0:	b510      	push	{r4, lr}
 800faf2:	4b03      	ldr	r3, [pc, #12]	; (800fb00 <raise+0x10>)
 800faf4:	0001      	movs	r1, r0
 800faf6:	6818      	ldr	r0, [r3, #0]
 800faf8:	f7ff ffd0 	bl	800fa9c <_raise_r>
 800fafc:	bd10      	pop	{r4, pc}
 800fafe:	46c0      	nop			; (mov r8, r8)
 800fb00:	20000018 	.word	0x20000018

0800fb04 <_kill_r>:
 800fb04:	2300      	movs	r3, #0
 800fb06:	b570      	push	{r4, r5, r6, lr}
 800fb08:	4d06      	ldr	r5, [pc, #24]	; (800fb24 <_kill_r+0x20>)
 800fb0a:	0004      	movs	r4, r0
 800fb0c:	0008      	movs	r0, r1
 800fb0e:	0011      	movs	r1, r2
 800fb10:	602b      	str	r3, [r5, #0]
 800fb12:	f7f6 fc7d 	bl	8006410 <_kill>
 800fb16:	1c43      	adds	r3, r0, #1
 800fb18:	d103      	bne.n	800fb22 <_kill_r+0x1e>
 800fb1a:	682b      	ldr	r3, [r5, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d000      	beq.n	800fb22 <_kill_r+0x1e>
 800fb20:	6023      	str	r3, [r4, #0]
 800fb22:	bd70      	pop	{r4, r5, r6, pc}
 800fb24:	200009d0 	.word	0x200009d0

0800fb28 <_getpid_r>:
 800fb28:	b510      	push	{r4, lr}
 800fb2a:	f7f6 fc6b 	bl	8006404 <_getpid>
 800fb2e:	bd10      	pop	{r4, pc}

0800fb30 <__sread>:
 800fb30:	b570      	push	{r4, r5, r6, lr}
 800fb32:	000c      	movs	r4, r1
 800fb34:	250e      	movs	r5, #14
 800fb36:	5f49      	ldrsh	r1, [r1, r5]
 800fb38:	f000 f8a4 	bl	800fc84 <_read_r>
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	db03      	blt.n	800fb48 <__sread+0x18>
 800fb40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800fb42:	181b      	adds	r3, r3, r0
 800fb44:	6563      	str	r3, [r4, #84]	; 0x54
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
 800fb48:	89a3      	ldrh	r3, [r4, #12]
 800fb4a:	4a02      	ldr	r2, [pc, #8]	; (800fb54 <__sread+0x24>)
 800fb4c:	4013      	ands	r3, r2
 800fb4e:	81a3      	strh	r3, [r4, #12]
 800fb50:	e7f9      	b.n	800fb46 <__sread+0x16>
 800fb52:	46c0      	nop			; (mov r8, r8)
 800fb54:	ffffefff 	.word	0xffffefff

0800fb58 <__swrite>:
 800fb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5a:	001f      	movs	r7, r3
 800fb5c:	898b      	ldrh	r3, [r1, #12]
 800fb5e:	0005      	movs	r5, r0
 800fb60:	000c      	movs	r4, r1
 800fb62:	0016      	movs	r6, r2
 800fb64:	05db      	lsls	r3, r3, #23
 800fb66:	d505      	bpl.n	800fb74 <__swrite+0x1c>
 800fb68:	230e      	movs	r3, #14
 800fb6a:	5ec9      	ldrsh	r1, [r1, r3]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	2302      	movs	r3, #2
 800fb70:	f000 f874 	bl	800fc5c <_lseek_r>
 800fb74:	89a3      	ldrh	r3, [r4, #12]
 800fb76:	4a05      	ldr	r2, [pc, #20]	; (800fb8c <__swrite+0x34>)
 800fb78:	0028      	movs	r0, r5
 800fb7a:	4013      	ands	r3, r2
 800fb7c:	81a3      	strh	r3, [r4, #12]
 800fb7e:	0032      	movs	r2, r6
 800fb80:	230e      	movs	r3, #14
 800fb82:	5ee1      	ldrsh	r1, [r4, r3]
 800fb84:	003b      	movs	r3, r7
 800fb86:	f000 f81f 	bl	800fbc8 <_write_r>
 800fb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb8c:	ffffefff 	.word	0xffffefff

0800fb90 <__sseek>:
 800fb90:	b570      	push	{r4, r5, r6, lr}
 800fb92:	000c      	movs	r4, r1
 800fb94:	250e      	movs	r5, #14
 800fb96:	5f49      	ldrsh	r1, [r1, r5]
 800fb98:	f000 f860 	bl	800fc5c <_lseek_r>
 800fb9c:	89a3      	ldrh	r3, [r4, #12]
 800fb9e:	1c42      	adds	r2, r0, #1
 800fba0:	d103      	bne.n	800fbaa <__sseek+0x1a>
 800fba2:	4a05      	ldr	r2, [pc, #20]	; (800fbb8 <__sseek+0x28>)
 800fba4:	4013      	ands	r3, r2
 800fba6:	81a3      	strh	r3, [r4, #12]
 800fba8:	bd70      	pop	{r4, r5, r6, pc}
 800fbaa:	2280      	movs	r2, #128	; 0x80
 800fbac:	0152      	lsls	r2, r2, #5
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	81a3      	strh	r3, [r4, #12]
 800fbb2:	6560      	str	r0, [r4, #84]	; 0x54
 800fbb4:	e7f8      	b.n	800fba8 <__sseek+0x18>
 800fbb6:	46c0      	nop			; (mov r8, r8)
 800fbb8:	ffffefff 	.word	0xffffefff

0800fbbc <__sclose>:
 800fbbc:	b510      	push	{r4, lr}
 800fbbe:	230e      	movs	r3, #14
 800fbc0:	5ec9      	ldrsh	r1, [r1, r3]
 800fbc2:	f000 f815 	bl	800fbf0 <_close_r>
 800fbc6:	bd10      	pop	{r4, pc}

0800fbc8 <_write_r>:
 800fbc8:	b570      	push	{r4, r5, r6, lr}
 800fbca:	0004      	movs	r4, r0
 800fbcc:	0008      	movs	r0, r1
 800fbce:	0011      	movs	r1, r2
 800fbd0:	001a      	movs	r2, r3
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	4d05      	ldr	r5, [pc, #20]	; (800fbec <_write_r+0x24>)
 800fbd6:	602b      	str	r3, [r5, #0]
 800fbd8:	f7f6 fc53 	bl	8006482 <_write>
 800fbdc:	1c43      	adds	r3, r0, #1
 800fbde:	d103      	bne.n	800fbe8 <_write_r+0x20>
 800fbe0:	682b      	ldr	r3, [r5, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d000      	beq.n	800fbe8 <_write_r+0x20>
 800fbe6:	6023      	str	r3, [r4, #0]
 800fbe8:	bd70      	pop	{r4, r5, r6, pc}
 800fbea:	46c0      	nop			; (mov r8, r8)
 800fbec:	200009d0 	.word	0x200009d0

0800fbf0 <_close_r>:
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	b570      	push	{r4, r5, r6, lr}
 800fbf4:	4d06      	ldr	r5, [pc, #24]	; (800fc10 <_close_r+0x20>)
 800fbf6:	0004      	movs	r4, r0
 800fbf8:	0008      	movs	r0, r1
 800fbfa:	602b      	str	r3, [r5, #0]
 800fbfc:	f7f6 fc5d 	bl	80064ba <_close>
 800fc00:	1c43      	adds	r3, r0, #1
 800fc02:	d103      	bne.n	800fc0c <_close_r+0x1c>
 800fc04:	682b      	ldr	r3, [r5, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d000      	beq.n	800fc0c <_close_r+0x1c>
 800fc0a:	6023      	str	r3, [r4, #0]
 800fc0c:	bd70      	pop	{r4, r5, r6, pc}
 800fc0e:	46c0      	nop			; (mov r8, r8)
 800fc10:	200009d0 	.word	0x200009d0

0800fc14 <_fstat_r>:
 800fc14:	2300      	movs	r3, #0
 800fc16:	b570      	push	{r4, r5, r6, lr}
 800fc18:	4d06      	ldr	r5, [pc, #24]	; (800fc34 <_fstat_r+0x20>)
 800fc1a:	0004      	movs	r4, r0
 800fc1c:	0008      	movs	r0, r1
 800fc1e:	0011      	movs	r1, r2
 800fc20:	602b      	str	r3, [r5, #0]
 800fc22:	f7f6 fc54 	bl	80064ce <_fstat>
 800fc26:	1c43      	adds	r3, r0, #1
 800fc28:	d103      	bne.n	800fc32 <_fstat_r+0x1e>
 800fc2a:	682b      	ldr	r3, [r5, #0]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d000      	beq.n	800fc32 <_fstat_r+0x1e>
 800fc30:	6023      	str	r3, [r4, #0]
 800fc32:	bd70      	pop	{r4, r5, r6, pc}
 800fc34:	200009d0 	.word	0x200009d0

0800fc38 <_isatty_r>:
 800fc38:	2300      	movs	r3, #0
 800fc3a:	b570      	push	{r4, r5, r6, lr}
 800fc3c:	4d06      	ldr	r5, [pc, #24]	; (800fc58 <_isatty_r+0x20>)
 800fc3e:	0004      	movs	r4, r0
 800fc40:	0008      	movs	r0, r1
 800fc42:	602b      	str	r3, [r5, #0]
 800fc44:	f7f6 fc51 	bl	80064ea <_isatty>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d103      	bne.n	800fc54 <_isatty_r+0x1c>
 800fc4c:	682b      	ldr	r3, [r5, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d000      	beq.n	800fc54 <_isatty_r+0x1c>
 800fc52:	6023      	str	r3, [r4, #0]
 800fc54:	bd70      	pop	{r4, r5, r6, pc}
 800fc56:	46c0      	nop			; (mov r8, r8)
 800fc58:	200009d0 	.word	0x200009d0

0800fc5c <_lseek_r>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	0004      	movs	r4, r0
 800fc60:	0008      	movs	r0, r1
 800fc62:	0011      	movs	r1, r2
 800fc64:	001a      	movs	r2, r3
 800fc66:	2300      	movs	r3, #0
 800fc68:	4d05      	ldr	r5, [pc, #20]	; (800fc80 <_lseek_r+0x24>)
 800fc6a:	602b      	str	r3, [r5, #0]
 800fc6c:	f7f6 fc46 	bl	80064fc <_lseek>
 800fc70:	1c43      	adds	r3, r0, #1
 800fc72:	d103      	bne.n	800fc7c <_lseek_r+0x20>
 800fc74:	682b      	ldr	r3, [r5, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d000      	beq.n	800fc7c <_lseek_r+0x20>
 800fc7a:	6023      	str	r3, [r4, #0]
 800fc7c:	bd70      	pop	{r4, r5, r6, pc}
 800fc7e:	46c0      	nop			; (mov r8, r8)
 800fc80:	200009d0 	.word	0x200009d0

0800fc84 <_read_r>:
 800fc84:	b570      	push	{r4, r5, r6, lr}
 800fc86:	0004      	movs	r4, r0
 800fc88:	0008      	movs	r0, r1
 800fc8a:	0011      	movs	r1, r2
 800fc8c:	001a      	movs	r2, r3
 800fc8e:	2300      	movs	r3, #0
 800fc90:	4d05      	ldr	r5, [pc, #20]	; (800fca8 <_read_r+0x24>)
 800fc92:	602b      	str	r3, [r5, #0]
 800fc94:	f7f6 fbd8 	bl	8006448 <_read>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	d103      	bne.n	800fca4 <_read_r+0x20>
 800fc9c:	682b      	ldr	r3, [r5, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d000      	beq.n	800fca4 <_read_r+0x20>
 800fca2:	6023      	str	r3, [r4, #0]
 800fca4:	bd70      	pop	{r4, r5, r6, pc}
 800fca6:	46c0      	nop			; (mov r8, r8)
 800fca8:	200009d0 	.word	0x200009d0

0800fcac <_init>:
 800fcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcae:	46c0      	nop			; (mov r8, r8)
 800fcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcb2:	bc08      	pop	{r3}
 800fcb4:	469e      	mov	lr, r3
 800fcb6:	4770      	bx	lr

0800fcb8 <_fini>:
 800fcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcba:	46c0      	nop			; (mov r8, r8)
 800fcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcbe:	bc08      	pop	{r3}
 800fcc0:	469e      	mov	lr, r3
 800fcc2:	4770      	bx	lr
 800fcc4:	0000      	movs	r0, r0
	...

0800fcc8 <__FLASH_Program_Fast_veneer>:
 800fcc8:	b401      	push	{r0}
 800fcca:	4802      	ldr	r0, [pc, #8]	; (800fcd4 <__FLASH_Program_Fast_veneer+0xc>)
 800fccc:	4684      	mov	ip, r0
 800fcce:	bc01      	pop	{r0}
 800fcd0:	4760      	bx	ip
 800fcd2:	bf00      	nop
 800fcd4:	200001e9 	.word	0x200001e9

Disassembly of section .data:

20000000 <ReturnVal.0>:
20000000:	00000001 00000000                       ........

20000008 <callbackSystickHandle>:
20000008:	080049c5                                .I..

2000000c <SystemCoreClock>:
2000000c:	00f42400                                .$..

20000010 <uwTickPrio>:
20000010:	00000004                                ....

20000014 <uwTickFreq>:
20000014:	00000001                                ....

20000018 <_impure_ptr>:
20000018:	2000001c                                ... 

2000001c <impure_data>:
2000001c:	00000000 0801054c 0801056c 0801052c     ....L...l...,...
	...

2000007c <__global_locale>:
2000007c:	00000043 00000000 00000000 00000000     C...............
	...
2000009c:	00000043 00000000 00000000 00000000     C...............
	...
200000bc:	00000043 00000000 00000000 00000000     C...............
	...
200000dc:	00000043 00000000 00000000 00000000     C...............
	...
200000fc:	00000043 00000000 00000000 00000000     C...............
	...
2000011c:	00000043 00000000 00000000 00000000     C...............
	...
2000013c:	00000043 00000000 00000000 00000000     C...............
	...
2000015c:	0800f4fd 0800f0e7 00000000 0801042b     ............+...
2000016c:	08010429 08010420 08010420 08010420     )... ... ... ...
2000017c:	08010420 08010420 08010420 08010420      ... ... ... ...
2000018c:	08010420 08010420 ffffffff ffffffff      ... ...........
2000019c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200001c4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200001e8 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200001e8:	b580      	push	{r7, lr}
200001ea:	b088      	sub	sp, #32
200001ec:	af00      	add	r7, sp, #0
200001ee:	6078      	str	r0, [r7, #4]
200001f0:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200001f2:	231f      	movs	r3, #31
200001f4:	18fb      	adds	r3, r7, r3
200001f6:	2200      	movs	r2, #0
200001f8:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200001fa:	687b      	ldr	r3, [r7, #4]
200001fc:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200001fe:	683b      	ldr	r3, [r7, #0]
20000200:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000202:	4b1a      	ldr	r3, [pc, #104]	; (2000026c <FLASH_Program_Fast+0x84>)
20000204:	695a      	ldr	r2, [r3, #20]
20000206:	4b19      	ldr	r3, [pc, #100]	; (2000026c <FLASH_Program_Fast+0x84>)
20000208:	2180      	movs	r1, #128	; 0x80
2000020a:	02c9      	lsls	r1, r1, #11
2000020c:	430a      	orrs	r2, r1
2000020e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000210:	f3ef 8310 	mrs	r3, PRIMASK
20000214:	60fb      	str	r3, [r7, #12]
  return(result);
20000216:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000021a:	b672      	cpsid	i
}
2000021c:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000021e:	e00f      	b.n	20000240 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000220:	697a      	ldr	r2, [r7, #20]
20000222:	69bb      	ldr	r3, [r7, #24]
20000224:	6812      	ldr	r2, [r2, #0]
20000226:	601a      	str	r2, [r3, #0]
    src += 4U;
20000228:	697b      	ldr	r3, [r7, #20]
2000022a:	3304      	adds	r3, #4
2000022c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000022e:	69bb      	ldr	r3, [r7, #24]
20000230:	3304      	adds	r3, #4
20000232:	61bb      	str	r3, [r7, #24]
    index++;
20000234:	211f      	movs	r1, #31
20000236:	187b      	adds	r3, r7, r1
20000238:	781a      	ldrb	r2, [r3, #0]
2000023a:	187b      	adds	r3, r7, r1
2000023c:	3201      	adds	r2, #1
2000023e:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000240:	231f      	movs	r3, #31
20000242:	18fb      	adds	r3, r7, r3
20000244:	781b      	ldrb	r3, [r3, #0]
20000246:	2b3f      	cmp	r3, #63	; 0x3f
20000248:	d9ea      	bls.n	20000220 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	4b07      	ldr	r3, [pc, #28]	; (2000026c <FLASH_Program_Fast+0x84>)
2000024e:	691a      	ldr	r2, [r3, #16]
20000250:	2380      	movs	r3, #128	; 0x80
20000252:	025b      	lsls	r3, r3, #9
20000254:	4013      	ands	r3, r2
20000256:	d1f9      	bne.n	2000024c <FLASH_Program_Fast+0x64>
20000258:	693b      	ldr	r3, [r7, #16]
2000025a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000025c:	68bb      	ldr	r3, [r7, #8]
2000025e:	f383 8810 	msr	PRIMASK, r3
}
20000262:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b008      	add	sp, #32
2000026a:	bd80      	pop	{r7, pc}
2000026c:	40022000 	.word	0x40022000
