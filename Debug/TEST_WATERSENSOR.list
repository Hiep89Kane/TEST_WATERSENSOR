
TEST_WATERSENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbd8  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800fc90  0800fc90  0001fc90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010544  08010544  00030270  2**0
                  CONTENTS
  4 .ARM          00000000  08010544  08010544  00030270  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010544  08010544  00030270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010544  08010544  00020544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010548  08010548  00020548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0801054c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000768  20000270  080107bc  00030270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009d8  080107bc  000309d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f5b  00000000  00000000  00030298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e7d  00000000  00000000  000511f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  00056070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  00057b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c43d  00000000  00000000  000593f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000254d3  00000000  00000000  0007582d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2a1c  00000000  00000000  0009ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d71c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000724c  00000000  00000000  0013d76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000270 	.word	0x20000270
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800fc68 	.word	0x0800fc68

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000274 	.word	0x20000274
 80000fc:	0800fc68 	.word	0x0800fc68

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fac5 	bl	80019c4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa15 	bl	8001874 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fab7 	bl	80019c4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 faad 	bl	80019c4 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fa3d 	bl	80018f8 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fa33 	bl	80018f8 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 f9b7 	bl	800081c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f943 	bl	8000744 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 f9a9 	bl	800081c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 f99f 	bl	800081c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 f94f 	bl	8000790 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 f945 	bl	8000790 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fdiv>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	464f      	mov	r7, r9
 8000518:	4646      	mov	r6, r8
 800051a:	46d6      	mov	lr, sl
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	b5c0      	push	{r6, r7, lr}
 8000520:	0047      	lsls	r7, r0, #1
 8000522:	1c0c      	adds	r4, r1, #0
 8000524:	0a6d      	lsrs	r5, r5, #9
 8000526:	0e3f      	lsrs	r7, r7, #24
 8000528:	0fc6      	lsrs	r6, r0, #31
 800052a:	2f00      	cmp	r7, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x1c>
 800052e:	e070      	b.n	8000612 <__aeabi_fdiv+0xfe>
 8000530:	2fff      	cmp	r7, #255	; 0xff
 8000532:	d100      	bne.n	8000536 <__aeabi_fdiv+0x22>
 8000534:	e075      	b.n	8000622 <__aeabi_fdiv+0x10e>
 8000536:	00eb      	lsls	r3, r5, #3
 8000538:	2580      	movs	r5, #128	; 0x80
 800053a:	04ed      	lsls	r5, r5, #19
 800053c:	431d      	orrs	r5, r3
 800053e:	2300      	movs	r3, #0
 8000540:	4699      	mov	r9, r3
 8000542:	469a      	mov	sl, r3
 8000544:	3f7f      	subs	r7, #127	; 0x7f
 8000546:	0260      	lsls	r0, r4, #9
 8000548:	0a43      	lsrs	r3, r0, #9
 800054a:	4698      	mov	r8, r3
 800054c:	0063      	lsls	r3, r4, #1
 800054e:	0e1b      	lsrs	r3, r3, #24
 8000550:	0fe4      	lsrs	r4, r4, #31
 8000552:	2b00      	cmp	r3, #0
 8000554:	d04e      	beq.n	80005f4 <__aeabi_fdiv+0xe0>
 8000556:	2bff      	cmp	r3, #255	; 0xff
 8000558:	d046      	beq.n	80005e8 <__aeabi_fdiv+0xd4>
 800055a:	4642      	mov	r2, r8
 800055c:	00d0      	lsls	r0, r2, #3
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	04d2      	lsls	r2, r2, #19
 8000562:	4302      	orrs	r2, r0
 8000564:	4690      	mov	r8, r2
 8000566:	2200      	movs	r2, #0
 8000568:	3b7f      	subs	r3, #127	; 0x7f
 800056a:	0031      	movs	r1, r6
 800056c:	1aff      	subs	r7, r7, r3
 800056e:	464b      	mov	r3, r9
 8000570:	4061      	eors	r1, r4
 8000572:	b2c9      	uxtb	r1, r1
 8000574:	4313      	orrs	r3, r2
 8000576:	2b0f      	cmp	r3, #15
 8000578:	d900      	bls.n	800057c <__aeabi_fdiv+0x68>
 800057a:	e0b5      	b.n	80006e8 <__aeabi_fdiv+0x1d4>
 800057c:	486e      	ldr	r0, [pc, #440]	; (8000738 <__aeabi_fdiv+0x224>)
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	58c3      	ldr	r3, [r0, r3]
 8000582:	469f      	mov	pc, r3
 8000584:	2300      	movs	r3, #0
 8000586:	4698      	mov	r8, r3
 8000588:	0026      	movs	r6, r4
 800058a:	4645      	mov	r5, r8
 800058c:	4692      	mov	sl, r2
 800058e:	4653      	mov	r3, sl
 8000590:	2b02      	cmp	r3, #2
 8000592:	d100      	bne.n	8000596 <__aeabi_fdiv+0x82>
 8000594:	e089      	b.n	80006aa <__aeabi_fdiv+0x196>
 8000596:	2b03      	cmp	r3, #3
 8000598:	d100      	bne.n	800059c <__aeabi_fdiv+0x88>
 800059a:	e09e      	b.n	80006da <__aeabi_fdiv+0x1c6>
 800059c:	2b01      	cmp	r3, #1
 800059e:	d018      	beq.n	80005d2 <__aeabi_fdiv+0xbe>
 80005a0:	003b      	movs	r3, r7
 80005a2:	337f      	adds	r3, #127	; 0x7f
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	dd69      	ble.n	800067c <__aeabi_fdiv+0x168>
 80005a8:	076a      	lsls	r2, r5, #29
 80005aa:	d004      	beq.n	80005b6 <__aeabi_fdiv+0xa2>
 80005ac:	220f      	movs	r2, #15
 80005ae:	402a      	ands	r2, r5
 80005b0:	2a04      	cmp	r2, #4
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fdiv+0xa2>
 80005b4:	3504      	adds	r5, #4
 80005b6:	012a      	lsls	r2, r5, #4
 80005b8:	d503      	bpl.n	80005c2 <__aeabi_fdiv+0xae>
 80005ba:	4b60      	ldr	r3, [pc, #384]	; (800073c <__aeabi_fdiv+0x228>)
 80005bc:	401d      	ands	r5, r3
 80005be:	003b      	movs	r3, r7
 80005c0:	3380      	adds	r3, #128	; 0x80
 80005c2:	2bfe      	cmp	r3, #254	; 0xfe
 80005c4:	dd00      	ble.n	80005c8 <__aeabi_fdiv+0xb4>
 80005c6:	e070      	b.n	80006aa <__aeabi_fdiv+0x196>
 80005c8:	01ad      	lsls	r5, r5, #6
 80005ca:	0a6d      	lsrs	r5, r5, #9
 80005cc:	b2d8      	uxtb	r0, r3
 80005ce:	e002      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80005d0:	000e      	movs	r6, r1
 80005d2:	2000      	movs	r0, #0
 80005d4:	2500      	movs	r5, #0
 80005d6:	05c0      	lsls	r0, r0, #23
 80005d8:	4328      	orrs	r0, r5
 80005da:	07f6      	lsls	r6, r6, #31
 80005dc:	4330      	orrs	r0, r6
 80005de:	bce0      	pop	{r5, r6, r7}
 80005e0:	46ba      	mov	sl, r7
 80005e2:	46b1      	mov	r9, r6
 80005e4:	46a8      	mov	r8, r5
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	4643      	mov	r3, r8
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d13f      	bne.n	800066e <__aeabi_fdiv+0x15a>
 80005ee:	2202      	movs	r2, #2
 80005f0:	3fff      	subs	r7, #255	; 0xff
 80005f2:	e003      	b.n	80005fc <__aeabi_fdiv+0xe8>
 80005f4:	4643      	mov	r3, r8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d12d      	bne.n	8000656 <__aeabi_fdiv+0x142>
 80005fa:	2201      	movs	r2, #1
 80005fc:	0031      	movs	r1, r6
 80005fe:	464b      	mov	r3, r9
 8000600:	4061      	eors	r1, r4
 8000602:	b2c9      	uxtb	r1, r1
 8000604:	4313      	orrs	r3, r2
 8000606:	2b0f      	cmp	r3, #15
 8000608:	d834      	bhi.n	8000674 <__aeabi_fdiv+0x160>
 800060a:	484d      	ldr	r0, [pc, #308]	; (8000740 <__aeabi_fdiv+0x22c>)
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	58c3      	ldr	r3, [r0, r3]
 8000610:	469f      	mov	pc, r3
 8000612:	2d00      	cmp	r5, #0
 8000614:	d113      	bne.n	800063e <__aeabi_fdiv+0x12a>
 8000616:	2304      	movs	r3, #4
 8000618:	4699      	mov	r9, r3
 800061a:	3b03      	subs	r3, #3
 800061c:	2700      	movs	r7, #0
 800061e:	469a      	mov	sl, r3
 8000620:	e791      	b.n	8000546 <__aeabi_fdiv+0x32>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d105      	bne.n	8000632 <__aeabi_fdiv+0x11e>
 8000626:	2308      	movs	r3, #8
 8000628:	4699      	mov	r9, r3
 800062a:	3b06      	subs	r3, #6
 800062c:	27ff      	movs	r7, #255	; 0xff
 800062e:	469a      	mov	sl, r3
 8000630:	e789      	b.n	8000546 <__aeabi_fdiv+0x32>
 8000632:	230c      	movs	r3, #12
 8000634:	4699      	mov	r9, r3
 8000636:	3b09      	subs	r3, #9
 8000638:	27ff      	movs	r7, #255	; 0xff
 800063a:	469a      	mov	sl, r3
 800063c:	e783      	b.n	8000546 <__aeabi_fdiv+0x32>
 800063e:	0028      	movs	r0, r5
 8000640:	f002 f99c 	bl	800297c <__clzsi2>
 8000644:	2776      	movs	r7, #118	; 0x76
 8000646:	1f43      	subs	r3, r0, #5
 8000648:	409d      	lsls	r5, r3
 800064a:	2300      	movs	r3, #0
 800064c:	427f      	negs	r7, r7
 800064e:	4699      	mov	r9, r3
 8000650:	469a      	mov	sl, r3
 8000652:	1a3f      	subs	r7, r7, r0
 8000654:	e777      	b.n	8000546 <__aeabi_fdiv+0x32>
 8000656:	4640      	mov	r0, r8
 8000658:	f002 f990 	bl	800297c <__clzsi2>
 800065c:	4642      	mov	r2, r8
 800065e:	1f43      	subs	r3, r0, #5
 8000660:	409a      	lsls	r2, r3
 8000662:	2376      	movs	r3, #118	; 0x76
 8000664:	425b      	negs	r3, r3
 8000666:	4690      	mov	r8, r2
 8000668:	1a1b      	subs	r3, r3, r0
 800066a:	2200      	movs	r2, #0
 800066c:	e77d      	b.n	800056a <__aeabi_fdiv+0x56>
 800066e:	23ff      	movs	r3, #255	; 0xff
 8000670:	2203      	movs	r2, #3
 8000672:	e77a      	b.n	800056a <__aeabi_fdiv+0x56>
 8000674:	000e      	movs	r6, r1
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	2500      	movs	r5, #0
 800067a:	e7ac      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 800067c:	2001      	movs	r0, #1
 800067e:	1ac0      	subs	r0, r0, r3
 8000680:	281b      	cmp	r0, #27
 8000682:	dca6      	bgt.n	80005d2 <__aeabi_fdiv+0xbe>
 8000684:	379e      	adds	r7, #158	; 0x9e
 8000686:	002a      	movs	r2, r5
 8000688:	40bd      	lsls	r5, r7
 800068a:	40c2      	lsrs	r2, r0
 800068c:	1e6b      	subs	r3, r5, #1
 800068e:	419d      	sbcs	r5, r3
 8000690:	4315      	orrs	r5, r2
 8000692:	076b      	lsls	r3, r5, #29
 8000694:	d004      	beq.n	80006a0 <__aeabi_fdiv+0x18c>
 8000696:	230f      	movs	r3, #15
 8000698:	402b      	ands	r3, r5
 800069a:	2b04      	cmp	r3, #4
 800069c:	d000      	beq.n	80006a0 <__aeabi_fdiv+0x18c>
 800069e:	3504      	adds	r5, #4
 80006a0:	016b      	lsls	r3, r5, #5
 80006a2:	d544      	bpl.n	800072e <__aeabi_fdiv+0x21a>
 80006a4:	2001      	movs	r0, #1
 80006a6:	2500      	movs	r5, #0
 80006a8:	e795      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006aa:	20ff      	movs	r0, #255	; 0xff
 80006ac:	2500      	movs	r5, #0
 80006ae:	e792      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006b0:	2580      	movs	r5, #128	; 0x80
 80006b2:	2600      	movs	r6, #0
 80006b4:	20ff      	movs	r0, #255	; 0xff
 80006b6:	03ed      	lsls	r5, r5, #15
 80006b8:	e78d      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006ba:	2300      	movs	r3, #0
 80006bc:	4698      	mov	r8, r3
 80006be:	2080      	movs	r0, #128	; 0x80
 80006c0:	03c0      	lsls	r0, r0, #15
 80006c2:	4205      	tst	r5, r0
 80006c4:	d009      	beq.n	80006da <__aeabi_fdiv+0x1c6>
 80006c6:	4643      	mov	r3, r8
 80006c8:	4203      	tst	r3, r0
 80006ca:	d106      	bne.n	80006da <__aeabi_fdiv+0x1c6>
 80006cc:	4645      	mov	r5, r8
 80006ce:	4305      	orrs	r5, r0
 80006d0:	026d      	lsls	r5, r5, #9
 80006d2:	0026      	movs	r6, r4
 80006d4:	20ff      	movs	r0, #255	; 0xff
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	e77d      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006da:	2080      	movs	r0, #128	; 0x80
 80006dc:	03c0      	lsls	r0, r0, #15
 80006de:	4305      	orrs	r5, r0
 80006e0:	026d      	lsls	r5, r5, #9
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	0a6d      	lsrs	r5, r5, #9
 80006e6:	e776      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006e8:	4642      	mov	r2, r8
 80006ea:	016b      	lsls	r3, r5, #5
 80006ec:	0150      	lsls	r0, r2, #5
 80006ee:	4283      	cmp	r3, r0
 80006f0:	d219      	bcs.n	8000726 <__aeabi_fdiv+0x212>
 80006f2:	221b      	movs	r2, #27
 80006f4:	2500      	movs	r5, #0
 80006f6:	3f01      	subs	r7, #1
 80006f8:	2601      	movs	r6, #1
 80006fa:	001c      	movs	r4, r3
 80006fc:	006d      	lsls	r5, r5, #1
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	2c00      	cmp	r4, #0
 8000702:	db01      	blt.n	8000708 <__aeabi_fdiv+0x1f4>
 8000704:	4298      	cmp	r0, r3
 8000706:	d801      	bhi.n	800070c <__aeabi_fdiv+0x1f8>
 8000708:	1a1b      	subs	r3, r3, r0
 800070a:	4335      	orrs	r5, r6
 800070c:	3a01      	subs	r2, #1
 800070e:	2a00      	cmp	r2, #0
 8000710:	d1f3      	bne.n	80006fa <__aeabi_fdiv+0x1e6>
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	4193      	sbcs	r3, r2
 8000716:	431d      	orrs	r5, r3
 8000718:	003b      	movs	r3, r7
 800071a:	337f      	adds	r3, #127	; 0x7f
 800071c:	000e      	movs	r6, r1
 800071e:	2b00      	cmp	r3, #0
 8000720:	dd00      	ble.n	8000724 <__aeabi_fdiv+0x210>
 8000722:	e741      	b.n	80005a8 <__aeabi_fdiv+0x94>
 8000724:	e7aa      	b.n	800067c <__aeabi_fdiv+0x168>
 8000726:	221a      	movs	r2, #26
 8000728:	2501      	movs	r5, #1
 800072a:	1a1b      	subs	r3, r3, r0
 800072c:	e7e4      	b.n	80006f8 <__aeabi_fdiv+0x1e4>
 800072e:	01ad      	lsls	r5, r5, #6
 8000730:	2000      	movs	r0, #0
 8000732:	0a6d      	lsrs	r5, r5, #9
 8000734:	e74f      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	0800fefc 	.word	0x0800fefc
 800073c:	f7ffffff 	.word	0xf7ffffff
 8000740:	0800ff3c 	.word	0x0800ff3c

08000744 <__eqsf2>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	0042      	lsls	r2, r0, #1
 8000748:	0245      	lsls	r5, r0, #9
 800074a:	024e      	lsls	r6, r1, #9
 800074c:	004c      	lsls	r4, r1, #1
 800074e:	0fc3      	lsrs	r3, r0, #31
 8000750:	0a6d      	lsrs	r5, r5, #9
 8000752:	2001      	movs	r0, #1
 8000754:	0e12      	lsrs	r2, r2, #24
 8000756:	0a76      	lsrs	r6, r6, #9
 8000758:	0e24      	lsrs	r4, r4, #24
 800075a:	0fc9      	lsrs	r1, r1, #31
 800075c:	2aff      	cmp	r2, #255	; 0xff
 800075e:	d006      	beq.n	800076e <__eqsf2+0x2a>
 8000760:	2cff      	cmp	r4, #255	; 0xff
 8000762:	d003      	beq.n	800076c <__eqsf2+0x28>
 8000764:	42a2      	cmp	r2, r4
 8000766:	d101      	bne.n	800076c <__eqsf2+0x28>
 8000768:	42b5      	cmp	r5, r6
 800076a:	d006      	beq.n	800077a <__eqsf2+0x36>
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	2d00      	cmp	r5, #0
 8000770:	d1fc      	bne.n	800076c <__eqsf2+0x28>
 8000772:	2cff      	cmp	r4, #255	; 0xff
 8000774:	d1fa      	bne.n	800076c <__eqsf2+0x28>
 8000776:	2e00      	cmp	r6, #0
 8000778:	d1f8      	bne.n	800076c <__eqsf2+0x28>
 800077a:	428b      	cmp	r3, r1
 800077c:	d006      	beq.n	800078c <__eqsf2+0x48>
 800077e:	2001      	movs	r0, #1
 8000780:	2a00      	cmp	r2, #0
 8000782:	d1f3      	bne.n	800076c <__eqsf2+0x28>
 8000784:	0028      	movs	r0, r5
 8000786:	1e43      	subs	r3, r0, #1
 8000788:	4198      	sbcs	r0, r3
 800078a:	e7ef      	b.n	800076c <__eqsf2+0x28>
 800078c:	2000      	movs	r0, #0
 800078e:	e7ed      	b.n	800076c <__eqsf2+0x28>

08000790 <__gesf2>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	0042      	lsls	r2, r0, #1
 8000794:	0245      	lsls	r5, r0, #9
 8000796:	024e      	lsls	r6, r1, #9
 8000798:	004c      	lsls	r4, r1, #1
 800079a:	0fc3      	lsrs	r3, r0, #31
 800079c:	0a6d      	lsrs	r5, r5, #9
 800079e:	0e12      	lsrs	r2, r2, #24
 80007a0:	0a76      	lsrs	r6, r6, #9
 80007a2:	0e24      	lsrs	r4, r4, #24
 80007a4:	0fc8      	lsrs	r0, r1, #31
 80007a6:	2aff      	cmp	r2, #255	; 0xff
 80007a8:	d01b      	beq.n	80007e2 <__gesf2+0x52>
 80007aa:	2cff      	cmp	r4, #255	; 0xff
 80007ac:	d00e      	beq.n	80007cc <__gesf2+0x3c>
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	d11b      	bne.n	80007ea <__gesf2+0x5a>
 80007b2:	2c00      	cmp	r4, #0
 80007b4:	d101      	bne.n	80007ba <__gesf2+0x2a>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d01c      	beq.n	80007f4 <__gesf2+0x64>
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d00c      	beq.n	80007d8 <__gesf2+0x48>
 80007be:	4283      	cmp	r3, r0
 80007c0:	d01c      	beq.n	80007fc <__gesf2+0x6c>
 80007c2:	2102      	movs	r1, #2
 80007c4:	1e58      	subs	r0, r3, #1
 80007c6:	4008      	ands	r0, r1
 80007c8:	3801      	subs	r0, #1
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d122      	bne.n	8000816 <__gesf2+0x86>
 80007d0:	2a00      	cmp	r2, #0
 80007d2:	d1f4      	bne.n	80007be <__gesf2+0x2e>
 80007d4:	2d00      	cmp	r5, #0
 80007d6:	d1f2      	bne.n	80007be <__gesf2+0x2e>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d1f6      	bne.n	80007ca <__gesf2+0x3a>
 80007dc:	2001      	movs	r0, #1
 80007de:	4240      	negs	r0, r0
 80007e0:	e7f3      	b.n	80007ca <__gesf2+0x3a>
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d117      	bne.n	8000816 <__gesf2+0x86>
 80007e6:	2cff      	cmp	r4, #255	; 0xff
 80007e8:	d0f0      	beq.n	80007cc <__gesf2+0x3c>
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d1e7      	bne.n	80007be <__gesf2+0x2e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d1e5      	bne.n	80007be <__gesf2+0x2e>
 80007f2:	e7e6      	b.n	80007c2 <__gesf2+0x32>
 80007f4:	2000      	movs	r0, #0
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	d0e7      	beq.n	80007ca <__gesf2+0x3a>
 80007fa:	e7e2      	b.n	80007c2 <__gesf2+0x32>
 80007fc:	42a2      	cmp	r2, r4
 80007fe:	dc05      	bgt.n	800080c <__gesf2+0x7c>
 8000800:	dbea      	blt.n	80007d8 <__gesf2+0x48>
 8000802:	42b5      	cmp	r5, r6
 8000804:	d802      	bhi.n	800080c <__gesf2+0x7c>
 8000806:	d3e7      	bcc.n	80007d8 <__gesf2+0x48>
 8000808:	2000      	movs	r0, #0
 800080a:	e7de      	b.n	80007ca <__gesf2+0x3a>
 800080c:	4243      	negs	r3, r0
 800080e:	4158      	adcs	r0, r3
 8000810:	0040      	lsls	r0, r0, #1
 8000812:	3801      	subs	r0, #1
 8000814:	e7d9      	b.n	80007ca <__gesf2+0x3a>
 8000816:	2002      	movs	r0, #2
 8000818:	4240      	negs	r0, r0
 800081a:	e7d6      	b.n	80007ca <__gesf2+0x3a>

0800081c <__lesf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	0245      	lsls	r5, r0, #9
 8000822:	024e      	lsls	r6, r1, #9
 8000824:	004c      	lsls	r4, r1, #1
 8000826:	0fc3      	lsrs	r3, r0, #31
 8000828:	0a6d      	lsrs	r5, r5, #9
 800082a:	0e12      	lsrs	r2, r2, #24
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e24      	lsrs	r4, r4, #24
 8000830:	0fc8      	lsrs	r0, r1, #31
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d00b      	beq.n	800084e <__lesf2+0x32>
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d00d      	beq.n	8000856 <__lesf2+0x3a>
 800083a:	2a00      	cmp	r2, #0
 800083c:	d11f      	bne.n	800087e <__lesf2+0x62>
 800083e:	2c00      	cmp	r4, #0
 8000840:	d116      	bne.n	8000870 <__lesf2+0x54>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d114      	bne.n	8000870 <__lesf2+0x54>
 8000846:	2000      	movs	r0, #0
 8000848:	2d00      	cmp	r5, #0
 800084a:	d010      	beq.n	800086e <__lesf2+0x52>
 800084c:	e009      	b.n	8000862 <__lesf2+0x46>
 800084e:	2d00      	cmp	r5, #0
 8000850:	d10c      	bne.n	800086c <__lesf2+0x50>
 8000852:	2cff      	cmp	r4, #255	; 0xff
 8000854:	d113      	bne.n	800087e <__lesf2+0x62>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d108      	bne.n	800086c <__lesf2+0x50>
 800085a:	2a00      	cmp	r2, #0
 800085c:	d008      	beq.n	8000870 <__lesf2+0x54>
 800085e:	4283      	cmp	r3, r0
 8000860:	d012      	beq.n	8000888 <__lesf2+0x6c>
 8000862:	2102      	movs	r1, #2
 8000864:	1e58      	subs	r0, r3, #1
 8000866:	4008      	ands	r0, r1
 8000868:	3801      	subs	r0, #1
 800086a:	e000      	b.n	800086e <__lesf2+0x52>
 800086c:	2002      	movs	r0, #2
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	2d00      	cmp	r5, #0
 8000872:	d1f4      	bne.n	800085e <__lesf2+0x42>
 8000874:	2800      	cmp	r0, #0
 8000876:	d1fa      	bne.n	800086e <__lesf2+0x52>
 8000878:	2001      	movs	r0, #1
 800087a:	4240      	negs	r0, r0
 800087c:	e7f7      	b.n	800086e <__lesf2+0x52>
 800087e:	2c00      	cmp	r4, #0
 8000880:	d1ed      	bne.n	800085e <__lesf2+0x42>
 8000882:	2e00      	cmp	r6, #0
 8000884:	d1eb      	bne.n	800085e <__lesf2+0x42>
 8000886:	e7ec      	b.n	8000862 <__lesf2+0x46>
 8000888:	42a2      	cmp	r2, r4
 800088a:	dc05      	bgt.n	8000898 <__lesf2+0x7c>
 800088c:	dbf2      	blt.n	8000874 <__lesf2+0x58>
 800088e:	42b5      	cmp	r5, r6
 8000890:	d802      	bhi.n	8000898 <__lesf2+0x7c>
 8000892:	d3ef      	bcc.n	8000874 <__lesf2+0x58>
 8000894:	2000      	movs	r0, #0
 8000896:	e7ea      	b.n	800086e <__lesf2+0x52>
 8000898:	4243      	negs	r3, r0
 800089a:	4158      	adcs	r0, r3
 800089c:	0040      	lsls	r0, r0, #1
 800089e:	3801      	subs	r0, #1
 80008a0:	e7e5      	b.n	800086e <__lesf2+0x52>
 80008a2:	46c0      	nop			; (mov r8, r8)

080008a4 <__aeabi_fmul>:
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	464f      	mov	r7, r9
 80008a8:	4646      	mov	r6, r8
 80008aa:	46d6      	mov	lr, sl
 80008ac:	0244      	lsls	r4, r0, #9
 80008ae:	0045      	lsls	r5, r0, #1
 80008b0:	b5c0      	push	{r6, r7, lr}
 80008b2:	0a64      	lsrs	r4, r4, #9
 80008b4:	1c0f      	adds	r7, r1, #0
 80008b6:	0e2d      	lsrs	r5, r5, #24
 80008b8:	0fc6      	lsrs	r6, r0, #31
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fmul+0x1c>
 80008be:	e08d      	b.n	80009dc <__aeabi_fmul+0x138>
 80008c0:	2dff      	cmp	r5, #255	; 0xff
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fmul+0x22>
 80008c4:	e092      	b.n	80009ec <__aeabi_fmul+0x148>
 80008c6:	2300      	movs	r3, #0
 80008c8:	2080      	movs	r0, #128	; 0x80
 80008ca:	4699      	mov	r9, r3
 80008cc:	469a      	mov	sl, r3
 80008ce:	00e4      	lsls	r4, r4, #3
 80008d0:	04c0      	lsls	r0, r0, #19
 80008d2:	4304      	orrs	r4, r0
 80008d4:	3d7f      	subs	r5, #127	; 0x7f
 80008d6:	0278      	lsls	r0, r7, #9
 80008d8:	0a43      	lsrs	r3, r0, #9
 80008da:	4698      	mov	r8, r3
 80008dc:	007b      	lsls	r3, r7, #1
 80008de:	0e1b      	lsrs	r3, r3, #24
 80008e0:	0fff      	lsrs	r7, r7, #31
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fmul+0x44>
 80008e6:	e070      	b.n	80009ca <__aeabi_fmul+0x126>
 80008e8:	2bff      	cmp	r3, #255	; 0xff
 80008ea:	d100      	bne.n	80008ee <__aeabi_fmul+0x4a>
 80008ec:	e086      	b.n	80009fc <__aeabi_fmul+0x158>
 80008ee:	4642      	mov	r2, r8
 80008f0:	00d0      	lsls	r0, r2, #3
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	3b7f      	subs	r3, #127	; 0x7f
 80008f6:	18ed      	adds	r5, r5, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	04d2      	lsls	r2, r2, #19
 80008fc:	4302      	orrs	r2, r0
 80008fe:	4690      	mov	r8, r2
 8000900:	469c      	mov	ip, r3
 8000902:	0031      	movs	r1, r6
 8000904:	464b      	mov	r3, r9
 8000906:	4079      	eors	r1, r7
 8000908:	1c68      	adds	r0, r5, #1
 800090a:	2b0f      	cmp	r3, #15
 800090c:	d81c      	bhi.n	8000948 <__aeabi_fmul+0xa4>
 800090e:	4a76      	ldr	r2, [pc, #472]	; (8000ae8 <__aeabi_fmul+0x244>)
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	58d3      	ldr	r3, [r2, r3]
 8000914:	469f      	mov	pc, r3
 8000916:	0039      	movs	r1, r7
 8000918:	4644      	mov	r4, r8
 800091a:	46e2      	mov	sl, ip
 800091c:	4653      	mov	r3, sl
 800091e:	2b02      	cmp	r3, #2
 8000920:	d00f      	beq.n	8000942 <__aeabi_fmul+0x9e>
 8000922:	2b03      	cmp	r3, #3
 8000924:	d100      	bne.n	8000928 <__aeabi_fmul+0x84>
 8000926:	e0d7      	b.n	8000ad8 <__aeabi_fmul+0x234>
 8000928:	2b01      	cmp	r3, #1
 800092a:	d137      	bne.n	800099c <__aeabi_fmul+0xf8>
 800092c:	2000      	movs	r0, #0
 800092e:	2400      	movs	r4, #0
 8000930:	05c0      	lsls	r0, r0, #23
 8000932:	4320      	orrs	r0, r4
 8000934:	07c9      	lsls	r1, r1, #31
 8000936:	4308      	orrs	r0, r1
 8000938:	bce0      	pop	{r5, r6, r7}
 800093a:	46ba      	mov	sl, r7
 800093c:	46b1      	mov	r9, r6
 800093e:	46a8      	mov	r8, r5
 8000940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	2400      	movs	r4, #0
 8000946:	e7f3      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000948:	0c26      	lsrs	r6, r4, #16
 800094a:	0424      	lsls	r4, r4, #16
 800094c:	0c22      	lsrs	r2, r4, #16
 800094e:	4644      	mov	r4, r8
 8000950:	0424      	lsls	r4, r4, #16
 8000952:	0c24      	lsrs	r4, r4, #16
 8000954:	4643      	mov	r3, r8
 8000956:	0027      	movs	r7, r4
 8000958:	0c1b      	lsrs	r3, r3, #16
 800095a:	4357      	muls	r7, r2
 800095c:	4374      	muls	r4, r6
 800095e:	435a      	muls	r2, r3
 8000960:	435e      	muls	r6, r3
 8000962:	1912      	adds	r2, r2, r4
 8000964:	0c3b      	lsrs	r3, r7, #16
 8000966:	189b      	adds	r3, r3, r2
 8000968:	429c      	cmp	r4, r3
 800096a:	d903      	bls.n	8000974 <__aeabi_fmul+0xd0>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0252      	lsls	r2, r2, #9
 8000970:	4694      	mov	ip, r2
 8000972:	4466      	add	r6, ip
 8000974:	043f      	lsls	r7, r7, #16
 8000976:	041a      	lsls	r2, r3, #16
 8000978:	0c3f      	lsrs	r7, r7, #16
 800097a:	19d2      	adds	r2, r2, r7
 800097c:	0194      	lsls	r4, r2, #6
 800097e:	1e67      	subs	r7, r4, #1
 8000980:	41bc      	sbcs	r4, r7
 8000982:	0c1b      	lsrs	r3, r3, #16
 8000984:	0e92      	lsrs	r2, r2, #26
 8000986:	199b      	adds	r3, r3, r6
 8000988:	4314      	orrs	r4, r2
 800098a:	019b      	lsls	r3, r3, #6
 800098c:	431c      	orrs	r4, r3
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	d400      	bmi.n	8000994 <__aeabi_fmul+0xf0>
 8000992:	e09b      	b.n	8000acc <__aeabi_fmul+0x228>
 8000994:	2301      	movs	r3, #1
 8000996:	0862      	lsrs	r2, r4, #1
 8000998:	401c      	ands	r4, r3
 800099a:	4314      	orrs	r4, r2
 800099c:	0002      	movs	r2, r0
 800099e:	327f      	adds	r2, #127	; 0x7f
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	dd64      	ble.n	8000a6e <__aeabi_fmul+0x1ca>
 80009a4:	0763      	lsls	r3, r4, #29
 80009a6:	d004      	beq.n	80009b2 <__aeabi_fmul+0x10e>
 80009a8:	230f      	movs	r3, #15
 80009aa:	4023      	ands	r3, r4
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	d000      	beq.n	80009b2 <__aeabi_fmul+0x10e>
 80009b0:	3404      	adds	r4, #4
 80009b2:	0123      	lsls	r3, r4, #4
 80009b4:	d503      	bpl.n	80009be <__aeabi_fmul+0x11a>
 80009b6:	0002      	movs	r2, r0
 80009b8:	4b4c      	ldr	r3, [pc, #304]	; (8000aec <__aeabi_fmul+0x248>)
 80009ba:	3280      	adds	r2, #128	; 0x80
 80009bc:	401c      	ands	r4, r3
 80009be:	2afe      	cmp	r2, #254	; 0xfe
 80009c0:	dcbf      	bgt.n	8000942 <__aeabi_fmul+0x9e>
 80009c2:	01a4      	lsls	r4, r4, #6
 80009c4:	0a64      	lsrs	r4, r4, #9
 80009c6:	b2d0      	uxtb	r0, r2
 80009c8:	e7b2      	b.n	8000930 <__aeabi_fmul+0x8c>
 80009ca:	4643      	mov	r3, r8
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d13d      	bne.n	8000a4c <__aeabi_fmul+0x1a8>
 80009d0:	464a      	mov	r2, r9
 80009d2:	3301      	adds	r3, #1
 80009d4:	431a      	orrs	r2, r3
 80009d6:	4691      	mov	r9, r2
 80009d8:	469c      	mov	ip, r3
 80009da:	e792      	b.n	8000902 <__aeabi_fmul+0x5e>
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d129      	bne.n	8000a34 <__aeabi_fmul+0x190>
 80009e0:	2304      	movs	r3, #4
 80009e2:	4699      	mov	r9, r3
 80009e4:	3b03      	subs	r3, #3
 80009e6:	2500      	movs	r5, #0
 80009e8:	469a      	mov	sl, r3
 80009ea:	e774      	b.n	80008d6 <__aeabi_fmul+0x32>
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	d11b      	bne.n	8000a28 <__aeabi_fmul+0x184>
 80009f0:	2308      	movs	r3, #8
 80009f2:	4699      	mov	r9, r3
 80009f4:	3b06      	subs	r3, #6
 80009f6:	25ff      	movs	r5, #255	; 0xff
 80009f8:	469a      	mov	sl, r3
 80009fa:	e76c      	b.n	80008d6 <__aeabi_fmul+0x32>
 80009fc:	4643      	mov	r3, r8
 80009fe:	35ff      	adds	r5, #255	; 0xff
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10b      	bne.n	8000a1c <__aeabi_fmul+0x178>
 8000a04:	2302      	movs	r3, #2
 8000a06:	464a      	mov	r2, r9
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	4691      	mov	r9, r2
 8000a0c:	469c      	mov	ip, r3
 8000a0e:	e778      	b.n	8000902 <__aeabi_fmul+0x5e>
 8000a10:	4653      	mov	r3, sl
 8000a12:	0031      	movs	r1, r6
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fmul+0x176>
 8000a18:	e783      	b.n	8000922 <__aeabi_fmul+0x7e>
 8000a1a:	e792      	b.n	8000942 <__aeabi_fmul+0x9e>
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	464a      	mov	r2, r9
 8000a20:	431a      	orrs	r2, r3
 8000a22:	4691      	mov	r9, r2
 8000a24:	469c      	mov	ip, r3
 8000a26:	e76c      	b.n	8000902 <__aeabi_fmul+0x5e>
 8000a28:	230c      	movs	r3, #12
 8000a2a:	4699      	mov	r9, r3
 8000a2c:	3b09      	subs	r3, #9
 8000a2e:	25ff      	movs	r5, #255	; 0xff
 8000a30:	469a      	mov	sl, r3
 8000a32:	e750      	b.n	80008d6 <__aeabi_fmul+0x32>
 8000a34:	0020      	movs	r0, r4
 8000a36:	f001 ffa1 	bl	800297c <__clzsi2>
 8000a3a:	2576      	movs	r5, #118	; 0x76
 8000a3c:	1f43      	subs	r3, r0, #5
 8000a3e:	409c      	lsls	r4, r3
 8000a40:	2300      	movs	r3, #0
 8000a42:	426d      	negs	r5, r5
 8000a44:	4699      	mov	r9, r3
 8000a46:	469a      	mov	sl, r3
 8000a48:	1a2d      	subs	r5, r5, r0
 8000a4a:	e744      	b.n	80008d6 <__aeabi_fmul+0x32>
 8000a4c:	4640      	mov	r0, r8
 8000a4e:	f001 ff95 	bl	800297c <__clzsi2>
 8000a52:	4642      	mov	r2, r8
 8000a54:	1f43      	subs	r3, r0, #5
 8000a56:	409a      	lsls	r2, r3
 8000a58:	2300      	movs	r3, #0
 8000a5a:	1a2d      	subs	r5, r5, r0
 8000a5c:	4690      	mov	r8, r2
 8000a5e:	469c      	mov	ip, r3
 8000a60:	3d76      	subs	r5, #118	; 0x76
 8000a62:	e74e      	b.n	8000902 <__aeabi_fmul+0x5e>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	2100      	movs	r1, #0
 8000a68:	20ff      	movs	r0, #255	; 0xff
 8000a6a:	03e4      	lsls	r4, r4, #15
 8000a6c:	e760      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	2b1b      	cmp	r3, #27
 8000a74:	dd00      	ble.n	8000a78 <__aeabi_fmul+0x1d4>
 8000a76:	e759      	b.n	800092c <__aeabi_fmul+0x88>
 8000a78:	0022      	movs	r2, r4
 8000a7a:	309e      	adds	r0, #158	; 0x9e
 8000a7c:	40da      	lsrs	r2, r3
 8000a7e:	4084      	lsls	r4, r0
 8000a80:	0013      	movs	r3, r2
 8000a82:	1e62      	subs	r2, r4, #1
 8000a84:	4194      	sbcs	r4, r2
 8000a86:	431c      	orrs	r4, r3
 8000a88:	0763      	lsls	r3, r4, #29
 8000a8a:	d004      	beq.n	8000a96 <__aeabi_fmul+0x1f2>
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	4023      	ands	r3, r4
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fmul+0x1f2>
 8000a94:	3404      	adds	r4, #4
 8000a96:	0163      	lsls	r3, r4, #5
 8000a98:	d51a      	bpl.n	8000ad0 <__aeabi_fmul+0x22c>
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	e747      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000aa0:	2080      	movs	r0, #128	; 0x80
 8000aa2:	03c0      	lsls	r0, r0, #15
 8000aa4:	4204      	tst	r4, r0
 8000aa6:	d009      	beq.n	8000abc <__aeabi_fmul+0x218>
 8000aa8:	4643      	mov	r3, r8
 8000aaa:	4203      	tst	r3, r0
 8000aac:	d106      	bne.n	8000abc <__aeabi_fmul+0x218>
 8000aae:	4644      	mov	r4, r8
 8000ab0:	4304      	orrs	r4, r0
 8000ab2:	0264      	lsls	r4, r4, #9
 8000ab4:	0039      	movs	r1, r7
 8000ab6:	20ff      	movs	r0, #255	; 0xff
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	e739      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000abc:	2080      	movs	r0, #128	; 0x80
 8000abe:	03c0      	lsls	r0, r0, #15
 8000ac0:	4304      	orrs	r4, r0
 8000ac2:	0264      	lsls	r4, r4, #9
 8000ac4:	0031      	movs	r1, r6
 8000ac6:	20ff      	movs	r0, #255	; 0xff
 8000ac8:	0a64      	lsrs	r4, r4, #9
 8000aca:	e731      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000acc:	0028      	movs	r0, r5
 8000ace:	e765      	b.n	800099c <__aeabi_fmul+0xf8>
 8000ad0:	01a4      	lsls	r4, r4, #6
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	e72b      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000ad8:	2080      	movs	r0, #128	; 0x80
 8000ada:	03c0      	lsls	r0, r0, #15
 8000adc:	4304      	orrs	r4, r0
 8000ade:	0264      	lsls	r4, r4, #9
 8000ae0:	20ff      	movs	r0, #255	; 0xff
 8000ae2:	0a64      	lsrs	r4, r4, #9
 8000ae4:	e724      	b.n	8000930 <__aeabi_fmul+0x8c>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	0800ff7c 	.word	0x0800ff7c
 8000aec:	f7ffffff 	.word	0xf7ffffff

08000af0 <__aeabi_i2f>:
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af2:	2800      	cmp	r0, #0
 8000af4:	d013      	beq.n	8000b1e <__aeabi_i2f+0x2e>
 8000af6:	17c3      	asrs	r3, r0, #31
 8000af8:	18c6      	adds	r6, r0, r3
 8000afa:	405e      	eors	r6, r3
 8000afc:	0fc4      	lsrs	r4, r0, #31
 8000afe:	0030      	movs	r0, r6
 8000b00:	f001 ff3c 	bl	800297c <__clzsi2>
 8000b04:	239e      	movs	r3, #158	; 0x9e
 8000b06:	0005      	movs	r5, r0
 8000b08:	1a1b      	subs	r3, r3, r0
 8000b0a:	2b96      	cmp	r3, #150	; 0x96
 8000b0c:	dc0f      	bgt.n	8000b2e <__aeabi_i2f+0x3e>
 8000b0e:	2808      	cmp	r0, #8
 8000b10:	dd01      	ble.n	8000b16 <__aeabi_i2f+0x26>
 8000b12:	3d08      	subs	r5, #8
 8000b14:	40ae      	lsls	r6, r5
 8000b16:	0276      	lsls	r6, r6, #9
 8000b18:	0a76      	lsrs	r6, r6, #9
 8000b1a:	b2d8      	uxtb	r0, r3
 8000b1c:	e002      	b.n	8000b24 <__aeabi_i2f+0x34>
 8000b1e:	2400      	movs	r4, #0
 8000b20:	2000      	movs	r0, #0
 8000b22:	2600      	movs	r6, #0
 8000b24:	05c0      	lsls	r0, r0, #23
 8000b26:	4330      	orrs	r0, r6
 8000b28:	07e4      	lsls	r4, r4, #31
 8000b2a:	4320      	orrs	r0, r4
 8000b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b2e:	2b99      	cmp	r3, #153	; 0x99
 8000b30:	dd0c      	ble.n	8000b4c <__aeabi_i2f+0x5c>
 8000b32:	2205      	movs	r2, #5
 8000b34:	0031      	movs	r1, r6
 8000b36:	1a12      	subs	r2, r2, r0
 8000b38:	40d1      	lsrs	r1, r2
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	0001      	movs	r1, r0
 8000b3e:	0030      	movs	r0, r6
 8000b40:	311b      	adds	r1, #27
 8000b42:	4088      	lsls	r0, r1
 8000b44:	1e41      	subs	r1, r0, #1
 8000b46:	4188      	sbcs	r0, r1
 8000b48:	4302      	orrs	r2, r0
 8000b4a:	0016      	movs	r6, r2
 8000b4c:	2d05      	cmp	r5, #5
 8000b4e:	dc12      	bgt.n	8000b76 <__aeabi_i2f+0x86>
 8000b50:	0031      	movs	r1, r6
 8000b52:	4f0d      	ldr	r7, [pc, #52]	; (8000b88 <__aeabi_i2f+0x98>)
 8000b54:	4039      	ands	r1, r7
 8000b56:	0772      	lsls	r2, r6, #29
 8000b58:	d009      	beq.n	8000b6e <__aeabi_i2f+0x7e>
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	4030      	ands	r0, r6
 8000b5e:	2804      	cmp	r0, #4
 8000b60:	d005      	beq.n	8000b6e <__aeabi_i2f+0x7e>
 8000b62:	3104      	adds	r1, #4
 8000b64:	014a      	lsls	r2, r1, #5
 8000b66:	d502      	bpl.n	8000b6e <__aeabi_i2f+0x7e>
 8000b68:	239f      	movs	r3, #159	; 0x9f
 8000b6a:	4039      	ands	r1, r7
 8000b6c:	1b5b      	subs	r3, r3, r5
 8000b6e:	0189      	lsls	r1, r1, #6
 8000b70:	0a4e      	lsrs	r6, r1, #9
 8000b72:	b2d8      	uxtb	r0, r3
 8000b74:	e7d6      	b.n	8000b24 <__aeabi_i2f+0x34>
 8000b76:	1f6a      	subs	r2, r5, #5
 8000b78:	4096      	lsls	r6, r2
 8000b7a:	0031      	movs	r1, r6
 8000b7c:	4f02      	ldr	r7, [pc, #8]	; (8000b88 <__aeabi_i2f+0x98>)
 8000b7e:	4039      	ands	r1, r7
 8000b80:	0772      	lsls	r2, r6, #29
 8000b82:	d0f4      	beq.n	8000b6e <__aeabi_i2f+0x7e>
 8000b84:	e7e9      	b.n	8000b5a <__aeabi_i2f+0x6a>
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	fbffffff 	.word	0xfbffffff

08000b8c <__aeabi_ui2f>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	1e05      	subs	r5, r0, #0
 8000b90:	d00e      	beq.n	8000bb0 <__aeabi_ui2f+0x24>
 8000b92:	f001 fef3 	bl	800297c <__clzsi2>
 8000b96:	239e      	movs	r3, #158	; 0x9e
 8000b98:	0004      	movs	r4, r0
 8000b9a:	1a1b      	subs	r3, r3, r0
 8000b9c:	2b96      	cmp	r3, #150	; 0x96
 8000b9e:	dc0c      	bgt.n	8000bba <__aeabi_ui2f+0x2e>
 8000ba0:	2808      	cmp	r0, #8
 8000ba2:	dd01      	ble.n	8000ba8 <__aeabi_ui2f+0x1c>
 8000ba4:	3c08      	subs	r4, #8
 8000ba6:	40a5      	lsls	r5, r4
 8000ba8:	026d      	lsls	r5, r5, #9
 8000baa:	0a6d      	lsrs	r5, r5, #9
 8000bac:	b2d8      	uxtb	r0, r3
 8000bae:	e001      	b.n	8000bb4 <__aeabi_ui2f+0x28>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	2500      	movs	r5, #0
 8000bb4:	05c0      	lsls	r0, r0, #23
 8000bb6:	4328      	orrs	r0, r5
 8000bb8:	bd70      	pop	{r4, r5, r6, pc}
 8000bba:	2b99      	cmp	r3, #153	; 0x99
 8000bbc:	dd09      	ble.n	8000bd2 <__aeabi_ui2f+0x46>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	0029      	movs	r1, r5
 8000bc2:	321b      	adds	r2, #27
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	1e4a      	subs	r2, r1, #1
 8000bc8:	4191      	sbcs	r1, r2
 8000bca:	2205      	movs	r2, #5
 8000bcc:	1a12      	subs	r2, r2, r0
 8000bce:	40d5      	lsrs	r5, r2
 8000bd0:	430d      	orrs	r5, r1
 8000bd2:	2c05      	cmp	r4, #5
 8000bd4:	dc12      	bgt.n	8000bfc <__aeabi_ui2f+0x70>
 8000bd6:	0029      	movs	r1, r5
 8000bd8:	4e0c      	ldr	r6, [pc, #48]	; (8000c0c <__aeabi_ui2f+0x80>)
 8000bda:	4031      	ands	r1, r6
 8000bdc:	076a      	lsls	r2, r5, #29
 8000bde:	d009      	beq.n	8000bf4 <__aeabi_ui2f+0x68>
 8000be0:	200f      	movs	r0, #15
 8000be2:	4028      	ands	r0, r5
 8000be4:	2804      	cmp	r0, #4
 8000be6:	d005      	beq.n	8000bf4 <__aeabi_ui2f+0x68>
 8000be8:	3104      	adds	r1, #4
 8000bea:	014a      	lsls	r2, r1, #5
 8000bec:	d502      	bpl.n	8000bf4 <__aeabi_ui2f+0x68>
 8000bee:	239f      	movs	r3, #159	; 0x9f
 8000bf0:	4031      	ands	r1, r6
 8000bf2:	1b1b      	subs	r3, r3, r4
 8000bf4:	0189      	lsls	r1, r1, #6
 8000bf6:	0a4d      	lsrs	r5, r1, #9
 8000bf8:	b2d8      	uxtb	r0, r3
 8000bfa:	e7db      	b.n	8000bb4 <__aeabi_ui2f+0x28>
 8000bfc:	1f62      	subs	r2, r4, #5
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	0029      	movs	r1, r5
 8000c02:	4e02      	ldr	r6, [pc, #8]	; (8000c0c <__aeabi_ui2f+0x80>)
 8000c04:	4031      	ands	r1, r6
 8000c06:	076a      	lsls	r2, r5, #29
 8000c08:	d0f4      	beq.n	8000bf4 <__aeabi_ui2f+0x68>
 8000c0a:	e7e9      	b.n	8000be0 <__aeabi_ui2f+0x54>
 8000c0c:	fbffffff 	.word	0xfbffffff

08000c10 <__aeabi_dadd>:
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	464f      	mov	r7, r9
 8000c14:	4646      	mov	r6, r8
 8000c16:	46d6      	mov	lr, sl
 8000c18:	000d      	movs	r5, r1
 8000c1a:	0004      	movs	r4, r0
 8000c1c:	b5c0      	push	{r6, r7, lr}
 8000c1e:	001f      	movs	r7, r3
 8000c20:	0011      	movs	r1, r2
 8000c22:	0328      	lsls	r0, r5, #12
 8000c24:	0f62      	lsrs	r2, r4, #29
 8000c26:	0a40      	lsrs	r0, r0, #9
 8000c28:	4310      	orrs	r0, r2
 8000c2a:	007a      	lsls	r2, r7, #1
 8000c2c:	0d52      	lsrs	r2, r2, #21
 8000c2e:	00e3      	lsls	r3, r4, #3
 8000c30:	033c      	lsls	r4, r7, #12
 8000c32:	4691      	mov	r9, r2
 8000c34:	0a64      	lsrs	r4, r4, #9
 8000c36:	0ffa      	lsrs	r2, r7, #31
 8000c38:	0f4f      	lsrs	r7, r1, #29
 8000c3a:	006e      	lsls	r6, r5, #1
 8000c3c:	4327      	orrs	r7, r4
 8000c3e:	4692      	mov	sl, r2
 8000c40:	46b8      	mov	r8, r7
 8000c42:	0d76      	lsrs	r6, r6, #21
 8000c44:	0fed      	lsrs	r5, r5, #31
 8000c46:	00c9      	lsls	r1, r1, #3
 8000c48:	4295      	cmp	r5, r2
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dadd+0x3e>
 8000c4c:	e099      	b.n	8000d82 <__aeabi_dadd+0x172>
 8000c4e:	464c      	mov	r4, r9
 8000c50:	1b34      	subs	r4, r6, r4
 8000c52:	46a4      	mov	ip, r4
 8000c54:	2c00      	cmp	r4, #0
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_dadd+0x4a>
 8000c58:	e07c      	b.n	8000d54 <__aeabi_dadd+0x144>
 8000c5a:	464a      	mov	r2, r9
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dadd+0x52>
 8000c60:	e0b8      	b.n	8000dd4 <__aeabi_dadd+0x1c4>
 8000c62:	4ac5      	ldr	r2, [pc, #788]	; (8000f78 <__aeabi_dadd+0x368>)
 8000c64:	4296      	cmp	r6, r2
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x5a>
 8000c68:	e11c      	b.n	8000ea4 <__aeabi_dadd+0x294>
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	003c      	movs	r4, r7
 8000c6e:	0412      	lsls	r2, r2, #16
 8000c70:	4314      	orrs	r4, r2
 8000c72:	46a0      	mov	r8, r4
 8000c74:	4662      	mov	r2, ip
 8000c76:	2a38      	cmp	r2, #56	; 0x38
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_dadd+0x6c>
 8000c7a:	e161      	b.n	8000f40 <__aeabi_dadd+0x330>
 8000c7c:	2a1f      	cmp	r2, #31
 8000c7e:	dd00      	ble.n	8000c82 <__aeabi_dadd+0x72>
 8000c80:	e1cc      	b.n	800101c <__aeabi_dadd+0x40c>
 8000c82:	4664      	mov	r4, ip
 8000c84:	2220      	movs	r2, #32
 8000c86:	1b12      	subs	r2, r2, r4
 8000c88:	4644      	mov	r4, r8
 8000c8a:	4094      	lsls	r4, r2
 8000c8c:	000f      	movs	r7, r1
 8000c8e:	46a1      	mov	r9, r4
 8000c90:	4664      	mov	r4, ip
 8000c92:	4091      	lsls	r1, r2
 8000c94:	40e7      	lsrs	r7, r4
 8000c96:	464c      	mov	r4, r9
 8000c98:	1e4a      	subs	r2, r1, #1
 8000c9a:	4191      	sbcs	r1, r2
 8000c9c:	433c      	orrs	r4, r7
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	4321      	orrs	r1, r4
 8000ca2:	4664      	mov	r4, ip
 8000ca4:	40e2      	lsrs	r2, r4
 8000ca6:	1a80      	subs	r0, r0, r2
 8000ca8:	1a5c      	subs	r4, r3, r1
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	419b      	sbcs	r3, r3
 8000cae:	425f      	negs	r7, r3
 8000cb0:	1bc7      	subs	r7, r0, r7
 8000cb2:	023b      	lsls	r3, r7, #8
 8000cb4:	d400      	bmi.n	8000cb8 <__aeabi_dadd+0xa8>
 8000cb6:	e0d0      	b.n	8000e5a <__aeabi_dadd+0x24a>
 8000cb8:	027f      	lsls	r7, r7, #9
 8000cba:	0a7f      	lsrs	r7, r7, #9
 8000cbc:	2f00      	cmp	r7, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0xb2>
 8000cc0:	e0ff      	b.n	8000ec2 <__aeabi_dadd+0x2b2>
 8000cc2:	0038      	movs	r0, r7
 8000cc4:	f001 fe5a 	bl	800297c <__clzsi2>
 8000cc8:	0001      	movs	r1, r0
 8000cca:	3908      	subs	r1, #8
 8000ccc:	2320      	movs	r3, #32
 8000cce:	0022      	movs	r2, r4
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	408f      	lsls	r7, r1
 8000cd4:	40da      	lsrs	r2, r3
 8000cd6:	408c      	lsls	r4, r1
 8000cd8:	4317      	orrs	r7, r2
 8000cda:	42b1      	cmp	r1, r6
 8000cdc:	da00      	bge.n	8000ce0 <__aeabi_dadd+0xd0>
 8000cde:	e0ff      	b.n	8000ee0 <__aeabi_dadd+0x2d0>
 8000ce0:	1b89      	subs	r1, r1, r6
 8000ce2:	1c4b      	adds	r3, r1, #1
 8000ce4:	2b1f      	cmp	r3, #31
 8000ce6:	dd00      	ble.n	8000cea <__aeabi_dadd+0xda>
 8000ce8:	e0a8      	b.n	8000e3c <__aeabi_dadd+0x22c>
 8000cea:	2220      	movs	r2, #32
 8000cec:	0039      	movs	r1, r7
 8000cee:	1ad2      	subs	r2, r2, r3
 8000cf0:	0020      	movs	r0, r4
 8000cf2:	4094      	lsls	r4, r2
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	40d8      	lsrs	r0, r3
 8000cf8:	1e62      	subs	r2, r4, #1
 8000cfa:	4194      	sbcs	r4, r2
 8000cfc:	40df      	lsrs	r7, r3
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4301      	orrs	r1, r0
 8000d02:	430c      	orrs	r4, r1
 8000d04:	0763      	lsls	r3, r4, #29
 8000d06:	d009      	beq.n	8000d1c <__aeabi_dadd+0x10c>
 8000d08:	230f      	movs	r3, #15
 8000d0a:	4023      	ands	r3, r4
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d005      	beq.n	8000d1c <__aeabi_dadd+0x10c>
 8000d10:	1d23      	adds	r3, r4, #4
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	41a4      	sbcs	r4, r4
 8000d16:	4264      	negs	r4, r4
 8000d18:	193f      	adds	r7, r7, r4
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	023b      	lsls	r3, r7, #8
 8000d1e:	d400      	bmi.n	8000d22 <__aeabi_dadd+0x112>
 8000d20:	e09e      	b.n	8000e60 <__aeabi_dadd+0x250>
 8000d22:	4b95      	ldr	r3, [pc, #596]	; (8000f78 <__aeabi_dadd+0x368>)
 8000d24:	3601      	adds	r6, #1
 8000d26:	429e      	cmp	r6, r3
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x11c>
 8000d2a:	e0b7      	b.n	8000e9c <__aeabi_dadd+0x28c>
 8000d2c:	4a93      	ldr	r2, [pc, #588]	; (8000f7c <__aeabi_dadd+0x36c>)
 8000d2e:	08e4      	lsrs	r4, r4, #3
 8000d30:	4017      	ands	r7, r2
 8000d32:	077b      	lsls	r3, r7, #29
 8000d34:	0571      	lsls	r1, r6, #21
 8000d36:	027f      	lsls	r7, r7, #9
 8000d38:	4323      	orrs	r3, r4
 8000d3a:	0b3f      	lsrs	r7, r7, #12
 8000d3c:	0d4a      	lsrs	r2, r1, #21
 8000d3e:	0512      	lsls	r2, r2, #20
 8000d40:	433a      	orrs	r2, r7
 8000d42:	07ed      	lsls	r5, r5, #31
 8000d44:	432a      	orrs	r2, r5
 8000d46:	0018      	movs	r0, r3
 8000d48:	0011      	movs	r1, r2
 8000d4a:	bce0      	pop	{r5, r6, r7}
 8000d4c:	46ba      	mov	sl, r7
 8000d4e:	46b1      	mov	r9, r6
 8000d50:	46a8      	mov	r8, r5
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04b      	beq.n	8000df0 <__aeabi_dadd+0x1e0>
 8000d58:	464c      	mov	r4, r9
 8000d5a:	1ba4      	subs	r4, r4, r6
 8000d5c:	46a4      	mov	ip, r4
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d000      	beq.n	8000d64 <__aeabi_dadd+0x154>
 8000d62:	e123      	b.n	8000fac <__aeabi_dadd+0x39c>
 8000d64:	0004      	movs	r4, r0
 8000d66:	431c      	orrs	r4, r3
 8000d68:	d100      	bne.n	8000d6c <__aeabi_dadd+0x15c>
 8000d6a:	e1af      	b.n	80010cc <__aeabi_dadd+0x4bc>
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	1e54      	subs	r4, r2, #1
 8000d70:	2a01      	cmp	r2, #1
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dadd+0x166>
 8000d74:	e215      	b.n	80011a2 <__aeabi_dadd+0x592>
 8000d76:	4d80      	ldr	r5, [pc, #512]	; (8000f78 <__aeabi_dadd+0x368>)
 8000d78:	45ac      	cmp	ip, r5
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_dadd+0x16e>
 8000d7c:	e1c8      	b.n	8001110 <__aeabi_dadd+0x500>
 8000d7e:	46a4      	mov	ip, r4
 8000d80:	e11b      	b.n	8000fba <__aeabi_dadd+0x3aa>
 8000d82:	464a      	mov	r2, r9
 8000d84:	1ab2      	subs	r2, r6, r2
 8000d86:	4694      	mov	ip, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_dadd+0x17e>
 8000d8c:	e0ac      	b.n	8000ee8 <__aeabi_dadd+0x2d8>
 8000d8e:	464a      	mov	r2, r9
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d043      	beq.n	8000e1c <__aeabi_dadd+0x20c>
 8000d94:	4a78      	ldr	r2, [pc, #480]	; (8000f78 <__aeabi_dadd+0x368>)
 8000d96:	4296      	cmp	r6, r2
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x18c>
 8000d9a:	e1af      	b.n	80010fc <__aeabi_dadd+0x4ec>
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	003c      	movs	r4, r7
 8000da0:	0412      	lsls	r2, r2, #16
 8000da2:	4314      	orrs	r4, r2
 8000da4:	46a0      	mov	r8, r4
 8000da6:	4662      	mov	r2, ip
 8000da8:	2a38      	cmp	r2, #56	; 0x38
 8000daa:	dc67      	bgt.n	8000e7c <__aeabi_dadd+0x26c>
 8000dac:	2a1f      	cmp	r2, #31
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_dadd+0x1a2>
 8000db0:	e15f      	b.n	8001072 <__aeabi_dadd+0x462>
 8000db2:	4647      	mov	r7, r8
 8000db4:	3a20      	subs	r2, #32
 8000db6:	40d7      	lsrs	r7, r2
 8000db8:	4662      	mov	r2, ip
 8000dba:	2a20      	cmp	r2, #32
 8000dbc:	d005      	beq.n	8000dca <__aeabi_dadd+0x1ba>
 8000dbe:	4664      	mov	r4, ip
 8000dc0:	2240      	movs	r2, #64	; 0x40
 8000dc2:	1b12      	subs	r2, r2, r4
 8000dc4:	4644      	mov	r4, r8
 8000dc6:	4094      	lsls	r4, r2
 8000dc8:	4321      	orrs	r1, r4
 8000dca:	1e4a      	subs	r2, r1, #1
 8000dcc:	4191      	sbcs	r1, r2
 8000dce:	000c      	movs	r4, r1
 8000dd0:	433c      	orrs	r4, r7
 8000dd2:	e057      	b.n	8000e84 <__aeabi_dadd+0x274>
 8000dd4:	003a      	movs	r2, r7
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_dadd+0x1cc>
 8000dda:	e105      	b.n	8000fe8 <__aeabi_dadd+0x3d8>
 8000ddc:	0022      	movs	r2, r4
 8000dde:	3a01      	subs	r2, #1
 8000de0:	2c01      	cmp	r4, #1
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x1d6>
 8000de4:	e182      	b.n	80010ec <__aeabi_dadd+0x4dc>
 8000de6:	4c64      	ldr	r4, [pc, #400]	; (8000f78 <__aeabi_dadd+0x368>)
 8000de8:	45a4      	cmp	ip, r4
 8000dea:	d05b      	beq.n	8000ea4 <__aeabi_dadd+0x294>
 8000dec:	4694      	mov	ip, r2
 8000dee:	e741      	b.n	8000c74 <__aeabi_dadd+0x64>
 8000df0:	4c63      	ldr	r4, [pc, #396]	; (8000f80 <__aeabi_dadd+0x370>)
 8000df2:	1c77      	adds	r7, r6, #1
 8000df4:	4227      	tst	r7, r4
 8000df6:	d000      	beq.n	8000dfa <__aeabi_dadd+0x1ea>
 8000df8:	e0c4      	b.n	8000f84 <__aeabi_dadd+0x374>
 8000dfa:	0004      	movs	r4, r0
 8000dfc:	431c      	orrs	r4, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d000      	beq.n	8000e04 <__aeabi_dadd+0x1f4>
 8000e02:	e169      	b.n	80010d8 <__aeabi_dadd+0x4c8>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x1fa>
 8000e08:	e1bf      	b.n	800118a <__aeabi_dadd+0x57a>
 8000e0a:	4644      	mov	r4, r8
 8000e0c:	430c      	orrs	r4, r1
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_dadd+0x202>
 8000e10:	e1d0      	b.n	80011b4 <__aeabi_dadd+0x5a4>
 8000e12:	0742      	lsls	r2, r0, #29
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	08c0      	lsrs	r0, r0, #3
 8000e1a:	e029      	b.n	8000e70 <__aeabi_dadd+0x260>
 8000e1c:	003a      	movs	r2, r7
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	d100      	bne.n	8000e24 <__aeabi_dadd+0x214>
 8000e22:	e170      	b.n	8001106 <__aeabi_dadd+0x4f6>
 8000e24:	4662      	mov	r2, ip
 8000e26:	4664      	mov	r4, ip
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	2c01      	cmp	r4, #1
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dadd+0x220>
 8000e2e:	e0e0      	b.n	8000ff2 <__aeabi_dadd+0x3e2>
 8000e30:	4c51      	ldr	r4, [pc, #324]	; (8000f78 <__aeabi_dadd+0x368>)
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dadd+0x228>
 8000e36:	e161      	b.n	80010fc <__aeabi_dadd+0x4ec>
 8000e38:	4694      	mov	ip, r2
 8000e3a:	e7b4      	b.n	8000da6 <__aeabi_dadd+0x196>
 8000e3c:	003a      	movs	r2, r7
 8000e3e:	391f      	subs	r1, #31
 8000e40:	40ca      	lsrs	r2, r1
 8000e42:	0011      	movs	r1, r2
 8000e44:	2b20      	cmp	r3, #32
 8000e46:	d003      	beq.n	8000e50 <__aeabi_dadd+0x240>
 8000e48:	2240      	movs	r2, #64	; 0x40
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	409f      	lsls	r7, r3
 8000e4e:	433c      	orrs	r4, r7
 8000e50:	1e63      	subs	r3, r4, #1
 8000e52:	419c      	sbcs	r4, r3
 8000e54:	2700      	movs	r7, #0
 8000e56:	2600      	movs	r6, #0
 8000e58:	430c      	orrs	r4, r1
 8000e5a:	0763      	lsls	r3, r4, #29
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_dadd+0x250>
 8000e5e:	e753      	b.n	8000d08 <__aeabi_dadd+0xf8>
 8000e60:	46b4      	mov	ip, r6
 8000e62:	08e4      	lsrs	r4, r4, #3
 8000e64:	077b      	lsls	r3, r7, #29
 8000e66:	4323      	orrs	r3, r4
 8000e68:	08f8      	lsrs	r0, r7, #3
 8000e6a:	4a43      	ldr	r2, [pc, #268]	; (8000f78 <__aeabi_dadd+0x368>)
 8000e6c:	4594      	cmp	ip, r2
 8000e6e:	d01d      	beq.n	8000eac <__aeabi_dadd+0x29c>
 8000e70:	4662      	mov	r2, ip
 8000e72:	0307      	lsls	r7, r0, #12
 8000e74:	0552      	lsls	r2, r2, #21
 8000e76:	0b3f      	lsrs	r7, r7, #12
 8000e78:	0d52      	lsrs	r2, r2, #21
 8000e7a:	e760      	b.n	8000d3e <__aeabi_dadd+0x12e>
 8000e7c:	4644      	mov	r4, r8
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	1e62      	subs	r2, r4, #1
 8000e82:	4194      	sbcs	r4, r2
 8000e84:	18e4      	adds	r4, r4, r3
 8000e86:	429c      	cmp	r4, r3
 8000e88:	419b      	sbcs	r3, r3
 8000e8a:	425f      	negs	r7, r3
 8000e8c:	183f      	adds	r7, r7, r0
 8000e8e:	023b      	lsls	r3, r7, #8
 8000e90:	d5e3      	bpl.n	8000e5a <__aeabi_dadd+0x24a>
 8000e92:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <__aeabi_dadd+0x368>)
 8000e94:	3601      	adds	r6, #1
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d000      	beq.n	8000e9c <__aeabi_dadd+0x28c>
 8000e9a:	e0b5      	b.n	8001008 <__aeabi_dadd+0x3f8>
 8000e9c:	0032      	movs	r2, r6
 8000e9e:	2700      	movs	r7, #0
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e74c      	b.n	8000d3e <__aeabi_dadd+0x12e>
 8000ea4:	0742      	lsls	r2, r0, #29
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	08c0      	lsrs	r0, r0, #3
 8000eac:	001a      	movs	r2, r3
 8000eae:	4302      	orrs	r2, r0
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dadd+0x2a4>
 8000eb2:	e1e1      	b.n	8001278 <__aeabi_dadd+0x668>
 8000eb4:	2780      	movs	r7, #128	; 0x80
 8000eb6:	033f      	lsls	r7, r7, #12
 8000eb8:	4307      	orrs	r7, r0
 8000eba:	033f      	lsls	r7, r7, #12
 8000ebc:	4a2e      	ldr	r2, [pc, #184]	; (8000f78 <__aeabi_dadd+0x368>)
 8000ebe:	0b3f      	lsrs	r7, r7, #12
 8000ec0:	e73d      	b.n	8000d3e <__aeabi_dadd+0x12e>
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	f001 fd5a 	bl	800297c <__clzsi2>
 8000ec8:	0001      	movs	r1, r0
 8000eca:	3118      	adds	r1, #24
 8000ecc:	291f      	cmp	r1, #31
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_dadd+0x2c2>
 8000ed0:	e6fc      	b.n	8000ccc <__aeabi_dadd+0xbc>
 8000ed2:	3808      	subs	r0, #8
 8000ed4:	4084      	lsls	r4, r0
 8000ed6:	0027      	movs	r7, r4
 8000ed8:	2400      	movs	r4, #0
 8000eda:	42b1      	cmp	r1, r6
 8000edc:	db00      	blt.n	8000ee0 <__aeabi_dadd+0x2d0>
 8000ede:	e6ff      	b.n	8000ce0 <__aeabi_dadd+0xd0>
 8000ee0:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <__aeabi_dadd+0x36c>)
 8000ee2:	1a76      	subs	r6, r6, r1
 8000ee4:	4017      	ands	r7, r2
 8000ee6:	e70d      	b.n	8000d04 <__aeabi_dadd+0xf4>
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d02f      	beq.n	8000f4c <__aeabi_dadd+0x33c>
 8000eec:	464a      	mov	r2, r9
 8000eee:	1b92      	subs	r2, r2, r6
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	2e00      	cmp	r6, #0
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_dadd+0x2e8>
 8000ef6:	e0ad      	b.n	8001054 <__aeabi_dadd+0x444>
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <__aeabi_dadd+0x368>)
 8000efa:	4591      	cmp	r9, r2
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x2f0>
 8000efe:	e10f      	b.n	8001120 <__aeabi_dadd+0x510>
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	4310      	orrs	r0, r2
 8000f06:	4662      	mov	r2, ip
 8000f08:	2a38      	cmp	r2, #56	; 0x38
 8000f0a:	dd00      	ble.n	8000f0e <__aeabi_dadd+0x2fe>
 8000f0c:	e10f      	b.n	800112e <__aeabi_dadd+0x51e>
 8000f0e:	2a1f      	cmp	r2, #31
 8000f10:	dd00      	ble.n	8000f14 <__aeabi_dadd+0x304>
 8000f12:	e180      	b.n	8001216 <__aeabi_dadd+0x606>
 8000f14:	4664      	mov	r4, ip
 8000f16:	2220      	movs	r2, #32
 8000f18:	001e      	movs	r6, r3
 8000f1a:	1b12      	subs	r2, r2, r4
 8000f1c:	4667      	mov	r7, ip
 8000f1e:	0004      	movs	r4, r0
 8000f20:	4093      	lsls	r3, r2
 8000f22:	4094      	lsls	r4, r2
 8000f24:	40fe      	lsrs	r6, r7
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	4193      	sbcs	r3, r2
 8000f2a:	40f8      	lsrs	r0, r7
 8000f2c:	4334      	orrs	r4, r6
 8000f2e:	431c      	orrs	r4, r3
 8000f30:	4480      	add	r8, r0
 8000f32:	1864      	adds	r4, r4, r1
 8000f34:	428c      	cmp	r4, r1
 8000f36:	41bf      	sbcs	r7, r7
 8000f38:	427f      	negs	r7, r7
 8000f3a:	464e      	mov	r6, r9
 8000f3c:	4447      	add	r7, r8
 8000f3e:	e7a6      	b.n	8000e8e <__aeabi_dadd+0x27e>
 8000f40:	4642      	mov	r2, r8
 8000f42:	430a      	orrs	r2, r1
 8000f44:	0011      	movs	r1, r2
 8000f46:	1e4a      	subs	r2, r1, #1
 8000f48:	4191      	sbcs	r1, r2
 8000f4a:	e6ad      	b.n	8000ca8 <__aeabi_dadd+0x98>
 8000f4c:	4c0c      	ldr	r4, [pc, #48]	; (8000f80 <__aeabi_dadd+0x370>)
 8000f4e:	1c72      	adds	r2, r6, #1
 8000f50:	4222      	tst	r2, r4
 8000f52:	d000      	beq.n	8000f56 <__aeabi_dadd+0x346>
 8000f54:	e0a1      	b.n	800109a <__aeabi_dadd+0x48a>
 8000f56:	0002      	movs	r2, r0
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	2e00      	cmp	r6, #0
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_dadd+0x350>
 8000f5e:	e0fa      	b.n	8001156 <__aeabi_dadd+0x546>
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_dadd+0x356>
 8000f64:	e145      	b.n	80011f2 <__aeabi_dadd+0x5e2>
 8000f66:	003a      	movs	r2, r7
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_dadd+0x35e>
 8000f6c:	e146      	b.n	80011fc <__aeabi_dadd+0x5ec>
 8000f6e:	0742      	lsls	r2, r0, #29
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	08c0      	lsrs	r0, r0, #3
 8000f76:	e77b      	b.n	8000e70 <__aeabi_dadd+0x260>
 8000f78:	000007ff 	.word	0x000007ff
 8000f7c:	ff7fffff 	.word	0xff7fffff
 8000f80:	000007fe 	.word	0x000007fe
 8000f84:	4647      	mov	r7, r8
 8000f86:	1a5c      	subs	r4, r3, r1
 8000f88:	1bc2      	subs	r2, r0, r7
 8000f8a:	42a3      	cmp	r3, r4
 8000f8c:	41bf      	sbcs	r7, r7
 8000f8e:	427f      	negs	r7, r7
 8000f90:	46b9      	mov	r9, r7
 8000f92:	0017      	movs	r7, r2
 8000f94:	464a      	mov	r2, r9
 8000f96:	1abf      	subs	r7, r7, r2
 8000f98:	023a      	lsls	r2, r7, #8
 8000f9a:	d500      	bpl.n	8000f9e <__aeabi_dadd+0x38e>
 8000f9c:	e08d      	b.n	80010ba <__aeabi_dadd+0x4aa>
 8000f9e:	0023      	movs	r3, r4
 8000fa0:	433b      	orrs	r3, r7
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_dadd+0x396>
 8000fa4:	e68a      	b.n	8000cbc <__aeabi_dadd+0xac>
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	2500      	movs	r5, #0
 8000faa:	e761      	b.n	8000e70 <__aeabi_dadd+0x260>
 8000fac:	4cb4      	ldr	r4, [pc, #720]	; (8001280 <__aeabi_dadd+0x670>)
 8000fae:	45a1      	cmp	r9, r4
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x3a4>
 8000fb2:	e0ad      	b.n	8001110 <__aeabi_dadd+0x500>
 8000fb4:	2480      	movs	r4, #128	; 0x80
 8000fb6:	0424      	lsls	r4, r4, #16
 8000fb8:	4320      	orrs	r0, r4
 8000fba:	4664      	mov	r4, ip
 8000fbc:	2c38      	cmp	r4, #56	; 0x38
 8000fbe:	dc3d      	bgt.n	800103c <__aeabi_dadd+0x42c>
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	2c1f      	cmp	r4, #31
 8000fc4:	dd00      	ble.n	8000fc8 <__aeabi_dadd+0x3b8>
 8000fc6:	e0b7      	b.n	8001138 <__aeabi_dadd+0x528>
 8000fc8:	2520      	movs	r5, #32
 8000fca:	001e      	movs	r6, r3
 8000fcc:	1b2d      	subs	r5, r5, r4
 8000fce:	0004      	movs	r4, r0
 8000fd0:	40ab      	lsls	r3, r5
 8000fd2:	40ac      	lsls	r4, r5
 8000fd4:	40d6      	lsrs	r6, r2
 8000fd6:	40d0      	lsrs	r0, r2
 8000fd8:	4642      	mov	r2, r8
 8000fda:	1e5d      	subs	r5, r3, #1
 8000fdc:	41ab      	sbcs	r3, r5
 8000fde:	4334      	orrs	r4, r6
 8000fe0:	1a12      	subs	r2, r2, r0
 8000fe2:	4690      	mov	r8, r2
 8000fe4:	4323      	orrs	r3, r4
 8000fe6:	e02c      	b.n	8001042 <__aeabi_dadd+0x432>
 8000fe8:	0742      	lsls	r2, r0, #29
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	08c0      	lsrs	r0, r0, #3
 8000ff0:	e73b      	b.n	8000e6a <__aeabi_dadd+0x25a>
 8000ff2:	185c      	adds	r4, r3, r1
 8000ff4:	429c      	cmp	r4, r3
 8000ff6:	419b      	sbcs	r3, r3
 8000ff8:	4440      	add	r0, r8
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	18c7      	adds	r7, r0, r3
 8000ffe:	2601      	movs	r6, #1
 8001000:	023b      	lsls	r3, r7, #8
 8001002:	d400      	bmi.n	8001006 <__aeabi_dadd+0x3f6>
 8001004:	e729      	b.n	8000e5a <__aeabi_dadd+0x24a>
 8001006:	2602      	movs	r6, #2
 8001008:	4a9e      	ldr	r2, [pc, #632]	; (8001284 <__aeabi_dadd+0x674>)
 800100a:	0863      	lsrs	r3, r4, #1
 800100c:	4017      	ands	r7, r2
 800100e:	2201      	movs	r2, #1
 8001010:	4014      	ands	r4, r2
 8001012:	431c      	orrs	r4, r3
 8001014:	07fb      	lsls	r3, r7, #31
 8001016:	431c      	orrs	r4, r3
 8001018:	087f      	lsrs	r7, r7, #1
 800101a:	e673      	b.n	8000d04 <__aeabi_dadd+0xf4>
 800101c:	4644      	mov	r4, r8
 800101e:	3a20      	subs	r2, #32
 8001020:	40d4      	lsrs	r4, r2
 8001022:	4662      	mov	r2, ip
 8001024:	2a20      	cmp	r2, #32
 8001026:	d005      	beq.n	8001034 <__aeabi_dadd+0x424>
 8001028:	4667      	mov	r7, ip
 800102a:	2240      	movs	r2, #64	; 0x40
 800102c:	1bd2      	subs	r2, r2, r7
 800102e:	4647      	mov	r7, r8
 8001030:	4097      	lsls	r7, r2
 8001032:	4339      	orrs	r1, r7
 8001034:	1e4a      	subs	r2, r1, #1
 8001036:	4191      	sbcs	r1, r2
 8001038:	4321      	orrs	r1, r4
 800103a:	e635      	b.n	8000ca8 <__aeabi_dadd+0x98>
 800103c:	4303      	orrs	r3, r0
 800103e:	1e58      	subs	r0, r3, #1
 8001040:	4183      	sbcs	r3, r0
 8001042:	1acc      	subs	r4, r1, r3
 8001044:	42a1      	cmp	r1, r4
 8001046:	41bf      	sbcs	r7, r7
 8001048:	4643      	mov	r3, r8
 800104a:	427f      	negs	r7, r7
 800104c:	4655      	mov	r5, sl
 800104e:	464e      	mov	r6, r9
 8001050:	1bdf      	subs	r7, r3, r7
 8001052:	e62e      	b.n	8000cb2 <__aeabi_dadd+0xa2>
 8001054:	0002      	movs	r2, r0
 8001056:	431a      	orrs	r2, r3
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x44c>
 800105a:	e0bd      	b.n	80011d8 <__aeabi_dadd+0x5c8>
 800105c:	4662      	mov	r2, ip
 800105e:	4664      	mov	r4, ip
 8001060:	3a01      	subs	r2, #1
 8001062:	2c01      	cmp	r4, #1
 8001064:	d100      	bne.n	8001068 <__aeabi_dadd+0x458>
 8001066:	e0e5      	b.n	8001234 <__aeabi_dadd+0x624>
 8001068:	4c85      	ldr	r4, [pc, #532]	; (8001280 <__aeabi_dadd+0x670>)
 800106a:	45a4      	cmp	ip, r4
 800106c:	d058      	beq.n	8001120 <__aeabi_dadd+0x510>
 800106e:	4694      	mov	ip, r2
 8001070:	e749      	b.n	8000f06 <__aeabi_dadd+0x2f6>
 8001072:	4664      	mov	r4, ip
 8001074:	2220      	movs	r2, #32
 8001076:	1b12      	subs	r2, r2, r4
 8001078:	4644      	mov	r4, r8
 800107a:	4094      	lsls	r4, r2
 800107c:	000f      	movs	r7, r1
 800107e:	46a1      	mov	r9, r4
 8001080:	4664      	mov	r4, ip
 8001082:	4091      	lsls	r1, r2
 8001084:	40e7      	lsrs	r7, r4
 8001086:	464c      	mov	r4, r9
 8001088:	1e4a      	subs	r2, r1, #1
 800108a:	4191      	sbcs	r1, r2
 800108c:	433c      	orrs	r4, r7
 800108e:	4642      	mov	r2, r8
 8001090:	430c      	orrs	r4, r1
 8001092:	4661      	mov	r1, ip
 8001094:	40ca      	lsrs	r2, r1
 8001096:	1880      	adds	r0, r0, r2
 8001098:	e6f4      	b.n	8000e84 <__aeabi_dadd+0x274>
 800109a:	4c79      	ldr	r4, [pc, #484]	; (8001280 <__aeabi_dadd+0x670>)
 800109c:	42a2      	cmp	r2, r4
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0x492>
 80010a0:	e6fd      	b.n	8000e9e <__aeabi_dadd+0x28e>
 80010a2:	1859      	adds	r1, r3, r1
 80010a4:	4299      	cmp	r1, r3
 80010a6:	419b      	sbcs	r3, r3
 80010a8:	4440      	add	r0, r8
 80010aa:	425f      	negs	r7, r3
 80010ac:	19c7      	adds	r7, r0, r7
 80010ae:	07fc      	lsls	r4, r7, #31
 80010b0:	0849      	lsrs	r1, r1, #1
 80010b2:	0016      	movs	r6, r2
 80010b4:	430c      	orrs	r4, r1
 80010b6:	087f      	lsrs	r7, r7, #1
 80010b8:	e6cf      	b.n	8000e5a <__aeabi_dadd+0x24a>
 80010ba:	1acc      	subs	r4, r1, r3
 80010bc:	42a1      	cmp	r1, r4
 80010be:	41bf      	sbcs	r7, r7
 80010c0:	4643      	mov	r3, r8
 80010c2:	427f      	negs	r7, r7
 80010c4:	1a18      	subs	r0, r3, r0
 80010c6:	4655      	mov	r5, sl
 80010c8:	1bc7      	subs	r7, r0, r7
 80010ca:	e5f7      	b.n	8000cbc <__aeabi_dadd+0xac>
 80010cc:	08c9      	lsrs	r1, r1, #3
 80010ce:	077b      	lsls	r3, r7, #29
 80010d0:	4655      	mov	r5, sl
 80010d2:	430b      	orrs	r3, r1
 80010d4:	08f8      	lsrs	r0, r7, #3
 80010d6:	e6c8      	b.n	8000e6a <__aeabi_dadd+0x25a>
 80010d8:	2c00      	cmp	r4, #0
 80010da:	d000      	beq.n	80010de <__aeabi_dadd+0x4ce>
 80010dc:	e081      	b.n	80011e2 <__aeabi_dadd+0x5d2>
 80010de:	4643      	mov	r3, r8
 80010e0:	430b      	orrs	r3, r1
 80010e2:	d115      	bne.n	8001110 <__aeabi_dadd+0x500>
 80010e4:	2080      	movs	r0, #128	; 0x80
 80010e6:	2500      	movs	r5, #0
 80010e8:	0300      	lsls	r0, r0, #12
 80010ea:	e6e3      	b.n	8000eb4 <__aeabi_dadd+0x2a4>
 80010ec:	1a5c      	subs	r4, r3, r1
 80010ee:	42a3      	cmp	r3, r4
 80010f0:	419b      	sbcs	r3, r3
 80010f2:	1bc7      	subs	r7, r0, r7
 80010f4:	425b      	negs	r3, r3
 80010f6:	2601      	movs	r6, #1
 80010f8:	1aff      	subs	r7, r7, r3
 80010fa:	e5da      	b.n	8000cb2 <__aeabi_dadd+0xa2>
 80010fc:	0742      	lsls	r2, r0, #29
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	4313      	orrs	r3, r2
 8001102:	08c0      	lsrs	r0, r0, #3
 8001104:	e6d2      	b.n	8000eac <__aeabi_dadd+0x29c>
 8001106:	0742      	lsls	r2, r0, #29
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	4313      	orrs	r3, r2
 800110c:	08c0      	lsrs	r0, r0, #3
 800110e:	e6ac      	b.n	8000e6a <__aeabi_dadd+0x25a>
 8001110:	4643      	mov	r3, r8
 8001112:	4642      	mov	r2, r8
 8001114:	08c9      	lsrs	r1, r1, #3
 8001116:	075b      	lsls	r3, r3, #29
 8001118:	4655      	mov	r5, sl
 800111a:	430b      	orrs	r3, r1
 800111c:	08d0      	lsrs	r0, r2, #3
 800111e:	e6c5      	b.n	8000eac <__aeabi_dadd+0x29c>
 8001120:	4643      	mov	r3, r8
 8001122:	4642      	mov	r2, r8
 8001124:	075b      	lsls	r3, r3, #29
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	430b      	orrs	r3, r1
 800112a:	08d0      	lsrs	r0, r2, #3
 800112c:	e6be      	b.n	8000eac <__aeabi_dadd+0x29c>
 800112e:	4303      	orrs	r3, r0
 8001130:	001c      	movs	r4, r3
 8001132:	1e63      	subs	r3, r4, #1
 8001134:	419c      	sbcs	r4, r3
 8001136:	e6fc      	b.n	8000f32 <__aeabi_dadd+0x322>
 8001138:	0002      	movs	r2, r0
 800113a:	3c20      	subs	r4, #32
 800113c:	40e2      	lsrs	r2, r4
 800113e:	0014      	movs	r4, r2
 8001140:	4662      	mov	r2, ip
 8001142:	2a20      	cmp	r2, #32
 8001144:	d003      	beq.n	800114e <__aeabi_dadd+0x53e>
 8001146:	2540      	movs	r5, #64	; 0x40
 8001148:	1aad      	subs	r5, r5, r2
 800114a:	40a8      	lsls	r0, r5
 800114c:	4303      	orrs	r3, r0
 800114e:	1e58      	subs	r0, r3, #1
 8001150:	4183      	sbcs	r3, r0
 8001152:	4323      	orrs	r3, r4
 8001154:	e775      	b.n	8001042 <__aeabi_dadd+0x432>
 8001156:	2a00      	cmp	r2, #0
 8001158:	d0e2      	beq.n	8001120 <__aeabi_dadd+0x510>
 800115a:	003a      	movs	r2, r7
 800115c:	430a      	orrs	r2, r1
 800115e:	d0cd      	beq.n	80010fc <__aeabi_dadd+0x4ec>
 8001160:	0742      	lsls	r2, r0, #29
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	4313      	orrs	r3, r2
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	08c0      	lsrs	r0, r0, #3
 800116a:	0312      	lsls	r2, r2, #12
 800116c:	4210      	tst	r0, r2
 800116e:	d006      	beq.n	800117e <__aeabi_dadd+0x56e>
 8001170:	08fc      	lsrs	r4, r7, #3
 8001172:	4214      	tst	r4, r2
 8001174:	d103      	bne.n	800117e <__aeabi_dadd+0x56e>
 8001176:	0020      	movs	r0, r4
 8001178:	08cb      	lsrs	r3, r1, #3
 800117a:	077a      	lsls	r2, r7, #29
 800117c:	4313      	orrs	r3, r2
 800117e:	0f5a      	lsrs	r2, r3, #29
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	0752      	lsls	r2, r2, #29
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	4313      	orrs	r3, r2
 8001188:	e690      	b.n	8000eac <__aeabi_dadd+0x29c>
 800118a:	4643      	mov	r3, r8
 800118c:	430b      	orrs	r3, r1
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x582>
 8001190:	e709      	b.n	8000fa6 <__aeabi_dadd+0x396>
 8001192:	4643      	mov	r3, r8
 8001194:	4642      	mov	r2, r8
 8001196:	08c9      	lsrs	r1, r1, #3
 8001198:	075b      	lsls	r3, r3, #29
 800119a:	4655      	mov	r5, sl
 800119c:	430b      	orrs	r3, r1
 800119e:	08d0      	lsrs	r0, r2, #3
 80011a0:	e666      	b.n	8000e70 <__aeabi_dadd+0x260>
 80011a2:	1acc      	subs	r4, r1, r3
 80011a4:	42a1      	cmp	r1, r4
 80011a6:	4189      	sbcs	r1, r1
 80011a8:	1a3f      	subs	r7, r7, r0
 80011aa:	4249      	negs	r1, r1
 80011ac:	4655      	mov	r5, sl
 80011ae:	2601      	movs	r6, #1
 80011b0:	1a7f      	subs	r7, r7, r1
 80011b2:	e57e      	b.n	8000cb2 <__aeabi_dadd+0xa2>
 80011b4:	4642      	mov	r2, r8
 80011b6:	1a5c      	subs	r4, r3, r1
 80011b8:	1a87      	subs	r7, r0, r2
 80011ba:	42a3      	cmp	r3, r4
 80011bc:	4192      	sbcs	r2, r2
 80011be:	4252      	negs	r2, r2
 80011c0:	1abf      	subs	r7, r7, r2
 80011c2:	023a      	lsls	r2, r7, #8
 80011c4:	d53d      	bpl.n	8001242 <__aeabi_dadd+0x632>
 80011c6:	1acc      	subs	r4, r1, r3
 80011c8:	42a1      	cmp	r1, r4
 80011ca:	4189      	sbcs	r1, r1
 80011cc:	4643      	mov	r3, r8
 80011ce:	4249      	negs	r1, r1
 80011d0:	1a1f      	subs	r7, r3, r0
 80011d2:	4655      	mov	r5, sl
 80011d4:	1a7f      	subs	r7, r7, r1
 80011d6:	e595      	b.n	8000d04 <__aeabi_dadd+0xf4>
 80011d8:	077b      	lsls	r3, r7, #29
 80011da:	08c9      	lsrs	r1, r1, #3
 80011dc:	430b      	orrs	r3, r1
 80011de:	08f8      	lsrs	r0, r7, #3
 80011e0:	e643      	b.n	8000e6a <__aeabi_dadd+0x25a>
 80011e2:	4644      	mov	r4, r8
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	430c      	orrs	r4, r1
 80011e8:	d130      	bne.n	800124c <__aeabi_dadd+0x63c>
 80011ea:	0742      	lsls	r2, r0, #29
 80011ec:	4313      	orrs	r3, r2
 80011ee:	08c0      	lsrs	r0, r0, #3
 80011f0:	e65c      	b.n	8000eac <__aeabi_dadd+0x29c>
 80011f2:	077b      	lsls	r3, r7, #29
 80011f4:	08c9      	lsrs	r1, r1, #3
 80011f6:	430b      	orrs	r3, r1
 80011f8:	08f8      	lsrs	r0, r7, #3
 80011fa:	e639      	b.n	8000e70 <__aeabi_dadd+0x260>
 80011fc:	185c      	adds	r4, r3, r1
 80011fe:	429c      	cmp	r4, r3
 8001200:	419b      	sbcs	r3, r3
 8001202:	4440      	add	r0, r8
 8001204:	425b      	negs	r3, r3
 8001206:	18c7      	adds	r7, r0, r3
 8001208:	023b      	lsls	r3, r7, #8
 800120a:	d400      	bmi.n	800120e <__aeabi_dadd+0x5fe>
 800120c:	e625      	b.n	8000e5a <__aeabi_dadd+0x24a>
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <__aeabi_dadd+0x674>)
 8001210:	2601      	movs	r6, #1
 8001212:	401f      	ands	r7, r3
 8001214:	e621      	b.n	8000e5a <__aeabi_dadd+0x24a>
 8001216:	0004      	movs	r4, r0
 8001218:	3a20      	subs	r2, #32
 800121a:	40d4      	lsrs	r4, r2
 800121c:	4662      	mov	r2, ip
 800121e:	2a20      	cmp	r2, #32
 8001220:	d004      	beq.n	800122c <__aeabi_dadd+0x61c>
 8001222:	2240      	movs	r2, #64	; 0x40
 8001224:	4666      	mov	r6, ip
 8001226:	1b92      	subs	r2, r2, r6
 8001228:	4090      	lsls	r0, r2
 800122a:	4303      	orrs	r3, r0
 800122c:	1e5a      	subs	r2, r3, #1
 800122e:	4193      	sbcs	r3, r2
 8001230:	431c      	orrs	r4, r3
 8001232:	e67e      	b.n	8000f32 <__aeabi_dadd+0x322>
 8001234:	185c      	adds	r4, r3, r1
 8001236:	428c      	cmp	r4, r1
 8001238:	4189      	sbcs	r1, r1
 800123a:	4440      	add	r0, r8
 800123c:	4249      	negs	r1, r1
 800123e:	1847      	adds	r7, r0, r1
 8001240:	e6dd      	b.n	8000ffe <__aeabi_dadd+0x3ee>
 8001242:	0023      	movs	r3, r4
 8001244:	433b      	orrs	r3, r7
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x63a>
 8001248:	e6ad      	b.n	8000fa6 <__aeabi_dadd+0x396>
 800124a:	e606      	b.n	8000e5a <__aeabi_dadd+0x24a>
 800124c:	0744      	lsls	r4, r0, #29
 800124e:	4323      	orrs	r3, r4
 8001250:	2480      	movs	r4, #128	; 0x80
 8001252:	08c0      	lsrs	r0, r0, #3
 8001254:	0324      	lsls	r4, r4, #12
 8001256:	4220      	tst	r0, r4
 8001258:	d008      	beq.n	800126c <__aeabi_dadd+0x65c>
 800125a:	4642      	mov	r2, r8
 800125c:	08d6      	lsrs	r6, r2, #3
 800125e:	4226      	tst	r6, r4
 8001260:	d104      	bne.n	800126c <__aeabi_dadd+0x65c>
 8001262:	4655      	mov	r5, sl
 8001264:	0030      	movs	r0, r6
 8001266:	08cb      	lsrs	r3, r1, #3
 8001268:	0751      	lsls	r1, r2, #29
 800126a:	430b      	orrs	r3, r1
 800126c:	0f5a      	lsrs	r2, r3, #29
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	0752      	lsls	r2, r2, #29
 8001274:	4313      	orrs	r3, r2
 8001276:	e619      	b.n	8000eac <__aeabi_dadd+0x29c>
 8001278:	2300      	movs	r3, #0
 800127a:	4a01      	ldr	r2, [pc, #4]	; (8001280 <__aeabi_dadd+0x670>)
 800127c:	001f      	movs	r7, r3
 800127e:	e55e      	b.n	8000d3e <__aeabi_dadd+0x12e>
 8001280:	000007ff 	.word	0x000007ff
 8001284:	ff7fffff 	.word	0xff7fffff

08001288 <__aeabi_ddiv>:
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	4657      	mov	r7, sl
 800128c:	464e      	mov	r6, r9
 800128e:	4645      	mov	r5, r8
 8001290:	46de      	mov	lr, fp
 8001292:	b5e0      	push	{r5, r6, r7, lr}
 8001294:	4681      	mov	r9, r0
 8001296:	0005      	movs	r5, r0
 8001298:	030c      	lsls	r4, r1, #12
 800129a:	0048      	lsls	r0, r1, #1
 800129c:	4692      	mov	sl, r2
 800129e:	001f      	movs	r7, r3
 80012a0:	b085      	sub	sp, #20
 80012a2:	0b24      	lsrs	r4, r4, #12
 80012a4:	0d40      	lsrs	r0, r0, #21
 80012a6:	0fce      	lsrs	r6, r1, #31
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d100      	bne.n	80012ae <__aeabi_ddiv+0x26>
 80012ac:	e156      	b.n	800155c <__aeabi_ddiv+0x2d4>
 80012ae:	4bd4      	ldr	r3, [pc, #848]	; (8001600 <__aeabi_ddiv+0x378>)
 80012b0:	4298      	cmp	r0, r3
 80012b2:	d100      	bne.n	80012b6 <__aeabi_ddiv+0x2e>
 80012b4:	e172      	b.n	800159c <__aeabi_ddiv+0x314>
 80012b6:	0f6b      	lsrs	r3, r5, #29
 80012b8:	00e4      	lsls	r4, r4, #3
 80012ba:	431c      	orrs	r4, r3
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	4323      	orrs	r3, r4
 80012c2:	4698      	mov	r8, r3
 80012c4:	4bcf      	ldr	r3, [pc, #828]	; (8001604 <__aeabi_ddiv+0x37c>)
 80012c6:	00ed      	lsls	r5, r5, #3
 80012c8:	469b      	mov	fp, r3
 80012ca:	2300      	movs	r3, #0
 80012cc:	4699      	mov	r9, r3
 80012ce:	4483      	add	fp, r0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	033c      	lsls	r4, r7, #12
 80012d4:	007b      	lsls	r3, r7, #1
 80012d6:	4650      	mov	r0, sl
 80012d8:	0b24      	lsrs	r4, r4, #12
 80012da:	0d5b      	lsrs	r3, r3, #21
 80012dc:	0fff      	lsrs	r7, r7, #31
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0x5c>
 80012e2:	e11f      	b.n	8001524 <__aeabi_ddiv+0x29c>
 80012e4:	4ac6      	ldr	r2, [pc, #792]	; (8001600 <__aeabi_ddiv+0x378>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d100      	bne.n	80012ec <__aeabi_ddiv+0x64>
 80012ea:	e162      	b.n	80015b2 <__aeabi_ddiv+0x32a>
 80012ec:	49c5      	ldr	r1, [pc, #788]	; (8001604 <__aeabi_ddiv+0x37c>)
 80012ee:	0f42      	lsrs	r2, r0, #29
 80012f0:	468c      	mov	ip, r1
 80012f2:	00e4      	lsls	r4, r4, #3
 80012f4:	4659      	mov	r1, fp
 80012f6:	4314      	orrs	r4, r2
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	4463      	add	r3, ip
 80012fc:	0412      	lsls	r2, r2, #16
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	4314      	orrs	r4, r2
 8001302:	469b      	mov	fp, r3
 8001304:	00c2      	lsls	r2, r0, #3
 8001306:	2000      	movs	r0, #0
 8001308:	0033      	movs	r3, r6
 800130a:	407b      	eors	r3, r7
 800130c:	469a      	mov	sl, r3
 800130e:	464b      	mov	r3, r9
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d827      	bhi.n	8001364 <__aeabi_ddiv+0xdc>
 8001314:	49bc      	ldr	r1, [pc, #752]	; (8001608 <__aeabi_ddiv+0x380>)
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	58cb      	ldr	r3, [r1, r3]
 800131a:	469f      	mov	pc, r3
 800131c:	46b2      	mov	sl, r6
 800131e:	9b00      	ldr	r3, [sp, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d016      	beq.n	8001352 <__aeabi_ddiv+0xca>
 8001324:	2b03      	cmp	r3, #3
 8001326:	d100      	bne.n	800132a <__aeabi_ddiv+0xa2>
 8001328:	e28e      	b.n	8001848 <__aeabi_ddiv+0x5c0>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d000      	beq.n	8001330 <__aeabi_ddiv+0xa8>
 800132e:	e0d9      	b.n	80014e4 <__aeabi_ddiv+0x25c>
 8001330:	2300      	movs	r3, #0
 8001332:	2400      	movs	r4, #0
 8001334:	2500      	movs	r5, #0
 8001336:	4652      	mov	r2, sl
 8001338:	051b      	lsls	r3, r3, #20
 800133a:	4323      	orrs	r3, r4
 800133c:	07d2      	lsls	r2, r2, #31
 800133e:	4313      	orrs	r3, r2
 8001340:	0028      	movs	r0, r5
 8001342:	0019      	movs	r1, r3
 8001344:	b005      	add	sp, #20
 8001346:	bcf0      	pop	{r4, r5, r6, r7}
 8001348:	46bb      	mov	fp, r7
 800134a:	46b2      	mov	sl, r6
 800134c:	46a9      	mov	r9, r5
 800134e:	46a0      	mov	r8, r4
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001352:	2400      	movs	r4, #0
 8001354:	2500      	movs	r5, #0
 8001356:	4baa      	ldr	r3, [pc, #680]	; (8001600 <__aeabi_ddiv+0x378>)
 8001358:	e7ed      	b.n	8001336 <__aeabi_ddiv+0xae>
 800135a:	46ba      	mov	sl, r7
 800135c:	46a0      	mov	r8, r4
 800135e:	0015      	movs	r5, r2
 8001360:	9000      	str	r0, [sp, #0]
 8001362:	e7dc      	b.n	800131e <__aeabi_ddiv+0x96>
 8001364:	4544      	cmp	r4, r8
 8001366:	d200      	bcs.n	800136a <__aeabi_ddiv+0xe2>
 8001368:	e1c7      	b.n	80016fa <__aeabi_ddiv+0x472>
 800136a:	d100      	bne.n	800136e <__aeabi_ddiv+0xe6>
 800136c:	e1c2      	b.n	80016f4 <__aeabi_ddiv+0x46c>
 800136e:	2301      	movs	r3, #1
 8001370:	425b      	negs	r3, r3
 8001372:	469c      	mov	ip, r3
 8001374:	002e      	movs	r6, r5
 8001376:	4640      	mov	r0, r8
 8001378:	2500      	movs	r5, #0
 800137a:	44e3      	add	fp, ip
 800137c:	0223      	lsls	r3, r4, #8
 800137e:	0e14      	lsrs	r4, r2, #24
 8001380:	431c      	orrs	r4, r3
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	4699      	mov	r9, r3
 8001386:	0423      	lsls	r3, r4, #16
 8001388:	0c1f      	lsrs	r7, r3, #16
 800138a:	0212      	lsls	r2, r2, #8
 800138c:	4649      	mov	r1, r9
 800138e:	9200      	str	r2, [sp, #0]
 8001390:	9701      	str	r7, [sp, #4]
 8001392:	f7fe ff57 	bl	8000244 <__aeabi_uidivmod>
 8001396:	0002      	movs	r2, r0
 8001398:	437a      	muls	r2, r7
 800139a:	040b      	lsls	r3, r1, #16
 800139c:	0c31      	lsrs	r1, r6, #16
 800139e:	4680      	mov	r8, r0
 80013a0:	4319      	orrs	r1, r3
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d907      	bls.n	80013b6 <__aeabi_ddiv+0x12e>
 80013a6:	2301      	movs	r3, #1
 80013a8:	425b      	negs	r3, r3
 80013aa:	469c      	mov	ip, r3
 80013ac:	1909      	adds	r1, r1, r4
 80013ae:	44e0      	add	r8, ip
 80013b0:	428c      	cmp	r4, r1
 80013b2:	d800      	bhi.n	80013b6 <__aeabi_ddiv+0x12e>
 80013b4:	e207      	b.n	80017c6 <__aeabi_ddiv+0x53e>
 80013b6:	1a88      	subs	r0, r1, r2
 80013b8:	4649      	mov	r1, r9
 80013ba:	f7fe ff43 	bl	8000244 <__aeabi_uidivmod>
 80013be:	0409      	lsls	r1, r1, #16
 80013c0:	468c      	mov	ip, r1
 80013c2:	0431      	lsls	r1, r6, #16
 80013c4:	4666      	mov	r6, ip
 80013c6:	9a01      	ldr	r2, [sp, #4]
 80013c8:	0c09      	lsrs	r1, r1, #16
 80013ca:	4342      	muls	r2, r0
 80013cc:	0003      	movs	r3, r0
 80013ce:	4331      	orrs	r1, r6
 80013d0:	428a      	cmp	r2, r1
 80013d2:	d904      	bls.n	80013de <__aeabi_ddiv+0x156>
 80013d4:	1909      	adds	r1, r1, r4
 80013d6:	3b01      	subs	r3, #1
 80013d8:	428c      	cmp	r4, r1
 80013da:	d800      	bhi.n	80013de <__aeabi_ddiv+0x156>
 80013dc:	e1ed      	b.n	80017ba <__aeabi_ddiv+0x532>
 80013de:	1a88      	subs	r0, r1, r2
 80013e0:	4642      	mov	r2, r8
 80013e2:	0412      	lsls	r2, r2, #16
 80013e4:	431a      	orrs	r2, r3
 80013e6:	4690      	mov	r8, r2
 80013e8:	4641      	mov	r1, r8
 80013ea:	9b00      	ldr	r3, [sp, #0]
 80013ec:	040e      	lsls	r6, r1, #16
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	001f      	movs	r7, r3
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	9b00      	ldr	r3, [sp, #0]
 80013f6:	0c36      	lsrs	r6, r6, #16
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	0c19      	lsrs	r1, r3, #16
 80013fc:	000b      	movs	r3, r1
 80013fe:	4373      	muls	r3, r6
 8001400:	0c12      	lsrs	r2, r2, #16
 8001402:	437e      	muls	r6, r7
 8001404:	9103      	str	r1, [sp, #12]
 8001406:	4351      	muls	r1, r2
 8001408:	437a      	muls	r2, r7
 800140a:	0c1f      	lsrs	r7, r3, #16
 800140c:	46bc      	mov	ip, r7
 800140e:	1876      	adds	r6, r6, r1
 8001410:	4466      	add	r6, ip
 8001412:	42b1      	cmp	r1, r6
 8001414:	d903      	bls.n	800141e <__aeabi_ddiv+0x196>
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	0249      	lsls	r1, r1, #9
 800141a:	468c      	mov	ip, r1
 800141c:	4462      	add	r2, ip
 800141e:	0c31      	lsrs	r1, r6, #16
 8001420:	188a      	adds	r2, r1, r2
 8001422:	0431      	lsls	r1, r6, #16
 8001424:	041e      	lsls	r6, r3, #16
 8001426:	0c36      	lsrs	r6, r6, #16
 8001428:	198e      	adds	r6, r1, r6
 800142a:	4290      	cmp	r0, r2
 800142c:	d302      	bcc.n	8001434 <__aeabi_ddiv+0x1ac>
 800142e:	d112      	bne.n	8001456 <__aeabi_ddiv+0x1ce>
 8001430:	42b5      	cmp	r5, r6
 8001432:	d210      	bcs.n	8001456 <__aeabi_ddiv+0x1ce>
 8001434:	4643      	mov	r3, r8
 8001436:	1e59      	subs	r1, r3, #1
 8001438:	9b00      	ldr	r3, [sp, #0]
 800143a:	469c      	mov	ip, r3
 800143c:	4465      	add	r5, ip
 800143e:	001f      	movs	r7, r3
 8001440:	429d      	cmp	r5, r3
 8001442:	419b      	sbcs	r3, r3
 8001444:	425b      	negs	r3, r3
 8001446:	191b      	adds	r3, r3, r4
 8001448:	18c0      	adds	r0, r0, r3
 800144a:	4284      	cmp	r4, r0
 800144c:	d200      	bcs.n	8001450 <__aeabi_ddiv+0x1c8>
 800144e:	e1a0      	b.n	8001792 <__aeabi_ddiv+0x50a>
 8001450:	d100      	bne.n	8001454 <__aeabi_ddiv+0x1cc>
 8001452:	e19b      	b.n	800178c <__aeabi_ddiv+0x504>
 8001454:	4688      	mov	r8, r1
 8001456:	1bae      	subs	r6, r5, r6
 8001458:	42b5      	cmp	r5, r6
 800145a:	41ad      	sbcs	r5, r5
 800145c:	1a80      	subs	r0, r0, r2
 800145e:	426d      	negs	r5, r5
 8001460:	1b40      	subs	r0, r0, r5
 8001462:	4284      	cmp	r4, r0
 8001464:	d100      	bne.n	8001468 <__aeabi_ddiv+0x1e0>
 8001466:	e1d5      	b.n	8001814 <__aeabi_ddiv+0x58c>
 8001468:	4649      	mov	r1, r9
 800146a:	f7fe feeb 	bl	8000244 <__aeabi_uidivmod>
 800146e:	9a01      	ldr	r2, [sp, #4]
 8001470:	040b      	lsls	r3, r1, #16
 8001472:	4342      	muls	r2, r0
 8001474:	0c31      	lsrs	r1, r6, #16
 8001476:	0005      	movs	r5, r0
 8001478:	4319      	orrs	r1, r3
 800147a:	428a      	cmp	r2, r1
 800147c:	d900      	bls.n	8001480 <__aeabi_ddiv+0x1f8>
 800147e:	e16c      	b.n	800175a <__aeabi_ddiv+0x4d2>
 8001480:	1a88      	subs	r0, r1, r2
 8001482:	4649      	mov	r1, r9
 8001484:	f7fe fede 	bl	8000244 <__aeabi_uidivmod>
 8001488:	9a01      	ldr	r2, [sp, #4]
 800148a:	0436      	lsls	r6, r6, #16
 800148c:	4342      	muls	r2, r0
 800148e:	0409      	lsls	r1, r1, #16
 8001490:	0c36      	lsrs	r6, r6, #16
 8001492:	0003      	movs	r3, r0
 8001494:	430e      	orrs	r6, r1
 8001496:	42b2      	cmp	r2, r6
 8001498:	d900      	bls.n	800149c <__aeabi_ddiv+0x214>
 800149a:	e153      	b.n	8001744 <__aeabi_ddiv+0x4bc>
 800149c:	9803      	ldr	r0, [sp, #12]
 800149e:	1ab6      	subs	r6, r6, r2
 80014a0:	0002      	movs	r2, r0
 80014a2:	042d      	lsls	r5, r5, #16
 80014a4:	431d      	orrs	r5, r3
 80014a6:	9f02      	ldr	r7, [sp, #8]
 80014a8:	042b      	lsls	r3, r5, #16
 80014aa:	0c1b      	lsrs	r3, r3, #16
 80014ac:	435a      	muls	r2, r3
 80014ae:	437b      	muls	r3, r7
 80014b0:	469c      	mov	ip, r3
 80014b2:	0c29      	lsrs	r1, r5, #16
 80014b4:	4348      	muls	r0, r1
 80014b6:	0c13      	lsrs	r3, r2, #16
 80014b8:	4484      	add	ip, r0
 80014ba:	4463      	add	r3, ip
 80014bc:	4379      	muls	r1, r7
 80014be:	4298      	cmp	r0, r3
 80014c0:	d903      	bls.n	80014ca <__aeabi_ddiv+0x242>
 80014c2:	2080      	movs	r0, #128	; 0x80
 80014c4:	0240      	lsls	r0, r0, #9
 80014c6:	4684      	mov	ip, r0
 80014c8:	4461      	add	r1, ip
 80014ca:	0c18      	lsrs	r0, r3, #16
 80014cc:	0412      	lsls	r2, r2, #16
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	0c12      	lsrs	r2, r2, #16
 80014d2:	1841      	adds	r1, r0, r1
 80014d4:	189b      	adds	r3, r3, r2
 80014d6:	428e      	cmp	r6, r1
 80014d8:	d200      	bcs.n	80014dc <__aeabi_ddiv+0x254>
 80014da:	e0ff      	b.n	80016dc <__aeabi_ddiv+0x454>
 80014dc:	d100      	bne.n	80014e0 <__aeabi_ddiv+0x258>
 80014de:	e0fa      	b.n	80016d6 <__aeabi_ddiv+0x44e>
 80014e0:	2301      	movs	r3, #1
 80014e2:	431d      	orrs	r5, r3
 80014e4:	4a49      	ldr	r2, [pc, #292]	; (800160c <__aeabi_ddiv+0x384>)
 80014e6:	445a      	add	r2, fp
 80014e8:	2a00      	cmp	r2, #0
 80014ea:	dc00      	bgt.n	80014ee <__aeabi_ddiv+0x266>
 80014ec:	e0aa      	b.n	8001644 <__aeabi_ddiv+0x3bc>
 80014ee:	076b      	lsls	r3, r5, #29
 80014f0:	d000      	beq.n	80014f4 <__aeabi_ddiv+0x26c>
 80014f2:	e13d      	b.n	8001770 <__aeabi_ddiv+0x4e8>
 80014f4:	08ed      	lsrs	r5, r5, #3
 80014f6:	4643      	mov	r3, r8
 80014f8:	01db      	lsls	r3, r3, #7
 80014fa:	d506      	bpl.n	800150a <__aeabi_ddiv+0x282>
 80014fc:	4642      	mov	r2, r8
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <__aeabi_ddiv+0x388>)
 8001500:	401a      	ands	r2, r3
 8001502:	4690      	mov	r8, r2
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	00d2      	lsls	r2, r2, #3
 8001508:	445a      	add	r2, fp
 800150a:	4b42      	ldr	r3, [pc, #264]	; (8001614 <__aeabi_ddiv+0x38c>)
 800150c:	429a      	cmp	r2, r3
 800150e:	dd00      	ble.n	8001512 <__aeabi_ddiv+0x28a>
 8001510:	e71f      	b.n	8001352 <__aeabi_ddiv+0xca>
 8001512:	4643      	mov	r3, r8
 8001514:	075b      	lsls	r3, r3, #29
 8001516:	431d      	orrs	r5, r3
 8001518:	4643      	mov	r3, r8
 800151a:	0552      	lsls	r2, r2, #21
 800151c:	025c      	lsls	r4, r3, #9
 800151e:	0b24      	lsrs	r4, r4, #12
 8001520:	0d53      	lsrs	r3, r2, #21
 8001522:	e708      	b.n	8001336 <__aeabi_ddiv+0xae>
 8001524:	4652      	mov	r2, sl
 8001526:	4322      	orrs	r2, r4
 8001528:	d100      	bne.n	800152c <__aeabi_ddiv+0x2a4>
 800152a:	e07b      	b.n	8001624 <__aeabi_ddiv+0x39c>
 800152c:	2c00      	cmp	r4, #0
 800152e:	d100      	bne.n	8001532 <__aeabi_ddiv+0x2aa>
 8001530:	e0fa      	b.n	8001728 <__aeabi_ddiv+0x4a0>
 8001532:	0020      	movs	r0, r4
 8001534:	f001 fa22 	bl	800297c <__clzsi2>
 8001538:	0002      	movs	r2, r0
 800153a:	3a0b      	subs	r2, #11
 800153c:	231d      	movs	r3, #29
 800153e:	0001      	movs	r1, r0
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	4652      	mov	r2, sl
 8001544:	3908      	subs	r1, #8
 8001546:	40da      	lsrs	r2, r3
 8001548:	408c      	lsls	r4, r1
 800154a:	4314      	orrs	r4, r2
 800154c:	4652      	mov	r2, sl
 800154e:	408a      	lsls	r2, r1
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <__aeabi_ddiv+0x390>)
 8001552:	4458      	add	r0, fp
 8001554:	469b      	mov	fp, r3
 8001556:	4483      	add	fp, r0
 8001558:	2000      	movs	r0, #0
 800155a:	e6d5      	b.n	8001308 <__aeabi_ddiv+0x80>
 800155c:	464b      	mov	r3, r9
 800155e:	4323      	orrs	r3, r4
 8001560:	4698      	mov	r8, r3
 8001562:	d044      	beq.n	80015ee <__aeabi_ddiv+0x366>
 8001564:	2c00      	cmp	r4, #0
 8001566:	d100      	bne.n	800156a <__aeabi_ddiv+0x2e2>
 8001568:	e0ce      	b.n	8001708 <__aeabi_ddiv+0x480>
 800156a:	0020      	movs	r0, r4
 800156c:	f001 fa06 	bl	800297c <__clzsi2>
 8001570:	0001      	movs	r1, r0
 8001572:	0002      	movs	r2, r0
 8001574:	390b      	subs	r1, #11
 8001576:	231d      	movs	r3, #29
 8001578:	1a5b      	subs	r3, r3, r1
 800157a:	4649      	mov	r1, r9
 800157c:	0010      	movs	r0, r2
 800157e:	40d9      	lsrs	r1, r3
 8001580:	3808      	subs	r0, #8
 8001582:	4084      	lsls	r4, r0
 8001584:	000b      	movs	r3, r1
 8001586:	464d      	mov	r5, r9
 8001588:	4323      	orrs	r3, r4
 800158a:	4698      	mov	r8, r3
 800158c:	4085      	lsls	r5, r0
 800158e:	4823      	ldr	r0, [pc, #140]	; (800161c <__aeabi_ddiv+0x394>)
 8001590:	1a83      	subs	r3, r0, r2
 8001592:	469b      	mov	fp, r3
 8001594:	2300      	movs	r3, #0
 8001596:	4699      	mov	r9, r3
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	e69a      	b.n	80012d2 <__aeabi_ddiv+0x4a>
 800159c:	464b      	mov	r3, r9
 800159e:	4323      	orrs	r3, r4
 80015a0:	4698      	mov	r8, r3
 80015a2:	d11d      	bne.n	80015e0 <__aeabi_ddiv+0x358>
 80015a4:	2308      	movs	r3, #8
 80015a6:	4699      	mov	r9, r3
 80015a8:	3b06      	subs	r3, #6
 80015aa:	2500      	movs	r5, #0
 80015ac:	4683      	mov	fp, r0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	e68f      	b.n	80012d2 <__aeabi_ddiv+0x4a>
 80015b2:	4652      	mov	r2, sl
 80015b4:	4322      	orrs	r2, r4
 80015b6:	d109      	bne.n	80015cc <__aeabi_ddiv+0x344>
 80015b8:	2302      	movs	r3, #2
 80015ba:	4649      	mov	r1, r9
 80015bc:	4319      	orrs	r1, r3
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <__aeabi_ddiv+0x398>)
 80015c0:	4689      	mov	r9, r1
 80015c2:	469c      	mov	ip, r3
 80015c4:	2400      	movs	r4, #0
 80015c6:	2002      	movs	r0, #2
 80015c8:	44e3      	add	fp, ip
 80015ca:	e69d      	b.n	8001308 <__aeabi_ddiv+0x80>
 80015cc:	2303      	movs	r3, #3
 80015ce:	464a      	mov	r2, r9
 80015d0:	431a      	orrs	r2, r3
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <__aeabi_ddiv+0x398>)
 80015d4:	4691      	mov	r9, r2
 80015d6:	469c      	mov	ip, r3
 80015d8:	4652      	mov	r2, sl
 80015da:	2003      	movs	r0, #3
 80015dc:	44e3      	add	fp, ip
 80015de:	e693      	b.n	8001308 <__aeabi_ddiv+0x80>
 80015e0:	230c      	movs	r3, #12
 80015e2:	4699      	mov	r9, r3
 80015e4:	3b09      	subs	r3, #9
 80015e6:	46a0      	mov	r8, r4
 80015e8:	4683      	mov	fp, r0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	e671      	b.n	80012d2 <__aeabi_ddiv+0x4a>
 80015ee:	2304      	movs	r3, #4
 80015f0:	4699      	mov	r9, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	469b      	mov	fp, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	2500      	movs	r5, #0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	e669      	b.n	80012d2 <__aeabi_ddiv+0x4a>
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	000007ff 	.word	0x000007ff
 8001604:	fffffc01 	.word	0xfffffc01
 8001608:	0800ffbc 	.word	0x0800ffbc
 800160c:	000003ff 	.word	0x000003ff
 8001610:	feffffff 	.word	0xfeffffff
 8001614:	000007fe 	.word	0x000007fe
 8001618:	000003f3 	.word	0x000003f3
 800161c:	fffffc0d 	.word	0xfffffc0d
 8001620:	fffff801 	.word	0xfffff801
 8001624:	4649      	mov	r1, r9
 8001626:	2301      	movs	r3, #1
 8001628:	4319      	orrs	r1, r3
 800162a:	4689      	mov	r9, r1
 800162c:	2400      	movs	r4, #0
 800162e:	2001      	movs	r0, #1
 8001630:	e66a      	b.n	8001308 <__aeabi_ddiv+0x80>
 8001632:	2300      	movs	r3, #0
 8001634:	2480      	movs	r4, #128	; 0x80
 8001636:	469a      	mov	sl, r3
 8001638:	2500      	movs	r5, #0
 800163a:	4b8a      	ldr	r3, [pc, #552]	; (8001864 <__aeabi_ddiv+0x5dc>)
 800163c:	0324      	lsls	r4, r4, #12
 800163e:	e67a      	b.n	8001336 <__aeabi_ddiv+0xae>
 8001640:	2501      	movs	r5, #1
 8001642:	426d      	negs	r5, r5
 8001644:	2301      	movs	r3, #1
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	2b38      	cmp	r3, #56	; 0x38
 800164a:	dd00      	ble.n	800164e <__aeabi_ddiv+0x3c6>
 800164c:	e670      	b.n	8001330 <__aeabi_ddiv+0xa8>
 800164e:	2b1f      	cmp	r3, #31
 8001650:	dc00      	bgt.n	8001654 <__aeabi_ddiv+0x3cc>
 8001652:	e0bf      	b.n	80017d4 <__aeabi_ddiv+0x54c>
 8001654:	211f      	movs	r1, #31
 8001656:	4249      	negs	r1, r1
 8001658:	1a8a      	subs	r2, r1, r2
 800165a:	4641      	mov	r1, r8
 800165c:	40d1      	lsrs	r1, r2
 800165e:	000a      	movs	r2, r1
 8001660:	2b20      	cmp	r3, #32
 8001662:	d004      	beq.n	800166e <__aeabi_ddiv+0x3e6>
 8001664:	4641      	mov	r1, r8
 8001666:	4b80      	ldr	r3, [pc, #512]	; (8001868 <__aeabi_ddiv+0x5e0>)
 8001668:	445b      	add	r3, fp
 800166a:	4099      	lsls	r1, r3
 800166c:	430d      	orrs	r5, r1
 800166e:	1e6b      	subs	r3, r5, #1
 8001670:	419d      	sbcs	r5, r3
 8001672:	2307      	movs	r3, #7
 8001674:	432a      	orrs	r2, r5
 8001676:	001d      	movs	r5, r3
 8001678:	2400      	movs	r4, #0
 800167a:	4015      	ands	r5, r2
 800167c:	4213      	tst	r3, r2
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x3fa>
 8001680:	e0d4      	b.n	800182c <__aeabi_ddiv+0x5a4>
 8001682:	210f      	movs	r1, #15
 8001684:	2300      	movs	r3, #0
 8001686:	4011      	ands	r1, r2
 8001688:	2904      	cmp	r1, #4
 800168a:	d100      	bne.n	800168e <__aeabi_ddiv+0x406>
 800168c:	e0cb      	b.n	8001826 <__aeabi_ddiv+0x59e>
 800168e:	1d11      	adds	r1, r2, #4
 8001690:	4291      	cmp	r1, r2
 8001692:	4192      	sbcs	r2, r2
 8001694:	4252      	negs	r2, r2
 8001696:	189b      	adds	r3, r3, r2
 8001698:	000a      	movs	r2, r1
 800169a:	0219      	lsls	r1, r3, #8
 800169c:	d400      	bmi.n	80016a0 <__aeabi_ddiv+0x418>
 800169e:	e0c2      	b.n	8001826 <__aeabi_ddiv+0x59e>
 80016a0:	2301      	movs	r3, #1
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	e646      	b.n	8001336 <__aeabi_ddiv+0xae>
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	4641      	mov	r1, r8
 80016ac:	031b      	lsls	r3, r3, #12
 80016ae:	4219      	tst	r1, r3
 80016b0:	d008      	beq.n	80016c4 <__aeabi_ddiv+0x43c>
 80016b2:	421c      	tst	r4, r3
 80016b4:	d106      	bne.n	80016c4 <__aeabi_ddiv+0x43c>
 80016b6:	431c      	orrs	r4, r3
 80016b8:	0324      	lsls	r4, r4, #12
 80016ba:	46ba      	mov	sl, r7
 80016bc:	0015      	movs	r5, r2
 80016be:	4b69      	ldr	r3, [pc, #420]	; (8001864 <__aeabi_ddiv+0x5dc>)
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	e638      	b.n	8001336 <__aeabi_ddiv+0xae>
 80016c4:	2480      	movs	r4, #128	; 0x80
 80016c6:	4643      	mov	r3, r8
 80016c8:	0324      	lsls	r4, r4, #12
 80016ca:	431c      	orrs	r4, r3
 80016cc:	0324      	lsls	r4, r4, #12
 80016ce:	46b2      	mov	sl, r6
 80016d0:	4b64      	ldr	r3, [pc, #400]	; (8001864 <__aeabi_ddiv+0x5dc>)
 80016d2:	0b24      	lsrs	r4, r4, #12
 80016d4:	e62f      	b.n	8001336 <__aeabi_ddiv+0xae>
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d100      	bne.n	80016dc <__aeabi_ddiv+0x454>
 80016da:	e703      	b.n	80014e4 <__aeabi_ddiv+0x25c>
 80016dc:	19a6      	adds	r6, r4, r6
 80016de:	1e68      	subs	r0, r5, #1
 80016e0:	42a6      	cmp	r6, r4
 80016e2:	d200      	bcs.n	80016e6 <__aeabi_ddiv+0x45e>
 80016e4:	e08d      	b.n	8001802 <__aeabi_ddiv+0x57a>
 80016e6:	428e      	cmp	r6, r1
 80016e8:	d200      	bcs.n	80016ec <__aeabi_ddiv+0x464>
 80016ea:	e0a3      	b.n	8001834 <__aeabi_ddiv+0x5ac>
 80016ec:	d100      	bne.n	80016f0 <__aeabi_ddiv+0x468>
 80016ee:	e0b3      	b.n	8001858 <__aeabi_ddiv+0x5d0>
 80016f0:	0005      	movs	r5, r0
 80016f2:	e6f5      	b.n	80014e0 <__aeabi_ddiv+0x258>
 80016f4:	42aa      	cmp	r2, r5
 80016f6:	d900      	bls.n	80016fa <__aeabi_ddiv+0x472>
 80016f8:	e639      	b.n	800136e <__aeabi_ddiv+0xe6>
 80016fa:	4643      	mov	r3, r8
 80016fc:	07de      	lsls	r6, r3, #31
 80016fe:	0858      	lsrs	r0, r3, #1
 8001700:	086b      	lsrs	r3, r5, #1
 8001702:	431e      	orrs	r6, r3
 8001704:	07ed      	lsls	r5, r5, #31
 8001706:	e639      	b.n	800137c <__aeabi_ddiv+0xf4>
 8001708:	4648      	mov	r0, r9
 800170a:	f001 f937 	bl	800297c <__clzsi2>
 800170e:	0001      	movs	r1, r0
 8001710:	0002      	movs	r2, r0
 8001712:	3115      	adds	r1, #21
 8001714:	3220      	adds	r2, #32
 8001716:	291c      	cmp	r1, #28
 8001718:	dc00      	bgt.n	800171c <__aeabi_ddiv+0x494>
 800171a:	e72c      	b.n	8001576 <__aeabi_ddiv+0x2ee>
 800171c:	464b      	mov	r3, r9
 800171e:	3808      	subs	r0, #8
 8001720:	4083      	lsls	r3, r0
 8001722:	2500      	movs	r5, #0
 8001724:	4698      	mov	r8, r3
 8001726:	e732      	b.n	800158e <__aeabi_ddiv+0x306>
 8001728:	f001 f928 	bl	800297c <__clzsi2>
 800172c:	0003      	movs	r3, r0
 800172e:	001a      	movs	r2, r3
 8001730:	3215      	adds	r2, #21
 8001732:	3020      	adds	r0, #32
 8001734:	2a1c      	cmp	r2, #28
 8001736:	dc00      	bgt.n	800173a <__aeabi_ddiv+0x4b2>
 8001738:	e700      	b.n	800153c <__aeabi_ddiv+0x2b4>
 800173a:	4654      	mov	r4, sl
 800173c:	3b08      	subs	r3, #8
 800173e:	2200      	movs	r2, #0
 8001740:	409c      	lsls	r4, r3
 8001742:	e705      	b.n	8001550 <__aeabi_ddiv+0x2c8>
 8001744:	1936      	adds	r6, r6, r4
 8001746:	3b01      	subs	r3, #1
 8001748:	42b4      	cmp	r4, r6
 800174a:	d900      	bls.n	800174e <__aeabi_ddiv+0x4c6>
 800174c:	e6a6      	b.n	800149c <__aeabi_ddiv+0x214>
 800174e:	42b2      	cmp	r2, r6
 8001750:	d800      	bhi.n	8001754 <__aeabi_ddiv+0x4cc>
 8001752:	e6a3      	b.n	800149c <__aeabi_ddiv+0x214>
 8001754:	1e83      	subs	r3, r0, #2
 8001756:	1936      	adds	r6, r6, r4
 8001758:	e6a0      	b.n	800149c <__aeabi_ddiv+0x214>
 800175a:	1909      	adds	r1, r1, r4
 800175c:	3d01      	subs	r5, #1
 800175e:	428c      	cmp	r4, r1
 8001760:	d900      	bls.n	8001764 <__aeabi_ddiv+0x4dc>
 8001762:	e68d      	b.n	8001480 <__aeabi_ddiv+0x1f8>
 8001764:	428a      	cmp	r2, r1
 8001766:	d800      	bhi.n	800176a <__aeabi_ddiv+0x4e2>
 8001768:	e68a      	b.n	8001480 <__aeabi_ddiv+0x1f8>
 800176a:	1e85      	subs	r5, r0, #2
 800176c:	1909      	adds	r1, r1, r4
 800176e:	e687      	b.n	8001480 <__aeabi_ddiv+0x1f8>
 8001770:	230f      	movs	r3, #15
 8001772:	402b      	ands	r3, r5
 8001774:	2b04      	cmp	r3, #4
 8001776:	d100      	bne.n	800177a <__aeabi_ddiv+0x4f2>
 8001778:	e6bc      	b.n	80014f4 <__aeabi_ddiv+0x26c>
 800177a:	2305      	movs	r3, #5
 800177c:	425b      	negs	r3, r3
 800177e:	42ab      	cmp	r3, r5
 8001780:	419b      	sbcs	r3, r3
 8001782:	3504      	adds	r5, #4
 8001784:	425b      	negs	r3, r3
 8001786:	08ed      	lsrs	r5, r5, #3
 8001788:	4498      	add	r8, r3
 800178a:	e6b4      	b.n	80014f6 <__aeabi_ddiv+0x26e>
 800178c:	42af      	cmp	r7, r5
 800178e:	d900      	bls.n	8001792 <__aeabi_ddiv+0x50a>
 8001790:	e660      	b.n	8001454 <__aeabi_ddiv+0x1cc>
 8001792:	4282      	cmp	r2, r0
 8001794:	d804      	bhi.n	80017a0 <__aeabi_ddiv+0x518>
 8001796:	d000      	beq.n	800179a <__aeabi_ddiv+0x512>
 8001798:	e65c      	b.n	8001454 <__aeabi_ddiv+0x1cc>
 800179a:	42ae      	cmp	r6, r5
 800179c:	d800      	bhi.n	80017a0 <__aeabi_ddiv+0x518>
 800179e:	e659      	b.n	8001454 <__aeabi_ddiv+0x1cc>
 80017a0:	2302      	movs	r3, #2
 80017a2:	425b      	negs	r3, r3
 80017a4:	469c      	mov	ip, r3
 80017a6:	9b00      	ldr	r3, [sp, #0]
 80017a8:	44e0      	add	r8, ip
 80017aa:	469c      	mov	ip, r3
 80017ac:	4465      	add	r5, ip
 80017ae:	429d      	cmp	r5, r3
 80017b0:	419b      	sbcs	r3, r3
 80017b2:	425b      	negs	r3, r3
 80017b4:	191b      	adds	r3, r3, r4
 80017b6:	18c0      	adds	r0, r0, r3
 80017b8:	e64d      	b.n	8001456 <__aeabi_ddiv+0x1ce>
 80017ba:	428a      	cmp	r2, r1
 80017bc:	d800      	bhi.n	80017c0 <__aeabi_ddiv+0x538>
 80017be:	e60e      	b.n	80013de <__aeabi_ddiv+0x156>
 80017c0:	1e83      	subs	r3, r0, #2
 80017c2:	1909      	adds	r1, r1, r4
 80017c4:	e60b      	b.n	80013de <__aeabi_ddiv+0x156>
 80017c6:	428a      	cmp	r2, r1
 80017c8:	d800      	bhi.n	80017cc <__aeabi_ddiv+0x544>
 80017ca:	e5f4      	b.n	80013b6 <__aeabi_ddiv+0x12e>
 80017cc:	1e83      	subs	r3, r0, #2
 80017ce:	4698      	mov	r8, r3
 80017d0:	1909      	adds	r1, r1, r4
 80017d2:	e5f0      	b.n	80013b6 <__aeabi_ddiv+0x12e>
 80017d4:	4925      	ldr	r1, [pc, #148]	; (800186c <__aeabi_ddiv+0x5e4>)
 80017d6:	0028      	movs	r0, r5
 80017d8:	4459      	add	r1, fp
 80017da:	408d      	lsls	r5, r1
 80017dc:	4642      	mov	r2, r8
 80017de:	408a      	lsls	r2, r1
 80017e0:	1e69      	subs	r1, r5, #1
 80017e2:	418d      	sbcs	r5, r1
 80017e4:	4641      	mov	r1, r8
 80017e6:	40d8      	lsrs	r0, r3
 80017e8:	40d9      	lsrs	r1, r3
 80017ea:	4302      	orrs	r2, r0
 80017ec:	432a      	orrs	r2, r5
 80017ee:	000b      	movs	r3, r1
 80017f0:	0751      	lsls	r1, r2, #29
 80017f2:	d100      	bne.n	80017f6 <__aeabi_ddiv+0x56e>
 80017f4:	e751      	b.n	800169a <__aeabi_ddiv+0x412>
 80017f6:	210f      	movs	r1, #15
 80017f8:	4011      	ands	r1, r2
 80017fa:	2904      	cmp	r1, #4
 80017fc:	d000      	beq.n	8001800 <__aeabi_ddiv+0x578>
 80017fe:	e746      	b.n	800168e <__aeabi_ddiv+0x406>
 8001800:	e74b      	b.n	800169a <__aeabi_ddiv+0x412>
 8001802:	0005      	movs	r5, r0
 8001804:	428e      	cmp	r6, r1
 8001806:	d000      	beq.n	800180a <__aeabi_ddiv+0x582>
 8001808:	e66a      	b.n	80014e0 <__aeabi_ddiv+0x258>
 800180a:	9a00      	ldr	r2, [sp, #0]
 800180c:	4293      	cmp	r3, r2
 800180e:	d000      	beq.n	8001812 <__aeabi_ddiv+0x58a>
 8001810:	e666      	b.n	80014e0 <__aeabi_ddiv+0x258>
 8001812:	e667      	b.n	80014e4 <__aeabi_ddiv+0x25c>
 8001814:	4a16      	ldr	r2, [pc, #88]	; (8001870 <__aeabi_ddiv+0x5e8>)
 8001816:	445a      	add	r2, fp
 8001818:	2a00      	cmp	r2, #0
 800181a:	dc00      	bgt.n	800181e <__aeabi_ddiv+0x596>
 800181c:	e710      	b.n	8001640 <__aeabi_ddiv+0x3b8>
 800181e:	2301      	movs	r3, #1
 8001820:	2500      	movs	r5, #0
 8001822:	4498      	add	r8, r3
 8001824:	e667      	b.n	80014f6 <__aeabi_ddiv+0x26e>
 8001826:	075d      	lsls	r5, r3, #29
 8001828:	025b      	lsls	r3, r3, #9
 800182a:	0b1c      	lsrs	r4, r3, #12
 800182c:	08d2      	lsrs	r2, r2, #3
 800182e:	2300      	movs	r3, #0
 8001830:	4315      	orrs	r5, r2
 8001832:	e580      	b.n	8001336 <__aeabi_ddiv+0xae>
 8001834:	9800      	ldr	r0, [sp, #0]
 8001836:	3d02      	subs	r5, #2
 8001838:	0042      	lsls	r2, r0, #1
 800183a:	4282      	cmp	r2, r0
 800183c:	41bf      	sbcs	r7, r7
 800183e:	427f      	negs	r7, r7
 8001840:	193c      	adds	r4, r7, r4
 8001842:	1936      	adds	r6, r6, r4
 8001844:	9200      	str	r2, [sp, #0]
 8001846:	e7dd      	b.n	8001804 <__aeabi_ddiv+0x57c>
 8001848:	2480      	movs	r4, #128	; 0x80
 800184a:	4643      	mov	r3, r8
 800184c:	0324      	lsls	r4, r4, #12
 800184e:	431c      	orrs	r4, r3
 8001850:	0324      	lsls	r4, r4, #12
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__aeabi_ddiv+0x5dc>)
 8001854:	0b24      	lsrs	r4, r4, #12
 8001856:	e56e      	b.n	8001336 <__aeabi_ddiv+0xae>
 8001858:	9a00      	ldr	r2, [sp, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d3ea      	bcc.n	8001834 <__aeabi_ddiv+0x5ac>
 800185e:	0005      	movs	r5, r0
 8001860:	e7d3      	b.n	800180a <__aeabi_ddiv+0x582>
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	000007ff 	.word	0x000007ff
 8001868:	0000043e 	.word	0x0000043e
 800186c:	0000041e 	.word	0x0000041e
 8001870:	000003ff 	.word	0x000003ff

08001874 <__eqdf2>:
 8001874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001876:	464e      	mov	r6, r9
 8001878:	4645      	mov	r5, r8
 800187a:	46de      	mov	lr, fp
 800187c:	4657      	mov	r7, sl
 800187e:	4690      	mov	r8, r2
 8001880:	b5e0      	push	{r5, r6, r7, lr}
 8001882:	0017      	movs	r7, r2
 8001884:	031a      	lsls	r2, r3, #12
 8001886:	0b12      	lsrs	r2, r2, #12
 8001888:	0005      	movs	r5, r0
 800188a:	4684      	mov	ip, r0
 800188c:	4819      	ldr	r0, [pc, #100]	; (80018f4 <__eqdf2+0x80>)
 800188e:	030e      	lsls	r6, r1, #12
 8001890:	004c      	lsls	r4, r1, #1
 8001892:	4691      	mov	r9, r2
 8001894:	005a      	lsls	r2, r3, #1
 8001896:	0fdb      	lsrs	r3, r3, #31
 8001898:	469b      	mov	fp, r3
 800189a:	0b36      	lsrs	r6, r6, #12
 800189c:	0d64      	lsrs	r4, r4, #21
 800189e:	0fc9      	lsrs	r1, r1, #31
 80018a0:	0d52      	lsrs	r2, r2, #21
 80018a2:	4284      	cmp	r4, r0
 80018a4:	d019      	beq.n	80018da <__eqdf2+0x66>
 80018a6:	4282      	cmp	r2, r0
 80018a8:	d010      	beq.n	80018cc <__eqdf2+0x58>
 80018aa:	2001      	movs	r0, #1
 80018ac:	4294      	cmp	r4, r2
 80018ae:	d10e      	bne.n	80018ce <__eqdf2+0x5a>
 80018b0:	454e      	cmp	r6, r9
 80018b2:	d10c      	bne.n	80018ce <__eqdf2+0x5a>
 80018b4:	2001      	movs	r0, #1
 80018b6:	45c4      	cmp	ip, r8
 80018b8:	d109      	bne.n	80018ce <__eqdf2+0x5a>
 80018ba:	4559      	cmp	r1, fp
 80018bc:	d017      	beq.n	80018ee <__eqdf2+0x7a>
 80018be:	2c00      	cmp	r4, #0
 80018c0:	d105      	bne.n	80018ce <__eqdf2+0x5a>
 80018c2:	0030      	movs	r0, r6
 80018c4:	4328      	orrs	r0, r5
 80018c6:	1e43      	subs	r3, r0, #1
 80018c8:	4198      	sbcs	r0, r3
 80018ca:	e000      	b.n	80018ce <__eqdf2+0x5a>
 80018cc:	2001      	movs	r0, #1
 80018ce:	bcf0      	pop	{r4, r5, r6, r7}
 80018d0:	46bb      	mov	fp, r7
 80018d2:	46b2      	mov	sl, r6
 80018d4:	46a9      	mov	r9, r5
 80018d6:	46a0      	mov	r8, r4
 80018d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018da:	0033      	movs	r3, r6
 80018dc:	2001      	movs	r0, #1
 80018de:	432b      	orrs	r3, r5
 80018e0:	d1f5      	bne.n	80018ce <__eqdf2+0x5a>
 80018e2:	42a2      	cmp	r2, r4
 80018e4:	d1f3      	bne.n	80018ce <__eqdf2+0x5a>
 80018e6:	464b      	mov	r3, r9
 80018e8:	433b      	orrs	r3, r7
 80018ea:	d1f0      	bne.n	80018ce <__eqdf2+0x5a>
 80018ec:	e7e2      	b.n	80018b4 <__eqdf2+0x40>
 80018ee:	2000      	movs	r0, #0
 80018f0:	e7ed      	b.n	80018ce <__eqdf2+0x5a>
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	000007ff 	.word	0x000007ff

080018f8 <__gedf2>:
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	4647      	mov	r7, r8
 80018fc:	46ce      	mov	lr, r9
 80018fe:	0004      	movs	r4, r0
 8001900:	0018      	movs	r0, r3
 8001902:	0016      	movs	r6, r2
 8001904:	031b      	lsls	r3, r3, #12
 8001906:	0b1b      	lsrs	r3, r3, #12
 8001908:	4d2d      	ldr	r5, [pc, #180]	; (80019c0 <__gedf2+0xc8>)
 800190a:	004a      	lsls	r2, r1, #1
 800190c:	4699      	mov	r9, r3
 800190e:	b580      	push	{r7, lr}
 8001910:	0043      	lsls	r3, r0, #1
 8001912:	030f      	lsls	r7, r1, #12
 8001914:	46a4      	mov	ip, r4
 8001916:	46b0      	mov	r8, r6
 8001918:	0b3f      	lsrs	r7, r7, #12
 800191a:	0d52      	lsrs	r2, r2, #21
 800191c:	0fc9      	lsrs	r1, r1, #31
 800191e:	0d5b      	lsrs	r3, r3, #21
 8001920:	0fc0      	lsrs	r0, r0, #31
 8001922:	42aa      	cmp	r2, r5
 8001924:	d021      	beq.n	800196a <__gedf2+0x72>
 8001926:	42ab      	cmp	r3, r5
 8001928:	d013      	beq.n	8001952 <__gedf2+0x5a>
 800192a:	2a00      	cmp	r2, #0
 800192c:	d122      	bne.n	8001974 <__gedf2+0x7c>
 800192e:	433c      	orrs	r4, r7
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <__gedf2+0x42>
 8001934:	464d      	mov	r5, r9
 8001936:	432e      	orrs	r6, r5
 8001938:	d022      	beq.n	8001980 <__gedf2+0x88>
 800193a:	2c00      	cmp	r4, #0
 800193c:	d010      	beq.n	8001960 <__gedf2+0x68>
 800193e:	4281      	cmp	r1, r0
 8001940:	d022      	beq.n	8001988 <__gedf2+0x90>
 8001942:	2002      	movs	r0, #2
 8001944:	3901      	subs	r1, #1
 8001946:	4008      	ands	r0, r1
 8001948:	3801      	subs	r0, #1
 800194a:	bcc0      	pop	{r6, r7}
 800194c:	46b9      	mov	r9, r7
 800194e:	46b0      	mov	r8, r6
 8001950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001952:	464d      	mov	r5, r9
 8001954:	432e      	orrs	r6, r5
 8001956:	d129      	bne.n	80019ac <__gedf2+0xb4>
 8001958:	2a00      	cmp	r2, #0
 800195a:	d1f0      	bne.n	800193e <__gedf2+0x46>
 800195c:	433c      	orrs	r4, r7
 800195e:	d1ee      	bne.n	800193e <__gedf2+0x46>
 8001960:	2800      	cmp	r0, #0
 8001962:	d1f2      	bne.n	800194a <__gedf2+0x52>
 8001964:	2001      	movs	r0, #1
 8001966:	4240      	negs	r0, r0
 8001968:	e7ef      	b.n	800194a <__gedf2+0x52>
 800196a:	003d      	movs	r5, r7
 800196c:	4325      	orrs	r5, r4
 800196e:	d11d      	bne.n	80019ac <__gedf2+0xb4>
 8001970:	4293      	cmp	r3, r2
 8001972:	d0ee      	beq.n	8001952 <__gedf2+0x5a>
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e2      	bne.n	800193e <__gedf2+0x46>
 8001978:	464c      	mov	r4, r9
 800197a:	4326      	orrs	r6, r4
 800197c:	d1df      	bne.n	800193e <__gedf2+0x46>
 800197e:	e7e0      	b.n	8001942 <__gedf2+0x4a>
 8001980:	2000      	movs	r0, #0
 8001982:	2c00      	cmp	r4, #0
 8001984:	d0e1      	beq.n	800194a <__gedf2+0x52>
 8001986:	e7dc      	b.n	8001942 <__gedf2+0x4a>
 8001988:	429a      	cmp	r2, r3
 800198a:	dc0a      	bgt.n	80019a2 <__gedf2+0xaa>
 800198c:	dbe8      	blt.n	8001960 <__gedf2+0x68>
 800198e:	454f      	cmp	r7, r9
 8001990:	d8d7      	bhi.n	8001942 <__gedf2+0x4a>
 8001992:	d00e      	beq.n	80019b2 <__gedf2+0xba>
 8001994:	2000      	movs	r0, #0
 8001996:	454f      	cmp	r7, r9
 8001998:	d2d7      	bcs.n	800194a <__gedf2+0x52>
 800199a:	2900      	cmp	r1, #0
 800199c:	d0e2      	beq.n	8001964 <__gedf2+0x6c>
 800199e:	0008      	movs	r0, r1
 80019a0:	e7d3      	b.n	800194a <__gedf2+0x52>
 80019a2:	4243      	negs	r3, r0
 80019a4:	4158      	adcs	r0, r3
 80019a6:	0040      	lsls	r0, r0, #1
 80019a8:	3801      	subs	r0, #1
 80019aa:	e7ce      	b.n	800194a <__gedf2+0x52>
 80019ac:	2002      	movs	r0, #2
 80019ae:	4240      	negs	r0, r0
 80019b0:	e7cb      	b.n	800194a <__gedf2+0x52>
 80019b2:	45c4      	cmp	ip, r8
 80019b4:	d8c5      	bhi.n	8001942 <__gedf2+0x4a>
 80019b6:	2000      	movs	r0, #0
 80019b8:	45c4      	cmp	ip, r8
 80019ba:	d2c6      	bcs.n	800194a <__gedf2+0x52>
 80019bc:	e7ed      	b.n	800199a <__gedf2+0xa2>
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	000007ff 	.word	0x000007ff

080019c4 <__ledf2>:
 80019c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c6:	4647      	mov	r7, r8
 80019c8:	46ce      	mov	lr, r9
 80019ca:	0004      	movs	r4, r0
 80019cc:	0018      	movs	r0, r3
 80019ce:	0016      	movs	r6, r2
 80019d0:	031b      	lsls	r3, r3, #12
 80019d2:	0b1b      	lsrs	r3, r3, #12
 80019d4:	4d2c      	ldr	r5, [pc, #176]	; (8001a88 <__ledf2+0xc4>)
 80019d6:	004a      	lsls	r2, r1, #1
 80019d8:	4699      	mov	r9, r3
 80019da:	b580      	push	{r7, lr}
 80019dc:	0043      	lsls	r3, r0, #1
 80019de:	030f      	lsls	r7, r1, #12
 80019e0:	46a4      	mov	ip, r4
 80019e2:	46b0      	mov	r8, r6
 80019e4:	0b3f      	lsrs	r7, r7, #12
 80019e6:	0d52      	lsrs	r2, r2, #21
 80019e8:	0fc9      	lsrs	r1, r1, #31
 80019ea:	0d5b      	lsrs	r3, r3, #21
 80019ec:	0fc0      	lsrs	r0, r0, #31
 80019ee:	42aa      	cmp	r2, r5
 80019f0:	d00d      	beq.n	8001a0e <__ledf2+0x4a>
 80019f2:	42ab      	cmp	r3, r5
 80019f4:	d010      	beq.n	8001a18 <__ledf2+0x54>
 80019f6:	2a00      	cmp	r2, #0
 80019f8:	d127      	bne.n	8001a4a <__ledf2+0x86>
 80019fa:	433c      	orrs	r4, r7
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d111      	bne.n	8001a24 <__ledf2+0x60>
 8001a00:	464d      	mov	r5, r9
 8001a02:	432e      	orrs	r6, r5
 8001a04:	d10e      	bne.n	8001a24 <__ledf2+0x60>
 8001a06:	2000      	movs	r0, #0
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d015      	beq.n	8001a38 <__ledf2+0x74>
 8001a0c:	e00e      	b.n	8001a2c <__ledf2+0x68>
 8001a0e:	003d      	movs	r5, r7
 8001a10:	4325      	orrs	r5, r4
 8001a12:	d110      	bne.n	8001a36 <__ledf2+0x72>
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d118      	bne.n	8001a4a <__ledf2+0x86>
 8001a18:	464d      	mov	r5, r9
 8001a1a:	432e      	orrs	r6, r5
 8001a1c:	d10b      	bne.n	8001a36 <__ledf2+0x72>
 8001a1e:	2a00      	cmp	r2, #0
 8001a20:	d102      	bne.n	8001a28 <__ledf2+0x64>
 8001a22:	433c      	orrs	r4, r7
 8001a24:	2c00      	cmp	r4, #0
 8001a26:	d00b      	beq.n	8001a40 <__ledf2+0x7c>
 8001a28:	4281      	cmp	r1, r0
 8001a2a:	d014      	beq.n	8001a56 <__ledf2+0x92>
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	3901      	subs	r1, #1
 8001a30:	4008      	ands	r0, r1
 8001a32:	3801      	subs	r0, #1
 8001a34:	e000      	b.n	8001a38 <__ledf2+0x74>
 8001a36:	2002      	movs	r0, #2
 8001a38:	bcc0      	pop	{r6, r7}
 8001a3a:	46b9      	mov	r9, r7
 8001a3c:	46b0      	mov	r8, r6
 8001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d1f9      	bne.n	8001a38 <__ledf2+0x74>
 8001a44:	2001      	movs	r0, #1
 8001a46:	4240      	negs	r0, r0
 8001a48:	e7f6      	b.n	8001a38 <__ledf2+0x74>
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ec      	bne.n	8001a28 <__ledf2+0x64>
 8001a4e:	464c      	mov	r4, r9
 8001a50:	4326      	orrs	r6, r4
 8001a52:	d1e9      	bne.n	8001a28 <__ledf2+0x64>
 8001a54:	e7ea      	b.n	8001a2c <__ledf2+0x68>
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dd04      	ble.n	8001a64 <__ledf2+0xa0>
 8001a5a:	4243      	negs	r3, r0
 8001a5c:	4158      	adcs	r0, r3
 8001a5e:	0040      	lsls	r0, r0, #1
 8001a60:	3801      	subs	r0, #1
 8001a62:	e7e9      	b.n	8001a38 <__ledf2+0x74>
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbeb      	blt.n	8001a40 <__ledf2+0x7c>
 8001a68:	454f      	cmp	r7, r9
 8001a6a:	d8df      	bhi.n	8001a2c <__ledf2+0x68>
 8001a6c:	d006      	beq.n	8001a7c <__ledf2+0xb8>
 8001a6e:	2000      	movs	r0, #0
 8001a70:	454f      	cmp	r7, r9
 8001a72:	d2e1      	bcs.n	8001a38 <__ledf2+0x74>
 8001a74:	2900      	cmp	r1, #0
 8001a76:	d0e5      	beq.n	8001a44 <__ledf2+0x80>
 8001a78:	0008      	movs	r0, r1
 8001a7a:	e7dd      	b.n	8001a38 <__ledf2+0x74>
 8001a7c:	45c4      	cmp	ip, r8
 8001a7e:	d8d5      	bhi.n	8001a2c <__ledf2+0x68>
 8001a80:	2000      	movs	r0, #0
 8001a82:	45c4      	cmp	ip, r8
 8001a84:	d2d8      	bcs.n	8001a38 <__ledf2+0x74>
 8001a86:	e7f5      	b.n	8001a74 <__ledf2+0xb0>
 8001a88:	000007ff 	.word	0x000007ff

08001a8c <__aeabi_dmul>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	4657      	mov	r7, sl
 8001a90:	464e      	mov	r6, r9
 8001a92:	4645      	mov	r5, r8
 8001a94:	46de      	mov	lr, fp
 8001a96:	b5e0      	push	{r5, r6, r7, lr}
 8001a98:	4698      	mov	r8, r3
 8001a9a:	030c      	lsls	r4, r1, #12
 8001a9c:	004b      	lsls	r3, r1, #1
 8001a9e:	0006      	movs	r6, r0
 8001aa0:	4692      	mov	sl, r2
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	0b24      	lsrs	r4, r4, #12
 8001aa6:	0d5b      	lsrs	r3, r3, #21
 8001aa8:	0fcf      	lsrs	r7, r1, #31
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dmul+0x24>
 8001aae:	e15c      	b.n	8001d6a <__aeabi_dmul+0x2de>
 8001ab0:	4ad9      	ldr	r2, [pc, #868]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dmul+0x2c>
 8001ab6:	e175      	b.n	8001da4 <__aeabi_dmul+0x318>
 8001ab8:	0f42      	lsrs	r2, r0, #29
 8001aba:	00e4      	lsls	r4, r4, #3
 8001abc:	4314      	orrs	r4, r2
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	0412      	lsls	r2, r2, #16
 8001ac2:	4314      	orrs	r4, r2
 8001ac4:	4ad5      	ldr	r2, [pc, #852]	; (8001e1c <__aeabi_dmul+0x390>)
 8001ac6:	00c5      	lsls	r5, r0, #3
 8001ac8:	4694      	mov	ip, r2
 8001aca:	4463      	add	r3, ip
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	031e      	lsls	r6, r3, #12
 8001ada:	0fd2      	lsrs	r2, r2, #31
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4650      	mov	r0, sl
 8001ae0:	4690      	mov	r8, r2
 8001ae2:	0b36      	lsrs	r6, r6, #12
 8001ae4:	0d5b      	lsrs	r3, r3, #21
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dmul+0x5e>
 8001ae8:	e120      	b.n	8001d2c <__aeabi_dmul+0x2a0>
 8001aea:	4acb      	ldr	r2, [pc, #812]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dmul+0x66>
 8001af0:	e162      	b.n	8001db8 <__aeabi_dmul+0x32c>
 8001af2:	49ca      	ldr	r1, [pc, #808]	; (8001e1c <__aeabi_dmul+0x390>)
 8001af4:	0f42      	lsrs	r2, r0, #29
 8001af6:	468c      	mov	ip, r1
 8001af8:	9900      	ldr	r1, [sp, #0]
 8001afa:	4463      	add	r3, ip
 8001afc:	00f6      	lsls	r6, r6, #3
 8001afe:	468c      	mov	ip, r1
 8001b00:	4316      	orrs	r6, r2
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	449c      	add	ip, r3
 8001b06:	0412      	lsls	r2, r2, #16
 8001b08:	4663      	mov	r3, ip
 8001b0a:	4316      	orrs	r6, r2
 8001b0c:	00c2      	lsls	r2, r0, #3
 8001b0e:	2000      	movs	r0, #0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	9900      	ldr	r1, [sp, #0]
 8001b14:	4643      	mov	r3, r8
 8001b16:	3101      	adds	r1, #1
 8001b18:	468c      	mov	ip, r1
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	407b      	eors	r3, r7
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	290f      	cmp	r1, #15
 8001b22:	d826      	bhi.n	8001b72 <__aeabi_dmul+0xe6>
 8001b24:	4bbe      	ldr	r3, [pc, #760]	; (8001e20 <__aeabi_dmul+0x394>)
 8001b26:	0089      	lsls	r1, r1, #2
 8001b28:	5859      	ldr	r1, [r3, r1]
 8001b2a:	468f      	mov	pc, r1
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	0034      	movs	r4, r6
 8001b32:	0015      	movs	r5, r2
 8001b34:	4683      	mov	fp, r0
 8001b36:	465b      	mov	r3, fp
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d016      	beq.n	8001b6a <__aeabi_dmul+0xde>
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dmul+0xb6>
 8001b40:	e203      	b.n	8001f4a <__aeabi_dmul+0x4be>
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dmul+0xbc>
 8001b46:	e0cd      	b.n	8001ce4 <__aeabi_dmul+0x258>
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2400      	movs	r4, #0
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	9b01      	ldr	r3, [sp, #4]
 8001b50:	0512      	lsls	r2, r2, #20
 8001b52:	4322      	orrs	r2, r4
 8001b54:	07db      	lsls	r3, r3, #31
 8001b56:	431a      	orrs	r2, r3
 8001b58:	0028      	movs	r0, r5
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	b007      	add	sp, #28
 8001b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b60:	46bb      	mov	fp, r7
 8001b62:	46b2      	mov	sl, r6
 8001b64:	46a9      	mov	r9, r5
 8001b66:	46a0      	mov	r8, r4
 8001b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b6a:	2400      	movs	r4, #0
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	4aaa      	ldr	r2, [pc, #680]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001b70:	e7ed      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001b72:	0c28      	lsrs	r0, r5, #16
 8001b74:	042d      	lsls	r5, r5, #16
 8001b76:	0c2d      	lsrs	r5, r5, #16
 8001b78:	002b      	movs	r3, r5
 8001b7a:	0c11      	lsrs	r1, r2, #16
 8001b7c:	0412      	lsls	r2, r2, #16
 8001b7e:	0c12      	lsrs	r2, r2, #16
 8001b80:	4353      	muls	r3, r2
 8001b82:	4698      	mov	r8, r3
 8001b84:	0013      	movs	r3, r2
 8001b86:	002f      	movs	r7, r5
 8001b88:	4343      	muls	r3, r0
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	434f      	muls	r7, r1
 8001b8e:	444f      	add	r7, r9
 8001b90:	46bb      	mov	fp, r7
 8001b92:	4647      	mov	r7, r8
 8001b94:	000b      	movs	r3, r1
 8001b96:	0c3f      	lsrs	r7, r7, #16
 8001b98:	46ba      	mov	sl, r7
 8001b9a:	4343      	muls	r3, r0
 8001b9c:	44da      	add	sl, fp
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	45d1      	cmp	r9, sl
 8001ba2:	d904      	bls.n	8001bae <__aeabi_dmul+0x122>
 8001ba4:	2780      	movs	r7, #128	; 0x80
 8001ba6:	027f      	lsls	r7, r7, #9
 8001ba8:	46b9      	mov	r9, r7
 8001baa:	444b      	add	r3, r9
 8001bac:	9302      	str	r3, [sp, #8]
 8001bae:	4653      	mov	r3, sl
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	469b      	mov	fp, r3
 8001bb4:	4653      	mov	r3, sl
 8001bb6:	041f      	lsls	r7, r3, #16
 8001bb8:	4643      	mov	r3, r8
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	4698      	mov	r8, r3
 8001bc0:	003b      	movs	r3, r7
 8001bc2:	4443      	add	r3, r8
 8001bc4:	9304      	str	r3, [sp, #16]
 8001bc6:	0c33      	lsrs	r3, r6, #16
 8001bc8:	0436      	lsls	r6, r6, #16
 8001bca:	0c36      	lsrs	r6, r6, #16
 8001bcc:	4698      	mov	r8, r3
 8001bce:	0033      	movs	r3, r6
 8001bd0:	4343      	muls	r3, r0
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	4643      	mov	r3, r8
 8001bd6:	4343      	muls	r3, r0
 8001bd8:	002f      	movs	r7, r5
 8001bda:	469a      	mov	sl, r3
 8001bdc:	4643      	mov	r3, r8
 8001bde:	4377      	muls	r7, r6
 8001be0:	435d      	muls	r5, r3
 8001be2:	0c38      	lsrs	r0, r7, #16
 8001be4:	444d      	add	r5, r9
 8001be6:	1945      	adds	r5, r0, r5
 8001be8:	45a9      	cmp	r9, r5
 8001bea:	d903      	bls.n	8001bf4 <__aeabi_dmul+0x168>
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	025b      	lsls	r3, r3, #9
 8001bf0:	4699      	mov	r9, r3
 8001bf2:	44ca      	add	sl, r9
 8001bf4:	043f      	lsls	r7, r7, #16
 8001bf6:	0c28      	lsrs	r0, r5, #16
 8001bf8:	0c3f      	lsrs	r7, r7, #16
 8001bfa:	042d      	lsls	r5, r5, #16
 8001bfc:	19ed      	adds	r5, r5, r7
 8001bfe:	0c27      	lsrs	r7, r4, #16
 8001c00:	0424      	lsls	r4, r4, #16
 8001c02:	0c24      	lsrs	r4, r4, #16
 8001c04:	0003      	movs	r3, r0
 8001c06:	0020      	movs	r0, r4
 8001c08:	4350      	muls	r0, r2
 8001c0a:	437a      	muls	r2, r7
 8001c0c:	4691      	mov	r9, r2
 8001c0e:	003a      	movs	r2, r7
 8001c10:	4453      	add	r3, sl
 8001c12:	9305      	str	r3, [sp, #20]
 8001c14:	0c03      	lsrs	r3, r0, #16
 8001c16:	469a      	mov	sl, r3
 8001c18:	434a      	muls	r2, r1
 8001c1a:	4361      	muls	r1, r4
 8001c1c:	4449      	add	r1, r9
 8001c1e:	4451      	add	r1, sl
 8001c20:	44ab      	add	fp, r5
 8001c22:	4589      	cmp	r9, r1
 8001c24:	d903      	bls.n	8001c2e <__aeabi_dmul+0x1a2>
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	025b      	lsls	r3, r3, #9
 8001c2a:	4699      	mov	r9, r3
 8001c2c:	444a      	add	r2, r9
 8001c2e:	0400      	lsls	r0, r0, #16
 8001c30:	0c0b      	lsrs	r3, r1, #16
 8001c32:	0c00      	lsrs	r0, r0, #16
 8001c34:	0409      	lsls	r1, r1, #16
 8001c36:	1809      	adds	r1, r1, r0
 8001c38:	0020      	movs	r0, r4
 8001c3a:	4699      	mov	r9, r3
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	4370      	muls	r0, r6
 8001c40:	435c      	muls	r4, r3
 8001c42:	437e      	muls	r6, r7
 8001c44:	435f      	muls	r7, r3
 8001c46:	0c03      	lsrs	r3, r0, #16
 8001c48:	4698      	mov	r8, r3
 8001c4a:	19a4      	adds	r4, r4, r6
 8001c4c:	4444      	add	r4, r8
 8001c4e:	444a      	add	r2, r9
 8001c50:	9703      	str	r7, [sp, #12]
 8001c52:	42a6      	cmp	r6, r4
 8001c54:	d904      	bls.n	8001c60 <__aeabi_dmul+0x1d4>
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	025b      	lsls	r3, r3, #9
 8001c5a:	4698      	mov	r8, r3
 8001c5c:	4447      	add	r7, r8
 8001c5e:	9703      	str	r7, [sp, #12]
 8001c60:	0423      	lsls	r3, r4, #16
 8001c62:	9e02      	ldr	r6, [sp, #8]
 8001c64:	469a      	mov	sl, r3
 8001c66:	9b05      	ldr	r3, [sp, #20]
 8001c68:	445e      	add	r6, fp
 8001c6a:	4698      	mov	r8, r3
 8001c6c:	42ae      	cmp	r6, r5
 8001c6e:	41ad      	sbcs	r5, r5
 8001c70:	1876      	adds	r6, r6, r1
 8001c72:	428e      	cmp	r6, r1
 8001c74:	4189      	sbcs	r1, r1
 8001c76:	0400      	lsls	r0, r0, #16
 8001c78:	0c00      	lsrs	r0, r0, #16
 8001c7a:	4450      	add	r0, sl
 8001c7c:	4440      	add	r0, r8
 8001c7e:	426d      	negs	r5, r5
 8001c80:	1947      	adds	r7, r0, r5
 8001c82:	46b8      	mov	r8, r7
 8001c84:	4693      	mov	fp, r2
 8001c86:	4249      	negs	r1, r1
 8001c88:	4689      	mov	r9, r1
 8001c8a:	44c3      	add	fp, r8
 8001c8c:	44d9      	add	r9, fp
 8001c8e:	4298      	cmp	r0, r3
 8001c90:	4180      	sbcs	r0, r0
 8001c92:	45a8      	cmp	r8, r5
 8001c94:	41ad      	sbcs	r5, r5
 8001c96:	4593      	cmp	fp, r2
 8001c98:	4192      	sbcs	r2, r2
 8001c9a:	4589      	cmp	r9, r1
 8001c9c:	4189      	sbcs	r1, r1
 8001c9e:	426d      	negs	r5, r5
 8001ca0:	4240      	negs	r0, r0
 8001ca2:	4328      	orrs	r0, r5
 8001ca4:	0c24      	lsrs	r4, r4, #16
 8001ca6:	4252      	negs	r2, r2
 8001ca8:	4249      	negs	r1, r1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	9b03      	ldr	r3, [sp, #12]
 8001cae:	1900      	adds	r0, r0, r4
 8001cb0:	1880      	adds	r0, r0, r2
 8001cb2:	18c7      	adds	r7, r0, r3
 8001cb4:	464b      	mov	r3, r9
 8001cb6:	0ddc      	lsrs	r4, r3, #23
 8001cb8:	9b04      	ldr	r3, [sp, #16]
 8001cba:	0275      	lsls	r5, r6, #9
 8001cbc:	431d      	orrs	r5, r3
 8001cbe:	1e6a      	subs	r2, r5, #1
 8001cc0:	4195      	sbcs	r5, r2
 8001cc2:	464b      	mov	r3, r9
 8001cc4:	0df6      	lsrs	r6, r6, #23
 8001cc6:	027f      	lsls	r7, r7, #9
 8001cc8:	4335      	orrs	r5, r6
 8001cca:	025a      	lsls	r2, r3, #9
 8001ccc:	433c      	orrs	r4, r7
 8001cce:	4315      	orrs	r5, r2
 8001cd0:	01fb      	lsls	r3, r7, #7
 8001cd2:	d400      	bmi.n	8001cd6 <__aeabi_dmul+0x24a>
 8001cd4:	e11c      	b.n	8001f10 <__aeabi_dmul+0x484>
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	086a      	lsrs	r2, r5, #1
 8001cda:	400d      	ands	r5, r1
 8001cdc:	4315      	orrs	r5, r2
 8001cde:	07e2      	lsls	r2, r4, #31
 8001ce0:	4315      	orrs	r5, r2
 8001ce2:	0864      	lsrs	r4, r4, #1
 8001ce4:	494f      	ldr	r1, [pc, #316]	; (8001e24 <__aeabi_dmul+0x398>)
 8001ce6:	4461      	add	r1, ip
 8001ce8:	2900      	cmp	r1, #0
 8001cea:	dc00      	bgt.n	8001cee <__aeabi_dmul+0x262>
 8001cec:	e0b0      	b.n	8001e50 <__aeabi_dmul+0x3c4>
 8001cee:	076b      	lsls	r3, r5, #29
 8001cf0:	d009      	beq.n	8001d06 <__aeabi_dmul+0x27a>
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	402a      	ands	r2, r5
 8001cf6:	2a04      	cmp	r2, #4
 8001cf8:	d005      	beq.n	8001d06 <__aeabi_dmul+0x27a>
 8001cfa:	1d2a      	adds	r2, r5, #4
 8001cfc:	42aa      	cmp	r2, r5
 8001cfe:	41ad      	sbcs	r5, r5
 8001d00:	426d      	negs	r5, r5
 8001d02:	1964      	adds	r4, r4, r5
 8001d04:	0015      	movs	r5, r2
 8001d06:	01e3      	lsls	r3, r4, #7
 8001d08:	d504      	bpl.n	8001d14 <__aeabi_dmul+0x288>
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	4a46      	ldr	r2, [pc, #280]	; (8001e28 <__aeabi_dmul+0x39c>)
 8001d0e:	00c9      	lsls	r1, r1, #3
 8001d10:	4014      	ands	r4, r2
 8001d12:	4461      	add	r1, ip
 8001d14:	4a45      	ldr	r2, [pc, #276]	; (8001e2c <__aeabi_dmul+0x3a0>)
 8001d16:	4291      	cmp	r1, r2
 8001d18:	dd00      	ble.n	8001d1c <__aeabi_dmul+0x290>
 8001d1a:	e726      	b.n	8001b6a <__aeabi_dmul+0xde>
 8001d1c:	0762      	lsls	r2, r4, #29
 8001d1e:	08ed      	lsrs	r5, r5, #3
 8001d20:	0264      	lsls	r4, r4, #9
 8001d22:	0549      	lsls	r1, r1, #21
 8001d24:	4315      	orrs	r5, r2
 8001d26:	0b24      	lsrs	r4, r4, #12
 8001d28:	0d4a      	lsrs	r2, r1, #21
 8001d2a:	e710      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001d2c:	4652      	mov	r2, sl
 8001d2e:	4332      	orrs	r2, r6
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dmul+0x2a8>
 8001d32:	e07f      	b.n	8001e34 <__aeabi_dmul+0x3a8>
 8001d34:	2e00      	cmp	r6, #0
 8001d36:	d100      	bne.n	8001d3a <__aeabi_dmul+0x2ae>
 8001d38:	e0dc      	b.n	8001ef4 <__aeabi_dmul+0x468>
 8001d3a:	0030      	movs	r0, r6
 8001d3c:	f000 fe1e 	bl	800297c <__clzsi2>
 8001d40:	0002      	movs	r2, r0
 8001d42:	3a0b      	subs	r2, #11
 8001d44:	231d      	movs	r3, #29
 8001d46:	0001      	movs	r1, r0
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	4652      	mov	r2, sl
 8001d4c:	3908      	subs	r1, #8
 8001d4e:	40da      	lsrs	r2, r3
 8001d50:	408e      	lsls	r6, r1
 8001d52:	4316      	orrs	r6, r2
 8001d54:	4652      	mov	r2, sl
 8001d56:	408a      	lsls	r2, r1
 8001d58:	9b00      	ldr	r3, [sp, #0]
 8001d5a:	4935      	ldr	r1, [pc, #212]	; (8001e30 <__aeabi_dmul+0x3a4>)
 8001d5c:	1a18      	subs	r0, r3, r0
 8001d5e:	0003      	movs	r3, r0
 8001d60:	468c      	mov	ip, r1
 8001d62:	4463      	add	r3, ip
 8001d64:	2000      	movs	r0, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	e6d3      	b.n	8001b12 <__aeabi_dmul+0x86>
 8001d6a:	0025      	movs	r5, r4
 8001d6c:	4305      	orrs	r5, r0
 8001d6e:	d04a      	beq.n	8001e06 <__aeabi_dmul+0x37a>
 8001d70:	2c00      	cmp	r4, #0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dmul+0x2ea>
 8001d74:	e0b0      	b.n	8001ed8 <__aeabi_dmul+0x44c>
 8001d76:	0020      	movs	r0, r4
 8001d78:	f000 fe00 	bl	800297c <__clzsi2>
 8001d7c:	0001      	movs	r1, r0
 8001d7e:	0002      	movs	r2, r0
 8001d80:	390b      	subs	r1, #11
 8001d82:	231d      	movs	r3, #29
 8001d84:	0010      	movs	r0, r2
 8001d86:	1a5b      	subs	r3, r3, r1
 8001d88:	0031      	movs	r1, r6
 8001d8a:	0035      	movs	r5, r6
 8001d8c:	3808      	subs	r0, #8
 8001d8e:	4084      	lsls	r4, r0
 8001d90:	40d9      	lsrs	r1, r3
 8001d92:	4085      	lsls	r5, r0
 8001d94:	430c      	orrs	r4, r1
 8001d96:	4826      	ldr	r0, [pc, #152]	; (8001e30 <__aeabi_dmul+0x3a4>)
 8001d98:	1a83      	subs	r3, r0, r2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	4699      	mov	r9, r3
 8001da0:	469b      	mov	fp, r3
 8001da2:	e697      	b.n	8001ad4 <__aeabi_dmul+0x48>
 8001da4:	0005      	movs	r5, r0
 8001da6:	4325      	orrs	r5, r4
 8001da8:	d126      	bne.n	8001df8 <__aeabi_dmul+0x36c>
 8001daa:	2208      	movs	r2, #8
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2302      	movs	r3, #2
 8001db0:	2400      	movs	r4, #0
 8001db2:	4691      	mov	r9, r2
 8001db4:	469b      	mov	fp, r3
 8001db6:	e68d      	b.n	8001ad4 <__aeabi_dmul+0x48>
 8001db8:	4652      	mov	r2, sl
 8001dba:	9b00      	ldr	r3, [sp, #0]
 8001dbc:	4332      	orrs	r2, r6
 8001dbe:	d110      	bne.n	8001de2 <__aeabi_dmul+0x356>
 8001dc0:	4915      	ldr	r1, [pc, #84]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	468c      	mov	ip, r1
 8001dc6:	4463      	add	r3, ip
 8001dc8:	4649      	mov	r1, r9
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2302      	movs	r3, #2
 8001dce:	4319      	orrs	r1, r3
 8001dd0:	4689      	mov	r9, r1
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	e69d      	b.n	8001b12 <__aeabi_dmul+0x86>
 8001dd6:	465b      	mov	r3, fp
 8001dd8:	9701      	str	r7, [sp, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dmul+0x354>
 8001dde:	e6ad      	b.n	8001b3c <__aeabi_dmul+0xb0>
 8001de0:	e6c3      	b.n	8001b6a <__aeabi_dmul+0xde>
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <__aeabi_dmul+0x38c>)
 8001de4:	2003      	movs	r0, #3
 8001de6:	4694      	mov	ip, r2
 8001de8:	4463      	add	r3, ip
 8001dea:	464a      	mov	r2, r9
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2303      	movs	r3, #3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	4691      	mov	r9, r2
 8001df4:	4652      	mov	r2, sl
 8001df6:	e68c      	b.n	8001b12 <__aeabi_dmul+0x86>
 8001df8:	220c      	movs	r2, #12
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	0005      	movs	r5, r0
 8001e00:	4691      	mov	r9, r2
 8001e02:	469b      	mov	fp, r3
 8001e04:	e666      	b.n	8001ad4 <__aeabi_dmul+0x48>
 8001e06:	2304      	movs	r3, #4
 8001e08:	4699      	mov	r9, r3
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	2400      	movs	r4, #0
 8001e12:	469b      	mov	fp, r3
 8001e14:	e65e      	b.n	8001ad4 <__aeabi_dmul+0x48>
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	000007ff 	.word	0x000007ff
 8001e1c:	fffffc01 	.word	0xfffffc01
 8001e20:	0800fffc 	.word	0x0800fffc
 8001e24:	000003ff 	.word	0x000003ff
 8001e28:	feffffff 	.word	0xfeffffff
 8001e2c:	000007fe 	.word	0x000007fe
 8001e30:	fffffc0d 	.word	0xfffffc0d
 8001e34:	4649      	mov	r1, r9
 8001e36:	2301      	movs	r3, #1
 8001e38:	4319      	orrs	r1, r3
 8001e3a:	4689      	mov	r9, r1
 8001e3c:	2600      	movs	r6, #0
 8001e3e:	2001      	movs	r0, #1
 8001e40:	e667      	b.n	8001b12 <__aeabi_dmul+0x86>
 8001e42:	2300      	movs	r3, #0
 8001e44:	2480      	movs	r4, #128	; 0x80
 8001e46:	2500      	movs	r5, #0
 8001e48:	4a43      	ldr	r2, [pc, #268]	; (8001f58 <__aeabi_dmul+0x4cc>)
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	0324      	lsls	r4, r4, #12
 8001e4e:	e67e      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001e50:	2001      	movs	r0, #1
 8001e52:	1a40      	subs	r0, r0, r1
 8001e54:	2838      	cmp	r0, #56	; 0x38
 8001e56:	dd00      	ble.n	8001e5a <__aeabi_dmul+0x3ce>
 8001e58:	e676      	b.n	8001b48 <__aeabi_dmul+0xbc>
 8001e5a:	281f      	cmp	r0, #31
 8001e5c:	dd5b      	ble.n	8001f16 <__aeabi_dmul+0x48a>
 8001e5e:	221f      	movs	r2, #31
 8001e60:	0023      	movs	r3, r4
 8001e62:	4252      	negs	r2, r2
 8001e64:	1a51      	subs	r1, r2, r1
 8001e66:	40cb      	lsrs	r3, r1
 8001e68:	0019      	movs	r1, r3
 8001e6a:	2820      	cmp	r0, #32
 8001e6c:	d003      	beq.n	8001e76 <__aeabi_dmul+0x3ea>
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <__aeabi_dmul+0x4d0>)
 8001e70:	4462      	add	r2, ip
 8001e72:	4094      	lsls	r4, r2
 8001e74:	4325      	orrs	r5, r4
 8001e76:	1e6a      	subs	r2, r5, #1
 8001e78:	4195      	sbcs	r5, r2
 8001e7a:	002a      	movs	r2, r5
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	2107      	movs	r1, #7
 8001e80:	000d      	movs	r5, r1
 8001e82:	2400      	movs	r4, #0
 8001e84:	4015      	ands	r5, r2
 8001e86:	4211      	tst	r1, r2
 8001e88:	d05b      	beq.n	8001f42 <__aeabi_dmul+0x4b6>
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	2400      	movs	r4, #0
 8001e8e:	4011      	ands	r1, r2
 8001e90:	2904      	cmp	r1, #4
 8001e92:	d053      	beq.n	8001f3c <__aeabi_dmul+0x4b0>
 8001e94:	1d11      	adds	r1, r2, #4
 8001e96:	4291      	cmp	r1, r2
 8001e98:	4192      	sbcs	r2, r2
 8001e9a:	4252      	negs	r2, r2
 8001e9c:	18a4      	adds	r4, r4, r2
 8001e9e:	000a      	movs	r2, r1
 8001ea0:	0223      	lsls	r3, r4, #8
 8001ea2:	d54b      	bpl.n	8001f3c <__aeabi_dmul+0x4b0>
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	2500      	movs	r5, #0
 8001eaa:	e650      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	031b      	lsls	r3, r3, #12
 8001eb0:	421c      	tst	r4, r3
 8001eb2:	d009      	beq.n	8001ec8 <__aeabi_dmul+0x43c>
 8001eb4:	421e      	tst	r6, r3
 8001eb6:	d107      	bne.n	8001ec8 <__aeabi_dmul+0x43c>
 8001eb8:	4333      	orrs	r3, r6
 8001eba:	031c      	lsls	r4, r3, #12
 8001ebc:	4643      	mov	r3, r8
 8001ebe:	0015      	movs	r5, r2
 8001ec0:	0b24      	lsrs	r4, r4, #12
 8001ec2:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <__aeabi_dmul+0x4cc>)
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	e642      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	0312      	lsls	r2, r2, #12
 8001ecc:	4314      	orrs	r4, r2
 8001ece:	0324      	lsls	r4, r4, #12
 8001ed0:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <__aeabi_dmul+0x4cc>)
 8001ed2:	0b24      	lsrs	r4, r4, #12
 8001ed4:	9701      	str	r7, [sp, #4]
 8001ed6:	e63a      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001ed8:	f000 fd50 	bl	800297c <__clzsi2>
 8001edc:	0001      	movs	r1, r0
 8001ede:	0002      	movs	r2, r0
 8001ee0:	3115      	adds	r1, #21
 8001ee2:	3220      	adds	r2, #32
 8001ee4:	291c      	cmp	r1, #28
 8001ee6:	dc00      	bgt.n	8001eea <__aeabi_dmul+0x45e>
 8001ee8:	e74b      	b.n	8001d82 <__aeabi_dmul+0x2f6>
 8001eea:	0034      	movs	r4, r6
 8001eec:	3808      	subs	r0, #8
 8001eee:	2500      	movs	r5, #0
 8001ef0:	4084      	lsls	r4, r0
 8001ef2:	e750      	b.n	8001d96 <__aeabi_dmul+0x30a>
 8001ef4:	f000 fd42 	bl	800297c <__clzsi2>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	001a      	movs	r2, r3
 8001efc:	3215      	adds	r2, #21
 8001efe:	3020      	adds	r0, #32
 8001f00:	2a1c      	cmp	r2, #28
 8001f02:	dc00      	bgt.n	8001f06 <__aeabi_dmul+0x47a>
 8001f04:	e71e      	b.n	8001d44 <__aeabi_dmul+0x2b8>
 8001f06:	4656      	mov	r6, sl
 8001f08:	3b08      	subs	r3, #8
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	409e      	lsls	r6, r3
 8001f0e:	e723      	b.n	8001d58 <__aeabi_dmul+0x2cc>
 8001f10:	9b00      	ldr	r3, [sp, #0]
 8001f12:	469c      	mov	ip, r3
 8001f14:	e6e6      	b.n	8001ce4 <__aeabi_dmul+0x258>
 8001f16:	4912      	ldr	r1, [pc, #72]	; (8001f60 <__aeabi_dmul+0x4d4>)
 8001f18:	0022      	movs	r2, r4
 8001f1a:	4461      	add	r1, ip
 8001f1c:	002e      	movs	r6, r5
 8001f1e:	408d      	lsls	r5, r1
 8001f20:	408a      	lsls	r2, r1
 8001f22:	40c6      	lsrs	r6, r0
 8001f24:	1e69      	subs	r1, r5, #1
 8001f26:	418d      	sbcs	r5, r1
 8001f28:	4332      	orrs	r2, r6
 8001f2a:	432a      	orrs	r2, r5
 8001f2c:	40c4      	lsrs	r4, r0
 8001f2e:	0753      	lsls	r3, r2, #29
 8001f30:	d0b6      	beq.n	8001ea0 <__aeabi_dmul+0x414>
 8001f32:	210f      	movs	r1, #15
 8001f34:	4011      	ands	r1, r2
 8001f36:	2904      	cmp	r1, #4
 8001f38:	d1ac      	bne.n	8001e94 <__aeabi_dmul+0x408>
 8001f3a:	e7b1      	b.n	8001ea0 <__aeabi_dmul+0x414>
 8001f3c:	0765      	lsls	r5, r4, #29
 8001f3e:	0264      	lsls	r4, r4, #9
 8001f40:	0b24      	lsrs	r4, r4, #12
 8001f42:	08d2      	lsrs	r2, r2, #3
 8001f44:	4315      	orrs	r5, r2
 8001f46:	2200      	movs	r2, #0
 8001f48:	e601      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	0312      	lsls	r2, r2, #12
 8001f4e:	4314      	orrs	r4, r2
 8001f50:	0324      	lsls	r4, r4, #12
 8001f52:	4a01      	ldr	r2, [pc, #4]	; (8001f58 <__aeabi_dmul+0x4cc>)
 8001f54:	0b24      	lsrs	r4, r4, #12
 8001f56:	e5fa      	b.n	8001b4e <__aeabi_dmul+0xc2>
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	0000043e 	.word	0x0000043e
 8001f60:	0000041e 	.word	0x0000041e

08001f64 <__aeabi_dsub>:
 8001f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f66:	4657      	mov	r7, sl
 8001f68:	464e      	mov	r6, r9
 8001f6a:	4645      	mov	r5, r8
 8001f6c:	46de      	mov	lr, fp
 8001f6e:	b5e0      	push	{r5, r6, r7, lr}
 8001f70:	001e      	movs	r6, r3
 8001f72:	0017      	movs	r7, r2
 8001f74:	004a      	lsls	r2, r1, #1
 8001f76:	030b      	lsls	r3, r1, #12
 8001f78:	0d52      	lsrs	r2, r2, #21
 8001f7a:	0a5b      	lsrs	r3, r3, #9
 8001f7c:	4690      	mov	r8, r2
 8001f7e:	0f42      	lsrs	r2, r0, #29
 8001f80:	431a      	orrs	r2, r3
 8001f82:	0fcd      	lsrs	r5, r1, #31
 8001f84:	4ccd      	ldr	r4, [pc, #820]	; (80022bc <__aeabi_dsub+0x358>)
 8001f86:	0331      	lsls	r1, r6, #12
 8001f88:	00c3      	lsls	r3, r0, #3
 8001f8a:	4694      	mov	ip, r2
 8001f8c:	0070      	lsls	r0, r6, #1
 8001f8e:	0f7a      	lsrs	r2, r7, #29
 8001f90:	0a49      	lsrs	r1, r1, #9
 8001f92:	00ff      	lsls	r7, r7, #3
 8001f94:	469a      	mov	sl, r3
 8001f96:	46b9      	mov	r9, r7
 8001f98:	0d40      	lsrs	r0, r0, #21
 8001f9a:	0ff6      	lsrs	r6, r6, #31
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x40>
 8001fa2:	e0b1      	b.n	8002108 <__aeabi_dsub+0x1a4>
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4056      	eors	r6, r2
 8001fa8:	46b3      	mov	fp, r6
 8001faa:	42b5      	cmp	r5, r6
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x4c>
 8001fae:	e088      	b.n	80020c2 <__aeabi_dsub+0x15e>
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	1a12      	subs	r2, r2, r0
 8001fb4:	2a00      	cmp	r2, #0
 8001fb6:	dc00      	bgt.n	8001fba <__aeabi_dsub+0x56>
 8001fb8:	e0ae      	b.n	8002118 <__aeabi_dsub+0x1b4>
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x5c>
 8001fbe:	e0c1      	b.n	8002144 <__aeabi_dsub+0x1e0>
 8001fc0:	48be      	ldr	r0, [pc, #760]	; (80022bc <__aeabi_dsub+0x358>)
 8001fc2:	4580      	cmp	r8, r0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x64>
 8001fc6:	e151      	b.n	800226c <__aeabi_dsub+0x308>
 8001fc8:	2080      	movs	r0, #128	; 0x80
 8001fca:	0400      	lsls	r0, r0, #16
 8001fcc:	4301      	orrs	r1, r0
 8001fce:	2a38      	cmp	r2, #56	; 0x38
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dsub+0x70>
 8001fd2:	e17b      	b.n	80022cc <__aeabi_dsub+0x368>
 8001fd4:	2a1f      	cmp	r2, #31
 8001fd6:	dd00      	ble.n	8001fda <__aeabi_dsub+0x76>
 8001fd8:	e1ee      	b.n	80023b8 <__aeabi_dsub+0x454>
 8001fda:	2020      	movs	r0, #32
 8001fdc:	003e      	movs	r6, r7
 8001fde:	1a80      	subs	r0, r0, r2
 8001fe0:	000c      	movs	r4, r1
 8001fe2:	40d6      	lsrs	r6, r2
 8001fe4:	40d1      	lsrs	r1, r2
 8001fe6:	4087      	lsls	r7, r0
 8001fe8:	4662      	mov	r2, ip
 8001fea:	4084      	lsls	r4, r0
 8001fec:	1a52      	subs	r2, r2, r1
 8001fee:	1e78      	subs	r0, r7, #1
 8001ff0:	4187      	sbcs	r7, r0
 8001ff2:	4694      	mov	ip, r2
 8001ff4:	4334      	orrs	r4, r6
 8001ff6:	4327      	orrs	r7, r4
 8001ff8:	1bdc      	subs	r4, r3, r7
 8001ffa:	42a3      	cmp	r3, r4
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	4662      	mov	r2, ip
 8002000:	425b      	negs	r3, r3
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4699      	mov	r9, r3
 8002006:	464b      	mov	r3, r9
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	d400      	bmi.n	800200e <__aeabi_dsub+0xaa>
 800200c:	e118      	b.n	8002240 <__aeabi_dsub+0x2dc>
 800200e:	464b      	mov	r3, r9
 8002010:	0258      	lsls	r0, r3, #9
 8002012:	0a43      	lsrs	r3, r0, #9
 8002014:	4699      	mov	r9, r3
 8002016:	464b      	mov	r3, r9
 8002018:	2b00      	cmp	r3, #0
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0xba>
 800201c:	e137      	b.n	800228e <__aeabi_dsub+0x32a>
 800201e:	4648      	mov	r0, r9
 8002020:	f000 fcac 	bl	800297c <__clzsi2>
 8002024:	0001      	movs	r1, r0
 8002026:	3908      	subs	r1, #8
 8002028:	2320      	movs	r3, #32
 800202a:	0022      	movs	r2, r4
 800202c:	4648      	mov	r0, r9
 800202e:	1a5b      	subs	r3, r3, r1
 8002030:	40da      	lsrs	r2, r3
 8002032:	4088      	lsls	r0, r1
 8002034:	408c      	lsls	r4, r1
 8002036:	4643      	mov	r3, r8
 8002038:	4310      	orrs	r0, r2
 800203a:	4588      	cmp	r8, r1
 800203c:	dd00      	ble.n	8002040 <__aeabi_dsub+0xdc>
 800203e:	e136      	b.n	80022ae <__aeabi_dsub+0x34a>
 8002040:	1ac9      	subs	r1, r1, r3
 8002042:	1c4b      	adds	r3, r1, #1
 8002044:	2b1f      	cmp	r3, #31
 8002046:	dd00      	ble.n	800204a <__aeabi_dsub+0xe6>
 8002048:	e0ea      	b.n	8002220 <__aeabi_dsub+0x2bc>
 800204a:	2220      	movs	r2, #32
 800204c:	0026      	movs	r6, r4
 800204e:	1ad2      	subs	r2, r2, r3
 8002050:	0001      	movs	r1, r0
 8002052:	4094      	lsls	r4, r2
 8002054:	40de      	lsrs	r6, r3
 8002056:	40d8      	lsrs	r0, r3
 8002058:	2300      	movs	r3, #0
 800205a:	4091      	lsls	r1, r2
 800205c:	1e62      	subs	r2, r4, #1
 800205e:	4194      	sbcs	r4, r2
 8002060:	4681      	mov	r9, r0
 8002062:	4698      	mov	r8, r3
 8002064:	4331      	orrs	r1, r6
 8002066:	430c      	orrs	r4, r1
 8002068:	0763      	lsls	r3, r4, #29
 800206a:	d009      	beq.n	8002080 <__aeabi_dsub+0x11c>
 800206c:	230f      	movs	r3, #15
 800206e:	4023      	ands	r3, r4
 8002070:	2b04      	cmp	r3, #4
 8002072:	d005      	beq.n	8002080 <__aeabi_dsub+0x11c>
 8002074:	1d23      	adds	r3, r4, #4
 8002076:	42a3      	cmp	r3, r4
 8002078:	41a4      	sbcs	r4, r4
 800207a:	4264      	negs	r4, r4
 800207c:	44a1      	add	r9, r4
 800207e:	001c      	movs	r4, r3
 8002080:	464b      	mov	r3, r9
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	d400      	bmi.n	8002088 <__aeabi_dsub+0x124>
 8002086:	e0de      	b.n	8002246 <__aeabi_dsub+0x2e2>
 8002088:	4641      	mov	r1, r8
 800208a:	4b8c      	ldr	r3, [pc, #560]	; (80022bc <__aeabi_dsub+0x358>)
 800208c:	3101      	adds	r1, #1
 800208e:	4299      	cmp	r1, r3
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x130>
 8002092:	e0e7      	b.n	8002264 <__aeabi_dsub+0x300>
 8002094:	464b      	mov	r3, r9
 8002096:	488a      	ldr	r0, [pc, #552]	; (80022c0 <__aeabi_dsub+0x35c>)
 8002098:	08e4      	lsrs	r4, r4, #3
 800209a:	4003      	ands	r3, r0
 800209c:	0018      	movs	r0, r3
 800209e:	0549      	lsls	r1, r1, #21
 80020a0:	075b      	lsls	r3, r3, #29
 80020a2:	0240      	lsls	r0, r0, #9
 80020a4:	4323      	orrs	r3, r4
 80020a6:	0d4a      	lsrs	r2, r1, #21
 80020a8:	0b04      	lsrs	r4, r0, #12
 80020aa:	0512      	lsls	r2, r2, #20
 80020ac:	07ed      	lsls	r5, r5, #31
 80020ae:	4322      	orrs	r2, r4
 80020b0:	432a      	orrs	r2, r5
 80020b2:	0018      	movs	r0, r3
 80020b4:	0011      	movs	r1, r2
 80020b6:	bcf0      	pop	{r4, r5, r6, r7}
 80020b8:	46bb      	mov	fp, r7
 80020ba:	46b2      	mov	sl, r6
 80020bc:	46a9      	mov	r9, r5
 80020be:	46a0      	mov	r8, r4
 80020c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020c2:	4642      	mov	r2, r8
 80020c4:	1a12      	subs	r2, r2, r0
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	dd52      	ble.n	8002170 <__aeabi_dsub+0x20c>
 80020ca:	2800      	cmp	r0, #0
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x16c>
 80020ce:	e09c      	b.n	800220a <__aeabi_dsub+0x2a6>
 80020d0:	45a0      	cmp	r8, r4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dsub+0x172>
 80020d4:	e0ca      	b.n	800226c <__aeabi_dsub+0x308>
 80020d6:	2080      	movs	r0, #128	; 0x80
 80020d8:	0400      	lsls	r0, r0, #16
 80020da:	4301      	orrs	r1, r0
 80020dc:	2a38      	cmp	r2, #56	; 0x38
 80020de:	dd00      	ble.n	80020e2 <__aeabi_dsub+0x17e>
 80020e0:	e149      	b.n	8002376 <__aeabi_dsub+0x412>
 80020e2:	2a1f      	cmp	r2, #31
 80020e4:	dc00      	bgt.n	80020e8 <__aeabi_dsub+0x184>
 80020e6:	e197      	b.n	8002418 <__aeabi_dsub+0x4b4>
 80020e8:	0010      	movs	r0, r2
 80020ea:	000e      	movs	r6, r1
 80020ec:	3820      	subs	r0, #32
 80020ee:	40c6      	lsrs	r6, r0
 80020f0:	2a20      	cmp	r2, #32
 80020f2:	d004      	beq.n	80020fe <__aeabi_dsub+0x19a>
 80020f4:	2040      	movs	r0, #64	; 0x40
 80020f6:	1a82      	subs	r2, r0, r2
 80020f8:	4091      	lsls	r1, r2
 80020fa:	430f      	orrs	r7, r1
 80020fc:	46b9      	mov	r9, r7
 80020fe:	464c      	mov	r4, r9
 8002100:	1e62      	subs	r2, r4, #1
 8002102:	4194      	sbcs	r4, r2
 8002104:	4334      	orrs	r4, r6
 8002106:	e13a      	b.n	800237e <__aeabi_dsub+0x41a>
 8002108:	000a      	movs	r2, r1
 800210a:	433a      	orrs	r2, r7
 800210c:	d028      	beq.n	8002160 <__aeabi_dsub+0x1fc>
 800210e:	46b3      	mov	fp, r6
 8002110:	42b5      	cmp	r5, r6
 8002112:	d02b      	beq.n	800216c <__aeabi_dsub+0x208>
 8002114:	4a6b      	ldr	r2, [pc, #428]	; (80022c4 <__aeabi_dsub+0x360>)
 8002116:	4442      	add	r2, r8
 8002118:	2a00      	cmp	r2, #0
 800211a:	d05d      	beq.n	80021d8 <__aeabi_dsub+0x274>
 800211c:	4642      	mov	r2, r8
 800211e:	4644      	mov	r4, r8
 8002120:	1a82      	subs	r2, r0, r2
 8002122:	2c00      	cmp	r4, #0
 8002124:	d000      	beq.n	8002128 <__aeabi_dsub+0x1c4>
 8002126:	e0f5      	b.n	8002314 <__aeabi_dsub+0x3b0>
 8002128:	4665      	mov	r5, ip
 800212a:	431d      	orrs	r5, r3
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x1cc>
 800212e:	e19c      	b.n	800246a <__aeabi_dsub+0x506>
 8002130:	1e55      	subs	r5, r2, #1
 8002132:	2a01      	cmp	r2, #1
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x1d4>
 8002136:	e1fb      	b.n	8002530 <__aeabi_dsub+0x5cc>
 8002138:	4c60      	ldr	r4, [pc, #384]	; (80022bc <__aeabi_dsub+0x358>)
 800213a:	42a2      	cmp	r2, r4
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x1dc>
 800213e:	e1bd      	b.n	80024bc <__aeabi_dsub+0x558>
 8002140:	002a      	movs	r2, r5
 8002142:	e0f0      	b.n	8002326 <__aeabi_dsub+0x3c2>
 8002144:	0008      	movs	r0, r1
 8002146:	4338      	orrs	r0, r7
 8002148:	d100      	bne.n	800214c <__aeabi_dsub+0x1e8>
 800214a:	e0c3      	b.n	80022d4 <__aeabi_dsub+0x370>
 800214c:	1e50      	subs	r0, r2, #1
 800214e:	2a01      	cmp	r2, #1
 8002150:	d100      	bne.n	8002154 <__aeabi_dsub+0x1f0>
 8002152:	e1a8      	b.n	80024a6 <__aeabi_dsub+0x542>
 8002154:	4c59      	ldr	r4, [pc, #356]	; (80022bc <__aeabi_dsub+0x358>)
 8002156:	42a2      	cmp	r2, r4
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x1f8>
 800215a:	e087      	b.n	800226c <__aeabi_dsub+0x308>
 800215c:	0002      	movs	r2, r0
 800215e:	e736      	b.n	8001fce <__aeabi_dsub+0x6a>
 8002160:	2201      	movs	r2, #1
 8002162:	4056      	eors	r6, r2
 8002164:	46b3      	mov	fp, r6
 8002166:	42b5      	cmp	r5, r6
 8002168:	d000      	beq.n	800216c <__aeabi_dsub+0x208>
 800216a:	e721      	b.n	8001fb0 <__aeabi_dsub+0x4c>
 800216c:	4a55      	ldr	r2, [pc, #340]	; (80022c4 <__aeabi_dsub+0x360>)
 800216e:	4442      	add	r2, r8
 8002170:	2a00      	cmp	r2, #0
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x212>
 8002174:	e0b5      	b.n	80022e2 <__aeabi_dsub+0x37e>
 8002176:	4642      	mov	r2, r8
 8002178:	4644      	mov	r4, r8
 800217a:	1a82      	subs	r2, r0, r2
 800217c:	2c00      	cmp	r4, #0
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0x21e>
 8002180:	e138      	b.n	80023f4 <__aeabi_dsub+0x490>
 8002182:	4e4e      	ldr	r6, [pc, #312]	; (80022bc <__aeabi_dsub+0x358>)
 8002184:	42b0      	cmp	r0, r6
 8002186:	d100      	bne.n	800218a <__aeabi_dsub+0x226>
 8002188:	e1de      	b.n	8002548 <__aeabi_dsub+0x5e4>
 800218a:	2680      	movs	r6, #128	; 0x80
 800218c:	4664      	mov	r4, ip
 800218e:	0436      	lsls	r6, r6, #16
 8002190:	4334      	orrs	r4, r6
 8002192:	46a4      	mov	ip, r4
 8002194:	2a38      	cmp	r2, #56	; 0x38
 8002196:	dd00      	ble.n	800219a <__aeabi_dsub+0x236>
 8002198:	e196      	b.n	80024c8 <__aeabi_dsub+0x564>
 800219a:	2a1f      	cmp	r2, #31
 800219c:	dd00      	ble.n	80021a0 <__aeabi_dsub+0x23c>
 800219e:	e224      	b.n	80025ea <__aeabi_dsub+0x686>
 80021a0:	2620      	movs	r6, #32
 80021a2:	1ab4      	subs	r4, r6, r2
 80021a4:	46a2      	mov	sl, r4
 80021a6:	4664      	mov	r4, ip
 80021a8:	4656      	mov	r6, sl
 80021aa:	40b4      	lsls	r4, r6
 80021ac:	46a1      	mov	r9, r4
 80021ae:	001c      	movs	r4, r3
 80021b0:	464e      	mov	r6, r9
 80021b2:	40d4      	lsrs	r4, r2
 80021b4:	4326      	orrs	r6, r4
 80021b6:	0034      	movs	r4, r6
 80021b8:	4656      	mov	r6, sl
 80021ba:	40b3      	lsls	r3, r6
 80021bc:	1e5e      	subs	r6, r3, #1
 80021be:	41b3      	sbcs	r3, r6
 80021c0:	431c      	orrs	r4, r3
 80021c2:	4663      	mov	r3, ip
 80021c4:	40d3      	lsrs	r3, r2
 80021c6:	18c9      	adds	r1, r1, r3
 80021c8:	19e4      	adds	r4, r4, r7
 80021ca:	42bc      	cmp	r4, r7
 80021cc:	41bf      	sbcs	r7, r7
 80021ce:	427f      	negs	r7, r7
 80021d0:	46b9      	mov	r9, r7
 80021d2:	4680      	mov	r8, r0
 80021d4:	4489      	add	r9, r1
 80021d6:	e0d8      	b.n	800238a <__aeabi_dsub+0x426>
 80021d8:	4640      	mov	r0, r8
 80021da:	4c3b      	ldr	r4, [pc, #236]	; (80022c8 <__aeabi_dsub+0x364>)
 80021dc:	3001      	adds	r0, #1
 80021de:	4220      	tst	r0, r4
 80021e0:	d000      	beq.n	80021e4 <__aeabi_dsub+0x280>
 80021e2:	e0b4      	b.n	800234e <__aeabi_dsub+0x3ea>
 80021e4:	4640      	mov	r0, r8
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d000      	beq.n	80021ec <__aeabi_dsub+0x288>
 80021ea:	e144      	b.n	8002476 <__aeabi_dsub+0x512>
 80021ec:	4660      	mov	r0, ip
 80021ee:	4318      	orrs	r0, r3
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x290>
 80021f2:	e190      	b.n	8002516 <__aeabi_dsub+0x5b2>
 80021f4:	0008      	movs	r0, r1
 80021f6:	4338      	orrs	r0, r7
 80021f8:	d000      	beq.n	80021fc <__aeabi_dsub+0x298>
 80021fa:	e1aa      	b.n	8002552 <__aeabi_dsub+0x5ee>
 80021fc:	4661      	mov	r1, ip
 80021fe:	08db      	lsrs	r3, r3, #3
 8002200:	0749      	lsls	r1, r1, #29
 8002202:	430b      	orrs	r3, r1
 8002204:	4661      	mov	r1, ip
 8002206:	08cc      	lsrs	r4, r1, #3
 8002208:	e027      	b.n	800225a <__aeabi_dsub+0x2f6>
 800220a:	0008      	movs	r0, r1
 800220c:	4338      	orrs	r0, r7
 800220e:	d061      	beq.n	80022d4 <__aeabi_dsub+0x370>
 8002210:	1e50      	subs	r0, r2, #1
 8002212:	2a01      	cmp	r2, #1
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x2b4>
 8002216:	e139      	b.n	800248c <__aeabi_dsub+0x528>
 8002218:	42a2      	cmp	r2, r4
 800221a:	d027      	beq.n	800226c <__aeabi_dsub+0x308>
 800221c:	0002      	movs	r2, r0
 800221e:	e75d      	b.n	80020dc <__aeabi_dsub+0x178>
 8002220:	0002      	movs	r2, r0
 8002222:	391f      	subs	r1, #31
 8002224:	40ca      	lsrs	r2, r1
 8002226:	0011      	movs	r1, r2
 8002228:	2b20      	cmp	r3, #32
 800222a:	d003      	beq.n	8002234 <__aeabi_dsub+0x2d0>
 800222c:	2240      	movs	r2, #64	; 0x40
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	4098      	lsls	r0, r3
 8002232:	4304      	orrs	r4, r0
 8002234:	1e63      	subs	r3, r4, #1
 8002236:	419c      	sbcs	r4, r3
 8002238:	2300      	movs	r3, #0
 800223a:	4699      	mov	r9, r3
 800223c:	4698      	mov	r8, r3
 800223e:	430c      	orrs	r4, r1
 8002240:	0763      	lsls	r3, r4, #29
 8002242:	d000      	beq.n	8002246 <__aeabi_dsub+0x2e2>
 8002244:	e712      	b.n	800206c <__aeabi_dsub+0x108>
 8002246:	464b      	mov	r3, r9
 8002248:	464a      	mov	r2, r9
 800224a:	08e4      	lsrs	r4, r4, #3
 800224c:	075b      	lsls	r3, r3, #29
 800224e:	4323      	orrs	r3, r4
 8002250:	08d4      	lsrs	r4, r2, #3
 8002252:	4642      	mov	r2, r8
 8002254:	4919      	ldr	r1, [pc, #100]	; (80022bc <__aeabi_dsub+0x358>)
 8002256:	428a      	cmp	r2, r1
 8002258:	d00e      	beq.n	8002278 <__aeabi_dsub+0x314>
 800225a:	0324      	lsls	r4, r4, #12
 800225c:	0552      	lsls	r2, r2, #21
 800225e:	0b24      	lsrs	r4, r4, #12
 8002260:	0d52      	lsrs	r2, r2, #21
 8002262:	e722      	b.n	80020aa <__aeabi_dsub+0x146>
 8002264:	000a      	movs	r2, r1
 8002266:	2400      	movs	r4, #0
 8002268:	2300      	movs	r3, #0
 800226a:	e71e      	b.n	80020aa <__aeabi_dsub+0x146>
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	4662      	mov	r2, ip
 8002270:	0752      	lsls	r2, r2, #29
 8002272:	4313      	orrs	r3, r2
 8002274:	4662      	mov	r2, ip
 8002276:	08d4      	lsrs	r4, r2, #3
 8002278:	001a      	movs	r2, r3
 800227a:	4322      	orrs	r2, r4
 800227c:	d100      	bne.n	8002280 <__aeabi_dsub+0x31c>
 800227e:	e1fc      	b.n	800267a <__aeabi_dsub+0x716>
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	0312      	lsls	r2, r2, #12
 8002284:	4314      	orrs	r4, r2
 8002286:	0324      	lsls	r4, r4, #12
 8002288:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <__aeabi_dsub+0x358>)
 800228a:	0b24      	lsrs	r4, r4, #12
 800228c:	e70d      	b.n	80020aa <__aeabi_dsub+0x146>
 800228e:	0020      	movs	r0, r4
 8002290:	f000 fb74 	bl	800297c <__clzsi2>
 8002294:	0001      	movs	r1, r0
 8002296:	3118      	adds	r1, #24
 8002298:	291f      	cmp	r1, #31
 800229a:	dc00      	bgt.n	800229e <__aeabi_dsub+0x33a>
 800229c:	e6c4      	b.n	8002028 <__aeabi_dsub+0xc4>
 800229e:	3808      	subs	r0, #8
 80022a0:	4084      	lsls	r4, r0
 80022a2:	4643      	mov	r3, r8
 80022a4:	0020      	movs	r0, r4
 80022a6:	2400      	movs	r4, #0
 80022a8:	4588      	cmp	r8, r1
 80022aa:	dc00      	bgt.n	80022ae <__aeabi_dsub+0x34a>
 80022ac:	e6c8      	b.n	8002040 <__aeabi_dsub+0xdc>
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <__aeabi_dsub+0x35c>)
 80022b0:	1a5b      	subs	r3, r3, r1
 80022b2:	4010      	ands	r0, r2
 80022b4:	4698      	mov	r8, r3
 80022b6:	4681      	mov	r9, r0
 80022b8:	e6d6      	b.n	8002068 <__aeabi_dsub+0x104>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	000007ff 	.word	0x000007ff
 80022c0:	ff7fffff 	.word	0xff7fffff
 80022c4:	fffff801 	.word	0xfffff801
 80022c8:	000007fe 	.word	0x000007fe
 80022cc:	430f      	orrs	r7, r1
 80022ce:	1e7a      	subs	r2, r7, #1
 80022d0:	4197      	sbcs	r7, r2
 80022d2:	e691      	b.n	8001ff8 <__aeabi_dsub+0x94>
 80022d4:	4661      	mov	r1, ip
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	0749      	lsls	r1, r1, #29
 80022da:	430b      	orrs	r3, r1
 80022dc:	4661      	mov	r1, ip
 80022de:	08cc      	lsrs	r4, r1, #3
 80022e0:	e7b8      	b.n	8002254 <__aeabi_dsub+0x2f0>
 80022e2:	4640      	mov	r0, r8
 80022e4:	4cd3      	ldr	r4, [pc, #844]	; (8002634 <__aeabi_dsub+0x6d0>)
 80022e6:	3001      	adds	r0, #1
 80022e8:	4220      	tst	r0, r4
 80022ea:	d000      	beq.n	80022ee <__aeabi_dsub+0x38a>
 80022ec:	e0a2      	b.n	8002434 <__aeabi_dsub+0x4d0>
 80022ee:	4640      	mov	r0, r8
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d000      	beq.n	80022f6 <__aeabi_dsub+0x392>
 80022f4:	e101      	b.n	80024fa <__aeabi_dsub+0x596>
 80022f6:	4660      	mov	r0, ip
 80022f8:	4318      	orrs	r0, r3
 80022fa:	d100      	bne.n	80022fe <__aeabi_dsub+0x39a>
 80022fc:	e15e      	b.n	80025bc <__aeabi_dsub+0x658>
 80022fe:	0008      	movs	r0, r1
 8002300:	4338      	orrs	r0, r7
 8002302:	d000      	beq.n	8002306 <__aeabi_dsub+0x3a2>
 8002304:	e15f      	b.n	80025c6 <__aeabi_dsub+0x662>
 8002306:	4661      	mov	r1, ip
 8002308:	08db      	lsrs	r3, r3, #3
 800230a:	0749      	lsls	r1, r1, #29
 800230c:	430b      	orrs	r3, r1
 800230e:	4661      	mov	r1, ip
 8002310:	08cc      	lsrs	r4, r1, #3
 8002312:	e7a2      	b.n	800225a <__aeabi_dsub+0x2f6>
 8002314:	4dc8      	ldr	r5, [pc, #800]	; (8002638 <__aeabi_dsub+0x6d4>)
 8002316:	42a8      	cmp	r0, r5
 8002318:	d100      	bne.n	800231c <__aeabi_dsub+0x3b8>
 800231a:	e0cf      	b.n	80024bc <__aeabi_dsub+0x558>
 800231c:	2580      	movs	r5, #128	; 0x80
 800231e:	4664      	mov	r4, ip
 8002320:	042d      	lsls	r5, r5, #16
 8002322:	432c      	orrs	r4, r5
 8002324:	46a4      	mov	ip, r4
 8002326:	2a38      	cmp	r2, #56	; 0x38
 8002328:	dc56      	bgt.n	80023d8 <__aeabi_dsub+0x474>
 800232a:	2a1f      	cmp	r2, #31
 800232c:	dd00      	ble.n	8002330 <__aeabi_dsub+0x3cc>
 800232e:	e0d1      	b.n	80024d4 <__aeabi_dsub+0x570>
 8002330:	2520      	movs	r5, #32
 8002332:	001e      	movs	r6, r3
 8002334:	1aad      	subs	r5, r5, r2
 8002336:	4664      	mov	r4, ip
 8002338:	40ab      	lsls	r3, r5
 800233a:	40ac      	lsls	r4, r5
 800233c:	40d6      	lsrs	r6, r2
 800233e:	1e5d      	subs	r5, r3, #1
 8002340:	41ab      	sbcs	r3, r5
 8002342:	4334      	orrs	r4, r6
 8002344:	4323      	orrs	r3, r4
 8002346:	4664      	mov	r4, ip
 8002348:	40d4      	lsrs	r4, r2
 800234a:	1b09      	subs	r1, r1, r4
 800234c:	e049      	b.n	80023e2 <__aeabi_dsub+0x47e>
 800234e:	4660      	mov	r0, ip
 8002350:	1bdc      	subs	r4, r3, r7
 8002352:	1a46      	subs	r6, r0, r1
 8002354:	42a3      	cmp	r3, r4
 8002356:	4180      	sbcs	r0, r0
 8002358:	4240      	negs	r0, r0
 800235a:	4681      	mov	r9, r0
 800235c:	0030      	movs	r0, r6
 800235e:	464e      	mov	r6, r9
 8002360:	1b80      	subs	r0, r0, r6
 8002362:	4681      	mov	r9, r0
 8002364:	0200      	lsls	r0, r0, #8
 8002366:	d476      	bmi.n	8002456 <__aeabi_dsub+0x4f2>
 8002368:	464b      	mov	r3, r9
 800236a:	4323      	orrs	r3, r4
 800236c:	d000      	beq.n	8002370 <__aeabi_dsub+0x40c>
 800236e:	e652      	b.n	8002016 <__aeabi_dsub+0xb2>
 8002370:	2400      	movs	r4, #0
 8002372:	2500      	movs	r5, #0
 8002374:	e771      	b.n	800225a <__aeabi_dsub+0x2f6>
 8002376:	4339      	orrs	r1, r7
 8002378:	000c      	movs	r4, r1
 800237a:	1e62      	subs	r2, r4, #1
 800237c:	4194      	sbcs	r4, r2
 800237e:	18e4      	adds	r4, r4, r3
 8002380:	429c      	cmp	r4, r3
 8002382:	419b      	sbcs	r3, r3
 8002384:	425b      	negs	r3, r3
 8002386:	4463      	add	r3, ip
 8002388:	4699      	mov	r9, r3
 800238a:	464b      	mov	r3, r9
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	d400      	bmi.n	8002392 <__aeabi_dsub+0x42e>
 8002390:	e756      	b.n	8002240 <__aeabi_dsub+0x2dc>
 8002392:	2301      	movs	r3, #1
 8002394:	469c      	mov	ip, r3
 8002396:	4ba8      	ldr	r3, [pc, #672]	; (8002638 <__aeabi_dsub+0x6d4>)
 8002398:	44e0      	add	r8, ip
 800239a:	4598      	cmp	r8, r3
 800239c:	d038      	beq.n	8002410 <__aeabi_dsub+0x4ac>
 800239e:	464b      	mov	r3, r9
 80023a0:	48a6      	ldr	r0, [pc, #664]	; (800263c <__aeabi_dsub+0x6d8>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	4003      	ands	r3, r0
 80023a6:	0018      	movs	r0, r3
 80023a8:	0863      	lsrs	r3, r4, #1
 80023aa:	4014      	ands	r4, r2
 80023ac:	431c      	orrs	r4, r3
 80023ae:	07c3      	lsls	r3, r0, #31
 80023b0:	431c      	orrs	r4, r3
 80023b2:	0843      	lsrs	r3, r0, #1
 80023b4:	4699      	mov	r9, r3
 80023b6:	e657      	b.n	8002068 <__aeabi_dsub+0x104>
 80023b8:	0010      	movs	r0, r2
 80023ba:	000e      	movs	r6, r1
 80023bc:	3820      	subs	r0, #32
 80023be:	40c6      	lsrs	r6, r0
 80023c0:	2a20      	cmp	r2, #32
 80023c2:	d004      	beq.n	80023ce <__aeabi_dsub+0x46a>
 80023c4:	2040      	movs	r0, #64	; 0x40
 80023c6:	1a82      	subs	r2, r0, r2
 80023c8:	4091      	lsls	r1, r2
 80023ca:	430f      	orrs	r7, r1
 80023cc:	46b9      	mov	r9, r7
 80023ce:	464f      	mov	r7, r9
 80023d0:	1e7a      	subs	r2, r7, #1
 80023d2:	4197      	sbcs	r7, r2
 80023d4:	4337      	orrs	r7, r6
 80023d6:	e60f      	b.n	8001ff8 <__aeabi_dsub+0x94>
 80023d8:	4662      	mov	r2, ip
 80023da:	431a      	orrs	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	4193      	sbcs	r3, r2
 80023e2:	1afc      	subs	r4, r7, r3
 80023e4:	42a7      	cmp	r7, r4
 80023e6:	41bf      	sbcs	r7, r7
 80023e8:	427f      	negs	r7, r7
 80023ea:	1bcb      	subs	r3, r1, r7
 80023ec:	4699      	mov	r9, r3
 80023ee:	465d      	mov	r5, fp
 80023f0:	4680      	mov	r8, r0
 80023f2:	e608      	b.n	8002006 <__aeabi_dsub+0xa2>
 80023f4:	4666      	mov	r6, ip
 80023f6:	431e      	orrs	r6, r3
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x498>
 80023fa:	e0be      	b.n	800257a <__aeabi_dsub+0x616>
 80023fc:	1e56      	subs	r6, r2, #1
 80023fe:	2a01      	cmp	r2, #1
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x4a0>
 8002402:	e109      	b.n	8002618 <__aeabi_dsub+0x6b4>
 8002404:	4c8c      	ldr	r4, [pc, #560]	; (8002638 <__aeabi_dsub+0x6d4>)
 8002406:	42a2      	cmp	r2, r4
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x4a8>
 800240a:	e119      	b.n	8002640 <__aeabi_dsub+0x6dc>
 800240c:	0032      	movs	r2, r6
 800240e:	e6c1      	b.n	8002194 <__aeabi_dsub+0x230>
 8002410:	4642      	mov	r2, r8
 8002412:	2400      	movs	r4, #0
 8002414:	2300      	movs	r3, #0
 8002416:	e648      	b.n	80020aa <__aeabi_dsub+0x146>
 8002418:	2020      	movs	r0, #32
 800241a:	000c      	movs	r4, r1
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	003e      	movs	r6, r7
 8002420:	4087      	lsls	r7, r0
 8002422:	4084      	lsls	r4, r0
 8002424:	40d6      	lsrs	r6, r2
 8002426:	1e78      	subs	r0, r7, #1
 8002428:	4187      	sbcs	r7, r0
 800242a:	40d1      	lsrs	r1, r2
 800242c:	4334      	orrs	r4, r6
 800242e:	433c      	orrs	r4, r7
 8002430:	448c      	add	ip, r1
 8002432:	e7a4      	b.n	800237e <__aeabi_dsub+0x41a>
 8002434:	4a80      	ldr	r2, [pc, #512]	; (8002638 <__aeabi_dsub+0x6d4>)
 8002436:	4290      	cmp	r0, r2
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x4d8>
 800243a:	e0e9      	b.n	8002610 <__aeabi_dsub+0x6ac>
 800243c:	19df      	adds	r7, r3, r7
 800243e:	429f      	cmp	r7, r3
 8002440:	419b      	sbcs	r3, r3
 8002442:	4461      	add	r1, ip
 8002444:	425b      	negs	r3, r3
 8002446:	18c9      	adds	r1, r1, r3
 8002448:	07cc      	lsls	r4, r1, #31
 800244a:	087f      	lsrs	r7, r7, #1
 800244c:	084b      	lsrs	r3, r1, #1
 800244e:	4699      	mov	r9, r3
 8002450:	4680      	mov	r8, r0
 8002452:	433c      	orrs	r4, r7
 8002454:	e6f4      	b.n	8002240 <__aeabi_dsub+0x2dc>
 8002456:	1afc      	subs	r4, r7, r3
 8002458:	42a7      	cmp	r7, r4
 800245a:	41bf      	sbcs	r7, r7
 800245c:	4663      	mov	r3, ip
 800245e:	427f      	negs	r7, r7
 8002460:	1ac9      	subs	r1, r1, r3
 8002462:	1bcb      	subs	r3, r1, r7
 8002464:	4699      	mov	r9, r3
 8002466:	465d      	mov	r5, fp
 8002468:	e5d5      	b.n	8002016 <__aeabi_dsub+0xb2>
 800246a:	08ff      	lsrs	r7, r7, #3
 800246c:	074b      	lsls	r3, r1, #29
 800246e:	465d      	mov	r5, fp
 8002470:	433b      	orrs	r3, r7
 8002472:	08cc      	lsrs	r4, r1, #3
 8002474:	e6ee      	b.n	8002254 <__aeabi_dsub+0x2f0>
 8002476:	4662      	mov	r2, ip
 8002478:	431a      	orrs	r2, r3
 800247a:	d000      	beq.n	800247e <__aeabi_dsub+0x51a>
 800247c:	e082      	b.n	8002584 <__aeabi_dsub+0x620>
 800247e:	000b      	movs	r3, r1
 8002480:	433b      	orrs	r3, r7
 8002482:	d11b      	bne.n	80024bc <__aeabi_dsub+0x558>
 8002484:	2480      	movs	r4, #128	; 0x80
 8002486:	2500      	movs	r5, #0
 8002488:	0324      	lsls	r4, r4, #12
 800248a:	e6f9      	b.n	8002280 <__aeabi_dsub+0x31c>
 800248c:	19dc      	adds	r4, r3, r7
 800248e:	429c      	cmp	r4, r3
 8002490:	419b      	sbcs	r3, r3
 8002492:	4461      	add	r1, ip
 8002494:	4689      	mov	r9, r1
 8002496:	425b      	negs	r3, r3
 8002498:	4499      	add	r9, r3
 800249a:	464b      	mov	r3, r9
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	d444      	bmi.n	800252a <__aeabi_dsub+0x5c6>
 80024a0:	2301      	movs	r3, #1
 80024a2:	4698      	mov	r8, r3
 80024a4:	e6cc      	b.n	8002240 <__aeabi_dsub+0x2dc>
 80024a6:	1bdc      	subs	r4, r3, r7
 80024a8:	4662      	mov	r2, ip
 80024aa:	42a3      	cmp	r3, r4
 80024ac:	419b      	sbcs	r3, r3
 80024ae:	1a51      	subs	r1, r2, r1
 80024b0:	425b      	negs	r3, r3
 80024b2:	1acb      	subs	r3, r1, r3
 80024b4:	4699      	mov	r9, r3
 80024b6:	2301      	movs	r3, #1
 80024b8:	4698      	mov	r8, r3
 80024ba:	e5a4      	b.n	8002006 <__aeabi_dsub+0xa2>
 80024bc:	08ff      	lsrs	r7, r7, #3
 80024be:	074b      	lsls	r3, r1, #29
 80024c0:	465d      	mov	r5, fp
 80024c2:	433b      	orrs	r3, r7
 80024c4:	08cc      	lsrs	r4, r1, #3
 80024c6:	e6d7      	b.n	8002278 <__aeabi_dsub+0x314>
 80024c8:	4662      	mov	r2, ip
 80024ca:	431a      	orrs	r2, r3
 80024cc:	0014      	movs	r4, r2
 80024ce:	1e63      	subs	r3, r4, #1
 80024d0:	419c      	sbcs	r4, r3
 80024d2:	e679      	b.n	80021c8 <__aeabi_dsub+0x264>
 80024d4:	0015      	movs	r5, r2
 80024d6:	4664      	mov	r4, ip
 80024d8:	3d20      	subs	r5, #32
 80024da:	40ec      	lsrs	r4, r5
 80024dc:	46a0      	mov	r8, r4
 80024de:	2a20      	cmp	r2, #32
 80024e0:	d005      	beq.n	80024ee <__aeabi_dsub+0x58a>
 80024e2:	2540      	movs	r5, #64	; 0x40
 80024e4:	4664      	mov	r4, ip
 80024e6:	1aaa      	subs	r2, r5, r2
 80024e8:	4094      	lsls	r4, r2
 80024ea:	4323      	orrs	r3, r4
 80024ec:	469a      	mov	sl, r3
 80024ee:	4654      	mov	r4, sl
 80024f0:	1e63      	subs	r3, r4, #1
 80024f2:	419c      	sbcs	r4, r3
 80024f4:	4643      	mov	r3, r8
 80024f6:	4323      	orrs	r3, r4
 80024f8:	e773      	b.n	80023e2 <__aeabi_dsub+0x47e>
 80024fa:	4662      	mov	r2, ip
 80024fc:	431a      	orrs	r2, r3
 80024fe:	d023      	beq.n	8002548 <__aeabi_dsub+0x5e4>
 8002500:	000a      	movs	r2, r1
 8002502:	433a      	orrs	r2, r7
 8002504:	d000      	beq.n	8002508 <__aeabi_dsub+0x5a4>
 8002506:	e0a0      	b.n	800264a <__aeabi_dsub+0x6e6>
 8002508:	4662      	mov	r2, ip
 800250a:	08db      	lsrs	r3, r3, #3
 800250c:	0752      	lsls	r2, r2, #29
 800250e:	4313      	orrs	r3, r2
 8002510:	4662      	mov	r2, ip
 8002512:	08d4      	lsrs	r4, r2, #3
 8002514:	e6b0      	b.n	8002278 <__aeabi_dsub+0x314>
 8002516:	000b      	movs	r3, r1
 8002518:	433b      	orrs	r3, r7
 800251a:	d100      	bne.n	800251e <__aeabi_dsub+0x5ba>
 800251c:	e728      	b.n	8002370 <__aeabi_dsub+0x40c>
 800251e:	08ff      	lsrs	r7, r7, #3
 8002520:	074b      	lsls	r3, r1, #29
 8002522:	465d      	mov	r5, fp
 8002524:	433b      	orrs	r3, r7
 8002526:	08cc      	lsrs	r4, r1, #3
 8002528:	e697      	b.n	800225a <__aeabi_dsub+0x2f6>
 800252a:	2302      	movs	r3, #2
 800252c:	4698      	mov	r8, r3
 800252e:	e736      	b.n	800239e <__aeabi_dsub+0x43a>
 8002530:	1afc      	subs	r4, r7, r3
 8002532:	42a7      	cmp	r7, r4
 8002534:	41bf      	sbcs	r7, r7
 8002536:	4663      	mov	r3, ip
 8002538:	427f      	negs	r7, r7
 800253a:	1ac9      	subs	r1, r1, r3
 800253c:	1bcb      	subs	r3, r1, r7
 800253e:	4699      	mov	r9, r3
 8002540:	2301      	movs	r3, #1
 8002542:	465d      	mov	r5, fp
 8002544:	4698      	mov	r8, r3
 8002546:	e55e      	b.n	8002006 <__aeabi_dsub+0xa2>
 8002548:	074b      	lsls	r3, r1, #29
 800254a:	08ff      	lsrs	r7, r7, #3
 800254c:	433b      	orrs	r3, r7
 800254e:	08cc      	lsrs	r4, r1, #3
 8002550:	e692      	b.n	8002278 <__aeabi_dsub+0x314>
 8002552:	1bdc      	subs	r4, r3, r7
 8002554:	4660      	mov	r0, ip
 8002556:	42a3      	cmp	r3, r4
 8002558:	41b6      	sbcs	r6, r6
 800255a:	1a40      	subs	r0, r0, r1
 800255c:	4276      	negs	r6, r6
 800255e:	1b80      	subs	r0, r0, r6
 8002560:	4681      	mov	r9, r0
 8002562:	0200      	lsls	r0, r0, #8
 8002564:	d560      	bpl.n	8002628 <__aeabi_dsub+0x6c4>
 8002566:	1afc      	subs	r4, r7, r3
 8002568:	42a7      	cmp	r7, r4
 800256a:	41bf      	sbcs	r7, r7
 800256c:	4663      	mov	r3, ip
 800256e:	427f      	negs	r7, r7
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	1bcb      	subs	r3, r1, r7
 8002574:	4699      	mov	r9, r3
 8002576:	465d      	mov	r5, fp
 8002578:	e576      	b.n	8002068 <__aeabi_dsub+0x104>
 800257a:	08ff      	lsrs	r7, r7, #3
 800257c:	074b      	lsls	r3, r1, #29
 800257e:	433b      	orrs	r3, r7
 8002580:	08cc      	lsrs	r4, r1, #3
 8002582:	e667      	b.n	8002254 <__aeabi_dsub+0x2f0>
 8002584:	000a      	movs	r2, r1
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	433a      	orrs	r2, r7
 800258a:	d100      	bne.n	800258e <__aeabi_dsub+0x62a>
 800258c:	e66f      	b.n	800226e <__aeabi_dsub+0x30a>
 800258e:	4662      	mov	r2, ip
 8002590:	0752      	lsls	r2, r2, #29
 8002592:	4313      	orrs	r3, r2
 8002594:	4662      	mov	r2, ip
 8002596:	08d4      	lsrs	r4, r2, #3
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	0312      	lsls	r2, r2, #12
 800259c:	4214      	tst	r4, r2
 800259e:	d007      	beq.n	80025b0 <__aeabi_dsub+0x64c>
 80025a0:	08c8      	lsrs	r0, r1, #3
 80025a2:	4210      	tst	r0, r2
 80025a4:	d104      	bne.n	80025b0 <__aeabi_dsub+0x64c>
 80025a6:	465d      	mov	r5, fp
 80025a8:	0004      	movs	r4, r0
 80025aa:	08fb      	lsrs	r3, r7, #3
 80025ac:	0749      	lsls	r1, r1, #29
 80025ae:	430b      	orrs	r3, r1
 80025b0:	0f5a      	lsrs	r2, r3, #29
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	0752      	lsls	r2, r2, #29
 80025b8:	4313      	orrs	r3, r2
 80025ba:	e65d      	b.n	8002278 <__aeabi_dsub+0x314>
 80025bc:	074b      	lsls	r3, r1, #29
 80025be:	08ff      	lsrs	r7, r7, #3
 80025c0:	433b      	orrs	r3, r7
 80025c2:	08cc      	lsrs	r4, r1, #3
 80025c4:	e649      	b.n	800225a <__aeabi_dsub+0x2f6>
 80025c6:	19dc      	adds	r4, r3, r7
 80025c8:	429c      	cmp	r4, r3
 80025ca:	419b      	sbcs	r3, r3
 80025cc:	4461      	add	r1, ip
 80025ce:	4689      	mov	r9, r1
 80025d0:	425b      	negs	r3, r3
 80025d2:	4499      	add	r9, r3
 80025d4:	464b      	mov	r3, r9
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	d400      	bmi.n	80025dc <__aeabi_dsub+0x678>
 80025da:	e631      	b.n	8002240 <__aeabi_dsub+0x2dc>
 80025dc:	464a      	mov	r2, r9
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <__aeabi_dsub+0x6d8>)
 80025e0:	401a      	ands	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	4691      	mov	r9, r2
 80025e6:	4698      	mov	r8, r3
 80025e8:	e62a      	b.n	8002240 <__aeabi_dsub+0x2dc>
 80025ea:	0016      	movs	r6, r2
 80025ec:	4664      	mov	r4, ip
 80025ee:	3e20      	subs	r6, #32
 80025f0:	40f4      	lsrs	r4, r6
 80025f2:	46a0      	mov	r8, r4
 80025f4:	2a20      	cmp	r2, #32
 80025f6:	d005      	beq.n	8002604 <__aeabi_dsub+0x6a0>
 80025f8:	2640      	movs	r6, #64	; 0x40
 80025fa:	4664      	mov	r4, ip
 80025fc:	1ab2      	subs	r2, r6, r2
 80025fe:	4094      	lsls	r4, r2
 8002600:	4323      	orrs	r3, r4
 8002602:	469a      	mov	sl, r3
 8002604:	4654      	mov	r4, sl
 8002606:	1e63      	subs	r3, r4, #1
 8002608:	419c      	sbcs	r4, r3
 800260a:	4643      	mov	r3, r8
 800260c:	431c      	orrs	r4, r3
 800260e:	e5db      	b.n	80021c8 <__aeabi_dsub+0x264>
 8002610:	0002      	movs	r2, r0
 8002612:	2400      	movs	r4, #0
 8002614:	2300      	movs	r3, #0
 8002616:	e548      	b.n	80020aa <__aeabi_dsub+0x146>
 8002618:	19dc      	adds	r4, r3, r7
 800261a:	42bc      	cmp	r4, r7
 800261c:	41bf      	sbcs	r7, r7
 800261e:	4461      	add	r1, ip
 8002620:	4689      	mov	r9, r1
 8002622:	427f      	negs	r7, r7
 8002624:	44b9      	add	r9, r7
 8002626:	e738      	b.n	800249a <__aeabi_dsub+0x536>
 8002628:	464b      	mov	r3, r9
 800262a:	4323      	orrs	r3, r4
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x6cc>
 800262e:	e69f      	b.n	8002370 <__aeabi_dsub+0x40c>
 8002630:	e606      	b.n	8002240 <__aeabi_dsub+0x2dc>
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	000007fe 	.word	0x000007fe
 8002638:	000007ff 	.word	0x000007ff
 800263c:	ff7fffff 	.word	0xff7fffff
 8002640:	08ff      	lsrs	r7, r7, #3
 8002642:	074b      	lsls	r3, r1, #29
 8002644:	433b      	orrs	r3, r7
 8002646:	08cc      	lsrs	r4, r1, #3
 8002648:	e616      	b.n	8002278 <__aeabi_dsub+0x314>
 800264a:	4662      	mov	r2, ip
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	0752      	lsls	r2, r2, #29
 8002650:	4313      	orrs	r3, r2
 8002652:	4662      	mov	r2, ip
 8002654:	08d4      	lsrs	r4, r2, #3
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	0312      	lsls	r2, r2, #12
 800265a:	4214      	tst	r4, r2
 800265c:	d007      	beq.n	800266e <__aeabi_dsub+0x70a>
 800265e:	08c8      	lsrs	r0, r1, #3
 8002660:	4210      	tst	r0, r2
 8002662:	d104      	bne.n	800266e <__aeabi_dsub+0x70a>
 8002664:	465d      	mov	r5, fp
 8002666:	0004      	movs	r4, r0
 8002668:	08fb      	lsrs	r3, r7, #3
 800266a:	0749      	lsls	r1, r1, #29
 800266c:	430b      	orrs	r3, r1
 800266e:	0f5a      	lsrs	r2, r3, #29
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	0752      	lsls	r2, r2, #29
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	4313      	orrs	r3, r2
 8002678:	e5fe      	b.n	8002278 <__aeabi_dsub+0x314>
 800267a:	2300      	movs	r3, #0
 800267c:	4a01      	ldr	r2, [pc, #4]	; (8002684 <__aeabi_dsub+0x720>)
 800267e:	001c      	movs	r4, r3
 8002680:	e513      	b.n	80020aa <__aeabi_dsub+0x146>
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	000007ff 	.word	0x000007ff

08002688 <__aeabi_dcmpun>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	0005      	movs	r5, r0
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <__aeabi_dcmpun+0x38>)
 800268e:	031c      	lsls	r4, r3, #12
 8002690:	0016      	movs	r6, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	030a      	lsls	r2, r1, #12
 8002696:	0049      	lsls	r1, r1, #1
 8002698:	0b12      	lsrs	r2, r2, #12
 800269a:	0d49      	lsrs	r1, r1, #21
 800269c:	0b24      	lsrs	r4, r4, #12
 800269e:	0d5b      	lsrs	r3, r3, #21
 80026a0:	4281      	cmp	r1, r0
 80026a2:	d008      	beq.n	80026b6 <__aeabi_dcmpun+0x2e>
 80026a4:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <__aeabi_dcmpun+0x38>)
 80026a6:	2000      	movs	r0, #0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d103      	bne.n	80026b4 <__aeabi_dcmpun+0x2c>
 80026ac:	0020      	movs	r0, r4
 80026ae:	4330      	orrs	r0, r6
 80026b0:	1e43      	subs	r3, r0, #1
 80026b2:	4198      	sbcs	r0, r3
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
 80026b6:	2001      	movs	r0, #1
 80026b8:	432a      	orrs	r2, r5
 80026ba:	d1fb      	bne.n	80026b4 <__aeabi_dcmpun+0x2c>
 80026bc:	e7f2      	b.n	80026a4 <__aeabi_dcmpun+0x1c>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	000007ff 	.word	0x000007ff

080026c4 <__aeabi_d2iz>:
 80026c4:	000a      	movs	r2, r1
 80026c6:	b530      	push	{r4, r5, lr}
 80026c8:	4c13      	ldr	r4, [pc, #76]	; (8002718 <__aeabi_d2iz+0x54>)
 80026ca:	0053      	lsls	r3, r2, #1
 80026cc:	0309      	lsls	r1, r1, #12
 80026ce:	0005      	movs	r5, r0
 80026d0:	0b09      	lsrs	r1, r1, #12
 80026d2:	2000      	movs	r0, #0
 80026d4:	0d5b      	lsrs	r3, r3, #21
 80026d6:	0fd2      	lsrs	r2, r2, #31
 80026d8:	42a3      	cmp	r3, r4
 80026da:	dd04      	ble.n	80026e6 <__aeabi_d2iz+0x22>
 80026dc:	480f      	ldr	r0, [pc, #60]	; (800271c <__aeabi_d2iz+0x58>)
 80026de:	4283      	cmp	r3, r0
 80026e0:	dd02      	ble.n	80026e8 <__aeabi_d2iz+0x24>
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <__aeabi_d2iz+0x5c>)
 80026e4:	18d0      	adds	r0, r2, r3
 80026e6:	bd30      	pop	{r4, r5, pc}
 80026e8:	2080      	movs	r0, #128	; 0x80
 80026ea:	0340      	lsls	r0, r0, #13
 80026ec:	4301      	orrs	r1, r0
 80026ee:	480d      	ldr	r0, [pc, #52]	; (8002724 <__aeabi_d2iz+0x60>)
 80026f0:	1ac0      	subs	r0, r0, r3
 80026f2:	281f      	cmp	r0, #31
 80026f4:	dd08      	ble.n	8002708 <__aeabi_d2iz+0x44>
 80026f6:	480c      	ldr	r0, [pc, #48]	; (8002728 <__aeabi_d2iz+0x64>)
 80026f8:	1ac3      	subs	r3, r0, r3
 80026fa:	40d9      	lsrs	r1, r3
 80026fc:	000b      	movs	r3, r1
 80026fe:	4258      	negs	r0, r3
 8002700:	2a00      	cmp	r2, #0
 8002702:	d1f0      	bne.n	80026e6 <__aeabi_d2iz+0x22>
 8002704:	0018      	movs	r0, r3
 8002706:	e7ee      	b.n	80026e6 <__aeabi_d2iz+0x22>
 8002708:	4c08      	ldr	r4, [pc, #32]	; (800272c <__aeabi_d2iz+0x68>)
 800270a:	40c5      	lsrs	r5, r0
 800270c:	46a4      	mov	ip, r4
 800270e:	4463      	add	r3, ip
 8002710:	4099      	lsls	r1, r3
 8002712:	000b      	movs	r3, r1
 8002714:	432b      	orrs	r3, r5
 8002716:	e7f2      	b.n	80026fe <__aeabi_d2iz+0x3a>
 8002718:	000003fe 	.word	0x000003fe
 800271c:	0000041d 	.word	0x0000041d
 8002720:	7fffffff 	.word	0x7fffffff
 8002724:	00000433 	.word	0x00000433
 8002728:	00000413 	.word	0x00000413
 800272c:	fffffbed 	.word	0xfffffbed

08002730 <__aeabi_i2d>:
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	2800      	cmp	r0, #0
 8002734:	d016      	beq.n	8002764 <__aeabi_i2d+0x34>
 8002736:	17c3      	asrs	r3, r0, #31
 8002738:	18c5      	adds	r5, r0, r3
 800273a:	405d      	eors	r5, r3
 800273c:	0fc4      	lsrs	r4, r0, #31
 800273e:	0028      	movs	r0, r5
 8002740:	f000 f91c 	bl	800297c <__clzsi2>
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <__aeabi_i2d+0x5c>)
 8002746:	1a12      	subs	r2, r2, r0
 8002748:	280a      	cmp	r0, #10
 800274a:	dc16      	bgt.n	800277a <__aeabi_i2d+0x4a>
 800274c:	0003      	movs	r3, r0
 800274e:	002e      	movs	r6, r5
 8002750:	3315      	adds	r3, #21
 8002752:	409e      	lsls	r6, r3
 8002754:	230b      	movs	r3, #11
 8002756:	1a18      	subs	r0, r3, r0
 8002758:	40c5      	lsrs	r5, r0
 800275a:	0552      	lsls	r2, r2, #21
 800275c:	032d      	lsls	r5, r5, #12
 800275e:	0b2d      	lsrs	r5, r5, #12
 8002760:	0d53      	lsrs	r3, r2, #21
 8002762:	e003      	b.n	800276c <__aeabi_i2d+0x3c>
 8002764:	2400      	movs	r4, #0
 8002766:	2300      	movs	r3, #0
 8002768:	2500      	movs	r5, #0
 800276a:	2600      	movs	r6, #0
 800276c:	051b      	lsls	r3, r3, #20
 800276e:	432b      	orrs	r3, r5
 8002770:	07e4      	lsls	r4, r4, #31
 8002772:	4323      	orrs	r3, r4
 8002774:	0030      	movs	r0, r6
 8002776:	0019      	movs	r1, r3
 8002778:	bd70      	pop	{r4, r5, r6, pc}
 800277a:	380b      	subs	r0, #11
 800277c:	4085      	lsls	r5, r0
 800277e:	0552      	lsls	r2, r2, #21
 8002780:	032d      	lsls	r5, r5, #12
 8002782:	2600      	movs	r6, #0
 8002784:	0b2d      	lsrs	r5, r5, #12
 8002786:	0d53      	lsrs	r3, r2, #21
 8002788:	e7f0      	b.n	800276c <__aeabi_i2d+0x3c>
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	0000041e 	.word	0x0000041e

08002790 <__aeabi_ui2d>:
 8002790:	b510      	push	{r4, lr}
 8002792:	1e04      	subs	r4, r0, #0
 8002794:	d010      	beq.n	80027b8 <__aeabi_ui2d+0x28>
 8002796:	f000 f8f1 	bl	800297c <__clzsi2>
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <__aeabi_ui2d+0x48>)
 800279c:	1a1b      	subs	r3, r3, r0
 800279e:	280a      	cmp	r0, #10
 80027a0:	dc11      	bgt.n	80027c6 <__aeabi_ui2d+0x36>
 80027a2:	220b      	movs	r2, #11
 80027a4:	0021      	movs	r1, r4
 80027a6:	1a12      	subs	r2, r2, r0
 80027a8:	40d1      	lsrs	r1, r2
 80027aa:	3015      	adds	r0, #21
 80027ac:	030a      	lsls	r2, r1, #12
 80027ae:	055b      	lsls	r3, r3, #21
 80027b0:	4084      	lsls	r4, r0
 80027b2:	0b12      	lsrs	r2, r2, #12
 80027b4:	0d5b      	lsrs	r3, r3, #21
 80027b6:	e001      	b.n	80027bc <__aeabi_ui2d+0x2c>
 80027b8:	2300      	movs	r3, #0
 80027ba:	2200      	movs	r2, #0
 80027bc:	051b      	lsls	r3, r3, #20
 80027be:	4313      	orrs	r3, r2
 80027c0:	0020      	movs	r0, r4
 80027c2:	0019      	movs	r1, r3
 80027c4:	bd10      	pop	{r4, pc}
 80027c6:	0022      	movs	r2, r4
 80027c8:	380b      	subs	r0, #11
 80027ca:	4082      	lsls	r2, r0
 80027cc:	055b      	lsls	r3, r3, #21
 80027ce:	0312      	lsls	r2, r2, #12
 80027d0:	2400      	movs	r4, #0
 80027d2:	0b12      	lsrs	r2, r2, #12
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	e7f1      	b.n	80027bc <__aeabi_ui2d+0x2c>
 80027d8:	0000041e 	.word	0x0000041e

080027dc <__aeabi_f2d>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	0043      	lsls	r3, r0, #1
 80027e0:	0246      	lsls	r6, r0, #9
 80027e2:	0fc4      	lsrs	r4, r0, #31
 80027e4:	20fe      	movs	r0, #254	; 0xfe
 80027e6:	0e1b      	lsrs	r3, r3, #24
 80027e8:	1c59      	adds	r1, r3, #1
 80027ea:	0a75      	lsrs	r5, r6, #9
 80027ec:	4208      	tst	r0, r1
 80027ee:	d00c      	beq.n	800280a <__aeabi_f2d+0x2e>
 80027f0:	22e0      	movs	r2, #224	; 0xe0
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	4694      	mov	ip, r2
 80027f6:	076d      	lsls	r5, r5, #29
 80027f8:	0b36      	lsrs	r6, r6, #12
 80027fa:	4463      	add	r3, ip
 80027fc:	051b      	lsls	r3, r3, #20
 80027fe:	4333      	orrs	r3, r6
 8002800:	07e4      	lsls	r4, r4, #31
 8002802:	4323      	orrs	r3, r4
 8002804:	0028      	movs	r0, r5
 8002806:	0019      	movs	r1, r3
 8002808:	bd70      	pop	{r4, r5, r6, pc}
 800280a:	2b00      	cmp	r3, #0
 800280c:	d114      	bne.n	8002838 <__aeabi_f2d+0x5c>
 800280e:	2d00      	cmp	r5, #0
 8002810:	d01b      	beq.n	800284a <__aeabi_f2d+0x6e>
 8002812:	0028      	movs	r0, r5
 8002814:	f000 f8b2 	bl	800297c <__clzsi2>
 8002818:	280a      	cmp	r0, #10
 800281a:	dc1c      	bgt.n	8002856 <__aeabi_f2d+0x7a>
 800281c:	230b      	movs	r3, #11
 800281e:	002e      	movs	r6, r5
 8002820:	1a1b      	subs	r3, r3, r0
 8002822:	40de      	lsrs	r6, r3
 8002824:	0003      	movs	r3, r0
 8002826:	3315      	adds	r3, #21
 8002828:	409d      	lsls	r5, r3
 800282a:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <__aeabi_f2d+0x88>)
 800282c:	0336      	lsls	r6, r6, #12
 800282e:	1a12      	subs	r2, r2, r0
 8002830:	0552      	lsls	r2, r2, #21
 8002832:	0b36      	lsrs	r6, r6, #12
 8002834:	0d53      	lsrs	r3, r2, #21
 8002836:	e7e1      	b.n	80027fc <__aeabi_f2d+0x20>
 8002838:	2d00      	cmp	r5, #0
 800283a:	d009      	beq.n	8002850 <__aeabi_f2d+0x74>
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	0b36      	lsrs	r6, r6, #12
 8002840:	0312      	lsls	r2, r2, #12
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <__aeabi_f2d+0x8c>)
 8002844:	076d      	lsls	r5, r5, #29
 8002846:	4316      	orrs	r6, r2
 8002848:	e7d8      	b.n	80027fc <__aeabi_f2d+0x20>
 800284a:	2300      	movs	r3, #0
 800284c:	2600      	movs	r6, #0
 800284e:	e7d5      	b.n	80027fc <__aeabi_f2d+0x20>
 8002850:	2600      	movs	r6, #0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <__aeabi_f2d+0x8c>)
 8002854:	e7d2      	b.n	80027fc <__aeabi_f2d+0x20>
 8002856:	0003      	movs	r3, r0
 8002858:	3b0b      	subs	r3, #11
 800285a:	409d      	lsls	r5, r3
 800285c:	002e      	movs	r6, r5
 800285e:	2500      	movs	r5, #0
 8002860:	e7e3      	b.n	800282a <__aeabi_f2d+0x4e>
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	00000389 	.word	0x00000389
 8002868:	000007ff 	.word	0x000007ff

0800286c <__aeabi_d2f>:
 800286c:	0002      	movs	r2, r0
 800286e:	004b      	lsls	r3, r1, #1
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	0d5b      	lsrs	r3, r3, #21
 8002874:	030c      	lsls	r4, r1, #12
 8002876:	4e3d      	ldr	r6, [pc, #244]	; (800296c <__aeabi_d2f+0x100>)
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f40      	lsrs	r0, r0, #29
 800287c:	1c5f      	adds	r7, r3, #1
 800287e:	0fc9      	lsrs	r1, r1, #31
 8002880:	4304      	orrs	r4, r0
 8002882:	00d5      	lsls	r5, r2, #3
 8002884:	4237      	tst	r7, r6
 8002886:	d00a      	beq.n	800289e <__aeabi_d2f+0x32>
 8002888:	4839      	ldr	r0, [pc, #228]	; (8002970 <__aeabi_d2f+0x104>)
 800288a:	181e      	adds	r6, r3, r0
 800288c:	2efe      	cmp	r6, #254	; 0xfe
 800288e:	dd16      	ble.n	80028be <__aeabi_d2f+0x52>
 8002890:	20ff      	movs	r0, #255	; 0xff
 8002892:	2400      	movs	r4, #0
 8002894:	05c0      	lsls	r0, r0, #23
 8002896:	4320      	orrs	r0, r4
 8002898:	07c9      	lsls	r1, r1, #31
 800289a:	4308      	orrs	r0, r1
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <__aeabi_d2f+0x44>
 80028a2:	432c      	orrs	r4, r5
 80028a4:	d026      	beq.n	80028f4 <__aeabi_d2f+0x88>
 80028a6:	2205      	movs	r2, #5
 80028a8:	0192      	lsls	r2, r2, #6
 80028aa:	0a54      	lsrs	r4, r2, #9
 80028ac:	b2d8      	uxtb	r0, r3
 80028ae:	e7f1      	b.n	8002894 <__aeabi_d2f+0x28>
 80028b0:	4325      	orrs	r5, r4
 80028b2:	d0ed      	beq.n	8002890 <__aeabi_d2f+0x24>
 80028b4:	2080      	movs	r0, #128	; 0x80
 80028b6:	03c0      	lsls	r0, r0, #15
 80028b8:	4304      	orrs	r4, r0
 80028ba:	20ff      	movs	r0, #255	; 0xff
 80028bc:	e7ea      	b.n	8002894 <__aeabi_d2f+0x28>
 80028be:	2e00      	cmp	r6, #0
 80028c0:	dd1b      	ble.n	80028fa <__aeabi_d2f+0x8e>
 80028c2:	0192      	lsls	r2, r2, #6
 80028c4:	1e53      	subs	r3, r2, #1
 80028c6:	419a      	sbcs	r2, r3
 80028c8:	00e4      	lsls	r4, r4, #3
 80028ca:	0f6d      	lsrs	r5, r5, #29
 80028cc:	4322      	orrs	r2, r4
 80028ce:	432a      	orrs	r2, r5
 80028d0:	0753      	lsls	r3, r2, #29
 80028d2:	d048      	beq.n	8002966 <__aeabi_d2f+0xfa>
 80028d4:	230f      	movs	r3, #15
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d000      	beq.n	80028de <__aeabi_d2f+0x72>
 80028dc:	3204      	adds	r2, #4
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	04db      	lsls	r3, r3, #19
 80028e2:	4013      	ands	r3, r2
 80028e4:	d03f      	beq.n	8002966 <__aeabi_d2f+0xfa>
 80028e6:	1c70      	adds	r0, r6, #1
 80028e8:	2efe      	cmp	r6, #254	; 0xfe
 80028ea:	d0d1      	beq.n	8002890 <__aeabi_d2f+0x24>
 80028ec:	0192      	lsls	r2, r2, #6
 80028ee:	0a54      	lsrs	r4, r2, #9
 80028f0:	b2c0      	uxtb	r0, r0
 80028f2:	e7cf      	b.n	8002894 <__aeabi_d2f+0x28>
 80028f4:	2000      	movs	r0, #0
 80028f6:	2400      	movs	r4, #0
 80028f8:	e7cc      	b.n	8002894 <__aeabi_d2f+0x28>
 80028fa:	0032      	movs	r2, r6
 80028fc:	3217      	adds	r2, #23
 80028fe:	db22      	blt.n	8002946 <__aeabi_d2f+0xda>
 8002900:	2080      	movs	r0, #128	; 0x80
 8002902:	0400      	lsls	r0, r0, #16
 8002904:	4320      	orrs	r0, r4
 8002906:	241e      	movs	r4, #30
 8002908:	1ba4      	subs	r4, r4, r6
 800290a:	2c1f      	cmp	r4, #31
 800290c:	dd1d      	ble.n	800294a <__aeabi_d2f+0xde>
 800290e:	2202      	movs	r2, #2
 8002910:	4252      	negs	r2, r2
 8002912:	1b96      	subs	r6, r2, r6
 8002914:	0002      	movs	r2, r0
 8002916:	40f2      	lsrs	r2, r6
 8002918:	0016      	movs	r6, r2
 800291a:	2c20      	cmp	r4, #32
 800291c:	d004      	beq.n	8002928 <__aeabi_d2f+0xbc>
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <__aeabi_d2f+0x108>)
 8002920:	4694      	mov	ip, r2
 8002922:	4463      	add	r3, ip
 8002924:	4098      	lsls	r0, r3
 8002926:	4305      	orrs	r5, r0
 8002928:	002a      	movs	r2, r5
 800292a:	1e53      	subs	r3, r2, #1
 800292c:	419a      	sbcs	r2, r3
 800292e:	4332      	orrs	r2, r6
 8002930:	2600      	movs	r6, #0
 8002932:	0753      	lsls	r3, r2, #29
 8002934:	d1ce      	bne.n	80028d4 <__aeabi_d2f+0x68>
 8002936:	2480      	movs	r4, #128	; 0x80
 8002938:	0013      	movs	r3, r2
 800293a:	04e4      	lsls	r4, r4, #19
 800293c:	2001      	movs	r0, #1
 800293e:	4023      	ands	r3, r4
 8002940:	4222      	tst	r2, r4
 8002942:	d1d3      	bne.n	80028ec <__aeabi_d2f+0x80>
 8002944:	e7b0      	b.n	80028a8 <__aeabi_d2f+0x3c>
 8002946:	2300      	movs	r3, #0
 8002948:	e7ad      	b.n	80028a6 <__aeabi_d2f+0x3a>
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <__aeabi_d2f+0x10c>)
 800294c:	4694      	mov	ip, r2
 800294e:	002a      	movs	r2, r5
 8002950:	40e2      	lsrs	r2, r4
 8002952:	0014      	movs	r4, r2
 8002954:	002a      	movs	r2, r5
 8002956:	4463      	add	r3, ip
 8002958:	409a      	lsls	r2, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	1e55      	subs	r5, r2, #1
 800295e:	41aa      	sbcs	r2, r5
 8002960:	4302      	orrs	r2, r0
 8002962:	4322      	orrs	r2, r4
 8002964:	e7e4      	b.n	8002930 <__aeabi_d2f+0xc4>
 8002966:	0033      	movs	r3, r6
 8002968:	e79e      	b.n	80028a8 <__aeabi_d2f+0x3c>
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	000007fe 	.word	0x000007fe
 8002970:	fffffc80 	.word	0xfffffc80
 8002974:	fffffca2 	.word	0xfffffca2
 8002978:	fffffc82 	.word	0xfffffc82

0800297c <__clzsi2>:
 800297c:	211c      	movs	r1, #28
 800297e:	2301      	movs	r3, #1
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	4298      	cmp	r0, r3
 8002984:	d301      	bcc.n	800298a <__clzsi2+0xe>
 8002986:	0c00      	lsrs	r0, r0, #16
 8002988:	3910      	subs	r1, #16
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	4298      	cmp	r0, r3
 800298e:	d301      	bcc.n	8002994 <__clzsi2+0x18>
 8002990:	0a00      	lsrs	r0, r0, #8
 8002992:	3908      	subs	r1, #8
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	4298      	cmp	r0, r3
 8002998:	d301      	bcc.n	800299e <__clzsi2+0x22>
 800299a:	0900      	lsrs	r0, r0, #4
 800299c:	3904      	subs	r1, #4
 800299e:	a202      	add	r2, pc, #8	; (adr r2, 80029a8 <__clzsi2+0x2c>)
 80029a0:	5c10      	ldrb	r0, [r2, r0]
 80029a2:	1840      	adds	r0, r0, r1
 80029a4:	4770      	bx	lr
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	02020304 	.word	0x02020304
 80029ac:	01010101 	.word	0x01010101
	...

080029b8 <btn_progress_loop>:
#include "button.h"

void btn_progress_loop(button_t *btn, uint8_t status)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b08b      	sub	sp, #44	; 0x2c
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	000a      	movs	r2, r1
 80029c2:	1cfb      	adds	r3, r7, #3
 80029c4:	701a      	strb	r2, [r3, #0]
	uint8_t check_stt;

	check_stt = status;
 80029c6:	2127      	movs	r1, #39	; 0x27
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	1cfa      	adds	r2, r7, #3
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	701a      	strb	r2, [r3, #0]
	if (btn->pinStt)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <btn_progress_loop+0x2c>
	{
		check_stt = btn->pinStt();
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	187c      	adds	r4, r7, r1
 80029de:	4798      	blx	r3
 80029e0:	0003      	movs	r3, r0
 80029e2:	7023      	strb	r3, [r4, #0]
	}

	if (check_stt)
 80029e4:	2327      	movs	r3, #39	; 0x27
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d100      	bne.n	80029f0 <btn_progress_loop+0x38>
 80029ee:	e091      	b.n	8002b14 <btn_progress_loop+0x15c>
	{
		switch (btn->state)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	d900      	bls.n	80029fa <btn_progress_loop+0x42>
 80029f8:	e080      	b.n	8002afc <btn_progress_loop+0x144>
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <btn_progress_loop+0x274>)
 80029fe:	18d3      	adds	r3, r2, r3
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	469f      	mov	pc, r3
		{
		case _BTN_null:
			btn->state = _BTN_init;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIME_INIT_PRESS);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	2132      	movs	r1, #50	; 0x32
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 fb39 	bl	8003088 <timer_set>
			btn->process._timeBeginHold = timer_getTick();
 8002a16:	f000 fb1f 	bl	8003058 <timer_getTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8002a20:	e077      	b.n	8002b12 <btn_progress_loop+0x15a>

		case _BTN_init:
			if (timer_expired(&btn->process._timeout))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3314      	adds	r3, #20
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fb58 	bl	80030dc <timer_expired>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d067      	beq.n	8002b00 <btn_progress_loop+0x148>
				btn->state = _BTN_isPress;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	701a      	strb	r2, [r3, #0]
			break;
 8002a36:	e063      	b.n	8002b00 <btn_progress_loop+0x148>

		case _BTN_isPress:
			btn->state = _BTN_wait_hold;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIME_HOLD_ACTIVE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3314      	adds	r3, #20
 8002a42:	22fa      	movs	r2, #250	; 0xfa
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 fb1d 	bl	8003088 <timer_set>

			// callback Press
			if (btn->cb_function)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d056      	beq.n	8002b04 <btn_progress_loop+0x14c>
			{
				bt_typeArg_t ArgValue;
				ArgValue.event = BUTTON_PRESS;
 8002a56:	2320      	movs	r3, #32
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]

				btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	8910      	ldrh	r0, [r2, #8]
 8002a66:	6a3a      	ldr	r2, [r7, #32]
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4798      	blx	r3
			}

			break;
 8002a6c:	e04a      	b.n	8002b04 <btn_progress_loop+0x14c>

		case _BTN_wait_hold:
			if (timer_expired(&btn->process._timeout))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3314      	adds	r3, #20
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fb32 	bl	80030dc <timer_expired>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d045      	beq.n	8002b08 <btn_progress_loop+0x150>
			{
				btn->state = _BTN_isHold;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	701a      	strb	r2, [r3, #0]
				// callbak hold Release
				if (btn->cb_function)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d03e      	beq.n	8002b08 <btn_progress_loop+0x150>
				{
					bt_typeArg_t ArgValue;
					ArgValue.event = BUTTON_HOLD_PRESS;
 8002a8a:	231c      	movs	r3, #28
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2204      	movs	r2, #4
 8002a90:	701a      	strb	r2, [r3, #0]
					btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	8910      	ldrh	r0, [r2, #8]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4798      	blx	r3
				}
			}
			break;
 8002aa0:	e032      	b.n	8002b08 <btn_progress_loop+0x150>

		case _BTN_wait_clrMultiClick:
			// restart init ...
			if (!timer_expired(&btn->process._timeout))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fb18 	bl	80030dc <timer_expired>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d12d      	bne.n	8002b0c <btn_progress_loop+0x154>
			{
				btn->state = _BTN_init;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
				timer_set(&btn->process._timeout, _TIME_INIT_PRESS);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3314      	adds	r3, #20
 8002aba:	2132      	movs	r1, #50	; 0x32
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 fae3 	bl	8003088 <timer_set>
				btn->process._timeBeginHold = timer_getTick();
 8002ac2:	f000 fac9 	bl	8003058 <timer_getTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
 8002acc:	e01e      	b.n	8002b0c <btn_progress_loop+0x154>

		case _BTN_isHold:
			btn->timeHold = timer_getTick() - btn->process._timeBeginHold;
 8002ace:	f000 fac3 	bl	8003058 <timer_getTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]

			// callback Hold on
			if (btn->cb_function)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d014      	beq.n	8002b10 <btn_progress_loop+0x158>
			{
				bt_typeArg_t ArgValue;
				ArgValue.holdInterval_ms = btn->timeHold;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
				btn->cb_function(btn->ID, _BUTTON_FUNC_HOLD, ArgValue);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	8910      	ldrh	r0, [r2, #8]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	2102      	movs	r1, #2
 8002af8:	4798      	blx	r3
			}

			break;
 8002afa:	e009      	b.n	8002b10 <btn_progress_loop+0x158>

		default:
			break;
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	e091      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	e08f      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	e08d      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	e08b      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	e089      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002b10:	46c0      	nop			; (mov r8, r8)
		}
		return;
 8002b12:	e087      	b.n	8002c24 <btn_progress_loop+0x26c>
	}
	// is release
	else
	{
		switch (btn->state)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d900      	bls.n	8002b20 <btn_progress_loop+0x168>
 8002b1e:	e078      	b.n	8002c12 <btn_progress_loop+0x25a>
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <btn_progress_loop+0x278>)
 8002b24:	18d3      	adds	r3, r2, r3
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	469f      	mov	pc, r3
		{
		case _BTN_wait_hold:
			btn->state = _BTN_isRelease;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIME_INIT_RELEASE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3314      	adds	r3, #20
 8002b34:	2132      	movs	r1, #50	; 0x32
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 faa6 	bl	8003088 <timer_set>
			break;
 8002b3c:	e072      	b.n	8002c24 <btn_progress_loop+0x26c>

		case _BTN_isRelease:
			if (timer_expired(&btn->process._timeout))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3314      	adds	r3, #20
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 faca 	bl	80030dc <timer_expired>
 8002b48:	1e03      	subs	r3, r0, #0
 8002b4a:	d066      	beq.n	8002c1a <btn_progress_loop+0x262>
			{
				btn->state = _BTN_isClick;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2206      	movs	r2, #6
 8002b50:	701a      	strb	r2, [r3, #0]
				btn->multiClick++;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	705a      	strb	r2, [r3, #1]

				// callback every click
				if (btn->cb_function)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <btn_progress_loop+0x1c4>
				{
					bt_typeArg_t ArgValue;
					ArgValue.event = BUTTON_ONECLICK;
 8002b66:	2314      	movs	r3, #20
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	701a      	strb	r2, [r3, #0]
					btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	8910      	ldrh	r0, [r2, #8]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4798      	blx	r3
				}

				// callback multiClick
				if (btn->cb_function)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d04a      	beq.n	8002c1a <btn_progress_loop+0x262>
				{
					bt_typeArg_t ArgValue;
					ArgValue.numClick = btn->multiClick;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	785a      	ldrb	r2, [r3, #1]
 8002b88:	2310      	movs	r3, #16
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	701a      	strb	r2, [r3, #0]
					// if( btn->multiClick > 2)
					btn->cb_function(btn->ID, _BUTTON_FUNC_MULCLICK, ArgValue);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	8910      	ldrh	r0, [r2, #8]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4798      	blx	r3
				}
			}

			break;
 8002b9c:	e03d      	b.n	8002c1a <btn_progress_loop+0x262>

		case _BTN_isHold:
			btn->state = _BTN_hold_pass;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2209      	movs	r2, #9
 8002ba2:	701a      	strb	r2, [r3, #0]
			timer_stop(&btn->process._timeout);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fabd 	bl	8003128 <timer_stop>
			btn->multiClick = 0;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	705a      	strb	r2, [r3, #1]

			// callbak hold Release
			if (btn->cb_function)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d030      	beq.n	8002c1e <btn_progress_loop+0x266>
			{
				bt_typeArg_t ArgValue;
				ArgValue.event = BUTTON_HOLD_RELEASE;
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	701a      	strb	r2, [r3, #0]
				btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	8910      	ldrh	r0, [r2, #8]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4798      	blx	r3
			}

			break;
 8002bd2:	e024      	b.n	8002c1e <btn_progress_loop+0x266>

		case _BTN_isClick:
			btn->state = _BTN_wait_clrMultiClick;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIMEOUT_MULTICLICK);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	22fa      	movs	r2, #250	; 0xfa
 8002be0:	0052      	lsls	r2, r2, #1
 8002be2:	0011      	movs	r1, r2
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 fa4f 	bl	8003088 <timer_set>

			break;
 8002bea:	e01b      	b.n	8002c24 <btn_progress_loop+0x26c>

		case _BTN_wait_clrMultiClick:
			if (timer_expired(&btn->process._timeout))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3314      	adds	r3, #20
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f000 fa73 	bl	80030dc <timer_expired>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d013      	beq.n	8002c22 <btn_progress_loop+0x26a>
			{
				btn->state = _BTN_null;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
				timer_stop(&btn->process._timeout);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3314      	adds	r3, #20
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 fa8f 	bl	8003128 <timer_stop>
				btn->multiClick = 0;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	705a      	strb	r2, [r3, #1]
			}
			break;
 8002c10:	e007      	b.n	8002c22 <btn_progress_loop+0x26a>

		default:
			btn->state = _BTN_null;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e004      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	e002      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	e000      	b.n	8002c24 <btn_progress_loop+0x26c>
			break;
 8002c22:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b00b      	add	sp, #44	; 0x2c
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	0801003c 	.word	0x0801003c
 8002c30:	0801005c 	.word	0x0801005c

08002c34 <OUTPUT_configInit>:
#include "output.h"

void OUTPUT_configInit(OUTPUT_t *tmp, __OutBaseCtrl pinBaseCtrl, __OutEventBlinkCallBack cb_evenOutput)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	tmp->pinBaseCtrl = pinBaseCtrl;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24
	tmp->cb_eventFunction = cb_evenOutput;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <OUTPUT_setOff>:

void OUTPUT_setOff(OUTPUT_t *tmp, clock_time_t delayBegin_ms)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
	if (tmp->pinBaseCtrl)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d028      	beq.n	8002cb8 <OUTPUT_setOff+0x64>
	{
		tmp->mode = OUT_MODE_OFF;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
		if (delayBegin_ms)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <OUTPUT_setOff+0x34>
		{
			tmp->state = OUT_STATE_WAIT_START;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	705a      	strb	r2, [r3, #1]
			timer_set(&tmp->_timeOut, delayBegin_ms);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3314      	adds	r3, #20
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	0011      	movs	r1, r2
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 fa01 	bl	8003088 <timer_set>
			{
				tmp->cb_eventFunction(OUT_EVENT_OFF_AFTER, 0);
			}
		}
	}
}
 8002c86:	e017      	b.n	8002cb8 <OUTPUT_setOff+0x64>
			tmp->state = OUT_state_finished;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	705a      	strb	r2, [r3, #1]
			tmp->pinBaseCtrl(0);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2000      	movs	r0, #0
 8002c94:	4798      	blx	r3
			timer_stop(&tmp->_timeOut);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3314      	adds	r3, #20
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 fa44 	bl	8003128 <timer_stop>
			tmp->val_timeLine = 0;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
			if (tmp->cb_eventFunction)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <OUTPUT_setOff+0x64>
				tmp->cb_eventFunction(OUT_EVENT_OFF_AFTER, 0);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	4798      	blx	r3
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <OUTPUT_setBlink>:
		}
	}
}

void OUTPUT_setBlink(OUTPUT_t *tmp, uint8_t repeat, clock_time_t dutyON_ms, clock_time_t perriod_ms, uint8_t nonStop)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	240b      	movs	r4, #11
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	1c0a      	adds	r2, r1, #0
 8002cd2:	701a      	strb	r2, [r3, #0]

	if (tmp->pinBaseCtrl)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d044      	beq.n	8002d66 <OUTPUT_setBlink+0xa6>
	{
		// Wrong parameter
		if (repeat == 0)
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d03b      	beq.n	8002d5c <OUTPUT_setBlink+0x9c>
			return;
		if (dutyON_ms == 0)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d03a      	beq.n	8002d60 <OUTPUT_setBlink+0xa0>
			return;
		if (perriod_ms <= dutyON_ms)
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d938      	bls.n	8002d64 <OUTPUT_setBlink+0xa4>
			return;

		tmp->pinBaseCtrl(1);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	4798      	blx	r3
		tmp->mode = OUT_MODE_BLINK;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	701a      	strb	r2, [r3, #0]
		tmp->state = OUT_STATE_ON;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	705a      	strb	r2, [r3, #1]
		tmp->ena_nonStop = nonStop;
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	2318      	movs	r3, #24
 8002d0a:	2108      	movs	r1, #8
 8002d0c:	185b      	adds	r3, r3, r1
 8002d0e:	19db      	adds	r3, r3, r7
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	7093      	strb	r3, [r2, #2]
		tmp->repeat_num = repeat;
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	809a      	strh	r2, [r3, #4]
		tmp->repeat_cnt = 0;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	80da      	strh	r2, [r3, #6]
		tmp->val_Duty = dutyON_ms;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
		tmp->val_perriod = perriod_ms;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	60da      	str	r2, [r3, #12]
		timer_set(&tmp->_timeOut, tmp->val_Duty);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3314      	adds	r3, #20
 8002d34:	001a      	movs	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	0010      	movs	r0, r2
 8002d3e:	f000 f9a3 	bl	8003088 <timer_set>
		tmp->val_timeLine = 0;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
		// callback event ON when start blink
		if (tmp->cb_eventFunction)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <OUTPUT_setBlink+0xa6>
		{
			tmp->cb_eventFunction(OUT_EVENT_ON_AFTER, 0);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	2100      	movs	r1, #0
 8002d56:	2000      	movs	r0, #0
 8002d58:	4798      	blx	r3
 8002d5a:	e004      	b.n	8002d66 <OUTPUT_setBlink+0xa6>
			return;
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	e002      	b.n	8002d66 <OUTPUT_setBlink+0xa6>
			return;
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	e000      	b.n	8002d66 <OUTPUT_setBlink+0xa6>
			return;
 8002d64:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b005      	add	sp, #20
 8002d6a:	bd90      	pop	{r4, r7, pc}

08002d6c <OUTPUT_blinkHandle>:

void OUTPUT_blinkHandle(OUTPUT_t *tmp)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

	if (tmp->pinBaseCtrl)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d100      	bne.n	8002d7e <OUTPUT_blinkHandle+0x12>
 8002d7c:	e10f      	b.n	8002f9e <OUTPUT_blinkHandle+0x232>
	{
		if (tmp->mode != OUT_MODE_NO_CONTROL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d004      	beq.n	8002d90 <OUTPUT_blinkHandle+0x24>
			tmp->val_timeLine++;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	611a      	str	r2, [r3, #16]

		switch (tmp->mode)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d05b      	beq.n	8002e50 <OUTPUT_blinkHandle+0xe4>
 8002d98:	dd00      	ble.n	8002d9c <OUTPUT_blinkHandle+0x30>
 8002d9a:	e0f7      	b.n	8002f8c <OUTPUT_blinkHandle+0x220>
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d002      	beq.n	8002da6 <OUTPUT_blinkHandle+0x3a>
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d028      	beq.n	8002df6 <OUTPUT_blinkHandle+0x8a>
				break;
			} // end switch check state of mode blink
			break;

		default:
			break;
 8002da4:	e0f2      	b.n	8002f8c <OUTPUT_blinkHandle+0x220>
			if (timer_expired(&tmp->_timeOut))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3314      	adds	r3, #20
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 f996 	bl	80030dc <timer_expired>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d00e      	beq.n	8002dd2 <OUTPUT_blinkHandle+0x66>
				timer_stop(&tmp->_timeOut);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3314      	adds	r3, #20
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 f9b5 	bl	8003128 <timer_stop>
				tmp->state = OUT_state_finished;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	705a      	strb	r2, [r3, #1]
				tmp->pinBaseCtrl(0);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2000      	movs	r0, #0
 8002dca:	4798      	blx	r3
				tmp->val_timeLine = 0;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
			if (tmp->cb_eventFunction)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d100      	bne.n	8002ddc <OUTPUT_blinkHandle+0x70>
 8002dda:	e0d9      	b.n	8002f90 <OUTPUT_blinkHandle+0x224>
				if (tmp->state != OUT_STATE_WAIT_START)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	785b      	ldrb	r3, [r3, #1]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d100      	bne.n	8002de6 <OUTPUT_blinkHandle+0x7a>
 8002de4:	e0d4      	b.n	8002f90 <OUTPUT_blinkHandle+0x224>
					tmp->cb_eventFunction(OUT_EVENT_OFF_AFTER, tmp->val_timeLine);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	0019      	movs	r1, r3
 8002df0:	2001      	movs	r0, #1
 8002df2:	4790      	blx	r2
			break;
 8002df4:	e0cc      	b.n	8002f90 <OUTPUT_blinkHandle+0x224>
			if (timer_expired(&tmp->_timeOut))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3314      	adds	r3, #20
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 f96e 	bl	80030dc <timer_expired>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d00e      	beq.n	8002e22 <OUTPUT_blinkHandle+0xb6>
				timer_stop(&tmp->_timeOut);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3314      	adds	r3, #20
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 f98d 	bl	8003128 <timer_stop>
				tmp->state = OUT_STATE_ON;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	705a      	strb	r2, [r3, #1]
				tmp->pinBaseCtrl(1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	2001      	movs	r0, #1
 8002e1a:	4798      	blx	r3
				tmp->val_timeLine = 0;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
			if (tmp->state == OUT_STATE_WAIT_START)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d100      	bne.n	8002e2c <OUTPUT_blinkHandle+0xc0>
 8002e2a:	e0b3      	b.n	8002f94 <OUTPUT_blinkHandle+0x228>
			if (tmp->cb_eventFunction)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d100      	bne.n	8002e36 <OUTPUT_blinkHandle+0xca>
 8002e34:	e0b0      	b.n	8002f98 <OUTPUT_blinkHandle+0x22c>
				if (tmp->state != OUT_STATE_WAIT_START)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	785b      	ldrb	r3, [r3, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d100      	bne.n	8002e40 <OUTPUT_blinkHandle+0xd4>
 8002e3e:	e0ab      	b.n	8002f98 <OUTPUT_blinkHandle+0x22c>
					tmp->cb_eventFunction(OUT_EVENT_ON_AFTER, tmp->val_timeLine);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	0019      	movs	r1, r3
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	4790      	blx	r2
			break;
 8002e4e:	e0a3      	b.n	8002f98 <OUTPUT_blinkHandle+0x22c>
			switch (tmp->state)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d002      	beq.n	8002e5e <OUTPUT_blinkHandle+0xf2>
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d032      	beq.n	8002ec2 <OUTPUT_blinkHandle+0x156>
				break;
 8002e5c:	e095      	b.n	8002f8a <OUTPUT_blinkHandle+0x21e>
				if (timer_expired(&tmp->_timeOut))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3314      	adds	r3, #20
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 f93a 	bl	80030dc <timer_expired>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d014      	beq.n	8002e96 <OUTPUT_blinkHandle+0x12a>
					tmp->state = OUT_state_finished;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	705a      	strb	r2, [r3, #1]
					tmp->pinBaseCtrl(0);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2000      	movs	r0, #0
 8002e78:	4798      	blx	r3
					timer_set(&tmp->_timeOut, (tmp->val_perriod - tmp->val_Duty));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3314      	adds	r3, #20
 8002e7e:	0018      	movs	r0, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	f000 f8fc 	bl	8003088 <timer_set>
					tmp->val_timeLine = 0;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
				if (tmp->cb_eventFunction)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d100      	bne.n	8002ea0 <OUTPUT_blinkHandle+0x134>
 8002e9e:	e071      	b.n	8002f84 <OUTPUT_blinkHandle+0x218>
					event = (tmp->val_timeLine) ? OUT_EVENT_ON_AFTER : OUT_EVENT_OFF_AFTER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	425a      	negs	r2, r3
 8002ea6:	4153      	adcs	r3, r2
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	200e      	movs	r0, #14
 8002eac:	183b      	adds	r3, r7, r0
 8002eae:	701a      	strb	r2, [r3, #0]
					tmp->cb_eventFunction(event, tmp->val_timeLine);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6919      	ldr	r1, [r3, #16]
 8002eb8:	183b      	adds	r3, r7, r0
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	4790      	blx	r2
				break;
 8002ec0:	e060      	b.n	8002f84 <OUTPUT_blinkHandle+0x218>
				if (timer_expired(&tmp->_timeOut))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 f908 	bl	80030dc <timer_expired>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d044      	beq.n	8002f5a <OUTPUT_blinkHandle+0x1ee>
					if (tmp->ena_nonStop)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	789b      	ldrb	r3, [r3, #2]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <OUTPUT_blinkHandle+0x174>
						tmp->repeat_cnt = 0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	80da      	strh	r2, [r3, #6]
 8002ede:	e005      	b.n	8002eec <OUTPUT_blinkHandle+0x180>
						tmp->repeat_cnt++;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	88db      	ldrh	r3, [r3, #6]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	80da      	strh	r2, [r3, #6]
					if (tmp->repeat_cnt == tmp->repeat_num)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	88da      	ldrh	r2, [r3, #6]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	889b      	ldrh	r3, [r3, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d11d      	bne.n	8002f34 <OUTPUT_blinkHandle+0x1c8>
						tmp->mode = OUT_MODE_NO_CONTROL;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
						tmp->state = OUT_state_finished;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2202      	movs	r2, #2
 8002f02:	705a      	strb	r2, [r3, #1]
						tmp->pinBaseCtrl(0);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	2000      	movs	r0, #0
 8002f0a:	4798      	blx	r3
						timer_stop(&tmp->_timeOut);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3314      	adds	r3, #20
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 f909 	bl	8003128 <timer_stop>
						tmp->val_timeLine = 0;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
						if (tmp->cb_eventFunction)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03b      	beq.n	8002f9c <OUTPUT_blinkHandle+0x230>
							tmp->cb_eventFunction(OUT_EVENT_END_BLINK, tmp->val_timeLine);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	2002      	movs	r0, #2
 8002f30:	4790      	blx	r2
						return;
 8002f32:	e033      	b.n	8002f9c <OUTPUT_blinkHandle+0x230>
						tmp->state = OUT_STATE_ON;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	705a      	strb	r2, [r3, #1]
						tmp->pinBaseCtrl(1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	2001      	movs	r0, #1
 8002f40:	4798      	blx	r3
						timer_set(&tmp->_timeOut, tmp->val_Duty);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3314      	adds	r3, #20
 8002f46:	001a      	movs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	0010      	movs	r0, r2
 8002f50:	f000 f89a 	bl	8003088 <timer_set>
						tmp->val_timeLine = 0;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
				if (tmp->cb_eventFunction)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <OUTPUT_blinkHandle+0x21c>
					event = (tmp->val_timeLine) ? OUT_EVENT_OFF_AFTER : OUT_EVENT_ON_AFTER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	1e5a      	subs	r2, r3, #1
 8002f68:	4193      	sbcs	r3, r2
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	200f      	movs	r0, #15
 8002f6e:	183b      	adds	r3, r7, r0
 8002f70:	701a      	strb	r2, [r3, #0]
					tmp->cb_eventFunction(event, tmp->val_timeLine);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6919      	ldr	r1, [r3, #16]
 8002f7a:	183b      	adds	r3, r7, r0
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	0018      	movs	r0, r3
 8002f80:	4790      	blx	r2
				break;
 8002f82:	e001      	b.n	8002f88 <OUTPUT_blinkHandle+0x21c>
				break;
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	e00a      	b.n	8002f9e <OUTPUT_blinkHandle+0x232>
				break;
 8002f88:	46c0      	nop			; (mov r8, r8)
			break;
 8002f8a:	e008      	b.n	8002f9e <OUTPUT_blinkHandle+0x232>
			break;
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	e006      	b.n	8002f9e <OUTPUT_blinkHandle+0x232>
			break;
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	e004      	b.n	8002f9e <OUTPUT_blinkHandle+0x232>
				return;
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	e002      	b.n	8002f9e <OUTPUT_blinkHandle+0x232>
			break;
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	e000      	b.n	8002f9e <OUTPUT_blinkHandle+0x232>
						return;
 8002f9c:	46c0      	nop			; (mov r8, r8)
		} // end switch check mode
	}	  // check Pointer
}
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <INPUT_readHanlde>:

uint8_t INPUT_readHanlde(uint8_t inputPinStt,uint16_t *inputValTmp, uint16_t *lowCnt_ms, int16_t lowSample_ms, uint16_t *highCnt_ms, uint16_t highSample_ms)
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	0019      	movs	r1, r3
 8002fb0:	240f      	movs	r4, #15
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	1c02      	adds	r2, r0, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
 8002fb8:	230c      	movs	r3, #12
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	1c0a      	adds	r2, r1, #0
 8002fbe:	801a      	strh	r2, [r3, #0]
	// Khởi tạo giá trị ban đầu giống với inputStt
	if (*inputValTmp == 0xFF)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	2bff      	cmp	r3, #255	; 0xff
 8002fc6:	d107      	bne.n	8002fd8 <INPUT_readHanlde+0x34>
	{
		*inputValTmp = (inputPinStt) ? 1 : 0;
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	1e5a      	subs	r2, r3, #1
 8002fce:	4193      	sbcs	r3, r2
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	801a      	strh	r2, [r3, #0]
	}

	if(inputPinStt==0){
 8002fd8:	230f      	movs	r3, #15
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d118      	bne.n	8003014 <INPUT_readHanlde+0x70>
		*highCnt_ms = 0;
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	801a      	strh	r2, [r3, #0]
		if (++(*lowCnt_ms) >= lowSample_ms)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2100      	movs	r1, #0
 8003000:	5e5b      	ldrsh	r3, [r3, r1]
 8003002:	429a      	cmp	r2, r3
 8003004:	db21      	blt.n	800304a <INPUT_readHanlde+0xa6>
		{
			*lowCnt_ms = 0;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	801a      	strh	r2, [r3, #0]
			*inputValTmp = 0;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2200      	movs	r2, #0
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	e01a      	b.n	800304a <INPUT_readHanlde+0xa6>
		}
	}
	else
	{
		*lowCnt_ms = 0;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	801a      	strh	r2, [r3, #0]
		if (++(*highCnt_ms) >= highSample_ms)
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	3301      	adds	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	801a      	strh	r2, [r3, #0]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	221c      	movs	r2, #28
 800302c:	2108      	movs	r1, #8
 800302e:	1852      	adds	r2, r2, r1
 8003030:	19d2      	adds	r2, r2, r7
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d808      	bhi.n	800304a <INPUT_readHanlde+0xa6>
		{
			*highCnt_ms = 0;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2200      	movs	r2, #0
 800303c:	801a      	strh	r2, [r3, #0]
			*inputValTmp = inputPinStt;
 800303e:	230f      	movs	r3, #15
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b29a      	uxth	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	801a      	strh	r2, [r3, #0]
		}
	}

	//*inputValTmp;
	return (uint8_t)(*inputValTmp);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b2db      	uxtb	r3, r3
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b005      	add	sp, #20
 8003056:	bd90      	pop	{r4, r7, pc}

08003058 <timer_getTick>:
/*---------------------------------------------------------------------------*/
/**
 * get uTick of my timer system.
 */
clock_time_t timer_getTick(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  return _unitTick;
 800305c:	4b02      	ldr	r3, [pc, #8]	; (8003068 <timer_getTick+0x10>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	2000028c 	.word	0x2000028c

0800306c <timer_periodic_poll>:
/**
 * count the uTick .
 * This function is must be call in a timer interrupt
 */
void timer_periodic_poll(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  _unitTick += _INTERVAL_TICK;
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <timer_periodic_poll+0x18>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330a      	adds	r3, #10
 8003076:	001a      	movs	r2, r3
 8003078:	4b02      	ldr	r3, [pc, #8]	; (8003084 <timer_periodic_poll+0x18>)
 800307a:	601a      	str	r2, [r3, #0]
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	2000028c 	.word	0x2000028c

08003088 <timer_set>:
 * \param t A pointer to the timer
 * \param interval The interval before the timer expires.
 *
 */
void timer_set(timer_virtual_t *t, clock_time_t interval)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  t->status = _timer_on;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
  t->start = _unitTick;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <timer_set+0x2c>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	605a      	str	r2, [r3, #4]
  t->interval = interval;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	609a      	str	r2, [r3, #8]
  t->left_time = 0;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	60da      	str	r2, [r3, #12]
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b002      	add	sp, #8
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	2000028c 	.word	0x2000028c

080030b8 <timer_restart>:
 * \param t A pointer to the timer.
 *
 * \sa timer_reset()
 */
void timer_restart(timer_virtual_t *t)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  t->start = _unitTick;
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <timer_restart+0x20>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	605a      	str	r2, [r3, #4]
  t->status = _timer_on;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	2000028c 	.word	0x2000028c

080030dc <timer_expired>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
uint8_t timer_expired(timer_virtual_t *t)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if (t->status == _timer_off)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <timer_expired+0x14>
    return 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e014      	b.n	800311a <timer_expired+0x3e>
  if (t->status == _timer_over)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d101      	bne.n	80030fc <timer_expired+0x20>
    return 1;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e00e      	b.n	800311a <timer_expired+0x3e>

  if ((clock_time_t)(_unitTick - t->start) >= (clock_time_t)t->interval)
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <timer_expired+0x48>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	1ad2      	subs	r2, r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d304      	bcc.n	8003118 <timer_expired+0x3c>
  {
    t->status = _timer_over;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	701a      	strb	r2, [r3, #0]
    return 1;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <timer_expired+0x3e>
  }
  return 0;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	2000028c 	.word	0x2000028c

08003128 <timer_stop>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
void timer_stop(timer_virtual_t *t)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  t->status = _timer_off;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
  t->left_time = 0;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	60da      	str	r2, [r3, #12]
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}

08003144 <CapSS_TxSignal_SetOut>:

static CheckSensor_State_t Check_State;
static timer_virtual_t _timer_wait_sensor;

void CapSS_TxSignal_SetOut(uint8_t select_IO_Cap)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b089      	sub	sp, #36	; 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	0002      	movs	r2, r0
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	240c      	movs	r4, #12
 8003152:	193b      	adds	r3, r7, r4
 8003154:	0018      	movs	r0, r3
 8003156:	2314      	movs	r3, #20
 8003158:	001a      	movs	r2, r3
 800315a:	2100      	movs	r1, #0
 800315c:	f009 fdf5 	bl	800cd4a <memset>

	// Out Push-pull , Res Pull-up
	GPIO_InitStruct.Pin = SSWATER_SIGNAL_Pin;
 8003160:	0021      	movs	r1, r4
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	0052      	lsls	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316a:	187b      	adds	r3, r7, r1
 800316c:	2201      	movs	r2, #1
 800316e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003170:	187b      	adds	r3, r7, r1
 8003172:	2201      	movs	r2, #1
 8003174:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2201      	movs	r2, #1
 800317a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SSWATER_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800317c:	187b      	adds	r3, r7, r1
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <CapSS_TxSignal_SetOut+0x4c>)
 8003180:	0019      	movs	r1, r3
 8003182:	0010      	movs	r0, r2
 8003184:	f005 fc54 	bl	8008a30 <HAL_GPIO_Init>
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b009      	add	sp, #36	; 0x24
 800318e:	bd90      	pop	{r4, r7, pc}
 8003190:	50000400 	.word	0x50000400

08003194 <CapSS_TxSignal_SetIn>:

void CapSS_TxSignal_SetIn(uint8_t select_IO_Cap)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	0002      	movs	r2, r0
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	240c      	movs	r4, #12
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	0018      	movs	r0, r3
 80031a6:	2314      	movs	r3, #20
 80031a8:	001a      	movs	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	f009 fdcd 	bl	800cd4a <memset>

	// Input : Res Pull-up
	GPIO_InitStruct.Pin = SSWATER_SIGNAL_Pin;
 80031b0:	0021      	movs	r1, r4
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	0052      	lsls	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ba:	187b      	adds	r3, r7, r1
 80031bc:	2200      	movs	r2, #0
 80031be:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	2201      	movs	r2, #1
 80031c4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	2201      	movs	r2, #1
 80031ca:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SSWATER_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <CapSS_TxSignal_SetIn+0x4c>)
 80031d0:	0019      	movs	r1, r3
 80031d2:	0010      	movs	r0, r2
 80031d4:	f005 fc2c 	bl	8008a30 <HAL_GPIO_Init>
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b009      	add	sp, #36	; 0x24
 80031de:	bd90      	pop	{r4, r7, pc}
 80031e0:	50000400 	.word	0x50000400

080031e4 <CapSS_Start>:
/*======================== CapSS_Start  ====================================================
 * Action :	Execuse all Drain Command
 * Param: AF struct
 * */
void CapSS_Start(CapSen_Struct_t *Sensor_Tmp, uint8_t cmd)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	000a      	movs	r2, r1
 80031ee:	1cfb      	adds	r3, r7, #3
 80031f0:	701a      	strb	r2, [r3, #0]

	if (cmd == _SS_CHECKSTT_BYTE)
 80031f2:	1cfb      	adds	r3, r7, #3
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b6f      	cmp	r3, #111	; 0x6f
 80031f8:	d103      	bne.n	8003202 <CapSS_Start+0x1e>
	{
		Sensor_Tmp->retry_connect = RETRY_NUM_CHECKSTT; // debug_msg("%u-CheckStt",CapSS_selected);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2206      	movs	r2, #6
 80031fe:	715a      	strb	r2, [r3, #5]
 8003200:	e006      	b.n	8003210 <CapSS_Start+0x2c>
	}
	else if (cmd == _SS_CALIB_BYTE)
 8003202:	1cfb      	adds	r3, r7, #3
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b60      	cmp	r3, #96	; 0x60
 8003208:	d10e      	bne.n	8003228 <CapSS_Start+0x44>
	{
		Sensor_Tmp->retry_connect = RETRY_NUM_CALIB; // debug_msg("%u-Calib",CapSS_selected);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2203      	movs	r2, #3
 800320e:	715a      	strb	r2, [r3, #5]
	}
	else
		return;

	Sensor_Tmp->state = _SENSOR_SENT_START;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
	Sensor_Tmp->command = cmd;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1cfa      	adds	r2, r7, #3
 800321a:	7812      	ldrb	r2, [r2, #0]
 800321c:	711a      	strb	r2, [r3, #4]
	timer_stop(&_timer_wait_sensor);
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <CapSS_Start+0x4c>)
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff ff81 	bl	8003128 <timer_stop>
 8003226:	e000      	b.n	800322a <CapSS_Start+0x46>
		return;
 8003228:	46c0      	nop			; (mov r8, r8)
}
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}
 8003230:	200002a0 	.word	0x200002a0

08003234 <CapSS_Task>:

void CapSS_Task(CapSen_Struct_t *Sensor_Tmp)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	uint16_t CheckSumByte;
	static uint8_t string_cmd[Max_Index];
	static uint8_t Condition_nummer;
	static uint32_t count_systick;

	switch (Sensor_Tmp->state)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d064      	beq.n	800330e <CapSS_Task+0xda>
 8003244:	dd00      	ble.n	8003248 <CapSS_Task+0x14>
 8003246:	e0ad      	b.n	80033a4 <CapSS_Task+0x170>
 8003248:	2b01      	cmp	r3, #1
 800324a:	d002      	beq.n	8003252 <CapSS_Task+0x1e>
 800324c:	2b02      	cmp	r3, #2
 800324e:	d04d      	beq.n	80032ec <CapSS_Task+0xb8>
															// debug_msg("%u-Retry=%u",CapSS_selected,Sensor_Tmp->retry_connect);
			}
		}
		break;
	default:
		break;
 8003250:	e0a8      	b.n	80033a4 <CapSS_Task+0x170>
		Check_State = _CHECK_CLEAR;
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <CapSS_Task+0x18c>)
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
		string_cmd[Stx_Index] = 0x1E;
 8003258:	4b5a      	ldr	r3, [pc, #360]	; (80033c4 <CapSS_Task+0x190>)
 800325a:	221e      	movs	r2, #30
 800325c:	701a      	strb	r2, [r3, #0]
		string_cmd[Add_Index] = 0x05;
 800325e:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <CapSS_Task+0x190>)
 8003260:	2205      	movs	r2, #5
 8003262:	705a      	strb	r2, [r3, #1]
		string_cmd[Cmd_Index] = Sensor_Tmp->command;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	791a      	ldrb	r2, [r3, #4]
 8003268:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <CapSS_Task+0x190>)
 800326a:	709a      	strb	r2, [r3, #2]
		CheckSumByte = string_cmd[Stx_Index] + string_cmd[Add_Index] + string_cmd[Cmd_Index];
 800326c:	4b55      	ldr	r3, [pc, #340]	; (80033c4 <CapSS_Task+0x190>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b29a      	uxth	r2, r3
 8003272:	4b54      	ldr	r3, [pc, #336]	; (80033c4 <CapSS_Task+0x190>)
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	b29b      	uxth	r3, r3
 8003278:	18d3      	adds	r3, r2, r3
 800327a:	b299      	uxth	r1, r3
 800327c:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <CapSS_Task+0x190>)
 800327e:	789b      	ldrb	r3, [r3, #2]
 8003280:	b29a      	uxth	r2, r3
 8003282:	200e      	movs	r0, #14
 8003284:	183b      	adds	r3, r7, r0
 8003286:	188a      	adds	r2, r1, r2
 8003288:	801a      	strh	r2, [r3, #0]
		string_cmd[Data_Index] = CheckSumByte & 0xFF;
 800328a:	183b      	adds	r3, r7, r0
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	4b4c      	ldr	r3, [pc, #304]	; (80033c4 <CapSS_Task+0x190>)
 8003292:	70da      	strb	r2, [r3, #3]
		string_cmd[Etx_Index] = 0x1F;
 8003294:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <CapSS_Task+0x190>)
 8003296:	221f      	movs	r2, #31
 8003298:	711a      	strb	r2, [r3, #4]
		Sensor_Tmp->pulseCnt = 0;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	705a      	strb	r2, [r3, #1]
		CapSS_TxSignal_SetOut(0);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7ff ff4f 	bl	8003144 <CapSS_TxSignal_SetOut>
		count_systick = HAL_GetTick();
 80032a6:	f003 fc51 	bl	8006b4c <HAL_GetTick>
 80032aa:	0002      	movs	r2, r0
 80032ac:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <CapSS_Task+0x194>)
 80032ae:	601a      	str	r2, [r3, #0]
		UV_CAPSS_putArr(string_cmd, Max_Index);
 80032b0:	4b44      	ldr	r3, [pc, #272]	; (80033c4 <CapSS_Task+0x190>)
 80032b2:	2105      	movs	r1, #5
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 fa0d 	bl	80036d4 <UV_CAPSS_putArr>
		if (Sensor_Tmp->command == _SS_CHECKSTT_BYTE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	791b      	ldrb	r3, [r3, #4]
 80032be:	2b6f      	cmp	r3, #111	; 0x6f
 80032c0:	d105      	bne.n	80032ce <CapSS_Task+0x9a>
			timer_set(&_timer_wait_sensor, 250); // it nhat 100 ms
 80032c2:	4b42      	ldr	r3, [pc, #264]	; (80033cc <CapSS_Task+0x198>)
 80032c4:	21fa      	movs	r1, #250	; 0xfa
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff fede 	bl	8003088 <timer_set>
 80032cc:	e00a      	b.n	80032e4 <CapSS_Task+0xb0>
		else if (Sensor_Tmp->command == _SS_CALIB_BYTE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	791b      	ldrb	r3, [r3, #4]
 80032d2:	2b60      	cmp	r3, #96	; 0x60
 80032d4:	d106      	bne.n	80032e4 <CapSS_Task+0xb0>
			timer_set(&_timer_wait_sensor, 400); // it nhat 400 ms => vi Calib tra loi cham
 80032d6:	23c8      	movs	r3, #200	; 0xc8
 80032d8:	005a      	lsls	r2, r3, #1
 80032da:	4b3c      	ldr	r3, [pc, #240]	; (80033cc <CapSS_Task+0x198>)
 80032dc:	0011      	movs	r1, r2
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff fed2 	bl	8003088 <timer_set>
		Sensor_Tmp->state = _SENSOR_SENT_DONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
		break;
 80032ea:	e060      	b.n	80033ae <CapSS_Task+0x17a>
		if ((HAL_GetTick() - count_systick) > 15 /*ms*/)
 80032ec:	f003 fc2e 	bl	8006b4c <HAL_GetTick>
 80032f0:	0002      	movs	r2, r0
 80032f2:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <CapSS_Task+0x194>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b0f      	cmp	r3, #15
 80032fa:	d955      	bls.n	80033a8 <CapSS_Task+0x174>
			Sensor_Tmp->state = _SENSOR_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2203      	movs	r2, #3
 8003300:	701a      	strb	r2, [r3, #0]
			CapSS_TxSignal_SetIn(CapSS_selected);
 8003302:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <CapSS_Task+0x19c>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	0018      	movs	r0, r3
 8003308:	f7ff ff44 	bl	8003194 <CapSS_TxSignal_SetIn>
		break;
 800330c:	e04c      	b.n	80033a8 <CapSS_Task+0x174>
		if (timer_expired(&_timer_wait_sensor))
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <CapSS_Task+0x198>)
 8003310:	0018      	movs	r0, r3
 8003312:	f7ff fee3 	bl	80030dc <timer_expired>
 8003316:	1e03      	subs	r3, r0, #0
 8003318:	d048      	beq.n	80033ac <CapSS_Task+0x178>
			timer_stop(&_timer_wait_sensor);
 800331a:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <CapSS_Task+0x198>)
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff ff03 	bl	8003128 <timer_stop>
			if (Sensor_Tmp->command == _SS_CALIB_BYTE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	791b      	ldrb	r3, [r3, #4]
 8003326:	2b60      	cmp	r3, #96	; 0x60
 8003328:	d103      	bne.n	8003332 <CapSS_Task+0xfe>
				Condition_nummer = _CAL_PULSE_NUM;
 800332a:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <CapSS_Task+0x1a0>)
 800332c:	220a      	movs	r2, #10
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e006      	b.n	8003340 <CapSS_Task+0x10c>
			else if (Sensor_Tmp->command == _SS_CHECKSTT_BYTE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	791b      	ldrb	r3, [r3, #4]
 8003336:	2b6f      	cmp	r3, #111	; 0x6f
 8003338:	d102      	bne.n	8003340 <CapSS_Task+0x10c>
				Condition_nummer = _CHECKSTT_PULSE_NUM;
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <CapSS_Task+0x1a0>)
 800333c:	2205      	movs	r2, #5
 800333e:	701a      	strb	r2, [r3, #0]
			if (_LIMIT(Sensor_Tmp->pulseCnt, Condition_nummer - 4, Condition_nummer + 4))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	785b      	ldrb	r3, [r3, #1]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	001a      	movs	r2, r3
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <CapSS_Task+0x1a0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	3b04      	subs	r3, #4
 800334e:	429a      	cmp	r2, r3
 8003350:	db0f      	blt.n	8003372 <CapSS_Task+0x13e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	001a      	movs	r2, r3
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <CapSS_Task+0x1a0>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	3304      	adds	r3, #4
 8003360:	429a      	cmp	r2, r3
 8003362:	dc06      	bgt.n	8003372 <CapSS_Task+0x13e>
				Sensor_Tmp->state = _SENSOR_SUCESS;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2205      	movs	r2, #5
 8003368:	701a      	strb	r2, [r3, #0]
				Sensor_Tmp->connectStt = _PASS;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	709a      	strb	r2, [r3, #2]
		break;
 8003370:	e01c      	b.n	80033ac <CapSS_Task+0x178>
				if (--Sensor_Tmp->retry_connect == 0)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	795b      	ldrb	r3, [r3, #5]
 8003376:	3b01      	subs	r3, #1
 8003378:	b2da      	uxtb	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	715a      	strb	r2, [r3, #5]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	795b      	ldrb	r3, [r3, #5]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <CapSS_Task+0x168>
					Sensor_Tmp->state = _SENSOR_FAIL; // must Clear then continous
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2204      	movs	r2, #4
 800338a:	701a      	strb	r2, [r3, #0]
					if (Sensor_Tmp->command == _SS_CHECKSTT_BYTE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	791b      	ldrb	r3, [r3, #4]
 8003390:	2b6f      	cmp	r3, #111	; 0x6f
 8003392:	d10b      	bne.n	80033ac <CapSS_Task+0x178>
						Sensor_Tmp->connectStt = _FAIL; // debug_msg("=>FAIL");
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	709a      	strb	r2, [r3, #2]
		break;
 800339a:	e007      	b.n	80033ac <CapSS_Task+0x178>
					Sensor_Tmp->state = _SENSOR_SENT_START; // must Clear then continous
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
		break;
 80033a2:	e003      	b.n	80033ac <CapSS_Task+0x178>
		break;
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	e002      	b.n	80033ae <CapSS_Task+0x17a>
		break;
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	e000      	b.n	80033ae <CapSS_Task+0x17a>
		break;
 80033ac:	46c0      	nop			; (mov r8, r8)
	}

	CapSS_Get_Result(Sensor_Tmp);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 f811 	bl	80033d8 <CapSS_Get_Result>
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	2000029e 	.word	0x2000029e
 80033c4:	200002b8 	.word	0x200002b8
 80033c8:	200002c0 	.word	0x200002c0
 80033cc:	200002a0 	.word	0x200002a0
 80033d0:	2000029c 	.word	0x2000029c
 80033d4:	200002c4 	.word	0x200002c4

080033d8 <CapSS_Get_Result>:

void CapSS_Get_Result(CapSen_Struct_t *Sensor_Tmp)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	if (!_LIMIT(Sensor_Tmp->state, _SENSOR_FAIL, _SENSOR_SUCESS))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d955      	bls.n	8003494 <CapSS_Get_Result+0xbc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d851      	bhi.n	8003494 <CapSS_Get_Result+0xbc>
		return;

	switch (Sensor_Tmp->command)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	791b      	ldrb	r3, [r3, #4]
 80033f4:	2b60      	cmp	r3, #96	; 0x60
 80033f6:	d011      	beq.n	800341c <CapSS_Get_Result+0x44>
 80033f8:	2b6f      	cmp	r3, #111	; 0x6f
 80033fa:	d13f      	bne.n	800347c <CapSS_Get_Result+0xa4>
	{
	case _SS_CHECKSTT_BYTE:
		if (Sensor_Tmp->state == _SENSOR_SUCESS)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b05      	cmp	r3, #5
 8003402:	d103      	bne.n	800340c <CapSS_Get_Result+0x34>
			Sensor_Tmp->connectStt = _PASS;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	709a      	strb	r2, [r3, #2]
		else if (Sensor_Tmp->state == _SENSOR_FAIL)
			Sensor_Tmp->connectStt = _FAIL;
		break;
 800340a:	e039      	b.n	8003480 <CapSS_Get_Result+0xa8>
		else if (Sensor_Tmp->state == _SENSOR_FAIL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d135      	bne.n	8003480 <CapSS_Get_Result+0xa8>
			Sensor_Tmp->connectStt = _FAIL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	709a      	strb	r2, [r3, #2]
		break;
 800341a:	e031      	b.n	8003480 <CapSS_Get_Result+0xa8>
	case _SS_CALIB_BYTE:

		if (Sensor_Tmp->state == _SENSOR_SUCESS)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b05      	cmp	r3, #5
 8003422:	d111      	bne.n	8003448 <CapSS_Get_Result+0x70>
		{
			CapSS_CalibSucess++;
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <CapSS_Get_Result+0xc4>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <CapSS_Get_Result+0xc4>)
 800342e:	701a      	strb	r2, [r3, #0]
			if(Sensor_Tmp->_cb_calibResult){
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d016      	beq.n	8003466 <CapSS_Get_Result+0x8e>
			  Sensor_Tmp->_cb_calibResult(_PASS);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2001      	movs	r0, #1
 800343e:	4798      	blx	r3
			  Sensor_Tmp->connectStt = _PASS;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	709a      	strb	r2, [r3, #2]
 8003446:	e00e      	b.n	8003466 <CapSS_Get_Result+0x8e>
			}
		}
		else if (Sensor_Tmp->state == _SENSOR_FAIL){
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d10a      	bne.n	8003466 <CapSS_Get_Result+0x8e>
			if(Sensor_Tmp->_cb_calibResult){
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d006      	beq.n	8003466 <CapSS_Get_Result+0x8e>
			  Sensor_Tmp->_cb_calibResult(_FAIL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2000      	movs	r0, #0
 800345e:	4798      	blx	r3
			  Sensor_Tmp->connectStt = _FAIL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	709a      	strb	r2, [r3, #2]
			}
		}

		// Khi Gap Sensor cuoi cung
		if (CapSS_selected == (_CAPSS_ID_TOTAL - 1))
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <CapSS_Get_Result+0xc8>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <CapSS_Get_Result+0xac>
			else
			{
			    //calib fail
				//LED1_Blink_CALIBSS_OK();
			}
			CapSS_CalibSucess = 0;
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <CapSS_Get_Result+0xc4>)
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
			CapSS_selected = 0;
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <CapSS_Get_Result+0xc8>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
		else
		{
			//CapSS_selected++;
		}

		break;
 800347a:	e003      	b.n	8003484 <CapSS_Get_Result+0xac>
	default:
		break;
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	e002      	b.n	8003486 <CapSS_Get_Result+0xae>
		break;
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	e000      	b.n	8003486 <CapSS_Get_Result+0xae>
		break;
 8003484:	46c0      	nop			; (mov r8, r8)
	}
	Sensor_Tmp->command = 0x00;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	711a      	strb	r2, [r3, #4]
	Sensor_Tmp->state = _SENSOR_CLEAR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
	return;
 8003492:	e000      	b.n	8003496 <CapSS_Get_Result+0xbe>
		return;
 8003494:	46c0      	nop			; (mov r8, r8)
}
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}
 800349c:	2000029d 	.word	0x2000029d
 80034a0:	2000029c 	.word	0x2000029c

080034a4 <CapSS_CheckPulse_Systick>:

void CapSS_CheckPulse_Systick(uint8_t Pin_stt, CapSen_Struct_t *Sensor_Tmp)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	0002      	movs	r2, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	1dfb      	adds	r3, r7, #7
 80034b0:	701a      	strb	r2, [r3, #0]
	static uint8_t Pin_stt_old;
	static uint32_t tickstart;

	if (Sensor_Tmp->state != _SENSOR_BUSY)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d004      	beq.n	80034c4 <CapSS_CheckPulse_Systick+0x20>
	{
		Pin_stt_old = Pin_stt;
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <CapSS_CheckPulse_Systick+0x10c>)
 80034bc:	1dfa      	adds	r2, r7, #7
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	701a      	strb	r2, [r3, #0]
		return;
 80034c2:	e071      	b.n	80035a8 <CapSS_CheckPulse_Systick+0x104>
	}

	if (Pin_stt == 0 && Pin_stt_old == 1)
 80034c4:	1dfb      	adds	r3, r7, #7
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d120      	bne.n	800350e <CapSS_CheckPulse_Systick+0x6a>
 80034cc:	4b38      	ldr	r3, [pc, #224]	; (80035b0 <CapSS_CheckPulse_Systick+0x10c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d11c      	bne.n	800350e <CapSS_CheckPulse_Systick+0x6a>
	{
		// falling
		if (Check_State == _CHECK_CLEAR)
 80034d4:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <CapSS_CheckPulse_Systick+0x110>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d108      	bne.n	80034ee <CapSS_CheckPulse_Systick+0x4a>
		{
			tickstart = HAL_GetTick();
 80034dc:	f003 fb36 	bl	8006b4c <HAL_GetTick>
 80034e0:	0002      	movs	r2, r0
 80034e2:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <CapSS_CheckPulse_Systick+0x114>)
 80034e4:	601a      	str	r2, [r3, #0]
			Check_State = _CHECK_LO;
 80034e6:	4b33      	ldr	r3, [pc, #204]	; (80035b4 <CapSS_CheckPulse_Systick+0x110>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
		if (Check_State == _CHECK_CLEAR)
 80034ec:	e057      	b.n	800359e <CapSS_CheckPulse_Systick+0xfa>
		}
		else if (Check_State == _CHECK_HI)
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <CapSS_CheckPulse_Systick+0x110>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d153      	bne.n	800359e <CapSS_CheckPulse_Systick+0xfa>
		{
			if ((HAL_GetTick() - tickstart) < 3)
 80034f6:	f003 fb29 	bl	8006b4c <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <CapSS_CheckPulse_Systick+0x114>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d84b      	bhi.n	800359e <CapSS_CheckPulse_Systick+0xfa>
				Check_State = _CHECK_CLEAR; // bo qua
 8003506:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <CapSS_CheckPulse_Systick+0x110>)
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
		if (Check_State == _CHECK_CLEAR)
 800350c:	e047      	b.n	800359e <CapSS_CheckPulse_Systick+0xfa>
		}
	}
	else if (Pin_stt == 1 && Pin_stt_old == 0)
 800350e:	1dfb      	adds	r3, r7, #7
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d124      	bne.n	8003560 <CapSS_CheckPulse_Systick+0xbc>
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <CapSS_CheckPulse_Systick+0x10c>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d120      	bne.n	8003560 <CapSS_CheckPulse_Systick+0xbc>
	{
		// rising
		if (Check_State == _CHECK_LO)
 800351e:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <CapSS_CheckPulse_Systick+0x110>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d13c      	bne.n	80035a0 <CapSS_CheckPulse_Systick+0xfc>
		{
			if (_LIMIT((HAL_GetTick() - tickstart), 3 /*ms*/, 7 /*ms*/))
 8003526:	f003 fb11 	bl	8006b4c <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <CapSS_CheckPulse_Systick+0x114>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d910      	bls.n	8003558 <CapSS_CheckPulse_Systick+0xb4>
 8003536:	f003 fb09 	bl	8006b4c <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <CapSS_CheckPulse_Systick+0x114>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b07      	cmp	r3, #7
 8003544:	d808      	bhi.n	8003558 <CapSS_CheckPulse_Systick+0xb4>
			{
				tickstart = HAL_GetTick();
 8003546:	f003 fb01 	bl	8006b4c <HAL_GetTick>
 800354a:	0002      	movs	r2, r0
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <CapSS_CheckPulse_Systick+0x114>)
 800354e:	601a      	str	r2, [r3, #0]
				Check_State = _CHECK_HI;
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <CapSS_CheckPulse_Systick+0x110>)
 8003552:	2202      	movs	r2, #2
 8003554:	701a      	strb	r2, [r3, #0]
		if (Check_State == _CHECK_LO)
 8003556:	e023      	b.n	80035a0 <CapSS_CheckPulse_Systick+0xfc>
			}
			else
			{
				Check_State = _CHECK_CLEAR;
 8003558:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <CapSS_CheckPulse_Systick+0x110>)
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
		if (Check_State == _CHECK_LO)
 800355e:	e01f      	b.n	80035a0 <CapSS_CheckPulse_Systick+0xfc>
			}
		}
	}
	else if (Pin_stt == 1 && Pin_stt_old == 1)
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d11b      	bne.n	80035a0 <CapSS_CheckPulse_Systick+0xfc>
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <CapSS_CheckPulse_Systick+0x10c>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d117      	bne.n	80035a0 <CapSS_CheckPulse_Systick+0xfc>
	{
		if (Check_State == _CHECK_HI)
 8003570:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <CapSS_CheckPulse_Systick+0x110>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d113      	bne.n	80035a0 <CapSS_CheckPulse_Systick+0xfc>
		{
			if (((HAL_GetTick() - tickstart) >= 3))
 8003578:	f003 fae8 	bl	8006b4c <HAL_GetTick>
 800357c:	0002      	movs	r2, r0
 800357e:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <CapSS_CheckPulse_Systick+0x114>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d90b      	bls.n	80035a0 <CapSS_CheckPulse_Systick+0xfc>
			{
				Sensor_Tmp->pulseCnt++;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	785b      	ldrb	r3, [r3, #1]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	3301      	adds	r3, #1
 8003590:	b2da      	uxtb	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	705a      	strb	r2, [r3, #1]
				Check_State = _CHECK_CLEAR;
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <CapSS_CheckPulse_Systick+0x110>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e000      	b.n	80035a0 <CapSS_CheckPulse_Systick+0xfc>
		if (Check_State == _CHECK_CLEAR)
 800359e:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	Pin_stt_old = Pin_stt;
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <CapSS_CheckPulse_Systick+0x10c>)
 80035a2:	1dfa      	adds	r2, r7, #7
 80035a4:	7812      	ldrb	r2, [r2, #0]
 80035a6:	701a      	strb	r2, [r3, #0]
}
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b002      	add	sp, #8
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	200002c5 	.word	0x200002c5
 80035b4:	2000029e 	.word	0x2000029e
 80035b8:	200002c8 	.word	0x200002c8

080035bc <CapSS_periodic_poll>:



uint16_t SenLogicCnt[3];
void CapSS_periodic_poll(CapSen_Struct_t *Sensor_Tmp)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	6078      	str	r0, [r7, #4]
    CapSS_CheckPulse_Systick(WATERSS_SIGNAL_STT, Sensor_Tmp);
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4a12      	ldr	r2, [pc, #72]	; (8003614 <CapSS_periodic_poll+0x58>)
 80035ca:	0019      	movs	r1, r3
 80035cc:	0010      	movs	r0, r2
 80035ce:	f005 fb93 	bl	8008cf8 <HAL_GPIO_ReadPin>
 80035d2:	0003      	movs	r3, r0
 80035d4:	001a      	movs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0019      	movs	r1, r3
 80035da:	0010      	movs	r0, r2
 80035dc:	f7ff ff62 	bl	80034a4 <CapSS_CheckPulse_Systick>
    Sensor_Tmp->logicStt = INPUT_readHanlde(SSWATER_Logic_PinStt,&SenLogicCnt[0],&SenLogicCnt[1],20,&SenLogicCnt[2],20);
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <CapSS_periodic_poll+0x5c>)
 80035e6:	0019      	movs	r1, r3
 80035e8:	0010      	movs	r0, r2
 80035ea:	f005 fb85 	bl	8008cf8 <HAL_GPIO_ReadPin>
 80035ee:	0003      	movs	r3, r0
 80035f0:	0018      	movs	r0, r3
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <CapSS_periodic_poll+0x60>)
 80035f4:	490a      	ldr	r1, [pc, #40]	; (8003620 <CapSS_periodic_poll+0x64>)
 80035f6:	2314      	movs	r3, #20
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <CapSS_periodic_poll+0x68>)
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2314      	movs	r3, #20
 8003600:	f7ff fcd0 	bl	8002fa4 <INPUT_readHanlde>
 8003604:	0003      	movs	r3, r0
 8003606:	001a      	movs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	70da      	strb	r2, [r3, #3]
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}
 8003614:	50000400 	.word	0x50000400
 8003618:	50000800 	.word	0x50000800
 800361c:	200002b2 	.word	0x200002b2
 8003620:	200002b0 	.word	0x200002b0
 8003624:	200002b4 	.word	0x200002b4

08003628 <UV_CAPSS_putc>:
		_UV_CAPSS_TIMER_STOP();
	}
}

void UV_CAPSS_putc(char c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	0002      	movs	r2, r0
 8003630:	1dfb      	adds	r3, r7, #7
 8003632:	701a      	strb	r2, [r3, #0]
	uint32_t start_stick;

	start_stick = HAL_GetTick();
 8003634:	f003 fa8a 	bl	8006b4c <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	60fb      	str	r3, [r7, #12]
	while (Capuv_status & (1 << _UV_CAPSS_TX_BUSYV))
 800363c:	e006      	b.n	800364c <UV_CAPSS_putc+0x24>
	{
		if ((HAL_GetTick() - start_stick) > 100 /*ms*/)
 800363e:	f003 fa85 	bl	8006b4c <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b64      	cmp	r3, #100	; 0x64
 800364a:	d832      	bhi.n	80036b2 <UV_CAPSS_putc+0x8a>
	while (Capuv_status & (1 << _UV_CAPSS_TX_BUSYV))
 800364c:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <UV_CAPSS_putc+0x98>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	001a      	movs	r2, r3
 8003652:	2340      	movs	r3, #64	; 0x40
 8003654:	4013      	ands	r3, r2
 8003656:	d1f2      	bne.n	800363e <UV_CAPSS_putc+0x16>
			return;
	} // wait while UV_CAPSS is busy with sending
	/************************/
	Capuv_status = (1 << _UV_CAPSS_TX_BUSYV); // set TX busy flag (clear all others)
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <UV_CAPSS_putc+0x98>)
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	701a      	strb	r2, [r3, #0]
	Capuv_buffer = c;						  // copy data to buffer
 800365e:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <UV_CAPSS_putc+0x9c>)
 8003660:	1dfa      	adds	r2, r7, #7
 8003662:	7812      	ldrb	r2, [r2, #0]
 8003664:	701a      	strb	r2, [r3, #0]
	Capuv_bit_nbr = 0xFF;					  // erase bit counter (set all bits)
 8003666:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <UV_CAPSS_putc+0xa0>)
 8003668:	22ff      	movs	r2, #255	; 0xff
 800366a:	701a      	strb	r2, [r3, #0]
	//  Interrupt_TC2_ClearPending();
	_UV_CAPSS_TIMER_RESET_CNT();
 800366c:	4b17      	ldr	r3, [pc, #92]	; (80036cc <UV_CAPSS_putc+0xa4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2200      	movs	r2, #0
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
	// Set Priority !!
	_UV_CAPSS_TIMER_SET();
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <UV_CAPSS_putc+0xa4>)
 8003676:	0018      	movs	r0, r3
 8003678:	f007 f9e0 	bl	800aa3c <HAL_TIM_Base_Start_IT>

	TX_V_PRINT_WATER(0); // logic 1 (high level = STOP TX)
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4813      	ldr	r0, [pc, #76]	; (80036d0 <UV_CAPSS_putc+0xa8>)
 8003682:	2200      	movs	r2, #0
 8003684:	0019      	movs	r1, r3
 8003686:	f005 fb54 	bl	8008d32 <HAL_GPIO_WritePin>

	start_stick = HAL_GetTick();
 800368a:	f003 fa5f 	bl	8006b4c <HAL_GetTick>
 800368e:	0003      	movs	r3, r0
 8003690:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_IT_SOURCE(&_UV_CAPSS_TIMER, TIM_IT_UPDATE) == SET)
 8003692:	e006      	b.n	80036a2 <UV_CAPSS_putc+0x7a>
	{
		if ((HAL_GetTick() - start_stick) > 100 /*ms*/)
 8003694:	f003 fa5a 	bl	8006b4c <HAL_GetTick>
 8003698:	0002      	movs	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d809      	bhi.n	80036b6 <UV_CAPSS_putc+0x8e>
	while (__HAL_TIM_GET_IT_SOURCE(&_UV_CAPSS_TIMER, TIM_IT_UPDATE) == SET)
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <UV_CAPSS_putc+0xa4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d0f1      	beq.n	8003694 <UV_CAPSS_putc+0x6c>
 80036b0:	e002      	b.n	80036b8 <UV_CAPSS_putc+0x90>
			return;
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	e000      	b.n	80036b8 <UV_CAPSS_putc+0x90>
			return;
 80036b6:	46c0      	nop			; (mov r8, r8)
	}
}
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b004      	add	sp, #16
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	200002ce 	.word	0x200002ce
 80036c4:	200002cc 	.word	0x200002cc
 80036c8:	200002cd 	.word	0x200002cd
 80036cc:	200006a8 	.word	0x200006a8
 80036d0:	50000400 	.word	0x50000400

080036d4 <UV_CAPSS_putArr>:
			return;
	}
}

void UV_CAPSS_putArr(unsigned char array[], unsigned int byteCount)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	unsigned char arrayIndex;

	for (arrayIndex = 0u; arrayIndex < byteCount; arrayIndex++)
 80036de:	230f      	movs	r3, #15
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e00d      	b.n	8003704 <UV_CAPSS_putArr+0x30>
	{
		UV_CAPSS_putc(array[arrayIndex]);
 80036e8:	240f      	movs	r4, #15
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	18d3      	adds	r3, r2, r3
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff ff97 	bl	8003628 <UV_CAPSS_putc>
	for (arrayIndex = 0u; arrayIndex < byteCount; arrayIndex++)
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	3201      	adds	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	230f      	movs	r3, #15
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d8eb      	bhi.n	80036e8 <UV_CAPSS_putArr+0x14>
	}
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b005      	add	sp, #20
 8003718:	bd90      	pop	{r4, r7, pc}
	...

0800371c <UV_CAPSS_periodic_poll>:

void UV_CAPSS_periodic_poll(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
	Capuv_bit_nbr++;
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <UV_CAPSS_periodic_poll+0x74>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	b2da      	uxtb	r2, r3
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <UV_CAPSS_periodic_poll+0x74>)
 800372a:	701a      	strb	r2, [r3, #0]
	/*** check what are we doing: send or receive ? ***/
	if (Capuv_status & (1 << _UV_CAPSS_TX_BUSYV)) // transmit process
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <UV_CAPSS_periodic_poll+0x78>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	001a      	movs	r2, r3
 8003732:	2340      	movs	r3, #64	; 0x40
 8003734:	4013      	ands	r3, r2
 8003736:	d027      	beq.n	8003788 <UV_CAPSS_periodic_poll+0x6c>
	{
		if (Capuv_bit_nbr < 8) // data bits (bit 0...7)
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <UV_CAPSS_periodic_poll+0x74>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b07      	cmp	r3, #7
 800373e:	d811      	bhi.n	8003764 <UV_CAPSS_periodic_poll+0x48>
		{
			TX_V_PRINT_WATER(Capuv_buffer & 0x01);
 8003740:	4b15      	ldr	r3, [pc, #84]	; (8003798 <UV_CAPSS_periodic_poll+0x7c>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2201      	movs	r2, #1
 8003746:	4013      	ands	r3, r2
 8003748:	b2da      	uxtb	r2, r3
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4813      	ldr	r0, [pc, #76]	; (800379c <UV_CAPSS_periodic_poll+0x80>)
 8003750:	0019      	movs	r1, r3
 8003752:	f005 faee 	bl	8008d32 <HAL_GPIO_WritePin>
			Capuv_buffer >>= 1; // next bit, please !
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <UV_CAPSS_periodic_poll+0x7c>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <UV_CAPSS_periodic_poll+0x7c>)
 8003760:	701a      	strb	r2, [r3, #0]
				_UV_CAPSS_TIMER_STOP();
				Capuv_status = 0x00; // clear UV_CAPSS status register
			}
		}
	}
}
 8003762:	e011      	b.n	8003788 <UV_CAPSS_periodic_poll+0x6c>
			TX_V_PRINT_WATER(1);
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	480c      	ldr	r0, [pc, #48]	; (800379c <UV_CAPSS_periodic_poll+0x80>)
 800376a:	2201      	movs	r2, #1
 800376c:	0019      	movs	r1, r3
 800376e:	f005 fae0 	bl	8008d32 <HAL_GPIO_WritePin>
			if (Capuv_bit_nbr >= _UV_CAPSS_STOP) // ready! stop bit(s) sent
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <UV_CAPSS_periodic_poll+0x74>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b08      	cmp	r3, #8
 8003778:	d906      	bls.n	8003788 <UV_CAPSS_periodic_poll+0x6c>
				_UV_CAPSS_TIMER_STOP();
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <UV_CAPSS_periodic_poll+0x84>)
 800377c:	0018      	movs	r0, r3
 800377e:	f007 f9b3 	bl	800aae8 <HAL_TIM_Base_Stop_IT>
				Capuv_status = 0x00; // clear UV_CAPSS status register
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <UV_CAPSS_periodic_poll+0x78>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	200002cd 	.word	0x200002cd
 8003794:	200002ce 	.word	0x200002ce
 8003798:	200002cc 	.word	0x200002cc
 800379c:	50000400 	.word	0x50000400
 80037a0:	200006a8 	.word	0x200006a8

080037a4 <delay_ms>:
#include "myHeader.h"

#define WRD() HAL_IWDG_Refresh(&hiwdg)

void delay_ms(uint32_t ms)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  WRD();
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <delay_ms+0x20>)
 80037ae:	0018      	movs	r0, r3
 80037b0:	f006 faa2 	bl	8009cf8 <HAL_IWDG_Refresh>
  HAL_Delay(ms);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f003 f9d2 	bl	8006b60 <HAL_Delay>
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000064c 	.word	0x2000064c

080037c8 <Get_Edge>:
  } while ((str2[i] != 0) && (++i < n));
  str1[i] = 0;
}

Edge_ReturnStatus Get_Edge(uint8_t Pin_stt,uint8_t *PinOlder_stt)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	0002      	movs	r2, r0
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	1dfb      	adds	r3, r7, #7
 80037d4:	701a      	strb	r2, [r3, #0]
  uint8_t result;

  if (Pin_stt == *PinOlder_stt)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	1dfa      	adds	r2, r7, #7
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d101      	bne.n	80037e6 <Get_Edge+0x1e>
    return _NONE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e013      	b.n	800380e <Get_Edge+0x46>

  if (Pin_stt == 0)
 80037e6:	1dfb      	adds	r3, r7, #7
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <Get_Edge+0x30>
    result = _FALLING;
 80037ee:	230f      	movs	r3, #15
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e003      	b.n	8003800 <Get_Edge+0x38>
  else
    result = _RISING;
 80037f8:	230f      	movs	r3, #15
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]

  *PinOlder_stt = Pin_stt;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	1dfa      	adds	r2, r7, #7
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	701a      	strb	r2, [r3, #0]
  return result;
 8003808:	230f      	movs	r3, #15
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	781b      	ldrb	r3, [r3, #0]
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <Systick_ReadInput_poll>:

//==================================== HAM Input Co ban ==================================================================
LogicStatus Systick_ReadInput_poll(uint8_t InputIndex, GPIO_PinState Input, uint16_t LowSample_ms, uint16_t HighSample_ms)
{
 8003818:	b5b0      	push	{r4, r5, r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	0005      	movs	r5, r0
 8003820:	000c      	movs	r4, r1
 8003822:	0010      	movs	r0, r2
 8003824:	0019      	movs	r1, r3
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	1c2a      	adds	r2, r5, #0
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	1dbb      	adds	r3, r7, #6
 800382e:	1c22      	adds	r2, r4, #0
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	1c02      	adds	r2, r0, #0
 8003836:	801a      	strh	r2, [r3, #0]
 8003838:	1cbb      	adds	r3, r7, #2
 800383a:	1c0a      	adds	r2, r1, #0
 800383c:	801a      	strh	r2, [r3, #0]
  static uint16_t Input_HighCnt[_IN_MAX] = {0};
  static uint16_t Input_LowCnt[_IN_MAX] = {0};
  static LogicStatus ReturnVal[_IN_MAX] = {_HIGH};

  if (Input == GPIO_PIN_RESET)
 800383e:	1dbb      	adds	r3, r7, #6
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d122      	bne.n	800388c <Systick_ReadInput_poll+0x74>
  {
    Input_HighCnt[InputIndex] = 0;
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <Systick_ReadInput_poll+0xd0>)
 800384c:	0052      	lsls	r2, r2, #1
 800384e:	2100      	movs	r1, #0
 8003850:	52d1      	strh	r1, [r2, r3]
    if (++Input_LowCnt[InputIndex] >= LowSample_ms)
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	4a25      	ldr	r2, [pc, #148]	; (80038ec <Systick_ReadInput_poll+0xd4>)
 8003858:	0059      	lsls	r1, r3, #1
 800385a:	5a8a      	ldrh	r2, [r1, r2]
 800385c:	3201      	adds	r2, #1
 800385e:	b290      	uxth	r0, r2
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <Systick_ReadInput_poll+0xd4>)
 8003862:	0059      	lsls	r1, r3, #1
 8003864:	5288      	strh	r0, [r1, r2]
 8003866:	4a21      	ldr	r2, [pc, #132]	; (80038ec <Systick_ReadInput_poll+0xd4>)
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	5a9b      	ldrh	r3, [r3, r2]
 800386c:	1d3a      	adds	r2, r7, #4
 800386e:	8812      	ldrh	r2, [r2, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d831      	bhi.n	80038d8 <Systick_ReadInput_poll+0xc0>
    {
      Input_LowCnt[InputIndex] = 0;
 8003874:	1dfb      	adds	r3, r7, #7
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <Systick_ReadInput_poll+0xd4>)
 800387a:	0052      	lsls	r2, r2, #1
 800387c:	2100      	movs	r1, #0
 800387e:	52d1      	strh	r1, [r2, r3]
      ReturnVal[InputIndex] = _LOW;
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4a1a      	ldr	r2, [pc, #104]	; (80038f0 <Systick_ReadInput_poll+0xd8>)
 8003886:	2100      	movs	r1, #0
 8003888:	54d1      	strb	r1, [r2, r3]
 800388a:	e025      	b.n	80038d8 <Systick_ReadInput_poll+0xc0>
    }
  }
  else if (Input == GPIO_PIN_SET)
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d121      	bne.n	80038d8 <Systick_ReadInput_poll+0xc0>
  {
    Input_LowCnt[InputIndex] = 0;
 8003894:	1dfb      	adds	r3, r7, #7
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	4b14      	ldr	r3, [pc, #80]	; (80038ec <Systick_ReadInput_poll+0xd4>)
 800389a:	0052      	lsls	r2, r2, #1
 800389c:	2100      	movs	r1, #0
 800389e:	52d1      	strh	r1, [r2, r3]
    if (++Input_HighCnt[InputIndex] >= HighSample_ms)
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <Systick_ReadInput_poll+0xd0>)
 80038a6:	0059      	lsls	r1, r3, #1
 80038a8:	5a8a      	ldrh	r2, [r1, r2]
 80038aa:	3201      	adds	r2, #1
 80038ac:	b290      	uxth	r0, r2
 80038ae:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <Systick_ReadInput_poll+0xd0>)
 80038b0:	0059      	lsls	r1, r3, #1
 80038b2:	5288      	strh	r0, [r1, r2]
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <Systick_ReadInput_poll+0xd0>)
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	5a9b      	ldrh	r3, [r3, r2]
 80038ba:	1cba      	adds	r2, r7, #2
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d80a      	bhi.n	80038d8 <Systick_ReadInput_poll+0xc0>
    {
      Input_HighCnt[InputIndex] = 0;
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <Systick_ReadInput_poll+0xd0>)
 80038c8:	0052      	lsls	r2, r2, #1
 80038ca:	2100      	movs	r1, #0
 80038cc:	52d1      	strh	r1, [r2, r3]
      ReturnVal[InputIndex] = _HIGH;
 80038ce:	1dfb      	adds	r3, r7, #7
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <Systick_ReadInput_poll+0xd8>)
 80038d4:	2101      	movs	r1, #1
 80038d6:	54d1      	strb	r1, [r2, r3]
    }
  }
  return ReturnVal[InputIndex];
 80038d8:	1dfb      	adds	r3, r7, #7
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <Systick_ReadInput_poll+0xd8>)
 80038de:	5cd3      	ldrb	r3, [r2, r3]
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b002      	add	sp, #8
 80038e6:	bdb0      	pop	{r4, r5, r7, pc}
 80038e8:	200002d0 	.word	0x200002d0
 80038ec:	200002dc 	.word	0x200002dc
 80038f0:	20000000 	.word	0x20000000

080038f4 <Flash_ReadDWord>:
	Value = *(__IO uint32_t *)ADR;
	return Value;
}

uint64_t Flash_ReadDWord(uint32_t ADR)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
	uint64_t Value;
	Value = *(__IO uint64_t *)ADR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60ba      	str	r2, [r7, #8]
 8003904:	60fb      	str	r3, [r7, #12]
	return Value;
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	68fb      	ldr	r3, [r7, #12]
}
 800390a:	0010      	movs	r0, r2
 800390c:	0019      	movs	r1, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}

08003914 <Flash_WriteDWord>:

ResultStatus Flash_WriteDWord(uint64_t data64, uint32_t ADR_StartPage)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60b8      	str	r0, [r7, #8]
 800391c:	60f9      	str	r1, [r7, #12]
 800391e:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t eraseStt;
	int8_t	result;

	HAL_FLASH_Unlock();
 8003920:	f004 ff34 	bl	800878c <HAL_FLASH_Unlock>
	// Erase this page
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003924:	2114      	movs	r1, #20
 8003926:	187b      	adds	r3, r7, r1
 8003928:	2202      	movs	r2, #2
 800392a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(ADR_StartPage); //=63
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	22f8      	movs	r2, #248	; 0xf8
 8003930:	0612      	lsls	r2, r2, #24
 8003932:	4694      	mov	ip, r2
 8003934:	4463      	add	r3, ip
 8003936:	0ada      	lsrs	r2, r3, #11
 8003938:	187b      	adds	r3, r7, r1
 800393a:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 800393c:	187b      	adds	r3, r7, r1
 800393e:	2201      	movs	r2, #1
 8003940:	60da      	str	r2, [r3, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &eraseStt) == HAL_OK)
 8003942:	2310      	movs	r3, #16
 8003944:	18fa      	adds	r2, r7, r3
 8003946:	187b      	adds	r3, r7, r1
 8003948:	0011      	movs	r1, r2
 800394a:	0018      	movs	r0, r3
 800394c:	f004 ffcc 	bl	80088e8 <HAL_FLASHEx_Erase>
 8003950:	1e03      	subs	r3, r0, #0
 8003952:	d10b      	bne.n	800396c <Flash_WriteDWord+0x58>
	{
		/*debug_msg("\nErase OK");*/
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,ADR_StartPage, data64) == HAL_OK)
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	2001      	movs	r0, #1
 800395c:	f004 fec8 	bl	80086f0 <HAL_FLASH_Program>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d103      	bne.n	800396c <Flash_WriteDWord+0x58>
			result = _TRUE;
 8003964:	2327      	movs	r3, #39	; 0x27
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
	}
	HAL_FLASH_Lock();
 800396c:	f004 ff32 	bl	80087d4 <HAL_FLASH_Lock>
	result = _FALSE;
 8003970:	2127      	movs	r1, #39	; 0x27
 8003972:	187b      	adds	r3, r7, r1
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
	return result;
 8003978:	187b      	adds	r3, r7, r1
 800397a:	781b      	ldrb	r3, [r3, #0]
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b00a      	add	sp, #40	; 0x28
 8003982:	bd80      	pop	{r7, pc}

08003984 <wireWriteRegister>:
/*!
    @brief  Sends a single command byte over I2C => ghi
*/
/**************************************************************************/
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af04      	add	r7, sp, #16
 800398a:	0002      	movs	r2, r0
 800398c:	1dfb      	adds	r3, r7, #7
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	1c0a      	adds	r2, r1, #0
 8003994:	801a      	strh	r2, [r3, #0]
	uint8_t i2c_temp[2];
	i2c_temp[0] = value>>8;
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	b29b      	uxth	r3, r3
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	210c      	movs	r1, #12
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	701a      	strb	r2, [r3, #0]
	i2c_temp[1] = value;
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	187b      	adds	r3, r7, r1
 80039ae:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Mem_Write(&_USER_DEFINE_I2C_INA219, INA219_ADDRESS<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 80039b0:	1dfb      	adds	r3, r7, #7
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	4809      	ldr	r0, [pc, #36]	; (80039dc <wireWriteRegister+0x58>)
 80039b8:	2301      	movs	r3, #1
 80039ba:	425b      	negs	r3, r3
 80039bc:	9302      	str	r3, [sp, #8]
 80039be:	2302      	movs	r3, #2
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2301      	movs	r3, #1
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	f005 fb6d 	bl	80090a8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f003 f8c6 	bl	8006b60 <HAL_Delay>
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b004      	add	sp, #16
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200005f8 	.word	0x200005f8

080039e0 <wireReadRegister>:
/*!
    @brief  Reads a 16 bit values over I2C
*/
/**************************************************************************/
void wireReadRegister(uint8_t reg, uint16_t *value)
{
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af04      	add	r7, sp, #16
 80039e6:	0002      	movs	r2, r0
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	1dfb      	adds	r3, r7, #7
 80039ec:	701a      	strb	r2, [r3, #0]
	uint8_t i2c_temp[2];
	HAL_I2C_Mem_Read(&_USER_DEFINE_I2C_INA219, INA219_ADDRESS<<1, (uint16_t)reg, 1,i2c_temp, 2, 0xffffffff);
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	4810      	ldr	r0, [pc, #64]	; (8003a38 <wireReadRegister+0x58>)
 80039f6:	2301      	movs	r3, #1
 80039f8:	425b      	negs	r3, r3
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	2302      	movs	r3, #2
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	240c      	movs	r4, #12
 8003a02:	193b      	adds	r3, r7, r4
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2301      	movs	r3, #1
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	f005 fc7b 	bl	8009304 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f003 f8a6 	bl	8006b60 <HAL_Delay>
	*value = ((uint16_t)i2c_temp[0]<<8 )|(uint16_t)i2c_temp[1];
 8003a14:	0021      	movs	r1, r4
 8003a16:	187b      	adds	r3, r7, r1
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	b21a      	sxth	r2, r3
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	4313      	orrs	r3, r2
 8003a26:	b21b      	sxth	r3, r3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	801a      	strh	r2, [r3, #0]
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b005      	add	sp, #20
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	200005f8 	.word	0x200005f8

08003a3c <setCalibration_16V_400mA>:
    @brief set device to calibration which uses the highest precision for
      current measurement (0.1mA), at the expense of
      only supporting 16V at 400mA max.
*/
/**************************************************************************/
void setCalibration_16V_400mA(void) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0

  // 5. Compute the calibration register
  // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
  // Cal = 8192 (0x2000)

  ina219_calValue = 8192;
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <setCalibration_16V_400mA+0x44>)
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	0192      	lsls	r2, r2, #6
 8003a48:	601a      	str	r2, [r3, #0]
  // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
  // MaximumPower = 0.4 * 16V
  // MaximumPower = 6.4W

  // Set multipliers to convert raw current/power values
  ina219_currentDivider_mA = 20;  // Current LSB = 50uA per bit (1000/50 = 20)
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <setCalibration_16V_400mA+0x48>)
 8003a4c:	2214      	movs	r2, #20
 8003a4e:	601a      	str	r2, [r3, #0]
  ina219_powerMultiplier_mW = 1;     // Power LSB = 1mW per bit
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <setCalibration_16V_400mA+0x4c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

  // Set Calibration register to 'Cal' calculated above
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <setCalibration_16V_400mA+0x44>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	2005      	movs	r0, #5
 8003a60:	f7ff ff90 	bl	8003984 <wireWriteRegister>

  // Set Config register to take into account the settings above
  uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8003a64:	1dbb      	adds	r3, r7, #6
 8003a66:	22a0      	movs	r2, #160	; 0xa0
 8003a68:	32ff      	adds	r2, #255	; 0xff
 8003a6a:	801a      	strh	r2, [r3, #0]
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
  wireWriteRegister(INA219_REG_CONFIG, config);
 8003a6c:	1dbb      	adds	r3, r7, #6
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	0019      	movs	r1, r3
 8003a72:	2000      	movs	r0, #0
 8003a74:	f7ff ff86 	bl	8003984 <wireWriteRegister>
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	200002f0 	.word	0x200002f0
 8003a84:	200002e8 	.word	0x200002e8
 8003a88:	200002ec 	.word	0x200002ec

08003a8c <getvoltage_raw>:
/*!
    @brief  Gets the raw bus voltage (16-bit signed integer, so +-32767)
    @return the raw bus voltage reading
*/
/**************************************************************************/
int16_t getvoltage_raw() {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
  uint16_t value;
  wireReadRegister(INA219_REG_voltage, &value);
 8003a92:	1dbb      	adds	r3, r7, #6
 8003a94:	0019      	movs	r1, r3
 8003a96:	2002      	movs	r0, #2
 8003a98:	f7ff ffa2 	bl	80039e0 <wireReadRegister>

  // Shift to the right 3 to drop CNVR and OVF and multiply by LSB
  return (int16_t)((value >> 3) * 4);
 8003a9c:	1dbb      	adds	r3, r7, #6
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	b21b      	sxth	r3, r3
}
 8003aaa:	0018      	movs	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b002      	add	sp, #8
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <getCurrent_raw>:
/*!
    @brief  Gets the raw current value (16-bit signed integer, so +-32767)
    @return the raw current reading
*/
/**************************************************************************/
int16_t getCurrent_raw() {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <getCurrent_raw+0x2c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	2005      	movs	r0, #5
 8003ac4:	f7ff ff5e 	bl	8003984 <wireWriteRegister>

  // Now we can safely read the CURRENT register!
  wireReadRegister(INA219_REG_CURRENT, &value);
 8003ac8:	1dbb      	adds	r3, r7, #6
 8003aca:	0019      	movs	r1, r3
 8003acc:	2004      	movs	r0, #4
 8003ace:	f7ff ff87 	bl	80039e0 <wireReadRegister>

  return (int16_t)value;
 8003ad2:	1dbb      	adds	r3, r7, #6
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b21b      	sxth	r3, r3
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b002      	add	sp, #8
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200002f0 	.word	0x200002f0

08003ae4 <getPower_raw>:
/*!
    @brief  Gets the raw power value (16-bit signed integer, so +-32767)
    @return raw power reading
*/
/**************************************************************************/
int16_t getPower_raw() {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0

  // Sometimes a sharp load will reset the INA219, which will
  // reset the cal register, meaning CURRENT and POWER will
  // not be available ... avoid this by always setting a cal
  // value even if it's an unfortunate extra step
  wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <getPower_raw+0x2c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	0019      	movs	r1, r3
 8003af2:	2005      	movs	r0, #5
 8003af4:	f7ff ff46 	bl	8003984 <wireWriteRegister>

  // Now we can safely read the POWER register!
  wireReadRegister(INA219_REG_POWER, &value);
 8003af8:	1dbb      	adds	r3, r7, #6
 8003afa:	0019      	movs	r1, r3
 8003afc:	2003      	movs	r0, #3
 8003afe:	f7ff ff6f 	bl	80039e0 <wireReadRegister>

  return (int16_t)value;
 8003b02:	1dbb      	adds	r3, r7, #6
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b21b      	sxth	r3, r3
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b002      	add	sp, #8
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	200002f0 	.word	0x200002f0

08003b14 <getvoltage_V>:
/*!
    @brief  Gets the shunt voltage in volts
    @return the bus voltage converted to volts
*/
/**************************************************************************/
float getvoltage_V() {
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
  int16_t value = getvoltage_raw();
 8003b1a:	1dbc      	adds	r4, r7, #6
 8003b1c:	f7ff ffb6 	bl	8003a8c <getvoltage_raw>
 8003b20:	0003      	movs	r3, r0
 8003b22:	8023      	strh	r3, [r4, #0]
  return value * 0.001;
 8003b24:	1dbb      	adds	r3, r7, #6
 8003b26:	2200      	movs	r2, #0
 8003b28:	5e9b      	ldrsh	r3, [r3, r2]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f7fe fe00 	bl	8002730 <__aeabi_i2d>
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <getvoltage_V+0x3c>)
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <getvoltage_V+0x40>)
 8003b34:	f7fd ffaa 	bl	8001a8c <__aeabi_dmul>
 8003b38:	0002      	movs	r2, r0
 8003b3a:	000b      	movs	r3, r1
 8003b3c:	0010      	movs	r0, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	f7fe fe94 	bl	800286c <__aeabi_d2f>
 8003b44:	1c03      	adds	r3, r0, #0
}
 8003b46:	1c18      	adds	r0, r3, #0
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b003      	add	sp, #12
 8003b4c:	bd90      	pop	{r4, r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b54:	3f50624d 	.word	0x3f50624d

08003b58 <getCurrent_mA>:
    @brief  Gets the current value in mA, taking into account the
            config settings and current LSB
    @return the current reading convereted to milliamps
*/
/**************************************************************************/
float getCurrent_mA() {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
  float valueDec = getCurrent_raw();
 8003b5e:	f7ff ffa9 	bl	8003ab4 <getCurrent_raw>
 8003b62:	0003      	movs	r3, r0
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7fc ffc3 	bl	8000af0 <__aeabi_i2f>
 8003b6a:	1c03      	adds	r3, r0, #0
 8003b6c:	607b      	str	r3, [r7, #4]
  valueDec /= ina219_currentDivider_mA;
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <getCurrent_mA+0x38>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	0018      	movs	r0, r3
 8003b74:	f7fd f80a 	bl	8000b8c <__aeabi_ui2f>
 8003b78:	1c03      	adds	r3, r0, #0
 8003b7a:	1c19      	adds	r1, r3, #0
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fc fcc9 	bl	8000514 <__aeabi_fdiv>
 8003b82:	1c03      	adds	r3, r0, #0
 8003b84:	607b      	str	r3, [r7, #4]
  return valueDec;
 8003b86:	687b      	ldr	r3, [r7, #4]
}
 8003b88:	1c18      	adds	r0, r3, #0
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b002      	add	sp, #8
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	200002e8 	.word	0x200002e8

08003b94 <getPower_mW>:
    @brief  Gets the power value in mW, taking into account the
            config settings and current LSB
    @return power reading converted to milliwatts
*/
/**************************************************************************/
float getPower_mW() {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
  float valueDec = getPower_raw();
 8003b9a:	f7ff ffa3 	bl	8003ae4 <getPower_raw>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7fc ffa5 	bl	8000af0 <__aeabi_i2f>
 8003ba6:	1c03      	adds	r3, r0, #0
 8003ba8:	607b      	str	r3, [r7, #4]
  valueDec *= ina219_powerMultiplier_mW;
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <getPower_mW+0x38>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7fc ffec 	bl	8000b8c <__aeabi_ui2f>
 8003bb4:	1c03      	adds	r3, r0, #0
 8003bb6:	1c19      	adds	r1, r3, #0
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fc fe73 	bl	80008a4 <__aeabi_fmul>
 8003bbe:	1c03      	adds	r3, r0, #0
 8003bc0:	607b      	str	r3, [r7, #4]
  return valueDec;
 8003bc2:	687b      	ldr	r3, [r7, #4]
}
 8003bc4:	1c18      	adds	r0, r3, #0
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	200002ec 	.word	0x200002ec

08003bd0 <LEDG_BaseCtrl>:
	else
		LED2_OFF;
}

void LEDG_BaseCtrl(uint8_t ON_OFF)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	1dfb      	adds	r3, r7, #7
 8003bda:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 8003bdc:	1dfb      	adds	r3, r7, #7
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <LEDG_BaseCtrl+0x22>
		LEDG_ON;
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <LEDG_BaseCtrl+0x38>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	2120      	movs	r1, #32
 8003bea:	0018      	movs	r0, r3
 8003bec:	f005 f8a1 	bl	8008d32 <HAL_GPIO_WritePin>
	else
		LEDG_OFF;
}
 8003bf0:	e005      	b.n	8003bfe <LEDG_BaseCtrl+0x2e>
		LEDG_OFF;
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <LEDG_BaseCtrl+0x38>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2120      	movs	r1, #32
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f005 f89a 	bl	8008d32 <HAL_GPIO_WritePin>
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	50000400 	.word	0x50000400

08003c0c <LEDB_BaseCtrl>:

void LEDB_BaseCtrl(uint8_t ON_OFF)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	0002      	movs	r2, r0
 8003c14:	1dfb      	adds	r3, r7, #7
 8003c16:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 8003c18:	1dfb      	adds	r3, r7, #7
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <LEDB_BaseCtrl+0x22>
		LEDB_ON;
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <LEDB_BaseCtrl+0x38>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	2110      	movs	r1, #16
 8003c26:	0018      	movs	r0, r3
 8003c28:	f005 f883 	bl	8008d32 <HAL_GPIO_WritePin>
	else
		LEDB_OFF;
}
 8003c2c:	e005      	b.n	8003c3a <LEDB_BaseCtrl+0x2e>
		LEDB_OFF;
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <LEDB_BaseCtrl+0x38>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	2110      	movs	r1, #16
 8003c34:	0018      	movs	r0, r3
 8003c36:	f005 f87c 	bl	8008d32 <HAL_GPIO_WritePin>
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b002      	add	sp, #8
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	50000400 	.word	0x50000400

08003c48 <BUZ_BaseCtrl>:

void BUZ_BaseCtrl(uint8_t ON_OFF)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	0002      	movs	r2, r0
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	701a      	strb	r2, [r3, #0]
	if (ON_OFF)
 8003c54:	1dfb      	adds	r3, r7, #7
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <BUZ_BaseCtrl+0x24>
	  FAN_ON;
 8003c5c:	23a0      	movs	r3, #160	; 0xa0
 8003c5e:	05db      	lsls	r3, r3, #23
 8003c60:	2201      	movs	r2, #1
 8003c62:	2140      	movs	r1, #64	; 0x40
 8003c64:	0018      	movs	r0, r3
 8003c66:	f005 f864 	bl	8008d32 <HAL_GPIO_WritePin>
	else
	  FAN_OFF;
}
 8003c6a:	e006      	b.n	8003c7a <BUZ_BaseCtrl+0x32>
	  FAN_OFF;
 8003c6c:	23a0      	movs	r3, #160	; 0xa0
 8003c6e:	05db      	lsls	r3, r3, #23
 8003c70:	2200      	movs	r2, #0
 8003c72:	2140      	movs	r1, #64	; 0x40
 8003c74:	0018      	movs	r0, r3
 8003c76:	f005 f85c 	bl	8008d32 <HAL_GPIO_WritePin>
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b002      	add	sp, #8
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <RLSOL_BaseCtrl>:
	else
		SS_5V_CTRL_ON;
}

void RLSOL_BaseCtrl(uint8_t ON_OFF)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	1dfb      	adds	r3, r7, #7
 8003c8e:	701a      	strb	r2, [r3, #0]
    if (ON_OFF)
 8003c90:	1dfb      	adds	r3, r7, #7
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d006      	beq.n	8003ca6 <RLSOL_BaseCtrl+0x22>
      RL_SOL_COM_ON;
 8003c98:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <RLSOL_BaseCtrl+0x38>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	2140      	movs	r1, #64	; 0x40
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f005 f847 	bl	8008d32 <HAL_GPIO_WritePin>
    else
      RL_SOL_COM_OFF;
}
 8003ca4:	e005      	b.n	8003cb2 <RLSOL_BaseCtrl+0x2e>
      RL_SOL_COM_OFF;
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <RLSOL_BaseCtrl+0x38>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2140      	movs	r1, #64	; 0x40
 8003cac:	0018      	movs	r0, r3
 8003cae:	f005 f840 	bl	8008d32 <HAL_GPIO_WritePin>
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b002      	add	sp, #8
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	50000400 	.word	0x50000400

08003cc0 <HAL_UART_TxCpltCallback>:
  #endif

}

//CallBack Interrupt when Tx buffer completed
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  #ifdef _INIT_USE_UART1
       if(huart->Instance == huart1.Instance){
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_UART_TxCpltCallback+0x60>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d106      	bne.n	8003ce2 <HAL_UART_TxCpltCallback+0x22>
	   if(callbackTxCptUart1IrqHandle)
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_UART_TxCpltCallback+0x64>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_UART_TxCpltCallback+0x22>
	     callbackTxCptUart1IrqHandle();
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <HAL_UART_TxCpltCallback+0x64>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4798      	blx	r3
       }
  #endif

  #ifdef _INIT_USE_UART2
       if(huart->Instance == huart2.Instance){
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <HAL_UART_TxCpltCallback+0x68>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d106      	bne.n	8003cfc <HAL_UART_TxCpltCallback+0x3c>
	     if(callbackTxCptUart2IrqHandle)
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_UART_TxCpltCallback+0x6c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_UART_TxCpltCallback+0x3c>
	       callbackTxCptUart2IrqHandle();
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_UART_TxCpltCallback+0x6c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4798      	blx	r3
		 callbackTxCptUart3IrqHandle();
       }
  #endif

#ifdef _INIT_USE_UART4
     if(huart->Instance == huart4.Instance){
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_UART_TxCpltCallback+0x70>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d106      	bne.n	8003d16 <HAL_UART_TxCpltCallback+0x56>
	       if(callbackTxCptUart4IrqHandle)
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_UART_TxCpltCallback+0x74>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_UART_TxCpltCallback+0x56>
		 callbackTxCptUart4IrqHandle();
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <HAL_UART_TxCpltCallback+0x74>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4798      	blx	r3
     }
#endif
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	20000740 	.word	0x20000740
 8003d24:	200002f8 	.word	0x200002f8
 8003d28:	200007d4 	.word	0x200007d4
 8003d2c:	200002fc 	.word	0x200002fc
 8003d30:	200008fc 	.word	0x200008fc
 8003d34:	20000300 	.word	0x20000300

08003d38 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadcX){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  //80-120us
  if (hadcX->Instance == hadc1.Instance){

  }

}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b002      	add	sp, #8
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim3.Instance)
  {

  }

  if (htim->Instance == htim6.Instance)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d101      	bne.n	8003d60 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
//      if(callbackTimer6IrqHandle)
//	callbackTimer6IrqHandle();
      UV_CAPSS_periodic_poll();
 8003d5c:	f7ff fcde 	bl	800371c <UV_CAPSS_periodic_poll>
  }

  //1ms
  if (htim->Instance == htim7.Instance)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d106      	bne.n	8003d7a <HAL_TIM_PeriodElapsedCallback+0x32>
  {
      if(callbackTimer7IrqHandle)
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_TIM_PeriodElapsedCallback+0x32>
	callbackTimer7IrqHandle();
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4798      	blx	r3
  //103 uS
  if (htim->Instance == htim14.Instance)
  {

  }
}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	200006a8 	.word	0x200006a8
 8003d88:	200006f4 	.word	0x200006f4
 8003d8c:	200002f4 	.word	0x200002f4

08003d90 <HAL_SYSTICK_Callback>:

/**
  * @brief  SYSTICK callback.
  * @retval None
  */
void HAL_SYSTICK_Callback(void){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  if(callbackSystickHandle)
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <HAL_SYSTICK_Callback+0x18>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_SYSTICK_Callback+0x12>
    callbackSystickHandle();
 8003d9c:	4b02      	ldr	r3, [pc, #8]	; (8003da8 <HAL_SYSTICK_Callback+0x18>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4798      	blx	r3
}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000008 	.word	0x20000008

08003dac <CLCD_Delay>:

CLCD_I2C_Name LCD1;

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	0002      	movs	r2, r0
 8003db4:	1dbb      	adds	r3, r7, #6
 8003db6:	801a      	strh	r2, [r3, #0]
	HAL_Delay(Time);
 8003db8:	1dbb      	adds	r3, r7, #6
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f002 fecf 	bl	8006b60 <HAL_Delay>
}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8003dca:	b5b0      	push	{r4, r5, r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af02      	add	r7, sp, #8
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	0008      	movs	r0, r1
 8003dd4:	0011      	movs	r1, r2
 8003dd6:	1cfb      	adds	r3, r7, #3
 8003dd8:	1c02      	adds	r2, r0, #0
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	1cbb      	adds	r3, r7, #2
 8003dde:	1c0a      	adds	r2, r1, #0
 8003de0:	701a      	strb	r2, [r3, #0]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8003de2:	200f      	movs	r0, #15
 8003de4:	183b      	adds	r3, r7, r0
 8003de6:	1cfa      	adds	r2, r7, #3
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	210f      	movs	r1, #15
 8003dec:	438a      	bics	r2, r1
 8003dee:	701a      	strb	r2, [r3, #0]
	Data_L = (Data<<4)&0xF0;
 8003df0:	1cfb      	adds	r3, r7, #3
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	011a      	lsls	r2, r3, #4
 8003df6:	240e      	movs	r4, #14
 8003df8:	193b      	adds	r3, r7, r4
 8003dfa:	701a      	strb	r2, [r3, #0]
	if(LCD->BACKLIGHT)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7adb      	ldrb	r3, [r3, #11]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <CLCD_WriteI2C+0x52>
	{
		Data_H |= LCD_BACKLIGHT;
 8003e04:	183b      	adds	r3, r7, r0
 8003e06:	183a      	adds	r2, r7, r0
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	2108      	movs	r1, #8
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	701a      	strb	r2, [r3, #0]
		Data_L |= LCD_BACKLIGHT;
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	193a      	adds	r2, r7, r4
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	2108      	movs	r1, #8
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == CLCD_DATA)
 8003e1c:	1cbb      	adds	r3, r7, #2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d10e      	bne.n	8003e42 <CLCD_WriteI2C+0x78>
	{
		Data_H |= LCD_RS;
 8003e24:	220f      	movs	r2, #15
 8003e26:	18bb      	adds	r3, r7, r2
 8003e28:	18ba      	adds	r2, r7, r2
 8003e2a:	7812      	ldrb	r2, [r2, #0]
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	701a      	strb	r2, [r3, #0]
		Data_L |= LCD_RS;
 8003e32:	220e      	movs	r2, #14
 8003e34:	18bb      	adds	r3, r7, r2
 8003e36:	18ba      	adds	r2, r7, r2
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e011      	b.n	8003e66 <CLCD_WriteI2C+0x9c>
	}
	else if(Mode == CLCD_COMMAND)
 8003e42:	1cbb      	adds	r3, r7, #2
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10d      	bne.n	8003e66 <CLCD_WriteI2C+0x9c>
	{
		Data_H &= ~LCD_RS;
 8003e4a:	220f      	movs	r2, #15
 8003e4c:	18bb      	adds	r3, r7, r2
 8003e4e:	18ba      	adds	r2, r7, r2
 8003e50:	7812      	ldrb	r2, [r2, #0]
 8003e52:	2101      	movs	r1, #1
 8003e54:	438a      	bics	r2, r1
 8003e56:	701a      	strb	r2, [r3, #0]
		Data_L &= ~LCD_RS;
 8003e58:	220e      	movs	r2, #14
 8003e5a:	18bb      	adds	r3, r7, r2
 8003e5c:	18ba      	adds	r2, r7, r2
 8003e5e:	7812      	ldrb	r2, [r2, #0]
 8003e60:	2101      	movs	r1, #1
 8003e62:	438a      	bics	r2, r1
 8003e64:	701a      	strb	r2, [r3, #0]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8003e66:	250f      	movs	r5, #15
 8003e68:	197b      	adds	r3, r7, r5
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	2408      	movs	r4, #8
 8003e74:	193b      	adds	r3, r7, r4
 8003e76:	701a      	strb	r2, [r3, #0]
	CLCD_Delay(1);
 8003e78:	2001      	movs	r0, #1
 8003e7a:	f7ff ff97 	bl	8003dac <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8003e7e:	0021      	movs	r1, r4
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	197a      	adds	r2, r7, r5
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	705a      	strb	r2, [r3, #1]
	Data_I2C[2] = Data_L|LCD_EN;
 8003e88:	250e      	movs	r5, #14
 8003e8a:	197b      	adds	r3, r7, r5
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2204      	movs	r2, #4
 8003e90:	4313      	orrs	r3, r2
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	000c      	movs	r4, r1
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	709a      	strb	r2, [r3, #2]
	CLCD_Delay(1);
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f7ff ff86 	bl	8003dac <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8003ea0:	193b      	adds	r3, r7, r4
 8003ea2:	197a      	adds	r2, r7, r5
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	b299      	uxth	r1, r3
 8003eb2:	193a      	adds	r2, r7, r4
 8003eb4:	23fa      	movs	r3, #250	; 0xfa
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2304      	movs	r3, #4
 8003ebc:	f004 ffec 	bl	8008e98 <HAL_I2C_Master_Transmit>
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bdb0      	pop	{r4, r5, r7, pc}

08003ec8 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	1dfb      	adds	r3, r7, #7
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	1c0a      	adds	r2, r1, #0
 8003edc:	701a      	strb	r2, [r3, #0]
	LCD->I2C = hi2c_CLCD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1dfa      	adds	r2, r7, #7
 8003ee8:	7812      	ldrb	r2, [r2, #0]
 8003eea:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1dba      	adds	r2, r7, #6
 8003ef0:	7812      	ldrb	r2, [r2, #0]
 8003ef2:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	2318      	movs	r3, #24
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	7193      	strb	r3, [r2, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2228      	movs	r2, #40	; 0x28
 8003f02:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2206      	movs	r2, #6
 8003f08:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	220c      	movs	r2, #12
 8003f0e:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2214      	movs	r2, #20
 8003f14:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(200);
 8003f1c:	20c8      	movs	r0, #200	; 0xc8
 8003f1e:	f7ff ff45 	bl	8003dac <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	2133      	movs	r1, #51	; 0x33
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7ff ff4e 	bl	8003dca <CLCD_WriteI2C>
	CLCD_Delay(20);
 8003f2e:	2014      	movs	r0, #20
 8003f30:	f7ff ff3c 	bl	8003dac <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2133      	movs	r1, #51	; 0x33
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7ff ff45 	bl	8003dca <CLCD_WriteI2C>
	CLCD_Delay(20);
 8003f40:	2014      	movs	r0, #20
 8003f42:	f7ff ff33 	bl	8003dac <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2132      	movs	r1, #50	; 0x32
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7ff ff3c 	bl	8003dca <CLCD_WriteI2C>
	CLCD_Delay(20);
 8003f52:	2014      	movs	r0, #20
 8003f54:	f7ff ff2a 	bl	8003dac <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2120      	movs	r1, #32
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff ff33 	bl	8003dca <CLCD_WriteI2C>
	CLCD_Delay(20);
 8003f64:	2014      	movs	r0, #20
 8003f66:	f7ff ff21 	bl	8003dac <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	79d9      	ldrb	r1, [r3, #7]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7ff ff29 	bl	8003dca <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	7a19      	ldrb	r1, [r3, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff ff22 	bl	8003dca <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	7a59      	ldrb	r1, [r3, #9]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7ff ff1b 	bl	8003dca <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	7a99      	ldrb	r1, [r3, #10]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff ff14 	bl	8003dca <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff ff0e 	bl	8003dca <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7ff ff08 	bl	8003dca <CLCD_WriteI2C>
}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	0008      	movs	r0, r1
 8003fcc:	0011      	movs	r1, r2
 8003fce:	1cfb      	adds	r3, r7, #3
 8003fd0:	1c02      	adds	r2, r0, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	1cbb      	adds	r3, r7, #2
 8003fd6:	1c0a      	adds	r2, r1, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
	uint8_t DRAM_ADDRESS = 0x00;
 8003fda:	230f      	movs	r3, #15
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
	if(Xpos >= LCD->COLUMS)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	795b      	ldrb	r3, [r3, #5]
 8003fe6:	1cfa      	adds	r2, r7, #3
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d304      	bcc.n	8003ff8 <CLCD_I2C_SetCursor+0x36>
	{
		Xpos = LCD->COLUMS - 1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	795a      	ldrb	r2, [r3, #5]
 8003ff2:	1cfb      	adds	r3, r7, #3
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
	}
	if(Ypos >= LCD->ROWS)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	799b      	ldrb	r3, [r3, #6]
 8003ffc:	1cba      	adds	r2, r7, #2
 8003ffe:	7812      	ldrb	r2, [r2, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d304      	bcc.n	800400e <CLCD_I2C_SetCursor+0x4c>
	{
		Ypos = LCD->ROWS -1;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	799a      	ldrb	r2, [r3, #6]
 8004008:	1cbb      	adds	r3, r7, #2
 800400a:	3a01      	subs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
	}
	if(Ypos == 0)
 800400e:	1cbb      	adds	r3, r7, #2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8004016:	230f      	movs	r3, #15
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	1cfa      	adds	r2, r7, #3
 800401c:	7812      	ldrb	r2, [r2, #0]
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	e01f      	b.n	8004062 <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 1)
 8004022:	1cbb      	adds	r3, r7, #2
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d106      	bne.n	8004038 <CLCD_I2C_SetCursor+0x76>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800402a:	230f      	movs	r3, #15
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	1cfa      	adds	r2, r7, #3
 8004030:	7812      	ldrb	r2, [r2, #0]
 8004032:	3240      	adds	r2, #64	; 0x40
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e014      	b.n	8004062 <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 2)
 8004038:	1cbb      	adds	r3, r7, #2
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d106      	bne.n	800404e <CLCD_I2C_SetCursor+0x8c>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8004040:	230f      	movs	r3, #15
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	1cfa      	adds	r2, r7, #3
 8004046:	7812      	ldrb	r2, [r2, #0]
 8004048:	3214      	adds	r2, #20
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	e009      	b.n	8004062 <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 3)
 800404e:	1cbb      	adds	r3, r7, #2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d105      	bne.n	8004062 <CLCD_I2C_SetCursor+0xa0>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8004056:	230f      	movs	r3, #15
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	1cfa      	adds	r2, r7, #3
 800405c:	7812      	ldrb	r2, [r2, #0]
 800405e:	3254      	adds	r2, #84	; 0x54
 8004060:	701a      	strb	r2, [r3, #0]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8004062:	230f      	movs	r3, #15
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	4252      	negs	r2, r2
 800406c:	4313      	orrs	r3, r2
 800406e:	b2d9      	uxtb	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff fea8 	bl	8003dca <CLCD_WriteI2C>
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b004      	add	sp, #16
 8004080:	bd80      	pop	{r7, pc}

08004082 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	000a      	movs	r2, r1
 800408c:	1cfb      	adds	r3, r7, #3
 800408e:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8004090:	1cfb      	adds	r3, r7, #3
 8004092:	7819      	ldrb	r1, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff fe96 	bl	8003dca <CLCD_WriteI2C>
}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b002      	add	sp, #8
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80040b0:	e008      	b.n	80040c4 <CLCD_I2C_WriteString+0x1e>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	603a      	str	r2, [r7, #0]
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	0011      	movs	r1, r2
 80040be:	0018      	movs	r0, r3
 80040c0:	f7ff ffdf 	bl	8004082 <CLCD_I2C_WriteChar>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f2      	bne.n	80040b2 <CLCD_I2C_WriteString+0xc>
}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b002      	add	sp, #8
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <ShowLCD_String>:
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}

void ShowLCD_String(char *str, uint8_t col, uint8_t row)
{
 80040d8:	b5b0      	push	{r4, r5, r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	0008      	movs	r0, r1
 80040e2:	0011      	movs	r1, r2
 80040e4:	1cfb      	adds	r3, r7, #3
 80040e6:	1c02      	adds	r2, r0, #0
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	1cbb      	adds	r3, r7, #2
 80040ec:	1c0a      	adds	r2, r1, #0
 80040ee:	701a      	strb	r2, [r3, #0]
	char buffer[_USER_TEXT_LCD_NUM_COL];

	if (row >= _USER_TEXT_LCD_NUM_ROW)
 80040f0:	1cbb      	adds	r3, r7, #2
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d842      	bhi.n	800417e <ShowLCD_String+0xa6>
		return;
	for (uint8_t i = 0; i <= _USER_TEXT_LCD_NUM_COL; i++)
 80040f8:	231f      	movs	r3, #31
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e021      	b.n	8004146 <ShowLCD_String+0x6e>
	{
		if (i < strlen(str))
 8004102:	251f      	movs	r5, #31
 8004104:	197b      	adds	r3, r7, r5
 8004106:	781c      	ldrb	r4, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	0018      	movs	r0, r3
 800410c:	f7fb fff8 	bl	8000100 <strlen>
 8004110:	0003      	movs	r3, r0
 8004112:	429c      	cmp	r4, r3
 8004114:	d20a      	bcs.n	800412c <ShowLCD_String+0x54>
			buffer[i] = str[i];
 8004116:	197b      	adds	r3, r7, r5
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	18d2      	adds	r2, r2, r3
 800411e:	197b      	adds	r3, r7, r5
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	7811      	ldrb	r1, [r2, #0]
 8004124:	220c      	movs	r2, #12
 8004126:	18ba      	adds	r2, r7, r2
 8004128:	54d1      	strb	r1, [r2, r3]
 800412a:	e006      	b.n	800413a <ShowLCD_String+0x62>
		else
			buffer[i] = ' ';
 800412c:	231f      	movs	r3, #31
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	220c      	movs	r2, #12
 8004134:	18ba      	adds	r2, r7, r2
 8004136:	2120      	movs	r1, #32
 8004138:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i <= _USER_TEXT_LCD_NUM_COL; i++)
 800413a:	211f      	movs	r1, #31
 800413c:	187b      	adds	r3, r7, r1
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	187b      	adds	r3, r7, r1
 8004142:	3201      	adds	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	231f      	movs	r3, #31
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b10      	cmp	r3, #16
 800414e:	d9d8      	bls.n	8004102 <ShowLCD_String+0x2a>
	}
	buffer[_USER_TEXT_LCD_NUM_COL-col] = 0;
 8004150:	1cfb      	adds	r3, r7, #3
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	240c      	movs	r4, #12
 800415a:	193a      	adds	r2, r7, r4
 800415c:	2100      	movs	r1, #0
 800415e:	54d1      	strb	r1, [r2, r3]

	CLCD_I2C_SetCursor(&LCD1, col, row);
 8004160:	1cbb      	adds	r3, r7, #2
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	1cfb      	adds	r3, r7, #3
 8004166:	7819      	ldrb	r1, [r3, #0]
 8004168:	4b07      	ldr	r3, [pc, #28]	; (8004188 <ShowLCD_String+0xb0>)
 800416a:	0018      	movs	r0, r3
 800416c:	f7ff ff29 	bl	8003fc2 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, buffer);
 8004170:	193a      	adds	r2, r7, r4
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <ShowLCD_String+0xb0>)
 8004174:	0011      	movs	r1, r2
 8004176:	0018      	movs	r0, r3
 8004178:	f7ff ff95 	bl	80040a6 <CLCD_I2C_WriteString>
 800417c:	e000      	b.n	8004180 <ShowLCD_String+0xa8>
		return;
 800417e:	46c0      	nop			; (mov r8, r8)
}
 8004180:	46bd      	mov	sp, r7
 8004182:	b008      	add	sp, #32
 8004184:	bdb0      	pop	{r4, r5, r7, pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	20000304 	.word	0x20000304

0800418c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004190:	f3bf 8f4f 	dsb	sy
}
 8004194:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004196:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <__NVIC_SystemReset+0x1c>)
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <__NVIC_SystemReset+0x20>)
 800419a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800419c:	f3bf 8f4f 	dsb	sy
}
 80041a0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	e7fd      	b.n	80041a2 <__NVIC_SystemReset+0x16>
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	e000ed00 	.word	0xe000ed00
 80041ac:	05fa0004 	.word	0x05fa0004

080041b0 <getBright>:
void callback_calibGetResult(CheckStatus True_false);
void gotoFinished(TestResultStt success_error);
void callback_btnConfigHandle(uint16_t ID, bt_eventFunc_t eventFunc, bt_typeArg_t agr);

//Các giá trị lấy từ thực tế
PhotoCell_Status getBright(){
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
  uint16_t SaiSo_toi;

  if(TOOL.adcLightStart < 400){
 80041b6:	4b70      	ldr	r3, [pc, #448]	; (8004378 <getBright+0x1c8>)
 80041b8:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80041ba:	23c8      	movs	r3, #200	; 0xc8
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	429a      	cmp	r2, r3
 80041c0:	d20b      	bcs.n	80041da <getBright+0x2a>
      TOOL.dkAnhSang=_AS_QuaSang_ERROR;
 80041c2:	4b6d      	ldr	r3, [pc, #436]	; (8004378 <getBright+0x1c8>)
 80041c4:	2232      	movs	r2, #50	; 0x32
 80041c6:	2100      	movs	r1, #0
 80041c8:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_QUASANG_LOI);
 80041ca:	4a6c      	ldr	r2, [pc, #432]	; (800437c <getBright+0x1cc>)
 80041cc:	4b6c      	ldr	r3, [pc, #432]	; (8004380 <getBright+0x1d0>)
 80041ce:	0011      	movs	r1, r2
 80041d0:	0018      	movs	r0, r3
 80041d2:	f009 fb25 	bl	800d820 <siprintf>
      return _PhotoCell_other;
 80041d6:	2304      	movs	r3, #4
 80041d8:	e0c9      	b.n	800436e <getBright+0x1be>
  }
  else if(_LIMIT(TOOL.adcLightStart,401,1300)){
 80041da:	4b67      	ldr	r3, [pc, #412]	; (8004378 <getBright+0x1c8>)
 80041dc:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80041de:	23c8      	movs	r3, #200	; 0xc8
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d912      	bls.n	800420c <getBright+0x5c>
 80041e6:	4b64      	ldr	r3, [pc, #400]	; (8004378 <getBright+0x1c8>)
 80041e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80041ea:	4a66      	ldr	r2, [pc, #408]	; (8004384 <getBright+0x1d4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d80d      	bhi.n	800420c <getBright+0x5c>
      TOOL.dkAnhSang=_AS_QuaSang_OK;
 80041f0:	4b61      	ldr	r3, [pc, #388]	; (8004378 <getBright+0x1c8>)
 80041f2:	2232      	movs	r2, #50	; 0x32
 80041f4:	2101      	movs	r1, #1
 80041f6:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_QUASANG_OK);
 80041f8:	4a63      	ldr	r2, [pc, #396]	; (8004388 <getBright+0x1d8>)
 80041fa:	4b61      	ldr	r3, [pc, #388]	; (8004380 <getBright+0x1d0>)
 80041fc:	0011      	movs	r1, r2
 80041fe:	0018      	movs	r0, r3
 8004200:	f009 fb0e 	bl	800d820 <siprintf>
      SaiSo_toi=1500;
 8004204:	1dbb      	adds	r3, r7, #6
 8004206:	4a61      	ldr	r2, [pc, #388]	; (800438c <getBright+0x1dc>)
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	e076      	b.n	80042fa <getBright+0x14a>
  }
  else if(_LIMIT(TOOL.adcLightStart,1301,2000)){
 800420c:	4b5a      	ldr	r3, [pc, #360]	; (8004378 <getBright+0x1c8>)
 800420e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004210:	4a5c      	ldr	r2, [pc, #368]	; (8004384 <getBright+0x1d4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d913      	bls.n	800423e <getBright+0x8e>
 8004216:	4b58      	ldr	r3, [pc, #352]	; (8004378 <getBright+0x1c8>)
 8004218:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800421a:	23fa      	movs	r3, #250	; 0xfa
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	429a      	cmp	r2, r3
 8004220:	d80d      	bhi.n	800423e <getBright+0x8e>
      TOOL.dkAnhSang=_AS_HoiSang_OK;
 8004222:	4b55      	ldr	r3, [pc, #340]	; (8004378 <getBright+0x1c8>)
 8004224:	2232      	movs	r2, #50	; 0x32
 8004226:	2102      	movs	r1, #2
 8004228:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_HOISANG_OK);
 800422a:	4a59      	ldr	r2, [pc, #356]	; (8004390 <getBright+0x1e0>)
 800422c:	4b54      	ldr	r3, [pc, #336]	; (8004380 <getBright+0x1d0>)
 800422e:	0011      	movs	r1, r2
 8004230:	0018      	movs	r0, r3
 8004232:	f009 faf5 	bl	800d820 <siprintf>
      SaiSo_toi=1300;
 8004236:	1dbb      	adds	r3, r7, #6
 8004238:	4a52      	ldr	r2, [pc, #328]	; (8004384 <getBright+0x1d4>)
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	e05d      	b.n	80042fa <getBright+0x14a>
  }
  else if(_LIMIT(TOOL.adcLightStart,2001,2800)){
 800423e:	4b4e      	ldr	r3, [pc, #312]	; (8004378 <getBright+0x1c8>)
 8004240:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8004242:	23fa      	movs	r3, #250	; 0xfa
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	429a      	cmp	r2, r3
 8004248:	d914      	bls.n	8004274 <getBright+0xc4>
 800424a:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <getBright+0x1c8>)
 800424c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800424e:	23af      	movs	r3, #175	; 0xaf
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	429a      	cmp	r2, r3
 8004254:	d80e      	bhi.n	8004274 <getBright+0xc4>
      TOOL.dkAnhSang=_AS_SangBt_OK;
 8004256:	4b48      	ldr	r3, [pc, #288]	; (8004378 <getBright+0x1c8>)
 8004258:	2232      	movs	r2, #50	; 0x32
 800425a:	2103      	movs	r1, #3
 800425c:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_SANGBT_OK);
 800425e:	4a4d      	ldr	r2, [pc, #308]	; (8004394 <getBright+0x1e4>)
 8004260:	4b47      	ldr	r3, [pc, #284]	; (8004380 <getBright+0x1d0>)
 8004262:	0011      	movs	r1, r2
 8004264:	0018      	movs	r0, r3
 8004266:	f009 fadb 	bl	800d820 <siprintf>
      SaiSo_toi=700;
 800426a:	1dbb      	adds	r3, r7, #6
 800426c:	22af      	movs	r2, #175	; 0xaf
 800426e:	0092      	lsls	r2, r2, #2
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	e042      	b.n	80042fa <getBright+0x14a>
  }
  else if(_LIMIT(TOOL.adcLightStart,2801,3000)){
 8004274:	4b40      	ldr	r3, [pc, #256]	; (8004378 <getBright+0x1c8>)
 8004276:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8004278:	23af      	movs	r3, #175	; 0xaf
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	429a      	cmp	r2, r3
 800427e:	d913      	bls.n	80042a8 <getBright+0xf8>
 8004280:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <getBright+0x1c8>)
 8004282:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004284:	4a44      	ldr	r2, [pc, #272]	; (8004398 <getBright+0x1e8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d80e      	bhi.n	80042a8 <getBright+0xf8>
      TOOL.dkAnhSang=_AS_HoiToi_OK;
 800428a:	4b3b      	ldr	r3, [pc, #236]	; (8004378 <getBright+0x1c8>)
 800428c:	2232      	movs	r2, #50	; 0x32
 800428e:	2104      	movs	r1, #4
 8004290:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_HOITOI_OK);
 8004292:	4a42      	ldr	r2, [pc, #264]	; (800439c <getBright+0x1ec>)
 8004294:	4b3a      	ldr	r3, [pc, #232]	; (8004380 <getBright+0x1d0>)
 8004296:	0011      	movs	r1, r2
 8004298:	0018      	movs	r0, r3
 800429a:	f009 fac1 	bl	800d820 <siprintf>
      SaiSo_toi=600;
 800429e:	1dbb      	adds	r3, r7, #6
 80042a0:	2296      	movs	r2, #150	; 0x96
 80042a2:	0092      	lsls	r2, r2, #2
 80042a4:	801a      	strh	r2, [r3, #0]
 80042a6:	e028      	b.n	80042fa <getBright+0x14a>
  }
  else if(_LIMIT(TOOL.adcLightStart,3001,3500)){
 80042a8:	4b33      	ldr	r3, [pc, #204]	; (8004378 <getBright+0x1c8>)
 80042aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80042ac:	4a3a      	ldr	r2, [pc, #232]	; (8004398 <getBright+0x1e8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d912      	bls.n	80042d8 <getBright+0x128>
 80042b2:	4b31      	ldr	r3, [pc, #196]	; (8004378 <getBright+0x1c8>)
 80042b4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80042b6:	4a3a      	ldr	r2, [pc, #232]	; (80043a0 <getBright+0x1f0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d80d      	bhi.n	80042d8 <getBright+0x128>
      TOOL.dkAnhSang=_AS_ToiBt_OK;
 80042bc:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <getBright+0x1c8>)
 80042be:	2232      	movs	r2, #50	; 0x32
 80042c0:	2105      	movs	r1, #5
 80042c2:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_TOIBT_OK);
 80042c4:	4a37      	ldr	r2, [pc, #220]	; (80043a4 <getBright+0x1f4>)
 80042c6:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <getBright+0x1d0>)
 80042c8:	0011      	movs	r1, r2
 80042ca:	0018      	movs	r0, r3
 80042cc:	f009 faa8 	bl	800d820 <siprintf>
      SaiSo_toi=200;
 80042d0:	1dbb      	adds	r3, r7, #6
 80042d2:	22c8      	movs	r2, #200	; 0xc8
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e010      	b.n	80042fa <getBright+0x14a>
  }
  else if(TOOL.adcLightStart > 3500){
 80042d8:	4b27      	ldr	r3, [pc, #156]	; (8004378 <getBright+0x1c8>)
 80042da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80042dc:	4a30      	ldr	r2, [pc, #192]	; (80043a0 <getBright+0x1f0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d90b      	bls.n	80042fa <getBright+0x14a>
      TOOL.dkAnhSang=_AS_QuaToi_ERROR;
 80042e2:	4b25      	ldr	r3, [pc, #148]	; (8004378 <getBright+0x1c8>)
 80042e4:	2232      	movs	r2, #50	; 0x32
 80042e6:	2106      	movs	r1, #6
 80042e8:	5499      	strb	r1, [r3, r2]
      sprintf(stringBuffer,D0_BOTEST_QUATOI_LOI);
 80042ea:	4a2f      	ldr	r2, [pc, #188]	; (80043a8 <getBright+0x1f8>)
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <getBright+0x1d0>)
 80042ee:	0011      	movs	r1, r2
 80042f0:	0018      	movs	r0, r3
 80042f2:	f009 fa95 	bl	800d820 <siprintf>
      return _PhotoCell_other;
 80042f6:	2304      	movs	r3, #4
 80042f8:	e039      	b.n	800436e <getBright+0x1be>
  }

  if(ADC_Arr[_ID_ADC_ptcHsink]==0)
 80042fa:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <getBright+0x1fc>)
 80042fc:	885b      	ldrh	r3, [r3, #2]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <getBright+0x158>
    return _PhotoCell_noInit;
 8004304:	2300      	movs	r3, #0
 8004306:	e032      	b.n	800436e <getBright+0x1be>
  else if(_LIMIT(ADC_Arr[_ID_ADC_ptcHsink],100,910))
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <getBright+0x1fc>)
 800430a:	885b      	ldrh	r3, [r3, #2]
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b63      	cmp	r3, #99	; 0x63
 8004310:	d907      	bls.n	8004322 <getBright+0x172>
 8004312:	4b26      	ldr	r3, [pc, #152]	; (80043ac <getBright+0x1fc>)
 8004314:	885b      	ldrh	r3, [r3, #2]
 8004316:	b29b      	uxth	r3, r3
 8004318:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <getBright+0x200>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d801      	bhi.n	8004322 <getBright+0x172>
      return _PhotoCell_LedGreenOn;
 800431e:	2301      	movs	r3, #1
 8004320:	e025      	b.n	800436e <getBright+0x1be>
  else if(_LIMIT(ADC_Arr[_ID_ADC_ptcHsink],911,3800-SaiSo_toi))
 8004322:	4b22      	ldr	r3, [pc, #136]	; (80043ac <getBright+0x1fc>)
 8004324:	885b      	ldrh	r3, [r3, #2]
 8004326:	b29b      	uxth	r3, r3
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <getBright+0x200>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d90b      	bls.n	8004346 <getBright+0x196>
 800432e:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <getBright+0x1fc>)
 8004330:	885b      	ldrh	r3, [r3, #2]
 8004332:	b29b      	uxth	r3, r3
 8004334:	0019      	movs	r1, r3
 8004336:	1dbb      	adds	r3, r7, #6
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <getBright+0x204>)
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	4299      	cmp	r1, r3
 8004340:	dc01      	bgt.n	8004346 <getBright+0x196>
    return _PhotoCell_uncovered;
 8004342:	2302      	movs	r3, #2
 8004344:	e013      	b.n	800436e <getBright+0x1be>
  else if(_LIMIT(ADC_Arr[_ID_ADC_ptcHsink],3800-SaiSo_toi,4000))
 8004346:	4b19      	ldr	r3, [pc, #100]	; (80043ac <getBright+0x1fc>)
 8004348:	885b      	ldrh	r3, [r3, #2]
 800434a:	b29b      	uxth	r3, r3
 800434c:	0019      	movs	r1, r3
 800434e:	1dbb      	adds	r3, r7, #6
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <getBright+0x204>)
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	4299      	cmp	r1, r3
 8004358:	db08      	blt.n	800436c <getBright+0x1bc>
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <getBright+0x1fc>)
 800435c:	885b      	ldrh	r3, [r3, #2]
 800435e:	b29a      	uxth	r2, r3
 8004360:	23fa      	movs	r3, #250	; 0xfa
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	429a      	cmp	r2, r3
 8004366:	d801      	bhi.n	800436c <getBright+0x1bc>
    return _PhotoCell_covered;
 8004368:	2303      	movs	r3, #3
 800436a:	e000      	b.n	800436e <getBright+0x1be>
  else
    return _PhotoCell_other;
 800436c:	2304      	movs	r3, #4
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b002      	add	sp, #8
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	20000448 	.word	0x20000448
 800437c:	0800fc90 	.word	0x0800fc90
 8004380:	200004f4 	.word	0x200004f4
 8004384:	00000514 	.word	0x00000514
 8004388:	0800fc9c 	.word	0x0800fc9c
 800438c:	000005dc 	.word	0x000005dc
 8004390:	0800fca8 	.word	0x0800fca8
 8004394:	0800fcb4 	.word	0x0800fcb4
 8004398:	00000bb8 	.word	0x00000bb8
 800439c:	0800fcc0 	.word	0x0800fcc0
 80043a0:	00000dac 	.word	0x00000dac
 80043a4:	0800fccc 	.word	0x0800fccc
 80043a8:	0800fcd8 	.word	0x0800fcd8
 80043ac:	20000440 	.word	0x20000440
 80043b0:	0000038e 	.word	0x0000038e
 80043b4:	00000ed8 	.word	0x00000ed8

080043b8 <updateLcd>:

/*Functions*/
void updateLcd(){
 80043b8:	b5b0      	push	{r4, r5, r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af02      	add	r7, sp, #8
  static char str_cmp0[_STRING_BUFFER_SIZE],
	      str_cmp1[_STRING_BUFFER_SIZE];
  uint8_t result1, result2;

  if(!timer_expired(&_timer_updateLCD))
 80043be:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <updateLcd+0x13c>)
 80043c0:	0018      	movs	r0, r3
 80043c2:	f7fe fe8b 	bl	80030dc <timer_expired>
 80043c6:	1e03      	subs	r3, r0, #0
 80043c8:	d100      	bne.n	80043cc <updateLcd+0x14>
 80043ca:	e08c      	b.n	80044e6 <updateLcd+0x12e>
    return;
  timer_set(&_timer_updateLCD, 250);
 80043cc:	4b49      	ldr	r3, [pc, #292]	; (80044f4 <updateLcd+0x13c>)
 80043ce:	21fa      	movs	r1, #250	; 0xfa
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7fe fe59 	bl	8003088 <timer_set>

  //Hien hien LCD theo mode
  if(TOOL.Lcd_id==_DISPLAY_MAIN)
 80043d6:	4b48      	ldr	r3, [pc, #288]	; (80044f8 <updateLcd+0x140>)
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10d      	bne.n	80043fa <updateLcd+0x42>
  {
      if(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE)sprintf(TOOL.LcdStr_row[1],"LOI:%4u OK:%4u",TOOL.FailNum,TOOL.PassNum);
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <updateLcd+0x144>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d146      	bne.n	8004474 <updateLcd+0xbc>
 80043e6:	4b44      	ldr	r3, [pc, #272]	; (80044f8 <updateLcd+0x140>)
 80043e8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80043ea:	001a      	movs	r2, r3
 80043ec:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <updateLcd+0x140>)
 80043ee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80043f0:	4943      	ldr	r1, [pc, #268]	; (8004500 <updateLcd+0x148>)
 80043f2:	4844      	ldr	r0, [pc, #272]	; (8004504 <updateLcd+0x14c>)
 80043f4:	f009 fa14 	bl	800d820 <siprintf>
 80043f8:	e03c      	b.n	8004474 <updateLcd+0xbc>
  }
  else if(TOOL.Lcd_id==_DISPLAY_PHOTOCELL)
 80043fa:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <updateLcd+0x140>)
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d108      	bne.n	8004414 <updateLcd+0x5c>
  {
      sprintf(TOOL.LcdStr_row[1],"%s=%4u",stringBuffer,ADC_Arr[_ID_ADC_ptcHsink]);
 8004402:	4b41      	ldr	r3, [pc, #260]	; (8004508 <updateLcd+0x150>)
 8004404:	885b      	ldrh	r3, [r3, #2]
 8004406:	b29b      	uxth	r3, r3
 8004408:	4a40      	ldr	r2, [pc, #256]	; (800450c <updateLcd+0x154>)
 800440a:	4941      	ldr	r1, [pc, #260]	; (8004510 <updateLcd+0x158>)
 800440c:	483d      	ldr	r0, [pc, #244]	; (8004504 <updateLcd+0x14c>)
 800440e:	f009 fa07 	bl	800d820 <siprintf>
 8004412:	e02f      	b.n	8004474 <updateLcd+0xbc>
  }
  else if(TOOL.Lcd_id==_DISPLAY_POWER)
 8004414:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <updateLcd+0x140>)
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d116      	bne.n	800444a <updateLcd+0x92>
  {
      sprintf(TOOL.LcdStr_row[1],"%4.01fV %5.01fmA",TOOL.voltage, TOOL.current);
 800441c:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <updateLcd+0x140>)
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	1c18      	adds	r0, r3, #0
 8004422:	f7fe f9db 	bl	80027dc <__aeabi_f2d>
 8004426:	0004      	movs	r4, r0
 8004428:	000d      	movs	r5, r1
 800442a:	4b33      	ldr	r3, [pc, #204]	; (80044f8 <updateLcd+0x140>)
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fe f9d4 	bl	80027dc <__aeabi_f2d>
 8004434:	0002      	movs	r2, r0
 8004436:	000b      	movs	r3, r1
 8004438:	4936      	ldr	r1, [pc, #216]	; (8004514 <updateLcd+0x15c>)
 800443a:	4832      	ldr	r0, [pc, #200]	; (8004504 <updateLcd+0x14c>)
 800443c:	9200      	str	r2, [sp, #0]
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	0022      	movs	r2, r4
 8004442:	002b      	movs	r3, r5
 8004444:	f009 f9ec 	bl	800d820 <siprintf>
 8004448:	e014      	b.n	8004474 <updateLcd+0xbc>
  }
  else if(TOOL.Lcd_id==_DISPLAY_PHANLOAISENSOR){
 800444a:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <updateLcd+0x140>)
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d110      	bne.n	8004474 <updateLcd+0xbc>
      if(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE) sprintf(TOOL.LcdStr_row[1],"Bat Phan Loai");
 8004452:	4b2a      	ldr	r3, [pc, #168]	; (80044fc <updateLcd+0x144>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d106      	bne.n	8004468 <updateLcd+0xb0>
 800445a:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <updateLcd+0x160>)
 800445c:	4b29      	ldr	r3, [pc, #164]	; (8004504 <updateLcd+0x14c>)
 800445e:	0011      	movs	r1, r2
 8004460:	0018      	movs	r0, r3
 8004462:	f009 f9dd 	bl	800d820 <siprintf>
 8004466:	e005      	b.n	8004474 <updateLcd+0xbc>
      else sprintf(TOOL.LcdStr_row[1],"Tat Phan Loai");
 8004468:	4a2c      	ldr	r2, [pc, #176]	; (800451c <updateLcd+0x164>)
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <updateLcd+0x14c>)
 800446c:	0011      	movs	r1, r2
 800446e:	0018      	movs	r0, r3
 8004470:	f009 f9d6 	bl	800d820 <siprintf>
  }


  //Nếu chuỗi không thay đổi thì return
  result1 = memcmp(TOOL.LcdStr_row[0], str_cmp0, _STRING_BUFFER_SIZE);
 8004474:	492a      	ldr	r1, [pc, #168]	; (8004520 <updateLcd+0x168>)
 8004476:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <updateLcd+0x16c>)
 8004478:	2211      	movs	r2, #17
 800447a:	0018      	movs	r0, r3
 800447c:	f008 fc4e 	bl	800cd1c <memcmp>
 8004480:	0002      	movs	r2, r0
 8004482:	1dfb      	adds	r3, r7, #7
 8004484:	701a      	strb	r2, [r3, #0]
  result2 = memcmp(TOOL.LcdStr_row[1], str_cmp1, _STRING_BUFFER_SIZE);
 8004486:	4928      	ldr	r1, [pc, #160]	; (8004528 <updateLcd+0x170>)
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <updateLcd+0x14c>)
 800448a:	2211      	movs	r2, #17
 800448c:	0018      	movs	r0, r3
 800448e:	f008 fc45 	bl	800cd1c <memcmp>
 8004492:	0002      	movs	r2, r0
 8004494:	1dbb      	adds	r3, r7, #6
 8004496:	701a      	strb	r2, [r3, #0]
  if(result1 == 0 && result2==0)return;
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d103      	bne.n	80044a8 <updateLcd+0xf0>
 80044a0:	1dbb      	adds	r3, r7, #6
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <updateLcd+0x132>

  //Cập nhật dữ liệu mới lên LCD
  //CLCD_I2C_Clear(&LCD1);
  ShowLCD_String(TOOL.LcdStr_row[0], 0, 0);
 80044a8:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <updateLcd+0x16c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	2100      	movs	r1, #0
 80044ae:	0018      	movs	r0, r3
 80044b0:	f7ff fe12 	bl	80040d8 <ShowLCD_String>
  ShowLCD_String(TOOL.LcdStr_row[1], 0, 1);
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <updateLcd+0x14c>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	2100      	movs	r1, #0
 80044ba:	0018      	movs	r0, r3
 80044bc:	f7ff fe0c 	bl	80040d8 <ShowLCD_String>

  memcpy(str_cmp0, TOOL.LcdStr_row[0], _STRING_BUFFER_SIZE);
 80044c0:	4917      	ldr	r1, [pc, #92]	; (8004520 <updateLcd+0x168>)
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <updateLcd+0x140>)
 80044c4:	2202      	movs	r2, #2
 80044c6:	0008      	movs	r0, r1
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	2211      	movs	r2, #17
 80044cc:	0019      	movs	r1, r3
 80044ce:	f008 fc33 	bl	800cd38 <memcpy>
  memcpy(str_cmp1, TOOL.LcdStr_row[1], _STRING_BUFFER_SIZE);
 80044d2:	4915      	ldr	r1, [pc, #84]	; (8004528 <updateLcd+0x170>)
 80044d4:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <updateLcd+0x140>)
 80044d6:	2213      	movs	r2, #19
 80044d8:	0008      	movs	r0, r1
 80044da:	189b      	adds	r3, r3, r2
 80044dc:	2211      	movs	r2, #17
 80044de:	0019      	movs	r1, r3
 80044e0:	f008 fc2a 	bl	800cd38 <memcpy>
 80044e4:	e002      	b.n	80044ec <updateLcd+0x134>
    return;
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	e000      	b.n	80044ec <updateLcd+0x134>
  if(result1 == 0 && result2==0)return;
 80044ea:	46c0      	nop			; (mov r8, r8)
}
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b002      	add	sp, #8
 80044f0:	bdb0      	pop	{r4, r5, r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	200004e0 	.word	0x200004e0
 80044f8:	20000448 	.word	0x20000448
 80044fc:	20000488 	.word	0x20000488
 8004500:	0800fce4 	.word	0x0800fce4
 8004504:	2000045b 	.word	0x2000045b
 8004508:	20000440 	.word	0x20000440
 800450c:	200004f4 	.word	0x200004f4
 8004510:	0800fcf4 	.word	0x0800fcf4
 8004514:	0800fcfc 	.word	0x0800fcfc
 8004518:	0800fd10 	.word	0x0800fd10
 800451c:	0800fd20 	.word	0x0800fd20
 8004520:	20000510 	.word	0x20000510
 8004524:	2000044a 	.word	0x2000044a
 8004528:	20000524 	.word	0x20000524

0800452c <updateIna219>:

void updateIna219(){
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  if(!timer_expired(&_timer_updateIna219))
 8004530:	4b0e      	ldr	r3, [pc, #56]	; (800456c <updateIna219+0x40>)
 8004532:	0018      	movs	r0, r3
 8004534:	f7fe fdd2 	bl	80030dc <timer_expired>
 8004538:	1e03      	subs	r3, r0, #0
 800453a:	d013      	beq.n	8004564 <updateIna219+0x38>
    return;
  timer_restart(&_timer_updateIna219);
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <updateIna219+0x40>)
 800453e:	0018      	movs	r0, r3
 8004540:	f7fe fdba 	bl	80030b8 <timer_restart>

  TOOL.current = getCurrent_mA();
 8004544:	f7ff fb08 	bl	8003b58 <getCurrent_mA>
 8004548:	1c02      	adds	r2, r0, #0
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <updateIna219+0x44>)
 800454c:	625a      	str	r2, [r3, #36]	; 0x24
  TOOL.voltage = getvoltage_V();
 800454e:	f7ff fae1 	bl	8003b14 <getvoltage_V>
 8004552:	1c02      	adds	r2, r0, #0
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <updateIna219+0x44>)
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
  TOOL.power = getPower_mW();
 8004558:	f7ff fb1c 	bl	8003b94 <getPower_mW>
 800455c:	1c02      	adds	r2, r0, #0
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <updateIna219+0x44>)
 8004560:	62da      	str	r2, [r3, #44]	; 0x2c
 8004562:	e000      	b.n	8004566 <updateIna219+0x3a>
    return;
 8004564:	46c0      	nop			; (mov r8, r8)
}
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	200004d0 	.word	0x200004d0
 8004570:	20000448 	.word	0x20000448

08004574 <callback_calibGetResult>:

void callback_calibGetResult(CheckStatus True_false){
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af02      	add	r7, sp, #8
 800457a:	0002      	movs	r2, r0
 800457c:	1dfb      	adds	r3, r7, #7
 800457e:	701a      	strb	r2, [r3, #0]
  if(True_false==0){
 8004580:	1dfb      	adds	r3, r7, #7
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <callback_calibGetResult+0x28>
      OUTPUT_setBlink(&_ctrlOutput[_LED1],10,200,400,0);
 8004588:	23c8      	movs	r3, #200	; 0xc8
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	480a      	ldr	r0, [pc, #40]	; (80045b8 <callback_calibGetResult+0x44>)
 800458e:	2200      	movs	r2, #0
 8004590:	9200      	str	r2, [sp, #0]
 8004592:	22c8      	movs	r2, #200	; 0xc8
 8004594:	210a      	movs	r1, #10
 8004596:	f7fe fb93 	bl	8002cc0 <OUTPUT_setBlink>
  }
  else
  {
      OUTPUT_setBlink(&_ctrlOutput[_LED1],10,3000,3500,0);
  }
}
 800459a:	e008      	b.n	80045ae <callback_calibGetResult+0x3a>
      OUTPUT_setBlink(&_ctrlOutput[_LED1],10,3000,3500,0);
 800459c:	4907      	ldr	r1, [pc, #28]	; (80045bc <callback_calibGetResult+0x48>)
 800459e:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <callback_calibGetResult+0x4c>)
 80045a0:	4805      	ldr	r0, [pc, #20]	; (80045b8 <callback_calibGetResult+0x44>)
 80045a2:	2300      	movs	r3, #0
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	000b      	movs	r3, r1
 80045a8:	210a      	movs	r1, #10
 80045aa:	f7fe fb89 	bl	8002cc0 <OUTPUT_setBlink>
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	20000310 	.word	0x20000310
 80045bc:	00000dac 	.word	0x00000dac
 80045c0:	00000bb8 	.word	0x00000bb8

080045c4 <gotoFinished>:

void gotoFinished(TestResultStt success_error){
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	0002      	movs	r2, r0
 80045cc:	1dfb      	adds	r3, r7, #7
 80045ce:	701a      	strb	r2, [r3, #0]
  TOOL.resultTesting=success_error;
 80045d0:	4b24      	ldr	r3, [pc, #144]	; (8004664 <gotoFinished+0xa0>)
 80045d2:	1dfa      	adds	r2, r7, #7
 80045d4:	213e      	movs	r1, #62	; 0x3e
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	545a      	strb	r2, [r3, r1]
  if(success_error==_TEST_ERROR){
 80045da:	1dfb      	adds	r3, r7, #7
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d11b      	bne.n	800461a <gotoFinished+0x56>
      MotorGotoPosition(&TWMOTOR,_POS_RIGHT,_TIMEOUT_MOTOR);
 80045e2:	4a21      	ldr	r2, [pc, #132]	; (8004668 <gotoFinished+0xa4>)
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <gotoFinished+0xa8>)
 80045e6:	2103      	movs	r1, #3
 80045e8:	0018      	movs	r0, r3
 80045ea:	f002 f997 	bl	800691c <MotorGotoPosition>
      //if(flashDataInfor.Byte_t.f_phanLoaiSensor==_DISABLE)
	OUTPUT_setBlink(&_ctrlOutput[_BUZ],10,200,400,1);
 80045ee:	23c8      	movs	r3, #200	; 0xc8
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	481f      	ldr	r0, [pc, #124]	; (8004670 <gotoFinished+0xac>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	9200      	str	r2, [sp, #0]
 80045f8:	22c8      	movs	r2, #200	; 0xc8
 80045fa:	210a      	movs	r1, #10
 80045fc:	f7fe fb60 	bl	8002cc0 <OUTPUT_setBlink>
	OUTPUT_setBlink(&_ctrlOutput[_LED_ERROR],1,500,1000,1);
 8004600:	23fa      	movs	r3, #250	; 0xfa
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	22fa      	movs	r2, #250	; 0xfa
 8004606:	0052      	lsls	r2, r2, #1
 8004608:	481a      	ldr	r0, [pc, #104]	; (8004674 <gotoFinished+0xb0>)
 800460a:	2101      	movs	r1, #1
 800460c:	9100      	str	r1, [sp, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	f7fe fb56 	bl	8002cc0 <OUTPUT_setBlink>
      TOOL.state=_test_finished;
 8004614:	4b13      	ldr	r3, [pc, #76]	; (8004664 <gotoFinished+0xa0>)
 8004616:	2206      	movs	r2, #6
 8004618:	701a      	strb	r2, [r3, #0]
  }if(success_error==_TEST_SUCCESS){
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d11c      	bne.n	800465c <gotoFinished+0x98>
      MotorGotoPosition(&TWMOTOR,_POS_LEFT,_TIMEOUT_MOTOR);
 8004622:	4a11      	ldr	r2, [pc, #68]	; (8004668 <gotoFinished+0xa4>)
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <gotoFinished+0xa8>)
 8004626:	2101      	movs	r1, #1
 8004628:	0018      	movs	r0, r3
 800462a:	f002 f977 	bl	800691c <MotorGotoPosition>
      //if(flashDataInfor.Byte_t.f_phanLoaiSensor==_DISABLE)
	OUTPUT_setBlink(&_ctrlOutput[_BUZ],1,1000,2000,1);
 800462e:	23fa      	movs	r3, #250	; 0xfa
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	22fa      	movs	r2, #250	; 0xfa
 8004634:	0092      	lsls	r2, r2, #2
 8004636:	480e      	ldr	r0, [pc, #56]	; (8004670 <gotoFinished+0xac>)
 8004638:	2101      	movs	r1, #1
 800463a:	9100      	str	r1, [sp, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	f7fe fb3f 	bl	8002cc0 <OUTPUT_setBlink>
	OUTPUT_setBlink(&_ctrlOutput[_LED_OK],1,500,1000,1);
 8004642:	23fa      	movs	r3, #250	; 0xfa
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	22fa      	movs	r2, #250	; 0xfa
 8004648:	0052      	lsls	r2, r2, #1
 800464a:	480b      	ldr	r0, [pc, #44]	; (8004678 <gotoFinished+0xb4>)
 800464c:	2101      	movs	r1, #1
 800464e:	9100      	str	r1, [sp, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	f7fe fb35 	bl	8002cc0 <OUTPUT_setBlink>
      TOOL.state=_test_finished;
 8004656:	4b03      	ldr	r3, [pc, #12]	; (8004664 <gotoFinished+0xa0>)
 8004658:	2206      	movs	r2, #6
 800465a:	701a      	strb	r2, [r3, #0]
  }
}
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b002      	add	sp, #8
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000448 	.word	0x20000448
 8004668:	00000bb8 	.word	0x00000bb8
 800466c:	20000994 	.word	0x20000994
 8004670:	200003ec 	.word	0x200003ec
 8004674:	20000394 	.word	0x20000394
 8004678:	20000368 	.word	0x20000368

0800467c <callback_btnConfigHandle>:

uint8_t f_changeDisplay;
void callback_btnConfigHandle(uint16_t ID, bt_eventFunc_t eventFunc, bt_typeArg_t agr){
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af02      	add	r7, sp, #8
 8004682:	603a      	str	r2, [r7, #0]
 8004684:	1dbb      	adds	r3, r7, #6
 8004686:	1c02      	adds	r2, r0, #0
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	1d7b      	adds	r3, r7, #5
 800468c:	1c0a      	adds	r2, r1, #0
 800468e:	701a      	strb	r2, [r3, #0]
  //if(ID!=1)return;
  switch(eventFunc){
 8004690:	1d7b      	adds	r3, r7, #5
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d02a      	beq.n	80046ee <callback_btnConfigHandle+0x72>
 8004698:	dc4b      	bgt.n	8004732 <callback_btnConfigHandle+0xb6>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <callback_btnConfigHandle+0x28>
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d049      	beq.n	8004736 <callback_btnConfigHandle+0xba>
//      else
//	f_changeDisplay=0;

      break;

    default:break;
 80046a2:	e046      	b.n	8004732 <callback_btnConfigHandle+0xb6>
      if(agr.event == BUTTON_ONECLICK){
 80046a4:	003b      	movs	r3, r7
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d146      	bne.n	800473a <callback_btnConfigHandle+0xbe>
	  if(TOOL.Lcd_id==_DISPLAY_PHANLOAISENSOR){
 80046ac:	4b26      	ldr	r3, [pc, #152]	; (8004748 <callback_btnConfigHandle+0xcc>)
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d11a      	bne.n	80046ea <callback_btnConfigHandle+0x6e>
	      flashDataInfor.Byte_t.f_phanLoaiSensor=(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE)?_DISABLE:_ENABLE;
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <callback_btnConfigHandle+0xd0>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	1e5a      	subs	r2, r3, #1
 80046bc:	4193      	sbcs	r3, r2
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	001a      	movs	r2, r3
 80046c2:	4b22      	ldr	r3, [pc, #136]	; (800474c <callback_btnConfigHandle+0xd0>)
 80046c4:	701a      	strb	r2, [r3, #0]
	      if(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE){
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <callback_btnConfigHandle+0xd0>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <callback_btnConfigHandle+0x5e>
		  flashDataInfor.HalfWord_t.countPassSensor=0;
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <callback_btnConfigHandle+0xd0>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	809a      	strh	r2, [r3, #4]
		  flashDataInfor.HalfWord_t.countFailSensor=0;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <callback_btnConfigHandle+0xd0>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	80da      	strh	r2, [r3, #6]
	      Flash_WriteDWord(flashDataInfor.Dword, FLASH_ADDRESS_START);
 80046da:	4b1c      	ldr	r3, [pc, #112]	; (800474c <callback_btnConfigHandle+0xd0>)
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <callback_btnConfigHandle+0xd4>)
 80046e2:	001a      	movs	r2, r3
 80046e4:	f7ff f916 	bl	8003914 <Flash_WriteDWord>
      break;
 80046e8:	e027      	b.n	800473a <callback_btnConfigHandle+0xbe>
	  else NVIC_SystemReset();
 80046ea:	f7ff fd4f 	bl	800418c <__NVIC_SystemReset>
      if(agr.holdInterval_ms%1000==0){
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	22fa      	movs	r2, #250	; 0xfa
 80046f2:	0091      	lsls	r1, r2, #2
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fda5 	bl	8000244 <__aeabi_uidivmod>
 80046fa:	1e0b      	subs	r3, r1, #0
 80046fc:	d107      	bne.n	800470e <callback_btnConfigHandle+0x92>
	  OUTPUT_setBlink(&_ctrlOutput[_BUZ], 1, 100, 200,0);
 80046fe:	4815      	ldr	r0, [pc, #84]	; (8004754 <callback_btnConfigHandle+0xd8>)
 8004700:	2300      	movs	r3, #0
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	23c8      	movs	r3, #200	; 0xc8
 8004706:	2264      	movs	r2, #100	; 0x64
 8004708:	2101      	movs	r1, #1
 800470a:	f7fe fad9 	bl	8002cc0 <OUTPUT_setBlink>
      if(agr.holdInterval_ms == 5000){
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	4a11      	ldr	r2, [pc, #68]	; (8004758 <callback_btnConfigHandle+0xdc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d113      	bne.n	800473e <callback_btnConfigHandle+0xc2>
	  if(++TOOL.Lcd_id >=_DISPLAYMAX)
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <callback_btnConfigHandle+0xcc>)
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	3301      	adds	r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <callback_btnConfigHandle+0xcc>)
 8004720:	705a      	strb	r2, [r3, #1]
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <callback_btnConfigHandle+0xcc>)
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d909      	bls.n	800473e <callback_btnConfigHandle+0xc2>
	    TOOL.Lcd_id=0;
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <callback_btnConfigHandle+0xcc>)
 800472c:	2200      	movs	r2, #0
 800472e:	705a      	strb	r2, [r3, #1]
      break;
 8004730:	e005      	b.n	800473e <callback_btnConfigHandle+0xc2>
    default:break;
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	e004      	b.n	8004740 <callback_btnConfigHandle+0xc4>
      break;
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	e002      	b.n	8004740 <callback_btnConfigHandle+0xc4>
      break;
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	e000      	b.n	8004740 <callback_btnConfigHandle+0xc4>
      break;
 800473e:	46c0      	nop			; (mov r8, r8)
  }
}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	46bd      	mov	sp, r7
 8004744:	b002      	add	sp, #8
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000448 	.word	0x20000448
 800474c:	20000488 	.word	0x20000488
 8004750:	0801f800 	.word	0x0801f800
 8004754:	200003ec 	.word	0x200003ec
 8004758:	00001388 	.word	0x00001388

0800475c <testWaterSensorInit>:

void testWaterSensorInit(){
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af02      	add	r7, sp, #8

  /*Init DMA ADC */
  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8004762:	4b5b      	ldr	r3, [pc, #364]	; (80048d0 <testWaterSensorInit+0x174>)
 8004764:	0018      	movs	r0, r3
 8004766:	f003 fac9 	bl	8007cfc <HAL_ADCEx_Calibration_Start>
 800476a:	1e03      	subs	r3, r0, #0
 800476c:	d001      	beq.n	8004772 <testWaterSensorInit+0x16>
	  Error_Handler();
 800476e:	f001 fad7 	bl	8005d20 <Error_Handler>

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Arr, _ID_ADC_TOTAL) != HAL_OK)
 8004772:	4958      	ldr	r1, [pc, #352]	; (80048d4 <testWaterSensorInit+0x178>)
 8004774:	4b56      	ldr	r3, [pc, #344]	; (80048d0 <testWaterSensorInit+0x174>)
 8004776:	2204      	movs	r2, #4
 8004778:	0018      	movs	r0, r3
 800477a:	f002 fd37 	bl	80071ec <HAL_ADC_Start_DMA>
 800477e:	1e03      	subs	r3, r0, #0
 8004780:	d001      	beq.n	8004786 <testWaterSensorInit+0x2a>
	  Error_Handler();
 8004782:	f001 facd 	bl	8005d20 <Error_Handler>

  //setCalibration_32V_1A();
  setCalibration_16V_400mA();
 8004786:	f7ff f959 	bl	8003a3c <setCalibration_16V_400mA>
  /*Init i2c2 for LCD and Ina219 */
  HAL_I2C_Init(&_USER_DEFINE_I2C_LCD);
 800478a:	4b53      	ldr	r3, [pc, #332]	; (80048d8 <testWaterSensorInit+0x17c>)
 800478c:	0018      	movs	r0, r3
 800478e:	f004 faed 	bl	8008d6c <HAL_I2C_Init>
  CLCD_I2C_Init(&LCD1, &_USER_DEFINE_I2C_LCD, 0x4e, 20, 4);
 8004792:	4951      	ldr	r1, [pc, #324]	; (80048d8 <testWaterSensorInit+0x17c>)
 8004794:	4851      	ldr	r0, [pc, #324]	; (80048dc <testWaterSensorInit+0x180>)
 8004796:	2304      	movs	r3, #4
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2314      	movs	r3, #20
 800479c:	224e      	movs	r2, #78	; 0x4e
 800479e:	f7ff fb93 	bl	8003ec8 <CLCD_I2C_Init>

  /*Init Timer7*/
  HAL_TIM_Base_Start_IT(&htim7);
 80047a2:	4b4f      	ldr	r3, [pc, #316]	; (80048e0 <testWaterSensorInit+0x184>)
 80047a4:	0018      	movs	r0, r3
 80047a6:	f006 f949 	bl	800aa3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&_UV_CAPSS_TIMER);
 80047aa:	4b4e      	ldr	r3, [pc, #312]	; (80048e4 <testWaterSensorInit+0x188>)
 80047ac:	0018      	movs	r0, r3
 80047ae:	f006 f945 	bl	800aa3c <HAL_TIM_Base_Start_IT>

  CAPSENSOR[_CAPSS_ID_WATER]._cb_calibResult = &callback_calibGetResult;
 80047b2:	4b4d      	ldr	r3, [pc, #308]	; (80048e8 <testWaterSensorInit+0x18c>)
 80047b4:	4a4d      	ldr	r2, [pc, #308]	; (80048ec <testWaterSensorInit+0x190>)
 80047b6:	609a      	str	r2, [r3, #8]
  _btnConfig.cb_function = &callback_btnConfigHandle;
 80047b8:	4b4d      	ldr	r3, [pc, #308]	; (80048f0 <testWaterSensorInit+0x194>)
 80047ba:	4a4e      	ldr	r2, [pc, #312]	; (80048f4 <testWaterSensorInit+0x198>)
 80047bc:	60da      	str	r2, [r3, #12]

  /*Init Outputs Control*/
  OUTPUT_configInit(&_ctrlOutput[_LED_OK], LEDG_BaseCtrl, 0);
 80047be:	494e      	ldr	r1, [pc, #312]	; (80048f8 <testWaterSensorInit+0x19c>)
 80047c0:	4b4e      	ldr	r3, [pc, #312]	; (80048fc <testWaterSensorInit+0x1a0>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7fe fa35 	bl	8002c34 <OUTPUT_configInit>
  OUTPUT_configInit(&_ctrlOutput[_LED_ERROR], LEDB_BaseCtrl, 0);
 80047ca:	494d      	ldr	r1, [pc, #308]	; (8004900 <testWaterSensorInit+0x1a4>)
 80047cc:	4b4d      	ldr	r3, [pc, #308]	; (8004904 <testWaterSensorInit+0x1a8>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7fe fa2f 	bl	8002c34 <OUTPUT_configInit>
  OUTPUT_configInit(&_ctrlOutput[_RL_PAD], RLSOL_BaseCtrl, 0);
 80047d6:	494c      	ldr	r1, [pc, #304]	; (8004908 <testWaterSensorInit+0x1ac>)
 80047d8:	4b4c      	ldr	r3, [pc, #304]	; (800490c <testWaterSensorInit+0x1b0>)
 80047da:	2200      	movs	r2, #0
 80047dc:	0018      	movs	r0, r3
 80047de:	f7fe fa29 	bl	8002c34 <OUTPUT_configInit>
  OUTPUT_configInit(&_ctrlOutput[_BUZ], BUZ_BaseCtrl, 0);
 80047e2:	494b      	ldr	r1, [pc, #300]	; (8004910 <testWaterSensorInit+0x1b4>)
 80047e4:	4b4b      	ldr	r3, [pc, #300]	; (8004914 <testWaterSensorInit+0x1b8>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7fe fa23 	bl	8002c34 <OUTPUT_configInit>

  OUTPUT_setOff(&_ctrlOutput[_LED_OK],0);
 80047ee:	4b43      	ldr	r3, [pc, #268]	; (80048fc <testWaterSensorInit+0x1a0>)
 80047f0:	2100      	movs	r1, #0
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7fe fa2e 	bl	8002c54 <OUTPUT_setOff>
  OUTPUT_setOff(&_ctrlOutput[_LED_ERROR],0);
 80047f8:	4b42      	ldr	r3, [pc, #264]	; (8004904 <testWaterSensorInit+0x1a8>)
 80047fa:	2100      	movs	r1, #0
 80047fc:	0018      	movs	r0, r3
 80047fe:	f7fe fa29 	bl	8002c54 <OUTPUT_setOff>
  OUTPUT_setBlink(&_ctrlOutput[_BUZ],1,200,400,0);
 8004802:	23c8      	movs	r3, #200	; 0xc8
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4843      	ldr	r0, [pc, #268]	; (8004914 <testWaterSensorInit+0x1b8>)
 8004808:	2200      	movs	r2, #0
 800480a:	9200      	str	r2, [sp, #0]
 800480c:	22c8      	movs	r2, #200	; 0xc8
 800480e:	2101      	movs	r1, #1
 8004810:	f7fe fa56 	bl	8002cc0 <OUTPUT_setBlink>

  //clear all error
  memset(&TOOL.error,1,sizeof(TOOL.error));
 8004814:	4b40      	ldr	r3, [pc, #256]	; (8004918 <testWaterSensorInit+0x1bc>)
 8004816:	2204      	movs	r2, #4
 8004818:	2101      	movs	r1, #1
 800481a:	0018      	movs	r0, r3
 800481c:	f008 fa95 	bl	800cd4a <memset>
  TOOL.state = _test_null;
 8004820:	4b3e      	ldr	r3, [pc, #248]	; (800491c <testWaterSensorInit+0x1c0>)
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
  TOOL.Lcd_id=_DISPLAY_MAIN;
 8004826:	4b3d      	ldr	r3, [pc, #244]	; (800491c <testWaterSensorInit+0x1c0>)
 8004828:	2200      	movs	r2, #0
 800482a:	705a      	strb	r2, [r3, #1]
  TOOL.adcLightStart=0;
 800482c:	4b3b      	ldr	r3, [pc, #236]	; (800491c <testWaterSensorInit+0x1c0>)
 800482e:	2200      	movs	r2, #0
 8004830:	861a      	strh	r2, [r3, #48]	; 0x30
  TOOL.ledRedTog=0;
 8004832:	4b3a      	ldr	r3, [pc, #232]	; (800491c <testWaterSensorInit+0x1c0>)
 8004834:	2238      	movs	r2, #56	; 0x38
 8004836:	2100      	movs	r1, #0
 8004838:	5499      	strb	r1, [r3, r2]

  //Load data
  flashDataInfor.Dword = Flash_ReadDWord(FLASH_ADDRESS_START);
 800483a:	4b39      	ldr	r3, [pc, #228]	; (8004920 <testWaterSensorInit+0x1c4>)
 800483c:	0018      	movs	r0, r3
 800483e:	f7ff f859 	bl	80038f4 <Flash_ReadDWord>
 8004842:	0002      	movs	r2, r0
 8004844:	000b      	movs	r3, r1
 8004846:	4937      	ldr	r1, [pc, #220]	; (8004924 <testWaterSensorInit+0x1c8>)
 8004848:	600a      	str	r2, [r1, #0]
 800484a:	604b      	str	r3, [r1, #4]
  flashDataInfor.Byte_t.f_phanLoaiSensor=(flashDataInfor.Byte_t.f_phanLoaiSensor==0)?_DISABLE:_ENABLE;
 800484c:	4b35      	ldr	r3, [pc, #212]	; (8004924 <testWaterSensorInit+0x1c8>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	1e5a      	subs	r2, r3, #1
 8004852:	4193      	sbcs	r3, r2
 8004854:	b2db      	uxtb	r3, r3
 8004856:	001a      	movs	r2, r3
 8004858:	4b32      	ldr	r3, [pc, #200]	; (8004924 <testWaterSensorInit+0x1c8>)
 800485a:	701a      	strb	r2, [r3, #0]
  TOOL.PassNum = (flashDataInfor.HalfWord_t.countPassSensor == 0xffff)?(1150):(flashDataInfor.HalfWord_t.countPassSensor);
 800485c:	4b31      	ldr	r3, [pc, #196]	; (8004924 <testWaterSensorInit+0x1c8>)
 800485e:	889b      	ldrh	r3, [r3, #4]
 8004860:	4a31      	ldr	r2, [pc, #196]	; (8004928 <testWaterSensorInit+0x1cc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d002      	beq.n	800486c <testWaterSensorInit+0x110>
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <testWaterSensorInit+0x1c8>)
 8004868:	889a      	ldrh	r2, [r3, #4]
 800486a:	e000      	b.n	800486e <testWaterSensorInit+0x112>
 800486c:	4a2f      	ldr	r2, [pc, #188]	; (800492c <testWaterSensorInit+0x1d0>)
 800486e:	4b2b      	ldr	r3, [pc, #172]	; (800491c <testWaterSensorInit+0x1c0>)
 8004870:	875a      	strh	r2, [r3, #58]	; 0x3a
  TOOL.FailNum = (flashDataInfor.HalfWord_t.countFailSensor == 0xffff)?(1150):(flashDataInfor.HalfWord_t.countFailSensor);
 8004872:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <testWaterSensorInit+0x1c8>)
 8004874:	88db      	ldrh	r3, [r3, #6]
 8004876:	4a2c      	ldr	r2, [pc, #176]	; (8004928 <testWaterSensorInit+0x1cc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d002      	beq.n	8004882 <testWaterSensorInit+0x126>
 800487c:	4b29      	ldr	r3, [pc, #164]	; (8004924 <testWaterSensorInit+0x1c8>)
 800487e:	88da      	ldrh	r2, [r3, #6]
 8004880:	e000      	b.n	8004884 <testWaterSensorInit+0x128>
 8004882:	4a2a      	ldr	r2, [pc, #168]	; (800492c <testWaterSensorInit+0x1d0>)
 8004884:	4b25      	ldr	r3, [pc, #148]	; (800491c <testWaterSensorInit+0x1c0>)
 8004886:	879a      	strh	r2, [r3, #60]	; 0x3c

  timer_set(&_timer_updateIna219, 50);
 8004888:	4b29      	ldr	r3, [pc, #164]	; (8004930 <testWaterSensorInit+0x1d4>)
 800488a:	2132      	movs	r1, #50	; 0x32
 800488c:	0018      	movs	r0, r3
 800488e:	f7fe fbfb 	bl	8003088 <timer_set>
  timer_set(&_timer_updateLCD, 2000);
 8004892:	23fa      	movs	r3, #250	; 0xfa
 8004894:	00da      	lsls	r2, r3, #3
 8004896:	4b27      	ldr	r3, [pc, #156]	; (8004934 <testWaterSensorInit+0x1d8>)
 8004898:	0011      	movs	r1, r2
 800489a:	0018      	movs	r0, r3
 800489c:	f7fe fbf4 	bl	8003088 <timer_set>
  timer_set(&_timeoutCheckState, 20);
 80048a0:	4b25      	ldr	r3, [pc, #148]	; (8004938 <testWaterSensorInit+0x1dc>)
 80048a2:	2114      	movs	r1, #20
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7fe fbef 	bl	8003088 <timer_set>

  ShowLCD_String("    BO TEST", 0, 0);
 80048aa:	4b24      	ldr	r3, [pc, #144]	; (800493c <testWaterSensorInit+0x1e0>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	2100      	movs	r1, #0
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff fc11 	bl	80040d8 <ShowLCD_String>
  ShowLCD_String("  WATER SENSOR", 0, 1);
 80048b6:	4b22      	ldr	r3, [pc, #136]	; (8004940 <testWaterSensorInit+0x1e4>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	2100      	movs	r1, #0
 80048bc:	0018      	movs	r0, r3
 80048be:	f7ff fc0b 	bl	80040d8 <ShowLCD_String>

  MotorTestWaterSensorInit(&TWMOTOR);
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <testWaterSensorInit+0x1e8>)
 80048c4:	0018      	movs	r0, r3
 80048c6:	f001 ffc3 	bl	8006850 <MotorTestWaterSensorInit>
}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000538 	.word	0x20000538
 80048d4:	20000440 	.word	0x20000440
 80048d8:	200005f8 	.word	0x200005f8
 80048dc:	20000304 	.word	0x20000304
 80048e0:	200006f4 	.word	0x200006f4
 80048e4:	200006a8 	.word	0x200006a8
 80048e8:	20000290 	.word	0x20000290
 80048ec:	08004575 	.word	0x08004575
 80048f0:	20000418 	.word	0x20000418
 80048f4:	0800467d 	.word	0x0800467d
 80048f8:	08003bd1 	.word	0x08003bd1
 80048fc:	20000368 	.word	0x20000368
 8004900:	08003c0d 	.word	0x08003c0d
 8004904:	20000394 	.word	0x20000394
 8004908:	08003c85 	.word	0x08003c85
 800490c:	200003c0 	.word	0x200003c0
 8004910:	08003c49 	.word	0x08003c49
 8004914:	200003ec 	.word	0x200003ec
 8004918:	2000047c 	.word	0x2000047c
 800491c:	20000448 	.word	0x20000448
 8004920:	0801f800 	.word	0x0801f800
 8004924:	20000488 	.word	0x20000488
 8004928:	0000ffff 	.word	0x0000ffff
 800492c:	0000047e 	.word	0x0000047e
 8004930:	200004d0 	.word	0x200004d0
 8004934:	200004e0 	.word	0x200004e0
 8004938:	20000490 	.word	0x20000490
 800493c:	0800fd30 	.word	0x0800fd30
 8004940:	0800fd3c 	.word	0x0800fd3c
 8004944:	20000994 	.word	0x20000994

08004948 <testWaterSensor_1msIrqHandle>:

void testWaterSensor_1msIrqHandle(){
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
  static uint8_t tx10;

  /*1ms check poll*/
  if(f_readKalmanAdc==0)
 800494e:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <testWaterSensor_1msIrqHandle+0x98>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <testWaterSensor_1msIrqHandle+0x14>
    f_readKalmanAdc=1;
 8004956:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <testWaterSensor_1msIrqHandle+0x98>)
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]

  testMotorSystickIrq1ms(&TWMOTOR);
 800495c:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <testWaterSensor_1msIrqHandle+0x9c>)
 800495e:	0018      	movs	r0, r3
 8004960:	f001 fe7c 	bl	800665c <testMotorSystickIrq1ms>
  CapSS_periodic_poll(&CAPSENSOR[0]);
 8004964:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <testWaterSensor_1msIrqHandle+0xa0>)
 8004966:	0018      	movs	r0, r3
 8004968:	f7fe fe28 	bl	80035bc <CapSS_periodic_poll>
  //Outputs
  for(uint8_t i=0; i<_MAX_OUTPUT; i++)
 800496c:	1dfb      	adds	r3, r7, #7
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e00d      	b.n	8004990 <testWaterSensor_1msIrqHandle+0x48>
      OUTPUT_blinkHandle(&_ctrlOutput[i]);
 8004974:	1dfb      	adds	r3, r7, #7
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	222c      	movs	r2, #44	; 0x2c
 800497a:	435a      	muls	r2, r3
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <testWaterSensor_1msIrqHandle+0xa4>)
 800497e:	18d3      	adds	r3, r2, r3
 8004980:	0018      	movs	r0, r3
 8004982:	f7fe f9f3 	bl	8002d6c <OUTPUT_blinkHandle>
  for(uint8_t i=0; i<_MAX_OUTPUT; i++)
 8004986:	1dfb      	adds	r3, r7, #7
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	1dfb      	adds	r3, r7, #7
 800498c:	3201      	adds	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	1dfb      	adds	r3, r7, #7
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b05      	cmp	r3, #5
 8004996:	d9ed      	bls.n	8004974 <testWaterSensor_1msIrqHandle+0x2c>

  /*10ms check poll*/
  if(++tx10 >= 10){
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <testWaterSensor_1msIrqHandle+0xa8>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <testWaterSensor_1msIrqHandle+0xa8>)
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <testWaterSensor_1msIrqHandle+0xa8>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b09      	cmp	r3, #9
 80049aa:	d915      	bls.n	80049d8 <testWaterSensor_1msIrqHandle+0x90>
     tx10 = 0;
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <testWaterSensor_1msIrqHandle+0xa8>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	701a      	strb	r2, [r3, #0]
     timer_periodic_poll();
 80049b2:	f7fe fb5b 	bl	800306c <timer_periodic_poll>
     btn_progress_loop(&_btnConfig,BUTTON_PinStt);
 80049b6:	2380      	movs	r3, #128	; 0x80
 80049b8:	01db      	lsls	r3, r3, #7
 80049ba:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <testWaterSensor_1msIrqHandle+0xac>)
 80049bc:	0019      	movs	r1, r3
 80049be:	0010      	movs	r0, r2
 80049c0:	f004 f99a 	bl	8008cf8 <HAL_GPIO_ReadPin>
 80049c4:	0003      	movs	r3, r0
 80049c6:	425a      	negs	r2, r3
 80049c8:	4153      	adcs	r3, r2
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	001a      	movs	r2, r3
 80049ce:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <testWaterSensor_1msIrqHandle+0xb0>)
 80049d0:	0011      	movs	r1, r2
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7fd fff0 	bl	80029b8 <btn_progress_loop>
  }
}
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	46bd      	mov	sp, r7
 80049dc:	b002      	add	sp, #8
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200004f0 	.word	0x200004f0
 80049e4:	20000994 	.word	0x20000994
 80049e8:	20000290 	.word	0x20000290
 80049ec:	20000310 	.word	0x20000310
 80049f0:	20000535 	.word	0x20000535
 80049f4:	50000400 	.word	0x50000400
 80049f8:	20000418 	.word	0x20000418

080049fc <testWaterSensorTask>:
static uint8_t retryReadLedGreenOn=0;
uint8_t retryCalib=0;

void testWaterSensorTask();
void testWaterSensorTask()
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af02      	add	r7, sp, #8
  static uint8_t irLeftOlderStt,irRightOlderStt;

  //Phát hiện that nhanh
  if(TOOL.state==_test_countSensor){
 8004a02:	4bda      	ldr	r3, [pc, #872]	; (8004d6c <testWaterSensorTask+0x370>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b07      	cmp	r3, #7
 8004a08:	d000      	beq.n	8004a0c <testWaterSensorTask+0x10>
 8004a0a:	e08f      	b.n	8004b2c <testWaterSensorTask+0x130>
      //Nếu motor ở bên trái là ô bên phải được mở : Sensor Pass
      if(TWMOTOR.atPosition==_POS_LEFT){
 8004a0c:	4bd8      	ldr	r3, [pc, #864]	; (8004d70 <testWaterSensorTask+0x374>)
 8004a0e:	789b      	ldrb	r3, [r3, #2]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d144      	bne.n	8004a9e <testWaterSensorTask+0xa2>
	  if(Get_Edge(TWMOTOR.SWTS.Bit.RIGHT_IR,&irRightOlderStt)==_FALLING){
 8004a14:	4bd6      	ldr	r3, [pc, #856]	; (8004d70 <testWaterSensorTask+0x374>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	071b      	lsls	r3, r3, #28
 8004a1a:	0fdb      	lsrs	r3, r3, #31
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	001a      	movs	r2, r3
 8004a20:	4bd4      	ldr	r3, [pc, #848]	; (8004d74 <testWaterSensorTask+0x378>)
 8004a22:	0019      	movs	r1, r3
 8004a24:	0010      	movs	r0, r2
 8004a26:	f7fe fecf 	bl	80037c8 <Get_Edge>
 8004a2a:	0003      	movs	r3, r0
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d000      	beq.n	8004a32 <testWaterSensorTask+0x36>
 8004a30:	e07c      	b.n	8004b2c <testWaterSensorTask+0x130>
	      TOOL.PassNum++;
 8004a32:	4bce      	ldr	r3, [pc, #824]	; (8004d6c <testWaterSensorTask+0x370>)
 8004a34:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004a36:	3301      	adds	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	4bcc      	ldr	r3, [pc, #816]	; (8004d6c <testWaterSensorTask+0x370>)
 8004a3c:	875a      	strh	r2, [r3, #58]	; 0x3a
	      flashDataInfor.HalfWord_t.countPassSensor=TOOL.PassNum;
 8004a3e:	4bcb      	ldr	r3, [pc, #812]	; (8004d6c <testWaterSensorTask+0x370>)
 8004a40:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8004a42:	4bcd      	ldr	r3, [pc, #820]	; (8004d78 <testWaterSensorTask+0x37c>)
 8004a44:	809a      	strh	r2, [r3, #4]
	      TOOL.state=_test_null;
 8004a46:	4bc9      	ldr	r3, [pc, #804]	; (8004d6c <testWaterSensorTask+0x370>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
	      OUTPUT_setOff(&_ctrlOutput[_LED_OK],0);
 8004a4c:	4bcb      	ldr	r3, [pc, #812]	; (8004d7c <testWaterSensorTask+0x380>)
 8004a4e:	2100      	movs	r1, #0
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7fe f8ff 	bl	8002c54 <OUTPUT_setOff>
	      OUTPUT_setOff(&_ctrlOutput[_LED_ERROR],0);
 8004a56:	4bca      	ldr	r3, [pc, #808]	; (8004d80 <testWaterSensorTask+0x384>)
 8004a58:	2100      	movs	r1, #0
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f7fe f8fa 	bl	8002c54 <OUTPUT_setOff>
	      OUTPUT_setOff(&_ctrlOutput[_BUZ],0);
 8004a60:	4bc8      	ldr	r3, [pc, #800]	; (8004d84 <testWaterSensorTask+0x388>)
 8004a62:	2100      	movs	r1, #0
 8004a64:	0018      	movs	r0, r3
 8004a66:	f7fe f8f5 	bl	8002c54 <OUTPUT_setOff>
	      delay_ms(500);
 8004a6a:	23fa      	movs	r3, #250	; 0xfa
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f7fe fe98 	bl	80037a4 <delay_ms>
	      if(TWMOTOR.SWTS.Bit.RIGHT_IR)MotorGotoPosition(&TWMOTOR,_POS_MID,_TIMEOUT_MOTOR);
 8004a74:	4bbe      	ldr	r3, [pc, #760]	; (8004d70 <testWaterSensorTask+0x374>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <testWaterSensorTask+0x92>
 8004a82:	4ac1      	ldr	r2, [pc, #772]	; (8004d88 <testWaterSensorTask+0x38c>)
 8004a84:	4bba      	ldr	r3, [pc, #744]	; (8004d70 <testWaterSensorTask+0x374>)
 8004a86:	2102      	movs	r1, #2
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f001 ff47 	bl	800691c <MotorGotoPosition>
	      Flash_WriteDWord(flashDataInfor.Dword, FLASH_ADDRESS_START);
 8004a8e:	4bba      	ldr	r3, [pc, #744]	; (8004d78 <testWaterSensorTask+0x37c>)
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	4bbd      	ldr	r3, [pc, #756]	; (8004d8c <testWaterSensorTask+0x390>)
 8004a96:	001a      	movs	r2, r3
 8004a98:	f7fe ff3c 	bl	8003914 <Flash_WriteDWord>
 8004a9c:	e046      	b.n	8004b2c <testWaterSensorTask+0x130>
	  }
      }
      //Ngược lại : Sensor Fail
      else if(TWMOTOR.atPosition==_POS_RIGHT){
 8004a9e:	4bb4      	ldr	r3, [pc, #720]	; (8004d70 <testWaterSensorTask+0x374>)
 8004aa0:	789b      	ldrb	r3, [r3, #2]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d142      	bne.n	8004b2c <testWaterSensorTask+0x130>
	  if(Get_Edge(TWMOTOR.SWTS.Bit.LEFT_IR,&irLeftOlderStt)==_FALLING){
 8004aa6:	4bb2      	ldr	r3, [pc, #712]	; (8004d70 <testWaterSensorTask+0x374>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	06db      	lsls	r3, r3, #27
 8004aac:	0fdb      	lsrs	r3, r3, #31
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	001a      	movs	r2, r3
 8004ab2:	4bb7      	ldr	r3, [pc, #732]	; (8004d90 <testWaterSensorTask+0x394>)
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	0010      	movs	r0, r2
 8004ab8:	f7fe fe86 	bl	80037c8 <Get_Edge>
 8004abc:	0003      	movs	r3, r0
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d134      	bne.n	8004b2c <testWaterSensorTask+0x130>
	      TOOL.FailNum++;
 8004ac2:	4baa      	ldr	r3, [pc, #680]	; (8004d6c <testWaterSensorTask+0x370>)
 8004ac4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	4ba8      	ldr	r3, [pc, #672]	; (8004d6c <testWaterSensorTask+0x370>)
 8004acc:	879a      	strh	r2, [r3, #60]	; 0x3c
	      flashDataInfor.HalfWord_t.countFailSensor=TOOL.FailNum;
 8004ace:	4ba7      	ldr	r3, [pc, #668]	; (8004d6c <testWaterSensorTask+0x370>)
 8004ad0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8004ad2:	4ba9      	ldr	r3, [pc, #676]	; (8004d78 <testWaterSensorTask+0x37c>)
 8004ad4:	80da      	strh	r2, [r3, #6]
	      TOOL.state=_test_null;
 8004ad6:	4ba5      	ldr	r3, [pc, #660]	; (8004d6c <testWaterSensorTask+0x370>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
	      OUTPUT_setOff(&_ctrlOutput[_LED_OK],0);
 8004adc:	4ba7      	ldr	r3, [pc, #668]	; (8004d7c <testWaterSensorTask+0x380>)
 8004ade:	2100      	movs	r1, #0
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7fe f8b7 	bl	8002c54 <OUTPUT_setOff>
	      OUTPUT_setOff(&_ctrlOutput[_LED_ERROR],0);
 8004ae6:	4ba6      	ldr	r3, [pc, #664]	; (8004d80 <testWaterSensorTask+0x384>)
 8004ae8:	2100      	movs	r1, #0
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7fe f8b2 	bl	8002c54 <OUTPUT_setOff>
	      OUTPUT_setOff(&_ctrlOutput[_BUZ],0);
 8004af0:	4ba4      	ldr	r3, [pc, #656]	; (8004d84 <testWaterSensorTask+0x388>)
 8004af2:	2100      	movs	r1, #0
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7fe f8ad 	bl	8002c54 <OUTPUT_setOff>
	      delay_ms(500);
 8004afa:	23fa      	movs	r3, #250	; 0xfa
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7fe fe50 	bl	80037a4 <delay_ms>
	      if(TWMOTOR.SWTS.Bit.LEFT_IR)MotorGotoPosition(&TWMOTOR,_POS_MID,_TIMEOUT_MOTOR);
 8004b04:	4b9a      	ldr	r3, [pc, #616]	; (8004d70 <testWaterSensorTask+0x374>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2210      	movs	r2, #16
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <testWaterSensorTask+0x122>
 8004b12:	4a9d      	ldr	r2, [pc, #628]	; (8004d88 <testWaterSensorTask+0x38c>)
 8004b14:	4b96      	ldr	r3, [pc, #600]	; (8004d70 <testWaterSensorTask+0x374>)
 8004b16:	2102      	movs	r1, #2
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f001 feff 	bl	800691c <MotorGotoPosition>
	      Flash_WriteDWord(flashDataInfor.Dword, FLASH_ADDRESS_START);
 8004b1e:	4b96      	ldr	r3, [pc, #600]	; (8004d78 <testWaterSensorTask+0x37c>)
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	4b99      	ldr	r3, [pc, #612]	; (8004d8c <testWaterSensorTask+0x390>)
 8004b26:	001a      	movs	r2, r3
 8004b28:	f7fe fef4 	bl	8003914 <Flash_WriteDWord>
	  }
      }
  }

  if(!timer_expired(&_timeoutCheckState))
 8004b2c:	4b99      	ldr	r3, [pc, #612]	; (8004d94 <testWaterSensorTask+0x398>)
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7fe fad4 	bl	80030dc <timer_expired>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d100      	bne.n	8004b3a <testWaterSensorTask+0x13e>
 8004b38:	e368      	b.n	800520c <testWaterSensorTask+0x810>
	return;

  //Đọc trạng thái của Ánh sánh
  TOOL.lightStt = getBright();
 8004b3a:	f7ff fb39 	bl	80041b0 <getBright>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	0019      	movs	r1, r3
 8004b42:	4b8a      	ldr	r3, [pc, #552]	; (8004d6c <testWaterSensorTask+0x370>)
 8004b44:	2233      	movs	r2, #51	; 0x33
 8004b46:	5499      	strb	r1, [r3, r2]

  //check led đỏ thì ko reset timer
  if(TOOL.state!=_test_ledRedBlink)
 8004b48:	4b88      	ldr	r3, [pc, #544]	; (8004d6c <testWaterSensorTask+0x370>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d003      	beq.n	8004b58 <testWaterSensorTask+0x15c>
    timer_restart(&_timeoutCheckState);
 8004b50:	4b90      	ldr	r3, [pc, #576]	; (8004d94 <testWaterSensorTask+0x398>)
 8004b52:	0018      	movs	r0, r3
 8004b54:	f7fe fab0 	bl	80030b8 <timer_restart>

  //Học giá trị Ánh sáng của môi trường
  if(TOOL.adcLightStart==0){
 8004b58:	4b84      	ldr	r3, [pc, #528]	; (8004d6c <testWaterSensorTask+0x370>)
 8004b5a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <testWaterSensorTask+0x17a>
    TOOL.adcLightStart = ADC_Arr[_ID_ADC_ptcHsink];
 8004b60:	4b8d      	ldr	r3, [pc, #564]	; (8004d98 <testWaterSensorTask+0x39c>)
 8004b62:	885b      	ldrh	r3, [r3, #2]
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	4b81      	ldr	r3, [pc, #516]	; (8004d6c <testWaterSensorTask+0x370>)
 8004b68:	861a      	strh	r2, [r3, #48]	; 0x30
    timer_set(&_timeoutCheckState, 20);
 8004b6a:	4b8a      	ldr	r3, [pc, #552]	; (8004d94 <testWaterSensorTask+0x398>)
 8004b6c:	2114      	movs	r1, #20
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7fe fa8a 	bl	8003088 <timer_set>
    return;
 8004b74:	e359      	b.n	800522a <testWaterSensorTask+0x82e>
  }

  //Switch case
  switch(TOOL.state)
 8004b76:	4b7d      	ldr	r3, [pc, #500]	; (8004d6c <testWaterSensorTask+0x370>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b06      	cmp	r3, #6
 8004b7c:	d900      	bls.n	8004b80 <testWaterSensorTask+0x184>
 8004b7e:	e347      	b.n	8005210 <testWaterSensorTask+0x814>
 8004b80:	009a      	lsls	r2, r3, #2
 8004b82:	4b86      	ldr	r3, [pc, #536]	; (8004d9c <testWaterSensorTask+0x3a0>)
 8004b84:	18d3      	adds	r3, r2, r3
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	469f      	mov	pc, r3
  {
    case _test_null:
      //reset ket qua
      gotoFinished(_TEST_NULL);
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	f7ff fd1a 	bl	80045c4 <gotoFinished>
      //Kiem tra dien ap
      if(TOOL.voltage < 4)
 8004b90:	4b76      	ldr	r3, [pc, #472]	; (8004d6c <testWaterSensorTask+0x370>)
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	2181      	movs	r1, #129	; 0x81
 8004b96:	05c9      	lsls	r1, r1, #23
 8004b98:	1c18      	adds	r0, r3, #0
 8004b9a:	f7fb fc93 	bl	80004c4 <__aeabi_fcmplt>
 8004b9e:	1e03      	subs	r3, r0, #0
 8004ba0:	d009      	beq.n	8004bb6 <testWaterSensorTask+0x1ba>
      {
        sprintf(TOOL.LcdStr_row[0],D0_SUTAP_LOI);
 8004ba2:	4a7f      	ldr	r2, [pc, #508]	; (8004da0 <testWaterSensorTask+0x3a4>)
 8004ba4:	4b7f      	ldr	r3, [pc, #508]	; (8004da4 <testWaterSensorTask+0x3a8>)
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f008 fe39 	bl	800d820 <siprintf>
        TOOL.state=_test_null;
 8004bae:	4b6f      	ldr	r3, [pc, #444]	; (8004d6c <testWaterSensorTask+0x370>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
        return;
 8004bb4:	e339      	b.n	800522a <testWaterSensorTask+0x82e>
      }
      //kiểm tra dòng điện
      TOOL.current = getCurrent_mA();
 8004bb6:	f7fe ffcf 	bl	8003b58 <getCurrent_mA>
 8004bba:	1c02      	adds	r2, r0, #0
 8004bbc:	4b6b      	ldr	r3, [pc, #428]	; (8004d6c <testWaterSensorTask+0x370>)
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
      //Phát hiện bắt đầu ghim connector
      if(TOOL.current <= 0.4)
 8004bc0:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <testWaterSensorTask+0x370>)
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	1c18      	adds	r0, r3, #0
 8004bc6:	f7fd fe09 	bl	80027dc <__aeabi_f2d>
 8004bca:	4a77      	ldr	r2, [pc, #476]	; (8004da8 <testWaterSensorTask+0x3ac>)
 8004bcc:	4b77      	ldr	r3, [pc, #476]	; (8004dac <testWaterSensorTask+0x3b0>)
 8004bce:	f7fb fc49 	bl	8000464 <__aeabi_dcmple>
 8004bd2:	1e03      	subs	r3, r0, #0
 8004bd4:	d009      	beq.n	8004bea <testWaterSensorTask+0x1ee>
      {
	  sprintf(TOOL.LcdStr_row[0],D0_GHIM_CONNECTOR);
 8004bd6:	4a76      	ldr	r2, [pc, #472]	; (8004db0 <testWaterSensorTask+0x3b4>)
 8004bd8:	4b72      	ldr	r3, [pc, #456]	; (8004da4 <testWaterSensorTask+0x3a8>)
 8004bda:	0011      	movs	r1, r2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f008 fe1f 	bl	800d820 <siprintf>
	  retryReadLedGreenOn=0;
 8004be2:	4b74      	ldr	r3, [pc, #464]	; (8004db4 <testWaterSensorTask+0x3b8>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
      //Lỗi chập khi mới gắn điện
      else
      {
	sprintf(TOOL.LcdStr_row[0],D0_QUADONG_LOI);
      }
      break;
 8004be8:	e31f      	b.n	800522a <testWaterSensorTask+0x82e>
      else if(TOOL.current > 0.4 && TOOL.current < 50)
 8004bea:	4b60      	ldr	r3, [pc, #384]	; (8004d6c <testWaterSensorTask+0x370>)
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	1c18      	adds	r0, r3, #0
 8004bf0:	f7fd fdf4 	bl	80027dc <__aeabi_f2d>
 8004bf4:	4a6c      	ldr	r2, [pc, #432]	; (8004da8 <testWaterSensorTask+0x3ac>)
 8004bf6:	4b6d      	ldr	r3, [pc, #436]	; (8004dac <testWaterSensorTask+0x3b0>)
 8004bf8:	f7fb fc3e 	bl	8000478 <__aeabi_dcmpgt>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d042      	beq.n	8004c86 <testWaterSensorTask+0x28a>
 8004c00:	4b5a      	ldr	r3, [pc, #360]	; (8004d6c <testWaterSensorTask+0x370>)
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	496c      	ldr	r1, [pc, #432]	; (8004db8 <testWaterSensorTask+0x3bc>)
 8004c06:	1c18      	adds	r0, r3, #0
 8004c08:	f7fb fc5c 	bl	80004c4 <__aeabi_fcmplt>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d03a      	beq.n	8004c86 <testWaterSensorTask+0x28a>
	  if(TOOL.lightStt == _PhotoCell_covered){
 8004c10:	4b56      	ldr	r3, [pc, #344]	; (8004d6c <testWaterSensorTask+0x370>)
 8004c12:	2233      	movs	r2, #51	; 0x33
 8004c14:	5c9b      	ldrb	r3, [r3, r2]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d12e      	bne.n	8004c78 <testWaterSensorTask+0x27c>
	    if(TWMOTOR.SWTS.Bit.LEFT_IR==0 && TWMOTOR.SWTS.Bit.RIGHT_IR==0){
 8004c1a:	4b55      	ldr	r3, [pc, #340]	; (8004d70 <testWaterSensorTask+0x374>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	4013      	ands	r3, r2
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10d      	bne.n	8004c44 <testWaterSensorTask+0x248>
 8004c28:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <testWaterSensorTask+0x374>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	4013      	ands	r3, r2
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <testWaterSensorTask+0x248>
		sprintf(TOOL.LcdStr_row[0]," Bi Ket Di Vat");
 8004c36:	4a61      	ldr	r2, [pc, #388]	; (8004dbc <testWaterSensorTask+0x3c0>)
 8004c38:	4b5a      	ldr	r3, [pc, #360]	; (8004da4 <testWaterSensorTask+0x3a8>)
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f008 fdef 	bl	800d820 <siprintf>
		return;
 8004c42:	e2f2      	b.n	800522a <testWaterSensorTask+0x82e>
		MotorGotoPosition(&TWMOTOR,_POS_MID,_TIMEOUT_MOTOR);
 8004c44:	4a50      	ldr	r2, [pc, #320]	; (8004d88 <testWaterSensorTask+0x38c>)
 8004c46:	4b4a      	ldr	r3, [pc, #296]	; (8004d70 <testWaterSensorTask+0x374>)
 8004c48:	2102      	movs	r1, #2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f001 fe66 	bl	800691c <MotorGotoPosition>
		sprintf(TOOL.LcdStr_row[0],"Dang Khoi Dong");
 8004c50:	4a5b      	ldr	r2, [pc, #364]	; (8004dc0 <testWaterSensorTask+0x3c4>)
 8004c52:	4b54      	ldr	r3, [pc, #336]	; (8004da4 <testWaterSensorTask+0x3a8>)
 8004c54:	0011      	movs	r1, r2
 8004c56:	0018      	movs	r0, r3
 8004c58:	f008 fde2 	bl	800d820 <siprintf>
		TOOL.state=_test_start;
 8004c5c:	4b43      	ldr	r3, [pc, #268]	; (8004d6c <testWaterSensorTask+0x370>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
		retryCalib=0;
 8004c62:	4b58      	ldr	r3, [pc, #352]	; (8004dc4 <testWaterSensorTask+0x3c8>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
		timer_set(&_timeoutCheckState, 2000);//cũ là 1000 vẫn lỗi
 8004c68:	23fa      	movs	r3, #250	; 0xfa
 8004c6a:	00da      	lsls	r2, r3, #3
 8004c6c:	4b49      	ldr	r3, [pc, #292]	; (8004d94 <testWaterSensorTask+0x398>)
 8004c6e:	0011      	movs	r1, r2
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7fe fa09 	bl	8003088 <timer_set>
	  if(TOOL.lightStt == _PhotoCell_covered){
 8004c76:	e00d      	b.n	8004c94 <testWaterSensorTask+0x298>
	    sprintf(TOOL.LcdStr_row[0],"Chua Ghim Sensor");
 8004c78:	4a53      	ldr	r2, [pc, #332]	; (8004dc8 <testWaterSensorTask+0x3cc>)
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <testWaterSensorTask+0x3a8>)
 8004c7c:	0011      	movs	r1, r2
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f008 fdce 	bl	800d820 <siprintf>
	  if(TOOL.lightStt == _PhotoCell_covered){
 8004c84:	e006      	b.n	8004c94 <testWaterSensorTask+0x298>
	sprintf(TOOL.LcdStr_row[0],D0_QUADONG_LOI);
 8004c86:	4a51      	ldr	r2, [pc, #324]	; (8004dcc <testWaterSensorTask+0x3d0>)
 8004c88:	4b46      	ldr	r3, [pc, #280]	; (8004da4 <testWaterSensorTask+0x3a8>)
 8004c8a:	0011      	movs	r1, r2
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f008 fdc7 	bl	800d820 <siprintf>
      break;
 8004c92:	e2ca      	b.n	800522a <testWaterSensorTask+0x82e>
 8004c94:	e2c9      	b.n	800522a <testWaterSensorTask+0x82e>

    case _test_start:
      //gửi lệnh calib sensor
      CapSS_Start(&CAPSENSOR[_CAPSS_ID_WATER], _SS_CALIB_BYTE);
 8004c96:	4b4e      	ldr	r3, [pc, #312]	; (8004dd0 <testWaterSensorTask+0x3d4>)
 8004c98:	2160      	movs	r1, #96	; 0x60
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7fe faa2 	bl	80031e4 <CapSS_Start>
      timer_set(&_timeoutCheckState, 1100);
 8004ca0:	4a4c      	ldr	r2, [pc, #304]	; (8004dd4 <testWaterSensorTask+0x3d8>)
 8004ca2:	4b3c      	ldr	r3, [pc, #240]	; (8004d94 <testWaterSensorTask+0x398>)
 8004ca4:	0011      	movs	r1, r2
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f7fe f9ee 	bl	8003088 <timer_set>
      TOOL.state=_test_ledCalib;
 8004cac:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <testWaterSensorTask+0x370>)
 8004cae:	2203      	movs	r2, #3
 8004cb0:	701a      	strb	r2, [r3, #0]
      break;
 8004cb2:	e2ba      	b.n	800522a <testWaterSensorTask+0x82e>

    case _test_ledCalib:
      if(CAPSENSOR[_CAPSS_ID_WATER].connectStt==_PASS)
 8004cb4:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <testWaterSensorTask+0x3d4>)
 8004cb6:	789b      	ldrb	r3, [r3, #2]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d110      	bne.n	8004ce0 <testWaterSensorTask+0x2e4>
      {
	  sprintf(TOOL.LcdStr_row[0],D0_CALIB_OK);
 8004cbe:	4a46      	ldr	r2, [pc, #280]	; (8004dd8 <testWaterSensorTask+0x3dc>)
 8004cc0:	4b38      	ldr	r3, [pc, #224]	; (8004da4 <testWaterSensorTask+0x3a8>)
 8004cc2:	0011      	movs	r1, r2
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f008 fdab 	bl	800d820 <siprintf>
	  timer_set(&_timeoutCheckState, 300);
 8004cca:	2396      	movs	r3, #150	; 0x96
 8004ccc:	005a      	lsls	r2, r3, #1
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <testWaterSensorTask+0x398>)
 8004cd0:	0011      	movs	r1, r2
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7fe f9d8 	bl	8003088 <timer_set>
	  TOOL.state=_test_ledGreenOn;
 8004cd8:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <testWaterSensorTask+0x370>)
 8004cda:	2204      	movs	r2, #4
 8004cdc:	701a      	strb	r2, [r3, #0]
	    TOOL.state=_test_start;
	    timer_set(&_timeoutCheckState, 500);
	    return;
	  }
      }
      break;
 8004cde:	e299      	b.n	8005214 <testWaterSensorTask+0x818>
      else if(CAPSENSOR[_CAPSS_ID_WATER].connectStt==_FAIL)
 8004ce0:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <testWaterSensorTask+0x3d4>)
 8004ce2:	789b      	ldrb	r3, [r3, #2]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d000      	beq.n	8004cec <testWaterSensorTask+0x2f0>
 8004cea:	e293      	b.n	8005214 <testWaterSensorTask+0x818>
	  if(++retryCalib > 2){
 8004cec:	4b35      	ldr	r3, [pc, #212]	; (8004dc4 <testWaterSensorTask+0x3c8>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <testWaterSensorTask+0x3c8>)
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	4b32      	ldr	r3, [pc, #200]	; (8004dc4 <testWaterSensorTask+0x3c8>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d909      	bls.n	8004d14 <testWaterSensorTask+0x318>
	      sprintf(TOOL.LcdStr_row[0],D0_CALIB_LOI);
 8004d00:	4a36      	ldr	r2, [pc, #216]	; (8004ddc <testWaterSensorTask+0x3e0>)
 8004d02:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <testWaterSensorTask+0x3a8>)
 8004d04:	0011      	movs	r1, r2
 8004d06:	0018      	movs	r0, r3
 8004d08:	f008 fd8a 	bl	800d820 <siprintf>
	      gotoFinished(_TEST_ERROR);
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	f7ff fc59 	bl	80045c4 <gotoFinished>
      break;
 8004d12:	e27f      	b.n	8005214 <testWaterSensorTask+0x818>
	    TOOL.state=_test_start;
 8004d14:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <testWaterSensorTask+0x370>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
	    timer_set(&_timeoutCheckState, 500);
 8004d1a:	23fa      	movs	r3, #250	; 0xfa
 8004d1c:	005a      	lsls	r2, r3, #1
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <testWaterSensorTask+0x398>)
 8004d20:	0011      	movs	r1, r2
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7fe f9b0 	bl	8003088 <timer_set>
	    return;
 8004d28:	e27f      	b.n	800522a <testWaterSensorTask+0x82e>

    case _test_ledGreenOn:
      if(TOOL.lightStt == _PhotoCell_LedGreenOn)
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <testWaterSensorTask+0x370>)
 8004d2c:	2233      	movs	r2, #51	; 0x33
 8004d2e:	5c9b      	ldrb	r3, [r3, r2]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d162      	bne.n	8004dfa <testWaterSensorTask+0x3fe>
      {
	if(CAPSENSOR[0].logicStt == _LOW)
 8004d34:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <testWaterSensorTask+0x3d4>)
 8004d36:	78db      	ldrb	r3, [r3, #3]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d156      	bne.n	8004dec <testWaterSensorTask+0x3f0>
	{
	  sprintf(TOOL.LcdStr_row[0],D0_LEDGREEN_SANG);
 8004d3e:	4a28      	ldr	r2, [pc, #160]	; (8004de0 <testWaterSensorTask+0x3e4>)
 8004d40:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <testWaterSensorTask+0x3a8>)
 8004d42:	0011      	movs	r1, r2
 8004d44:	0018      	movs	r0, r3
 8004d46:	f008 fd6b 	bl	800d820 <siprintf>
	  TOOL.state=_test_ledGreenOff;
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <testWaterSensorTask+0x370>)
 8004d4c:	2205      	movs	r2, #5
 8004d4e:	701a      	strb	r2, [r3, #0]
	  timer_set(&_timeoutCheckLedGreenOff,3500);
 8004d50:	4a24      	ldr	r2, [pc, #144]	; (8004de4 <testWaterSensorTask+0x3e8>)
 8004d52:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <testWaterSensorTask+0x3ec>)
 8004d54:	0011      	movs	r1, r2
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7fe f996 	bl	8003088 <timer_set>
	  timer_set(&_timeoutCheckState,500);
 8004d5c:	23fa      	movs	r3, #250	; 0xfa
 8004d5e:	005a      	lsls	r2, r3, #1
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <testWaterSensorTask+0x398>)
 8004d62:	0011      	movs	r1, r2
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7fe f98f 	bl	8003088 <timer_set>
	  return;
 8004d6a:	e25e      	b.n	800522a <testWaterSensorTask+0x82e>
 8004d6c:	20000448 	.word	0x20000448
 8004d70:	20000994 	.word	0x20000994
 8004d74:	20000536 	.word	0x20000536
 8004d78:	20000488 	.word	0x20000488
 8004d7c:	20000368 	.word	0x20000368
 8004d80:	20000394 	.word	0x20000394
 8004d84:	200003ec 	.word	0x200003ec
 8004d88:	00000bb8 	.word	0x00000bb8
 8004d8c:	0801f800 	.word	0x0801f800
 8004d90:	20000537 	.word	0x20000537
 8004d94:	20000490 	.word	0x20000490
 8004d98:	20000440 	.word	0x20000440
 8004d9c:	08010070 	.word	0x08010070
 8004da0:	0800fd4c 	.word	0x0800fd4c
 8004da4:	2000044a 	.word	0x2000044a
 8004da8:	9999999a 	.word	0x9999999a
 8004dac:	3fd99999 	.word	0x3fd99999
 8004db0:	0800fd60 	.word	0x0800fd60
 8004db4:	2000050c 	.word	0x2000050c
 8004db8:	42480000 	.word	0x42480000
 8004dbc:	0800fd74 	.word	0x0800fd74
 8004dc0:	0800fd84 	.word	0x0800fd84
 8004dc4:	2000050d 	.word	0x2000050d
 8004dc8:	0800fd94 	.word	0x0800fd94
 8004dcc:	0800fda8 	.word	0x0800fda8
 8004dd0:	20000290 	.word	0x20000290
 8004dd4:	0000044c 	.word	0x0000044c
 8004dd8:	0800fdbc 	.word	0x0800fdbc
 8004ddc:	0800fdcc 	.word	0x0800fdcc
 8004de0:	0800fde0 	.word	0x0800fde0
 8004de4:	00000dac 	.word	0x00000dac
 8004de8:	200004c0 	.word	0x200004c0
	}
	else
	{
	  sprintf(TOOL.LcdStr_row[0],D0_DAYLOGIC_LUON1_LOI);
 8004dec:	4aca      	ldr	r2, [pc, #808]	; (8005118 <testWaterSensorTask+0x71c>)
 8004dee:	4bcb      	ldr	r3, [pc, #812]	; (800511c <testWaterSensorTask+0x720>)
 8004df0:	0011      	movs	r1, r2
 8004df2:	0018      	movs	r0, r3
 8004df4:	f008 fd14 	bl	800d820 <siprintf>
 8004df8:	e005      	b.n	8004e06 <testWaterSensorTask+0x40a>
	}
      }
      else
      {
	  sprintf(TOOL.LcdStr_row[0],D0_LEDGREEN_LUON0_LOI);
 8004dfa:	4ac9      	ldr	r2, [pc, #804]	; (8005120 <testWaterSensorTask+0x724>)
 8004dfc:	4bc7      	ldr	r3, [pc, #796]	; (800511c <testWaterSensorTask+0x720>)
 8004dfe:	0011      	movs	r1, r2
 8004e00:	0018      	movs	r0, r3
 8004e02:	f008 fd0d 	bl	800d820 <siprintf>

      }

      if(++retryReadLedGreenOn > 10)
 8004e06:	4bc7      	ldr	r3, [pc, #796]	; (8005124 <testWaterSensorTask+0x728>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4bc5      	ldr	r3, [pc, #788]	; (8005124 <testWaterSensorTask+0x728>)
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	4bc4      	ldr	r3, [pc, #784]	; (8005124 <testWaterSensorTask+0x728>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b0a      	cmp	r3, #10
 8004e18:	d800      	bhi.n	8004e1c <testWaterSensorTask+0x420>
 8004e1a:	e1fd      	b.n	8005218 <testWaterSensorTask+0x81c>
      {
	  retryReadLedGreenOn=0;
 8004e1c:	4bc1      	ldr	r3, [pc, #772]	; (8005124 <testWaterSensorTask+0x728>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
	  gotoFinished(_TEST_ERROR);
 8004e22:	2001      	movs	r0, #1
 8004e24:	f7ff fbce 	bl	80045c4 <gotoFinished>
      }
      break;
 8004e28:	e1f6      	b.n	8005218 <testWaterSensorTask+0x81c>

    case _test_ledGreenOff:

      if(TOOL.lightStt == _PhotoCell_covered)
 8004e2a:	4bbf      	ldr	r3, [pc, #764]	; (8005128 <testWaterSensorTask+0x72c>)
 8004e2c:	2233      	movs	r2, #51	; 0x33
 8004e2e:	5c9b      	ldrb	r3, [r3, r2]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d12b      	bne.n	8004e8c <testWaterSensorTask+0x490>
      {
	if(CAPSENSOR[0].logicStt)
 8004e34:	4bbd      	ldr	r3, [pc, #756]	; (800512c <testWaterSensorTask+0x730>)
 8004e36:	78db      	ldrb	r3, [r3, #3]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <testWaterSensorTask+0x474>
	{
	  sprintf(TOOL.LcdStr_row[0],D0_CHECK_LED_RED);
 8004e3e:	4abc      	ldr	r2, [pc, #752]	; (8005130 <testWaterSensorTask+0x734>)
 8004e40:	4bb6      	ldr	r3, [pc, #728]	; (800511c <testWaterSensorTask+0x720>)
 8004e42:	0011      	movs	r1, r2
 8004e44:	0018      	movs	r0, r3
 8004e46:	f008 fceb 	bl	800d820 <siprintf>
	  timer_stop(&_timeoutCheckLedGreenOff);
 8004e4a:	4bba      	ldr	r3, [pc, #744]	; (8005134 <testWaterSensorTask+0x738>)
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fe f96b 	bl	8003128 <timer_stop>
	  timer_set(&_timeoutCheckLedRed, 2500);
 8004e52:	4ab9      	ldr	r2, [pc, #740]	; (8005138 <testWaterSensorTask+0x73c>)
 8004e54:	4bb9      	ldr	r3, [pc, #740]	; (800513c <testWaterSensorTask+0x740>)
 8004e56:	0011      	movs	r1, r2
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7fe f915 	bl	8003088 <timer_set>
	  timer_set(&_timeoutCheckState,20);
 8004e5e:	4bb8      	ldr	r3, [pc, #736]	; (8005140 <testWaterSensorTask+0x744>)
 8004e60:	2114      	movs	r1, #20
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7fe f910 	bl	8003088 <timer_set>
	  TOOL.state=_test_ledRedBlink;
 8004e68:	4baf      	ldr	r3, [pc, #700]	; (8005128 <testWaterSensorTask+0x72c>)
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	701a      	strb	r2, [r3, #0]
	  return;
 8004e6e:	e1dc      	b.n	800522a <testWaterSensorTask+0x82e>
	}
	else
	{
	  sprintf(TOOL.LcdStr_row[0],D0_DAYLOGIC_LUON0_LOI);
 8004e70:	4ab4      	ldr	r2, [pc, #720]	; (8005144 <testWaterSensorTask+0x748>)
 8004e72:	4baa      	ldr	r3, [pc, #680]	; (800511c <testWaterSensorTask+0x720>)
 8004e74:	0011      	movs	r1, r2
 8004e76:	0018      	movs	r0, r3
 8004e78:	f008 fcd2 	bl	800d820 <siprintf>
	  timer_stop(&_timeoutCheckLedGreenOff);
 8004e7c:	4bad      	ldr	r3, [pc, #692]	; (8005134 <testWaterSensorTask+0x738>)
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f7fe f952 	bl	8003128 <timer_stop>
	  gotoFinished(_TEST_ERROR);
 8004e84:	2001      	movs	r0, #1
 8004e86:	f7ff fb9d 	bl	80045c4 <gotoFinished>
	  return;
 8004e8a:	e1ce      	b.n	800522a <testWaterSensorTask+0x82e>
	}
      }
      else
	f_checkLedXanh=1;
 8004e8c:	4bae      	ldr	r3, [pc, #696]	; (8005148 <testWaterSensorTask+0x74c>)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	701a      	strb	r2, [r3, #0]

      if(timer_expired(&_timeoutCheckLedGreenOff))
 8004e92:	4ba8      	ldr	r3, [pc, #672]	; (8005134 <testWaterSensorTask+0x738>)
 8004e94:	0018      	movs	r0, r3
 8004e96:	f7fe f921 	bl	80030dc <timer_expired>
 8004e9a:	1e03      	subs	r3, r0, #0
 8004e9c:	d100      	bne.n	8004ea0 <testWaterSensorTask+0x4a4>
 8004e9e:	e1bd      	b.n	800521c <testWaterSensorTask+0x820>
      {
	sprintf(TOOL.LcdStr_row[0],D0_LEDGREEN_LUON1_LOI);
 8004ea0:	4aaa      	ldr	r2, [pc, #680]	; (800514c <testWaterSensorTask+0x750>)
 8004ea2:	4b9e      	ldr	r3, [pc, #632]	; (800511c <testWaterSensorTask+0x720>)
 8004ea4:	0011      	movs	r1, r2
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f008 fcba 	bl	800d820 <siprintf>
	timer_stop(&_timeoutCheckLedGreenOff);
 8004eac:	4ba1      	ldr	r3, [pc, #644]	; (8005134 <testWaterSensorTask+0x738>)
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f7fe f93a 	bl	8003128 <timer_stop>
	gotoFinished(_TEST_ERROR);
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f7ff fb85 	bl	80045c4 <gotoFinished>
	return;
 8004eba:	e1b6      	b.n	800522a <testWaterSensorTask+0x82e>
      }
      break;

    case _test_ledRedBlink:
      if(timer_expired(&_timeoutCheckLedRed))
 8004ebc:	4b9f      	ldr	r3, [pc, #636]	; (800513c <testWaterSensorTask+0x740>)
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7fe f90c 	bl	80030dc <timer_expired>
 8004ec4:	1e03      	subs	r3, r0, #0
 8004ec6:	d028      	beq.n	8004f1a <testWaterSensorTask+0x51e>
      {
	if(TOOL.lightStt == _PhotoCell_LedGreenOn || f_checkLedXanh==1)
 8004ec8:	4b97      	ldr	r3, [pc, #604]	; (8005128 <testWaterSensorTask+0x72c>)
 8004eca:	2233      	movs	r2, #51	; 0x33
 8004ecc:	5c9b      	ldrb	r3, [r3, r2]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d003      	beq.n	8004eda <testWaterSensorTask+0x4de>
 8004ed2:	4b9d      	ldr	r3, [pc, #628]	; (8005148 <testWaterSensorTask+0x74c>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d106      	bne.n	8004ee8 <testWaterSensorTask+0x4ec>
	  sprintf(TOOL.LcdStr_row[0],D0_LEDGREEN_LUONSANG_LOI);
 8004eda:	4a9d      	ldr	r2, [pc, #628]	; (8005150 <testWaterSensorTask+0x754>)
 8004edc:	4b8f      	ldr	r3, [pc, #572]	; (800511c <testWaterSensorTask+0x720>)
 8004ede:	0011      	movs	r1, r2
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f008 fc9d 	bl	800d820 <siprintf>
 8004ee6:	e014      	b.n	8004f12 <testWaterSensorTask+0x516>
	else if(TOOL.current > 30/*mA*/)
 8004ee8:	4b8f      	ldr	r3, [pc, #572]	; (8005128 <testWaterSensorTask+0x72c>)
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	4999      	ldr	r1, [pc, #612]	; (8005154 <testWaterSensorTask+0x758>)
 8004eee:	1c18      	adds	r0, r3, #0
 8004ef0:	f7fb fafc 	bl	80004ec <__aeabi_fcmpgt>
 8004ef4:	1e03      	subs	r3, r0, #0
 8004ef6:	d006      	beq.n	8004f06 <testWaterSensorTask+0x50a>
	{
		sprintf(TOOL.LcdStr_row[0],D0_LED_LOI_QUADONG);
 8004ef8:	4a97      	ldr	r2, [pc, #604]	; (8005158 <testWaterSensorTask+0x75c>)
 8004efa:	4b88      	ldr	r3, [pc, #544]	; (800511c <testWaterSensorTask+0x720>)
 8004efc:	0011      	movs	r1, r2
 8004efe:	0018      	movs	r0, r3
 8004f00:	f008 fc8e 	bl	800d820 <siprintf>
 8004f04:	e005      	b.n	8004f12 <testWaterSensorTask+0x516>
	}
	else
	  sprintf(TOOL.LcdStr_row[0],D0_LED_RED_LOI);
 8004f06:	4a95      	ldr	r2, [pc, #596]	; (800515c <testWaterSensorTask+0x760>)
 8004f08:	4b84      	ldr	r3, [pc, #528]	; (800511c <testWaterSensorTask+0x720>)
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f008 fc87 	bl	800d820 <siprintf>

	gotoFinished(_TEST_ERROR);
 8004f12:	2001      	movs	r0, #1
 8004f14:	f7ff fb56 	bl	80045c4 <gotoFinished>
	return;
 8004f18:	e187      	b.n	800522a <testWaterSensorTask+0x82e>
      }

      //Không kiểm tra Led đỏ khi Led xanh sáng
      if(TOOL.lightStt == _PhotoCell_LedGreenOn)
 8004f1a:	4b83      	ldr	r3, [pc, #524]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f1c:	2233      	movs	r2, #51	; 0x33
 8004f1e:	5c9b      	ldrb	r3, [r3, r2]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d100      	bne.n	8004f26 <testWaterSensorTask+0x52a>
 8004f24:	e17c      	b.n	8005220 <testWaterSensorTask+0x824>
	return;
      else
	f_checkLedXanh=0;
 8004f26:	4b88      	ldr	r3, [pc, #544]	; (8005148 <testWaterSensorTask+0x74c>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	701a      	strb	r2, [r3, #0]

      //Đo dòng điện
      TOOL.current = getCurrent_mA();
 8004f2c:	f7fe fe14 	bl	8003b58 <getCurrent_mA>
 8004f30:	1c02      	adds	r2, r0, #0
 8004f32:	4b7d      	ldr	r3, [pc, #500]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24
      //Kiểm tra led đỏ nhấp nháy
      if((TOOL.ledRedTog%2==0) && _LIMIT(TOOL.current,0.8,6))
 8004f36:	4b7c      	ldr	r3, [pc, #496]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f38:	2238      	movs	r2, #56	; 0x38
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	4013      	ands	r3, r2
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d11f      	bne.n	8004f86 <testWaterSensorTask+0x58a>
 8004f46:	4b78      	ldr	r3, [pc, #480]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	1c18      	adds	r0, r3, #0
 8004f4c:	f7fd fc46 	bl	80027dc <__aeabi_f2d>
 8004f50:	4a83      	ldr	r2, [pc, #524]	; (8005160 <testWaterSensorTask+0x764>)
 8004f52:	4b84      	ldr	r3, [pc, #528]	; (8005164 <testWaterSensorTask+0x768>)
 8004f54:	f7fb fa9a 	bl	800048c <__aeabi_dcmpge>
 8004f58:	1e03      	subs	r3, r0, #0
 8004f5a:	d014      	beq.n	8004f86 <testWaterSensorTask+0x58a>
 8004f5c:	4b72      	ldr	r3, [pc, #456]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	4981      	ldr	r1, [pc, #516]	; (8005168 <testWaterSensorTask+0x76c>)
 8004f62:	1c18      	adds	r0, r3, #0
 8004f64:	f7fb fab8 	bl	80004d8 <__aeabi_fcmple>
 8004f68:	1e03      	subs	r3, r0, #0
 8004f6a:	d00c      	beq.n	8004f86 <testWaterSensorTask+0x58a>
      {
	  TOOL.ledRedTog++;
 8004f6c:	4b6e      	ldr	r3, [pc, #440]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f6e:	2238      	movs	r2, #56	; 0x38
 8004f70:	5c9b      	ldrb	r3, [r3, r2]
 8004f72:	3301      	adds	r3, #1
 8004f74:	b2d9      	uxtb	r1, r3
 8004f76:	4b6c      	ldr	r3, [pc, #432]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f78:	2238      	movs	r2, #56	; 0x38
 8004f7a:	5499      	strb	r1, [r3, r2]
	curLedRedOff = TOOL.current;
 8004f7c:	4b6a      	ldr	r3, [pc, #424]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f80:	4b7a      	ldr	r3, [pc, #488]	; (800516c <testWaterSensorTask+0x770>)
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e023      	b.n	8004fce <testWaterSensorTask+0x5d2>
      }
      else if((TOOL.ledRedTog%2==1) && _LIMIT(TOOL.current,10,20))
 8004f86:	4b68      	ldr	r3, [pc, #416]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f88:	2238      	movs	r2, #56	; 0x38
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	4013      	ands	r3, r2
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01b      	beq.n	8004fce <testWaterSensorTask+0x5d2>
 8004f96:	4b64      	ldr	r3, [pc, #400]	; (8005128 <testWaterSensorTask+0x72c>)
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	4975      	ldr	r1, [pc, #468]	; (8005170 <testWaterSensorTask+0x774>)
 8004f9c:	1c18      	adds	r0, r3, #0
 8004f9e:	f7fb faaf 	bl	8000500 <__aeabi_fcmpge>
 8004fa2:	1e03      	subs	r3, r0, #0
 8004fa4:	d013      	beq.n	8004fce <testWaterSensorTask+0x5d2>
 8004fa6:	4b60      	ldr	r3, [pc, #384]	; (8005128 <testWaterSensorTask+0x72c>)
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	4972      	ldr	r1, [pc, #456]	; (8005174 <testWaterSensorTask+0x778>)
 8004fac:	1c18      	adds	r0, r3, #0
 8004fae:	f7fb fa93 	bl	80004d8 <__aeabi_fcmple>
 8004fb2:	1e03      	subs	r3, r0, #0
 8004fb4:	d00b      	beq.n	8004fce <testWaterSensorTask+0x5d2>
      {
	  TOOL.ledRedTog++;
 8004fb6:	4b5c      	ldr	r3, [pc, #368]	; (8005128 <testWaterSensorTask+0x72c>)
 8004fb8:	2238      	movs	r2, #56	; 0x38
 8004fba:	5c9b      	ldrb	r3, [r3, r2]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	b2d9      	uxtb	r1, r3
 8004fc0:	4b59      	ldr	r3, [pc, #356]	; (8005128 <testWaterSensorTask+0x72c>)
 8004fc2:	2238      	movs	r2, #56	; 0x38
 8004fc4:	5499      	strb	r1, [r3, r2]
	curLedRedOn =  TOOL.current;
 8004fc6:	4b58      	ldr	r3, [pc, #352]	; (8005128 <testWaterSensorTask+0x72c>)
 8004fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fca:	4b6b      	ldr	r3, [pc, #428]	; (8005178 <testWaterSensorTask+0x77c>)
 8004fcc:	601a      	str	r2, [r3, #0]
      }

      //OK
      if(TOOL.ledRedTog>2)
 8004fce:	4b56      	ldr	r3, [pc, #344]	; (8005128 <testWaterSensorTask+0x72c>)
 8004fd0:	2238      	movs	r2, #56	; 0x38
 8004fd2:	5c9b      	ldrb	r3, [r3, r2]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d800      	bhi.n	8004fda <testWaterSensorTask+0x5de>
 8004fd8:	e124      	b.n	8005224 <testWaterSensorTask+0x828>
      {
	  if(_LIMIT(curLedRedOff,0.8,1.5))//&&_LIMIT(curLedRedOn,9,15.5))
 8004fda:	4b64      	ldr	r3, [pc, #400]	; (800516c <testWaterSensorTask+0x770>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	1c18      	adds	r0, r3, #0
 8004fe0:	f7fd fbfc 	bl	80027dc <__aeabi_f2d>
 8004fe4:	4a5e      	ldr	r2, [pc, #376]	; (8005160 <testWaterSensorTask+0x764>)
 8004fe6:	4b5f      	ldr	r3, [pc, #380]	; (8005164 <testWaterSensorTask+0x768>)
 8004fe8:	f7fb fa50 	bl	800048c <__aeabi_dcmpge>
 8004fec:	1e03      	subs	r3, r0, #0
 8004fee:	d00f      	beq.n	8005010 <testWaterSensorTask+0x614>
 8004ff0:	4b5e      	ldr	r3, [pc, #376]	; (800516c <testWaterSensorTask+0x770>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	21ff      	movs	r1, #255	; 0xff
 8004ff6:	0589      	lsls	r1, r1, #22
 8004ff8:	1c18      	adds	r0, r3, #0
 8004ffa:	f7fb fa6d 	bl	80004d8 <__aeabi_fcmple>
 8004ffe:	1e03      	subs	r3, r0, #0
 8005000:	d006      	beq.n	8005010 <testWaterSensorTask+0x614>
		sprintf(TOOL.LcdStr_row[0],D0_LED_RED_SANG_OK);
 8005002:	4a5e      	ldr	r2, [pc, #376]	; (800517c <testWaterSensorTask+0x780>)
 8005004:	4b45      	ldr	r3, [pc, #276]	; (800511c <testWaterSensorTask+0x720>)
 8005006:	0011      	movs	r1, r2
 8005008:	0018      	movs	r0, r3
 800500a:	f008 fc09 	bl	800d820 <siprintf>
 800500e:	e01d      	b.n	800504c <testWaterSensorTask+0x650>
	  else if(_LIMIT(curLedRedOff,4,6))//&&_LIMIT(curLedRedOn,15.6,19))
 8005010:	4b56      	ldr	r3, [pc, #344]	; (800516c <testWaterSensorTask+0x770>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2181      	movs	r1, #129	; 0x81
 8005016:	05c9      	lsls	r1, r1, #23
 8005018:	1c18      	adds	r0, r3, #0
 800501a:	f7fb fa71 	bl	8000500 <__aeabi_fcmpge>
 800501e:	1e03      	subs	r3, r0, #0
 8005020:	d00e      	beq.n	8005040 <testWaterSensorTask+0x644>
 8005022:	4b52      	ldr	r3, [pc, #328]	; (800516c <testWaterSensorTask+0x770>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4950      	ldr	r1, [pc, #320]	; (8005168 <testWaterSensorTask+0x76c>)
 8005028:	1c18      	adds	r0, r3, #0
 800502a:	f7fb fa55 	bl	80004d8 <__aeabi_fcmple>
 800502e:	1e03      	subs	r3, r0, #0
 8005030:	d006      	beq.n	8005040 <testWaterSensorTask+0x644>
		sprintf(TOOL.LcdStr_row[0],D0_LED_RED_TAT_OK);
 8005032:	4a53      	ldr	r2, [pc, #332]	; (8005180 <testWaterSensorTask+0x784>)
 8005034:	4b39      	ldr	r3, [pc, #228]	; (800511c <testWaterSensorTask+0x720>)
 8005036:	0011      	movs	r1, r2
 8005038:	0018      	movs	r0, r3
 800503a:	f008 fbf1 	bl	800d820 <siprintf>
 800503e:	e005      	b.n	800504c <testWaterSensorTask+0x650>
	  else
	  {
		sprintf(TOOL.LcdStr_row[0],D0_LED_RED_X_OK);
 8005040:	4a50      	ldr	r2, [pc, #320]	; (8005184 <testWaterSensorTask+0x788>)
 8005042:	4b36      	ldr	r3, [pc, #216]	; (800511c <testWaterSensorTask+0x720>)
 8005044:	0011      	movs	r1, r2
 8005046:	0018      	movs	r0, r3
 8005048:	f008 fbea 	bl	800d820 <siprintf>
	  }
	  timer_set(&_timeoutCheckState,500);
 800504c:	23fa      	movs	r3, #250	; 0xfa
 800504e:	005a      	lsls	r2, r3, #1
 8005050:	4b3b      	ldr	r3, [pc, #236]	; (8005140 <testWaterSensorTask+0x744>)
 8005052:	0011      	movs	r1, r2
 8005054:	0018      	movs	r0, r3
 8005056:	f7fe f817 	bl	8003088 <timer_set>
	  sprintf(TOOL.LcdStr_row[0],D0_SENSOR_OK);
 800505a:	4a4b      	ldr	r2, [pc, #300]	; (8005188 <testWaterSensorTask+0x78c>)
 800505c:	4b2f      	ldr	r3, [pc, #188]	; (800511c <testWaterSensorTask+0x720>)
 800505e:	0011      	movs	r1, r2
 8005060:	0018      	movs	r0, r3
 8005062:	f008 fbdd 	bl	800d820 <siprintf>
	  gotoFinished(_TEST_SUCCESS);
 8005066:	2002      	movs	r0, #2
 8005068:	f7ff faac 	bl	80045c4 <gotoFinished>
	  return;
 800506c:	e0dd      	b.n	800522a <testWaterSensorTask+0x82e>
      }
      break;

    case _test_finished:
      timer_set(&_timeoutCheckState,5);
 800506e:	4b34      	ldr	r3, [pc, #208]	; (8005140 <testWaterSensorTask+0x744>)
 8005070:	2105      	movs	r1, #5
 8005072:	0018      	movs	r0, r3
 8005074:	f7fe f808 	bl	8003088 <timer_set>
      TOOL.current = getCurrent_mA();
 8005078:	f7fe fd6e 	bl	8003b58 <getCurrent_mA>
 800507c:	1c02      	adds	r2, r0, #0
 800507e:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <testWaterSensorTask+0x72c>)
 8005080:	625a      	str	r2, [r3, #36]	; 0x24

      //Nếu đã rút sensor ra
      if(TOOL.current <= 0.4){
 8005082:	4b29      	ldr	r3, [pc, #164]	; (8005128 <testWaterSensorTask+0x72c>)
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c18      	adds	r0, r3, #0
 8005088:	f7fd fba8 	bl	80027dc <__aeabi_f2d>
 800508c:	4a34      	ldr	r2, [pc, #208]	; (8005160 <testWaterSensorTask+0x764>)
 800508e:	4b3f      	ldr	r3, [pc, #252]	; (800518c <testWaterSensorTask+0x790>)
 8005090:	f7fb f9e8 	bl	8000464 <__aeabi_dcmple>
 8005094:	1e03      	subs	r3, r0, #0
 8005096:	d100      	bne.n	800509a <testWaterSensorTask+0x69e>
 8005098:	e088      	b.n	80051ac <testWaterSensorTask+0x7b0>
	  if(flashDataInfor.Byte_t.f_phanLoaiSensor==_ENABLE){
 800509a:	4b3d      	ldr	r3, [pc, #244]	; (8005190 <testWaterSensorTask+0x794>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d109      	bne.n	80050b6 <testWaterSensorTask+0x6ba>
	      TOOL.state=_test_countSensor;
 80050a2:	4b21      	ldr	r3, [pc, #132]	; (8005128 <testWaterSensorTask+0x72c>)
 80050a4:	2207      	movs	r2, #7
 80050a6:	701a      	strb	r2, [r3, #0]
	      sprintf(TOOL.LcdStr_row[0],"Phan Loai Sensor");
 80050a8:	4a3a      	ldr	r2, [pc, #232]	; (8005194 <testWaterSensorTask+0x798>)
 80050aa:	4b1c      	ldr	r3, [pc, #112]	; (800511c <testWaterSensorTask+0x720>)
 80050ac:	0011      	movs	r1, r2
 80050ae:	0018      	movs	r0, r3
 80050b0:	f008 fbb6 	bl	800d820 <siprintf>
 80050b4:	e017      	b.n	80050e6 <testWaterSensorTask+0x6ea>
	  }
	  else {
	      TOOL.state = _test_null;
 80050b6:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <testWaterSensorTask+0x72c>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
	      sprintf(TOOL.LcdStr_row[0],"Tiep Tuc Test..");
 80050bc:	4a36      	ldr	r2, [pc, #216]	; (8005198 <testWaterSensorTask+0x79c>)
 80050be:	4b17      	ldr	r3, [pc, #92]	; (800511c <testWaterSensorTask+0x720>)
 80050c0:	0011      	movs	r1, r2
 80050c2:	0018      	movs	r0, r3
 80050c4:	f008 fbac 	bl	800d820 <siprintf>
	      OUTPUT_setOff(&_ctrlOutput[_LED_OK],0);
 80050c8:	4b34      	ldr	r3, [pc, #208]	; (800519c <testWaterSensorTask+0x7a0>)
 80050ca:	2100      	movs	r1, #0
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fd fdc1 	bl	8002c54 <OUTPUT_setOff>
	      OUTPUT_setOff(&_ctrlOutput[_LED_ERROR],0);
 80050d2:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <testWaterSensorTask+0x7a4>)
 80050d4:	2100      	movs	r1, #0
 80050d6:	0018      	movs	r0, r3
 80050d8:	f7fd fdbc 	bl	8002c54 <OUTPUT_setOff>
	      OUTPUT_setOff(&_ctrlOutput[_BUZ],0);
 80050dc:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <testWaterSensorTask+0x7a8>)
 80050de:	2100      	movs	r1, #0
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7fd fdb7 	bl	8002c54 <OUTPUT_setOff>
	  }

	  timer_stop(&_timeoutCheckLedRed);
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <testWaterSensorTask+0x740>)
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7fe f81d 	bl	8003128 <timer_stop>
	  timer_stop(&_timeoutCheckCalib);
 80050ee:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <testWaterSensorTask+0x7ac>)
 80050f0:	0018      	movs	r0, r3
 80050f2:	f7fe f819 	bl	8003128 <timer_stop>
	  timer_stop(&_timeoutCheckLedGreenOff);
 80050f6:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <testWaterSensorTask+0x738>)
 80050f8:	0018      	movs	r0, r3
 80050fa:	f7fe f815 	bl	8003128 <timer_stop>
	  timer_set(&_timeoutCheckState,500);
 80050fe:	23fa      	movs	r3, #250	; 0xfa
 8005100:	005a      	lsls	r2, r3, #1
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <testWaterSensorTask+0x744>)
 8005104:	0011      	movs	r1, r2
 8005106:	0018      	movs	r0, r3
 8005108:	f7fd ffbe 	bl	8003088 <timer_set>
	  TOOL.ledRedTog=0;
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <testWaterSensorTask+0x72c>)
 800510e:	2238      	movs	r2, #56	; 0x38
 8005110:	2100      	movs	r1, #0
 8005112:	5499      	strb	r1, [r3, r2]
	if(TWMOTOR.SWTS.Bit.LEFT_IR==0 && TWMOTOR.SWTS.Bit.RIGHT_IR==0 && getCurrent_mA()<0.4){
	  OUTPUT_setBlink(&_ctrlOutput[_BUZ],200,250,500,0);
	  sprintf(TOOL.LcdStr_row[0],"Au Qua Roi Nha");
	}
      }
      break;
 8005114:	e088      	b.n	8005228 <testWaterSensorTask+0x82c>
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	0800fdf0 	.word	0x0800fdf0
 800511c:	2000044a 	.word	0x2000044a
 8005120:	0800fe00 	.word	0x0800fe00
 8005124:	2000050c 	.word	0x2000050c
 8005128:	20000448 	.word	0x20000448
 800512c:	20000290 	.word	0x20000290
 8005130:	0800fe14 	.word	0x0800fe14
 8005134:	200004c0 	.word	0x200004c0
 8005138:	000009c4 	.word	0x000009c4
 800513c:	200004a0 	.word	0x200004a0
 8005140:	20000490 	.word	0x20000490
 8005144:	0800fe28 	.word	0x0800fe28
 8005148:	200004f1 	.word	0x200004f1
 800514c:	0800fe38 	.word	0x0800fe38
 8005150:	0800fe4c 	.word	0x0800fe4c
 8005154:	41f00000 	.word	0x41f00000
 8005158:	0800fe60 	.word	0x0800fe60
 800515c:	0800fe74 	.word	0x0800fe74
 8005160:	9999999a 	.word	0x9999999a
 8005164:	3fe99999 	.word	0x3fe99999
 8005168:	40c00000 	.word	0x40c00000
 800516c:	20000504 	.word	0x20000504
 8005170:	41200000 	.word	0x41200000
 8005174:	41a00000 	.word	0x41a00000
 8005178:	20000508 	.word	0x20000508
 800517c:	0800fe88 	.word	0x0800fe88
 8005180:	0800fe98 	.word	0x0800fe98
 8005184:	0800fea8 	.word	0x0800fea8
 8005188:	0800feb8 	.word	0x0800feb8
 800518c:	3fd99999 	.word	0x3fd99999
 8005190:	20000488 	.word	0x20000488
 8005194:	0800fec8 	.word	0x0800fec8
 8005198:	0800fedc 	.word	0x0800fedc
 800519c:	20000368 	.word	0x20000368
 80051a0:	20000394 	.word	0x20000394
 80051a4:	200003ec 	.word	0x200003ec
 80051a8:	200004b0 	.word	0x200004b0
	timer_set(&_timeoutCheckState,5);
 80051ac:	4b20      	ldr	r3, [pc, #128]	; (8005230 <testWaterSensorTask+0x834>)
 80051ae:	2105      	movs	r1, #5
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7fd ff69 	bl	8003088 <timer_set>
	if(TWMOTOR.SWTS.Bit.LEFT_IR==0 && TWMOTOR.SWTS.Bit.RIGHT_IR==0 && getCurrent_mA()<0.4){
 80051b6:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <testWaterSensorTask+0x838>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2210      	movs	r2, #16
 80051bc:	4013      	ands	r3, r2
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d131      	bne.n	8005228 <testWaterSensorTask+0x82c>
 80051c4:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <testWaterSensorTask+0x838>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2208      	movs	r2, #8
 80051ca:	4013      	ands	r3, r2
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d12a      	bne.n	8005228 <testWaterSensorTask+0x82c>
 80051d2:	f7fe fcc1 	bl	8003b58 <getCurrent_mA>
 80051d6:	1c03      	adds	r3, r0, #0
 80051d8:	1c18      	adds	r0, r3, #0
 80051da:	f7fd faff 	bl	80027dc <__aeabi_f2d>
 80051de:	4a16      	ldr	r2, [pc, #88]	; (8005238 <testWaterSensorTask+0x83c>)
 80051e0:	4b16      	ldr	r3, [pc, #88]	; (800523c <testWaterSensorTask+0x840>)
 80051e2:	f7fb f935 	bl	8000450 <__aeabi_dcmplt>
 80051e6:	1e03      	subs	r3, r0, #0
 80051e8:	d100      	bne.n	80051ec <testWaterSensorTask+0x7f0>
      break;
 80051ea:	e01d      	b.n	8005228 <testWaterSensorTask+0x82c>
	  OUTPUT_setBlink(&_ctrlOutput[_BUZ],200,250,500,0);
 80051ec:	23fa      	movs	r3, #250	; 0xfa
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4813      	ldr	r0, [pc, #76]	; (8005240 <testWaterSensorTask+0x844>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	9200      	str	r2, [sp, #0]
 80051f6:	22fa      	movs	r2, #250	; 0xfa
 80051f8:	21c8      	movs	r1, #200	; 0xc8
 80051fa:	f7fd fd61 	bl	8002cc0 <OUTPUT_setBlink>
	  sprintf(TOOL.LcdStr_row[0],"Au Qua Roi Nha");
 80051fe:	4a11      	ldr	r2, [pc, #68]	; (8005244 <testWaterSensorTask+0x848>)
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <testWaterSensorTask+0x84c>)
 8005202:	0011      	movs	r1, r2
 8005204:	0018      	movs	r0, r3
 8005206:	f008 fb0b 	bl	800d820 <siprintf>
      break;
 800520a:	e00d      	b.n	8005228 <testWaterSensorTask+0x82c>
	return;
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	e00c      	b.n	800522a <testWaterSensorTask+0x82e>
    default:break;
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	e00a      	b.n	800522a <testWaterSensorTask+0x82e>
      break;
 8005214:	46c0      	nop			; (mov r8, r8)
 8005216:	e008      	b.n	800522a <testWaterSensorTask+0x82e>
      break;
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	e006      	b.n	800522a <testWaterSensorTask+0x82e>
      break;
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	e004      	b.n	800522a <testWaterSensorTask+0x82e>
	return;
 8005220:	46c0      	nop			; (mov r8, r8)
 8005222:	e002      	b.n	800522a <testWaterSensorTask+0x82e>
      break;
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	e000      	b.n	800522a <testWaterSensorTask+0x82e>
      break;
 8005228:	46c0      	nop			; (mov r8, r8)
   }
}
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	20000490 	.word	0x20000490
 8005234:	20000994 	.word	0x20000994
 8005238:	9999999a 	.word	0x9999999a
 800523c:	3fd99999 	.word	0x3fd99999
 8005240:	200003ec 	.word	0x200003ec
 8005244:	0800feec 	.word	0x0800feec
 8005248:	2000044a 	.word	0x2000044a

0800524c <testWaterSensorLoop>:

void testWaterSensorLoop(){
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  updateLcd();
 8005250:	f7ff f8b2 	bl	80043b8 <updateLcd>
  updateIna219();
 8005254:	f7ff f96a 	bl	800452c <updateIna219>
  CapSS_Task(&CAPSENSOR[0]);
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <testWaterSensorLoop+0x28>)
 800525a:	0018      	movs	r0, r3
 800525c:	f7fd ffea 	bl	8003234 <CapSS_Task>

  testWaterSensorTask();
 8005260:	f7ff fbcc 	bl	80049fc <testWaterSensorTask>
  MotorTestWaterSensorLoop(&TWMOTOR);
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <testWaterSensorLoop+0x2c>)
 8005266:	0018      	movs	r0, r3
 8005268:	f001 fb08 	bl	800687c <MotorTestWaterSensorLoop>
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	20000290 	.word	0x20000290
 8005278:	20000994 	.word	0x20000994

0800527c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005280:	f001 fbe8 	bl	8006a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005284:	f000 f828 	bl	80052d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005288:	f000 fbb2 	bl	80059f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800528c:	f000 fb92 	bl	80059b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8005290:	f000 f880 	bl	8005394 <MX_ADC1_Init>
  MX_TIM3_Init();
 8005294:	f000 f97e 	bl	8005594 <MX_TIM3_Init>
  MX_TIM6_Init();
 8005298:	f000 fa12 	bl	80056c0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800529c:	f000 fad4 	bl	8005848 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80052a0:	f000 fb20 	bl	80058e4 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 80052a4:	f000 fb52 	bl	800594c <MX_USART4_UART_Init>
  MX_IWDG_Init();
 80052a8:	f000 f954 	bl	8005554 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 80052ac:	f000 fa7e 	bl	80057ac <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80052b0:	f000 f910 	bl	80054d4 <MX_I2C2_Init>
  MX_TIM7_Init();
 80052b4:	f000 fa3e 	bl	8005734 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  testWaterSensorInit();
 80052b8:	f7ff fa50 	bl	800475c <testWaterSensorInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_IWDG_Init(&hiwdg);
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <main+0x58>)
 80052be:	0018      	movs	r0, r3
 80052c0:	f004 fcc8 	bl	8009c54 <HAL_IWDG_Init>
  while (1)
  {
      HAL_IWDG_Refresh(&hiwdg);
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <main+0x58>)
 80052c6:	0018      	movs	r0, r3
 80052c8:	f004 fd16 	bl	8009cf8 <HAL_IWDG_Refresh>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      testWaterSensorLoop();
 80052cc:	f7ff ffbe 	bl	800524c <testWaterSensorLoop>
      HAL_IWDG_Refresh(&hiwdg);
 80052d0:	e7f8      	b.n	80052c4 <main+0x48>
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	2000064c 	.word	0x2000064c

080052d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052d8:	b590      	push	{r4, r7, lr}
 80052da:	b093      	sub	sp, #76	; 0x4c
 80052dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052de:	2414      	movs	r4, #20
 80052e0:	193b      	adds	r3, r7, r4
 80052e2:	0018      	movs	r0, r3
 80052e4:	2334      	movs	r3, #52	; 0x34
 80052e6:	001a      	movs	r2, r3
 80052e8:	2100      	movs	r1, #0
 80052ea:	f007 fd2e 	bl	800cd4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	0018      	movs	r0, r3
 80052f2:	2310      	movs	r3, #16
 80052f4:	001a      	movs	r2, r3
 80052f6:	2100      	movs	r1, #0
 80052f8:	f007 fd27 	bl	800cd4a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	0018      	movs	r0, r3
 8005302:	f004 fd09 	bl	8009d18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005306:	193b      	adds	r3, r7, r4
 8005308:	220a      	movs	r2, #10
 800530a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800530c:	193b      	adds	r3, r7, r4
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	0052      	lsls	r2, r2, #1
 8005312:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005314:	0021      	movs	r1, r4
 8005316:	187b      	adds	r3, r7, r1
 8005318:	2200      	movs	r2, #0
 800531a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800531c:	187b      	adds	r3, r7, r1
 800531e:	2240      	movs	r2, #64	; 0x40
 8005320:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005322:	187b      	adds	r3, r7, r1
 8005324:	2201      	movs	r2, #1
 8005326:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005328:	187b      	adds	r3, r7, r1
 800532a:	2202      	movs	r2, #2
 800532c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800532e:	187b      	adds	r3, r7, r1
 8005330:	2202      	movs	r2, #2
 8005332:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005334:	187b      	adds	r3, r7, r1
 8005336:	2200      	movs	r2, #0
 8005338:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800533a:	187b      	adds	r3, r7, r1
 800533c:	2208      	movs	r2, #8
 800533e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005340:	187b      	adds	r3, r7, r1
 8005342:	2280      	movs	r2, #128	; 0x80
 8005344:	0292      	lsls	r2, r2, #10
 8005346:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005348:	187b      	adds	r3, r7, r1
 800534a:	2280      	movs	r2, #128	; 0x80
 800534c:	0592      	lsls	r2, r2, #22
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005350:	187b      	adds	r3, r7, r1
 8005352:	0018      	movs	r0, r3
 8005354:	f004 fd2c 	bl	8009db0 <HAL_RCC_OscConfig>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d001      	beq.n	8005360 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800535c:	f000 fce0 	bl	8005d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	2207      	movs	r2, #7
 8005364:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	2202      	movs	r2, #2
 800536a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800536c:	1d3b      	adds	r3, r7, #4
 800536e:	2200      	movs	r2, #0
 8005370:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005372:	1d3b      	adds	r3, r7, #4
 8005374:	2200      	movs	r2, #0
 8005376:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	2102      	movs	r1, #2
 800537c:	0018      	movs	r0, r3
 800537e:	f005 f827 	bl	800a3d0 <HAL_RCC_ClockConfig>
 8005382:	1e03      	subs	r3, r0, #0
 8005384:	d001      	beq.n	800538a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8005386:	f000 fccb 	bl	8005d20 <Error_Handler>
  }
}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	46bd      	mov	sp, r7
 800538e:	b013      	add	sp, #76	; 0x4c
 8005390:	bd90      	pop	{r4, r7, pc}
	...

08005394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800539a:	1d3b      	adds	r3, r7, #4
 800539c:	0018      	movs	r0, r3
 800539e:	230c      	movs	r3, #12
 80053a0:	001a      	movs	r2, r3
 80053a2:	2100      	movs	r1, #0
 80053a4:	f007 fcd1 	bl	800cd4a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80053a8:	4b44      	ldr	r3, [pc, #272]	; (80054bc <MX_ADC1_Init+0x128>)
 80053aa:	4a45      	ldr	r2, [pc, #276]	; (80054c0 <MX_ADC1_Init+0x12c>)
 80053ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80053ae:	4b43      	ldr	r3, [pc, #268]	; (80054bc <MX_ADC1_Init+0x128>)
 80053b0:	2280      	movs	r2, #128	; 0x80
 80053b2:	0312      	lsls	r2, r2, #12
 80053b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80053b6:	4b41      	ldr	r3, [pc, #260]	; (80054bc <MX_ADC1_Init+0x128>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80053bc:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <MX_ADC1_Init+0x128>)
 80053be:	2200      	movs	r2, #0
 80053c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80053c2:	4b3e      	ldr	r3, [pc, #248]	; (80054bc <MX_ADC1_Init+0x128>)
 80053c4:	2280      	movs	r2, #128	; 0x80
 80053c6:	0392      	lsls	r2, r2, #14
 80053c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80053ca:	4b3c      	ldr	r3, [pc, #240]	; (80054bc <MX_ADC1_Init+0x128>)
 80053cc:	2204      	movs	r2, #4
 80053ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80053d0:	4b3a      	ldr	r3, [pc, #232]	; (80054bc <MX_ADC1_Init+0x128>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80053d6:	4b39      	ldr	r3, [pc, #228]	; (80054bc <MX_ADC1_Init+0x128>)
 80053d8:	2200      	movs	r2, #0
 80053da:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80053dc:	4b37      	ldr	r3, [pc, #220]	; (80054bc <MX_ADC1_Init+0x128>)
 80053de:	2201      	movs	r2, #1
 80053e0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80053e2:	4b36      	ldr	r3, [pc, #216]	; (80054bc <MX_ADC1_Init+0x128>)
 80053e4:	2204      	movs	r2, #4
 80053e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80053e8:	4b34      	ldr	r3, [pc, #208]	; (80054bc <MX_ADC1_Init+0x128>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80053ee:	4b33      	ldr	r3, [pc, #204]	; (80054bc <MX_ADC1_Init+0x128>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80053f4:	4b31      	ldr	r3, [pc, #196]	; (80054bc <MX_ADC1_Init+0x128>)
 80053f6:	222c      	movs	r2, #44	; 0x2c
 80053f8:	2101      	movs	r1, #1
 80053fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80053fc:	4b2f      	ldr	r3, [pc, #188]	; (80054bc <MX_ADC1_Init+0x128>)
 80053fe:	2200      	movs	r2, #0
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8005402:	4b2e      	ldr	r3, [pc, #184]	; (80054bc <MX_ADC1_Init+0x128>)
 8005404:	2207      	movs	r2, #7
 8005406:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8005408:	4b2c      	ldr	r3, [pc, #176]	; (80054bc <MX_ADC1_Init+0x128>)
 800540a:	2207      	movs	r2, #7
 800540c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800540e:	4b2b      	ldr	r3, [pc, #172]	; (80054bc <MX_ADC1_Init+0x128>)
 8005410:	223c      	movs	r2, #60	; 0x3c
 8005412:	2100      	movs	r1, #0
 8005414:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8005416:	4b29      	ldr	r3, [pc, #164]	; (80054bc <MX_ADC1_Init+0x128>)
 8005418:	2200      	movs	r2, #0
 800541a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <MX_ADC1_Init+0x128>)
 800541e:	0018      	movs	r0, r3
 8005420:	f001 fd3c 	bl	8006e9c <HAL_ADC_Init>
 8005424:	1e03      	subs	r3, r0, #0
 8005426:	d001      	beq.n	800542c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8005428:	f000 fc7a 	bl	8005d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <MX_ADC1_Init+0x130>)
 8005430:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	2200      	movs	r2, #0
 8005436:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8005438:	1d3b      	adds	r3, r7, #4
 800543a:	2200      	movs	r2, #0
 800543c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800543e:	1d3a      	adds	r2, r7, #4
 8005440:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <MX_ADC1_Init+0x128>)
 8005442:	0011      	movs	r1, r2
 8005444:	0018      	movs	r0, r3
 8005446:	f002 f88f 	bl	8007568 <HAL_ADC_ConfigChannel>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d001      	beq.n	8005452 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800544e:	f000 fc67 	bl	8005d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005452:	1d3b      	adds	r3, r7, #4
 8005454:	4a1c      	ldr	r2, [pc, #112]	; (80054c8 <MX_ADC1_Init+0x134>)
 8005456:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	2204      	movs	r2, #4
 800545c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800545e:	1d3a      	adds	r2, r7, #4
 8005460:	4b16      	ldr	r3, [pc, #88]	; (80054bc <MX_ADC1_Init+0x128>)
 8005462:	0011      	movs	r1, r2
 8005464:	0018      	movs	r0, r3
 8005466:	f002 f87f 	bl	8007568 <HAL_ADC_ConfigChannel>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d001      	beq.n	8005472 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800546e:	f000 fc57 	bl	8005d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005472:	1d3b      	adds	r3, r7, #4
 8005474:	4a15      	ldr	r2, [pc, #84]	; (80054cc <MX_ADC1_Init+0x138>)
 8005476:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	2208      	movs	r2, #8
 800547c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800547e:	1d3a      	adds	r2, r7, #4
 8005480:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <MX_ADC1_Init+0x128>)
 8005482:	0011      	movs	r1, r2
 8005484:	0018      	movs	r0, r3
 8005486:	f002 f86f 	bl	8007568 <HAL_ADC_ConfigChannel>
 800548a:	1e03      	subs	r3, r0, #0
 800548c:	d001      	beq.n	8005492 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800548e:	f000 fc47 	bl	8005d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005492:	1d3b      	adds	r3, r7, #4
 8005494:	4a0e      	ldr	r2, [pc, #56]	; (80054d0 <MX_ADC1_Init+0x13c>)
 8005496:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005498:	1d3b      	adds	r3, r7, #4
 800549a:	220c      	movs	r2, #12
 800549c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800549e:	1d3a      	adds	r2, r7, #4
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <MX_ADC1_Init+0x128>)
 80054a2:	0011      	movs	r1, r2
 80054a4:	0018      	movs	r0, r3
 80054a6:	f002 f85f 	bl	8007568 <HAL_ADC_ConfigChannel>
 80054aa:	1e03      	subs	r3, r0, #0
 80054ac:	d001      	beq.n	80054b2 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80054ae:	f000 fc37 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b004      	add	sp, #16
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	20000538 	.word	0x20000538
 80054c0:	40012400 	.word	0x40012400
 80054c4:	08000004 	.word	0x08000004
 80054c8:	0c000008 	.word	0x0c000008
 80054cc:	10000010 	.word	0x10000010
 80054d0:	14000020 	.word	0x14000020

080054d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <MX_I2C2_Init+0x74>)
 80054da:	4a1c      	ldr	r2, [pc, #112]	; (800554c <MX_I2C2_Init+0x78>)
 80054dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <MX_I2C2_Init+0x74>)
 80054e0:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <MX_I2C2_Init+0x7c>)
 80054e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80054e4:	4b18      	ldr	r3, [pc, #96]	; (8005548 <MX_I2C2_Init+0x74>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054ea:	4b17      	ldr	r3, [pc, #92]	; (8005548 <MX_I2C2_Init+0x74>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054f0:	4b15      	ldr	r3, [pc, #84]	; (8005548 <MX_I2C2_Init+0x74>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <MX_I2C2_Init+0x74>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80054fc:	4b12      	ldr	r3, [pc, #72]	; (8005548 <MX_I2C2_Init+0x74>)
 80054fe:	2200      	movs	r2, #0
 8005500:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <MX_I2C2_Init+0x74>)
 8005504:	2200      	movs	r2, #0
 8005506:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <MX_I2C2_Init+0x74>)
 800550a:	2200      	movs	r2, #0
 800550c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800550e:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <MX_I2C2_Init+0x74>)
 8005510:	0018      	movs	r0, r3
 8005512:	f003 fc2b 	bl	8008d6c <HAL_I2C_Init>
 8005516:	1e03      	subs	r3, r0, #0
 8005518:	d001      	beq.n	800551e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800551a:	f000 fc01 	bl	8005d20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <MX_I2C2_Init+0x74>)
 8005520:	2100      	movs	r1, #0
 8005522:	0018      	movs	r0, r3
 8005524:	f004 fafe 	bl	8009b24 <HAL_I2CEx_ConfigAnalogFilter>
 8005528:	1e03      	subs	r3, r0, #0
 800552a:	d001      	beq.n	8005530 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800552c:	f000 fbf8 	bl	8005d20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <MX_I2C2_Init+0x74>)
 8005532:	2100      	movs	r1, #0
 8005534:	0018      	movs	r0, r3
 8005536:	f004 fb41 	bl	8009bbc <HAL_I2CEx_ConfigDigitalFilter>
 800553a:	1e03      	subs	r3, r0, #0
 800553c:	d001      	beq.n	8005542 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800553e:	f000 fbef 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	200005f8 	.word	0x200005f8
 800554c:	40005800 	.word	0x40005800
 8005550:	10707dbc 	.word	0x10707dbc

08005554 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8005558:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <MX_IWDG_Init+0x34>)
 800555a:	4a0c      	ldr	r2, [pc, #48]	; (800558c <MX_IWDG_Init+0x38>)
 800555c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <MX_IWDG_Init+0x34>)
 8005560:	2203      	movs	r2, #3
 8005562:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <MX_IWDG_Init+0x34>)
 8005566:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <MX_IWDG_Init+0x3c>)
 8005568:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800556a:	4b07      	ldr	r3, [pc, #28]	; (8005588 <MX_IWDG_Init+0x34>)
 800556c:	4a08      	ldr	r2, [pc, #32]	; (8005590 <MX_IWDG_Init+0x3c>)
 800556e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <MX_IWDG_Init+0x34>)
 8005572:	0018      	movs	r0, r3
 8005574:	f004 fb6e 	bl	8009c54 <HAL_IWDG_Init>
 8005578:	1e03      	subs	r3, r0, #0
 800557a:	d001      	beq.n	8005580 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 800557c:	f000 fbd0 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	2000064c 	.word	0x2000064c
 800558c:	40003000 	.word	0x40003000
 8005590:	00000fff 	.word	0x00000fff

08005594 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08e      	sub	sp, #56	; 0x38
 8005598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800559a:	2328      	movs	r3, #40	; 0x28
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	0018      	movs	r0, r3
 80055a0:	2310      	movs	r3, #16
 80055a2:	001a      	movs	r2, r3
 80055a4:	2100      	movs	r1, #0
 80055a6:	f007 fbd0 	bl	800cd4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055aa:	231c      	movs	r3, #28
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	0018      	movs	r0, r3
 80055b0:	230c      	movs	r3, #12
 80055b2:	001a      	movs	r2, r3
 80055b4:	2100      	movs	r1, #0
 80055b6:	f007 fbc8 	bl	800cd4a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055ba:	003b      	movs	r3, r7
 80055bc:	0018      	movs	r0, r3
 80055be:	231c      	movs	r3, #28
 80055c0:	001a      	movs	r2, r3
 80055c2:	2100      	movs	r1, #0
 80055c4:	f007 fbc1 	bl	800cd4a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80055c8:	4b3a      	ldr	r3, [pc, #232]	; (80056b4 <MX_TIM3_Init+0x120>)
 80055ca:	4a3b      	ldr	r2, [pc, #236]	; (80056b8 <MX_TIM3_Init+0x124>)
 80055cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 80055ce:	4b39      	ldr	r3, [pc, #228]	; (80056b4 <MX_TIM3_Init+0x120>)
 80055d0:	2205      	movs	r2, #5
 80055d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055d4:	4b37      	ldr	r3, [pc, #220]	; (80056b4 <MX_TIM3_Init+0x120>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 38000;
 80055da:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <MX_TIM3_Init+0x120>)
 80055dc:	4a37      	ldr	r2, [pc, #220]	; (80056bc <MX_TIM3_Init+0x128>)
 80055de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055e0:	4b34      	ldr	r3, [pc, #208]	; (80056b4 <MX_TIM3_Init+0x120>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055e6:	4b33      	ldr	r3, [pc, #204]	; (80056b4 <MX_TIM3_Init+0x120>)
 80055e8:	2280      	movs	r2, #128	; 0x80
 80055ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80055ec:	4b31      	ldr	r3, [pc, #196]	; (80056b4 <MX_TIM3_Init+0x120>)
 80055ee:	0018      	movs	r0, r3
 80055f0:	f005 f9cc 	bl	800a98c <HAL_TIM_Base_Init>
 80055f4:	1e03      	subs	r3, r0, #0
 80055f6:	d001      	beq.n	80055fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80055f8:	f000 fb92 	bl	8005d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055fc:	2128      	movs	r1, #40	; 0x28
 80055fe:	187b      	adds	r3, r7, r1
 8005600:	2280      	movs	r2, #128	; 0x80
 8005602:	0152      	lsls	r2, r2, #5
 8005604:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005606:	187a      	adds	r2, r7, r1
 8005608:	4b2a      	ldr	r3, [pc, #168]	; (80056b4 <MX_TIM3_Init+0x120>)
 800560a:	0011      	movs	r1, r2
 800560c:	0018      	movs	r0, r3
 800560e:	f005 fd2b 	bl	800b068 <HAL_TIM_ConfigClockSource>
 8005612:	1e03      	subs	r3, r0, #0
 8005614:	d001      	beq.n	800561a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8005616:	f000 fb83 	bl	8005d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800561a:	4b26      	ldr	r3, [pc, #152]	; (80056b4 <MX_TIM3_Init+0x120>)
 800561c:	0018      	movs	r0, r3
 800561e:	f005 fa91 	bl	800ab44 <HAL_TIM_PWM_Init>
 8005622:	1e03      	subs	r3, r0, #0
 8005624:	d001      	beq.n	800562a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8005626:	f000 fb7b 	bl	8005d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800562a:	211c      	movs	r1, #28
 800562c:	187b      	adds	r3, r7, r1
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005632:	187b      	adds	r3, r7, r1
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005638:	187a      	adds	r2, r7, r1
 800563a:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <MX_TIM3_Init+0x120>)
 800563c:	0011      	movs	r1, r2
 800563e:	0018      	movs	r0, r3
 8005640:	f006 f9de 	bl	800ba00 <HAL_TIMEx_MasterConfigSynchronization>
 8005644:	1e03      	subs	r3, r0, #0
 8005646:	d001      	beq.n	800564c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8005648:	f000 fb6a 	bl	8005d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800564c:	003b      	movs	r3, r7
 800564e:	2260      	movs	r2, #96	; 0x60
 8005650:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005652:	003b      	movs	r3, r7
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005658:	003b      	movs	r3, r7
 800565a:	2202      	movs	r2, #2
 800565c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800565e:	003b      	movs	r3, r7
 8005660:	2204      	movs	r2, #4
 8005662:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005664:	0039      	movs	r1, r7
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <MX_TIM3_Init+0x120>)
 8005668:	2208      	movs	r2, #8
 800566a:	0018      	movs	r0, r3
 800566c:	f005 fbfc 	bl	800ae68 <HAL_TIM_PWM_ConfigChannel>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d001      	beq.n	8005678 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8005674:	f000 fb54 	bl	8005d20 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8005678:	4b0e      	ldr	r3, [pc, #56]	; (80056b4 <MX_TIM3_Init+0x120>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <MX_TIM3_Init+0x120>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2108      	movs	r1, #8
 8005684:	438a      	bics	r2, r1
 8005686:	61da      	str	r2, [r3, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005688:	003b      	movs	r3, r7
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800568e:	0039      	movs	r1, r7
 8005690:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <MX_TIM3_Init+0x120>)
 8005692:	220c      	movs	r2, #12
 8005694:	0018      	movs	r0, r3
 8005696:	f005 fbe7 	bl	800ae68 <HAL_TIM_PWM_ConfigChannel>
 800569a:	1e03      	subs	r3, r0, #0
 800569c:	d001      	beq.n	80056a2 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 800569e:	f000 fb3f 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80056a2:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <MX_TIM3_Init+0x120>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 fc9d 	bl	8005fe4 <HAL_TIM_MspPostInit>

}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b00e      	add	sp, #56	; 0x38
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	2000065c 	.word	0x2000065c
 80056b8:	40000400 	.word	0x40000400
 80056bc:	00009470 	.word	0x00009470

080056c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056c6:	1d3b      	adds	r3, r7, #4
 80056c8:	0018      	movs	r0, r3
 80056ca:	230c      	movs	r3, #12
 80056cc:	001a      	movs	r2, r3
 80056ce:	2100      	movs	r1, #0
 80056d0:	f007 fb3b 	bl	800cd4a <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80056d4:	4b15      	ldr	r3, [pc, #84]	; (800572c <MX_TIM6_Init+0x6c>)
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <MX_TIM6_Init+0x70>)
 80056d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 80056da:	4b14      	ldr	r3, [pc, #80]	; (800572c <MX_TIM6_Init+0x6c>)
 80056dc:	2240      	movs	r2, #64	; 0x40
 80056de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056e0:	4b12      	ldr	r3, [pc, #72]	; (800572c <MX_TIM6_Init+0x6c>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 104;
 80056e6:	4b11      	ldr	r3, [pc, #68]	; (800572c <MX_TIM6_Init+0x6c>)
 80056e8:	2268      	movs	r2, #104	; 0x68
 80056ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <MX_TIM6_Init+0x6c>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <MX_TIM6_Init+0x6c>)
 80056f4:	0018      	movs	r0, r3
 80056f6:	f005 f949 	bl	800a98c <HAL_TIM_Base_Init>
 80056fa:	1e03      	subs	r3, r0, #0
 80056fc:	d001      	beq.n	8005702 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80056fe:	f000 fb0f 	bl	8005d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005708:	1d3b      	adds	r3, r7, #4
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800570e:	1d3a      	adds	r2, r7, #4
 8005710:	4b06      	ldr	r3, [pc, #24]	; (800572c <MX_TIM6_Init+0x6c>)
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f006 f973 	bl	800ba00 <HAL_TIMEx_MasterConfigSynchronization>
 800571a:	1e03      	subs	r3, r0, #0
 800571c:	d001      	beq.n	8005722 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800571e:	f000 faff 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	46bd      	mov	sp, r7
 8005726:	b004      	add	sp, #16
 8005728:	bd80      	pop	{r7, pc}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	200006a8 	.word	0x200006a8
 8005730:	40001000 	.word	0x40001000

08005734 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	0018      	movs	r0, r3
 800573e:	230c      	movs	r3, #12
 8005740:	001a      	movs	r2, r3
 8005742:	2100      	movs	r1, #0
 8005744:	f007 fb01 	bl	800cd4a <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005748:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <MX_TIM7_Init+0x6c>)
 800574a:	4a16      	ldr	r2, [pc, #88]	; (80057a4 <MX_TIM7_Init+0x70>)
 800574c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64;
 800574e:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <MX_TIM7_Init+0x6c>)
 8005750:	2240      	movs	r2, #64	; 0x40
 8005752:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <MX_TIM7_Init+0x6c>)
 8005756:	2200      	movs	r2, #0
 8005758:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <MX_TIM7_Init+0x6c>)
 800575c:	4a12      	ldr	r2, [pc, #72]	; (80057a8 <MX_TIM7_Init+0x74>)
 800575e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <MX_TIM7_Init+0x6c>)
 8005762:	2280      	movs	r2, #128	; 0x80
 8005764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005766:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <MX_TIM7_Init+0x6c>)
 8005768:	0018      	movs	r0, r3
 800576a:	f005 f90f 	bl	800a98c <HAL_TIM_Base_Init>
 800576e:	1e03      	subs	r3, r0, #0
 8005770:	d001      	beq.n	8005776 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005772:	f000 fad5 	bl	8005d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	2200      	movs	r2, #0
 8005780:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005782:	1d3a      	adds	r2, r7, #4
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <MX_TIM7_Init+0x6c>)
 8005786:	0011      	movs	r1, r2
 8005788:	0018      	movs	r0, r3
 800578a:	f006 f939 	bl	800ba00 <HAL_TIMEx_MasterConfigSynchronization>
 800578e:	1e03      	subs	r3, r0, #0
 8005790:	d001      	beq.n	8005796 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8005792:	f000 fac5 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	46bd      	mov	sp, r7
 800579a:	b004      	add	sp, #16
 800579c:	bd80      	pop	{r7, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	200006f4 	.word	0x200006f4
 80057a4:	40001400 	.word	0x40001400
 80057a8:	000003e7 	.word	0x000003e7

080057ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80057b0:	4b23      	ldr	r3, [pc, #140]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057b2:	4a24      	ldr	r2, [pc, #144]	; (8005844 <MX_USART1_UART_Init+0x98>)
 80057b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80057b6:	4b22      	ldr	r3, [pc, #136]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057b8:	22e1      	movs	r2, #225	; 0xe1
 80057ba:	0252      	lsls	r2, r2, #9
 80057bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057c4:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057d0:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057d2:	220c      	movs	r2, #12
 80057d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057d6:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057d8:	2200      	movs	r2, #0
 80057da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80057dc:	4b18      	ldr	r3, [pc, #96]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057de:	2200      	movs	r2, #0
 80057e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057e2:	4b17      	ldr	r3, [pc, #92]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80057e8:	4b15      	ldr	r3, [pc, #84]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <MX_USART1_UART_Init+0x94>)
 80057f6:	0018      	movs	r0, r3
 80057f8:	f006 f982 	bl	800bb00 <HAL_UART_Init>
 80057fc:	1e03      	subs	r3, r0, #0
 80057fe:	d001      	beq.n	8005804 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005800:	f000 fa8e 	bl	8005d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <MX_USART1_UART_Init+0x94>)
 8005806:	2100      	movs	r1, #0
 8005808:	0018      	movs	r0, r3
 800580a:	f007 f973 	bl	800caf4 <HAL_UARTEx_SetTxFifoThreshold>
 800580e:	1e03      	subs	r3, r0, #0
 8005810:	d001      	beq.n	8005816 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005812:	f000 fa85 	bl	8005d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <MX_USART1_UART_Init+0x94>)
 8005818:	2100      	movs	r1, #0
 800581a:	0018      	movs	r0, r3
 800581c:	f007 f9aa 	bl	800cb74 <HAL_UARTEx_SetRxFifoThreshold>
 8005820:	1e03      	subs	r3, r0, #0
 8005822:	d001      	beq.n	8005828 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005824:	f000 fa7c 	bl	8005d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <MX_USART1_UART_Init+0x94>)
 800582a:	0018      	movs	r0, r3
 800582c:	f007 f928 	bl	800ca80 <HAL_UARTEx_DisableFifoMode>
 8005830:	1e03      	subs	r3, r0, #0
 8005832:	d001      	beq.n	8005838 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005834:	f000 fa74 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	20000740 	.word	0x20000740
 8005844:	40013800 	.word	0x40013800

08005848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800584c:	4b23      	ldr	r3, [pc, #140]	; (80058dc <MX_USART2_UART_Init+0x94>)
 800584e:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <MX_USART2_UART_Init+0x98>)
 8005850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005852:	4b22      	ldr	r3, [pc, #136]	; (80058dc <MX_USART2_UART_Init+0x94>)
 8005854:	2296      	movs	r2, #150	; 0x96
 8005856:	0192      	lsls	r2, r2, #6
 8005858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800585a:	4b20      	ldr	r3, [pc, #128]	; (80058dc <MX_USART2_UART_Init+0x94>)
 800585c:	2200      	movs	r2, #0
 800585e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005860:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <MX_USART2_UART_Init+0x94>)
 8005862:	2200      	movs	r2, #0
 8005864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005866:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <MX_USART2_UART_Init+0x94>)
 8005868:	2200      	movs	r2, #0
 800586a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <MX_USART2_UART_Init+0x94>)
 800586e:	220c      	movs	r2, #12
 8005870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005872:	4b1a      	ldr	r3, [pc, #104]	; (80058dc <MX_USART2_UART_Init+0x94>)
 8005874:	2200      	movs	r2, #0
 8005876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005878:	4b18      	ldr	r3, [pc, #96]	; (80058dc <MX_USART2_UART_Init+0x94>)
 800587a:	2200      	movs	r2, #0
 800587c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800587e:	4b17      	ldr	r3, [pc, #92]	; (80058dc <MX_USART2_UART_Init+0x94>)
 8005880:	2200      	movs	r2, #0
 8005882:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005884:	4b15      	ldr	r3, [pc, #84]	; (80058dc <MX_USART2_UART_Init+0x94>)
 8005886:	2200      	movs	r2, #0
 8005888:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800588a:	4b14      	ldr	r3, [pc, #80]	; (80058dc <MX_USART2_UART_Init+0x94>)
 800588c:	2200      	movs	r2, #0
 800588e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005890:	4b12      	ldr	r3, [pc, #72]	; (80058dc <MX_USART2_UART_Init+0x94>)
 8005892:	0018      	movs	r0, r3
 8005894:	f006 f934 	bl	800bb00 <HAL_UART_Init>
 8005898:	1e03      	subs	r3, r0, #0
 800589a:	d001      	beq.n	80058a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800589c:	f000 fa40 	bl	8005d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058a0:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <MX_USART2_UART_Init+0x94>)
 80058a2:	2100      	movs	r1, #0
 80058a4:	0018      	movs	r0, r3
 80058a6:	f007 f925 	bl	800caf4 <HAL_UARTEx_SetTxFifoThreshold>
 80058aa:	1e03      	subs	r3, r0, #0
 80058ac:	d001      	beq.n	80058b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80058ae:	f000 fa37 	bl	8005d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <MX_USART2_UART_Init+0x94>)
 80058b4:	2100      	movs	r1, #0
 80058b6:	0018      	movs	r0, r3
 80058b8:	f007 f95c 	bl	800cb74 <HAL_UARTEx_SetRxFifoThreshold>
 80058bc:	1e03      	subs	r3, r0, #0
 80058be:	d001      	beq.n	80058c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80058c0:	f000 fa2e 	bl	8005d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80058c4:	4b05      	ldr	r3, [pc, #20]	; (80058dc <MX_USART2_UART_Init+0x94>)
 80058c6:	0018      	movs	r0, r3
 80058c8:	f007 f8da 	bl	800ca80 <HAL_UARTEx_DisableFifoMode>
 80058cc:	1e03      	subs	r3, r0, #0
 80058ce:	d001      	beq.n	80058d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80058d0:	f000 fa26 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	200007d4 	.word	0x200007d4
 80058e0:	40004400 	.word	0x40004400

080058e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <MX_USART3_UART_Init+0x60>)
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <MX_USART3_UART_Init+0x64>)
 80058ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80058ee:	4b15      	ldr	r3, [pc, #84]	; (8005944 <MX_USART3_UART_Init+0x60>)
 80058f0:	2296      	movs	r2, #150	; 0x96
 80058f2:	0192      	lsls	r2, r2, #6
 80058f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80058f6:	4b13      	ldr	r3, [pc, #76]	; (8005944 <MX_USART3_UART_Init+0x60>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80058fc:	4b11      	ldr	r3, [pc, #68]	; (8005944 <MX_USART3_UART_Init+0x60>)
 80058fe:	2200      	movs	r2, #0
 8005900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005902:	4b10      	ldr	r3, [pc, #64]	; (8005944 <MX_USART3_UART_Init+0x60>)
 8005904:	2200      	movs	r2, #0
 8005906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005908:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <MX_USART3_UART_Init+0x60>)
 800590a:	220c      	movs	r2, #12
 800590c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <MX_USART3_UART_Init+0x60>)
 8005910:	2200      	movs	r2, #0
 8005912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <MX_USART3_UART_Init+0x60>)
 8005916:	2200      	movs	r2, #0
 8005918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800591a:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <MX_USART3_UART_Init+0x60>)
 800591c:	2200      	movs	r2, #0
 800591e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005920:	4b08      	ldr	r3, [pc, #32]	; (8005944 <MX_USART3_UART_Init+0x60>)
 8005922:	2200      	movs	r2, #0
 8005924:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005926:	4b07      	ldr	r3, [pc, #28]	; (8005944 <MX_USART3_UART_Init+0x60>)
 8005928:	2200      	movs	r2, #0
 800592a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <MX_USART3_UART_Init+0x60>)
 800592e:	0018      	movs	r0, r3
 8005930:	f006 f8e6 	bl	800bb00 <HAL_UART_Init>
 8005934:	1e03      	subs	r3, r0, #0
 8005936:	d001      	beq.n	800593c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005938:	f000 f9f2 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	20000868 	.word	0x20000868
 8005948:	40004800 	.word	0x40004800

0800594c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <MX_USART4_UART_Init+0x60>)
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <MX_USART4_UART_Init+0x64>)
 8005954:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <MX_USART4_UART_Init+0x60>)
 8005958:	2296      	movs	r2, #150	; 0x96
 800595a:	0192      	lsls	r2, r2, #6
 800595c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <MX_USART4_UART_Init+0x60>)
 8005960:	2200      	movs	r2, #0
 8005962:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005964:	4b11      	ldr	r3, [pc, #68]	; (80059ac <MX_USART4_UART_Init+0x60>)
 8005966:	2200      	movs	r2, #0
 8005968:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800596a:	4b10      	ldr	r3, [pc, #64]	; (80059ac <MX_USART4_UART_Init+0x60>)
 800596c:	2200      	movs	r2, #0
 800596e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005970:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <MX_USART4_UART_Init+0x60>)
 8005972:	220c      	movs	r2, #12
 8005974:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <MX_USART4_UART_Init+0x60>)
 8005978:	2200      	movs	r2, #0
 800597a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <MX_USART4_UART_Init+0x60>)
 800597e:	2200      	movs	r2, #0
 8005980:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005982:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <MX_USART4_UART_Init+0x60>)
 8005984:	2200      	movs	r2, #0
 8005986:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005988:	4b08      	ldr	r3, [pc, #32]	; (80059ac <MX_USART4_UART_Init+0x60>)
 800598a:	2200      	movs	r2, #0
 800598c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <MX_USART4_UART_Init+0x60>)
 8005990:	2200      	movs	r2, #0
 8005992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <MX_USART4_UART_Init+0x60>)
 8005996:	0018      	movs	r0, r3
 8005998:	f006 f8b2 	bl	800bb00 <HAL_UART_Init>
 800599c:	1e03      	subs	r3, r0, #0
 800599e:	d001      	beq.n	80059a4 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80059a0:	f000 f9be 	bl	8005d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	200008fc 	.word	0x200008fc
 80059b0:	40004c00 	.word	0x40004c00

080059b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80059ba:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <MX_DMA_Init+0x38>)
 80059bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059be:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <MX_DMA_Init+0x38>)
 80059c0:	2101      	movs	r1, #1
 80059c2:	430a      	orrs	r2, r1
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <MX_DMA_Init+0x38>)
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	2201      	movs	r2, #1
 80059cc:	4013      	ands	r3, r2
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80059d2:	2200      	movs	r2, #0
 80059d4:	2100      	movs	r1, #0
 80059d6:	2009      	movs	r0, #9
 80059d8:	f002 fb32 	bl	8008040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80059dc:	2009      	movs	r0, #9
 80059de:	f002 fb44 	bl	800806a <HAL_NVIC_EnableIRQ>

}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b002      	add	sp, #8
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	40021000 	.word	0x40021000

080059f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b08b      	sub	sp, #44	; 0x2c
 80059f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f6:	2414      	movs	r4, #20
 80059f8:	193b      	adds	r3, r7, r4
 80059fa:	0018      	movs	r0, r3
 80059fc:	2314      	movs	r3, #20
 80059fe:	001a      	movs	r2, r3
 8005a00:	2100      	movs	r1, #0
 8005a02:	f007 f9a2 	bl	800cd4a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a06:	4bbc      	ldr	r3, [pc, #752]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a0a:	4bbb      	ldr	r3, [pc, #748]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a0c:	2104      	movs	r1, #4
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	635a      	str	r2, [r3, #52]	; 0x34
 8005a12:	4bb9      	ldr	r3, [pc, #740]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	2204      	movs	r2, #4
 8005a18:	4013      	ands	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a1e:	4bb6      	ldr	r3, [pc, #728]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a22:	4bb5      	ldr	r3, [pc, #724]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a24:	2101      	movs	r1, #1
 8005a26:	430a      	orrs	r2, r1
 8005a28:	635a      	str	r2, [r3, #52]	; 0x34
 8005a2a:	4bb3      	ldr	r3, [pc, #716]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2e:	2201      	movs	r2, #1
 8005a30:	4013      	ands	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a36:	4bb0      	ldr	r3, [pc, #704]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a3a:	4baf      	ldr	r3, [pc, #700]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34
 8005a42:	4bad      	ldr	r3, [pc, #692]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a46:	2202      	movs	r2, #2
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a4e:	4baa      	ldr	r3, [pc, #680]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a52:	4ba9      	ldr	r3, [pc, #676]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a54:	2108      	movs	r1, #8
 8005a56:	430a      	orrs	r2, r1
 8005a58:	635a      	str	r2, [r3, #52]	; 0x34
 8005a5a:	4ba7      	ldr	r3, [pc, #668]	; (8005cf8 <MX_GPIO_Init+0x308>)
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5e:	2208      	movs	r2, #8
 8005a60:	4013      	ands	r3, r2
 8005a62:	607b      	str	r3, [r7, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC14_Pin|LED2_BL_Pin|BUZ_Pin|LED1_YE_Pin
 8005a66:	49a5      	ldr	r1, [pc, #660]	; (8005cfc <MX_GPIO_Init+0x30c>)
 8005a68:	4ba5      	ldr	r3, [pc, #660]	; (8005d00 <MX_GPIO_Init+0x310>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f003 f960 	bl	8008d32 <HAL_GPIO_WritePin>
                          |DIM_TRIAC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_5V_CTRL_GPIO_Port, SS_5V_CTRL_Pin, GPIO_PIN_SET);
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	48a2      	ldr	r0, [pc, #648]	; (8005d00 <MX_GPIO_Init+0x310>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	f003 f959 	bl	8008d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FAN_Pin|RL_SS_STEAM_Pin|TO_MASS_Pin|BLE_EN_Pin
 8005a80:	49a0      	ldr	r1, [pc, #640]	; (8005d04 <MX_GPIO_Init+0x314>)
 8005a82:	23a0      	movs	r3, #160	; 0xa0
 8005a84:	05db      	lsls	r3, r3, #23
 8005a86:	2200      	movs	r2, #0
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f003 f952 	bl	8008d32 <HAL_GPIO_WritePin>
                          |MOTOR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RL_DRAIN_Pin|RL_WHIRL_Pin|RL_AIR_Pin|RL_STEAM100_Pin
 8005a8e:	499e      	ldr	r1, [pc, #632]	; (8005d08 <MX_GPIO_Init+0x318>)
 8005a90:	4b9e      	ldr	r3, [pc, #632]	; (8005d0c <MX_GPIO_Init+0x31c>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	0018      	movs	r0, r3
 8005a96:	f003 f94c 	bl	8008d32 <HAL_GPIO_WritePin>
                          |RL_STEAM50_Pin|RL_COM_Pin|BUG_IO_Pin|PB3_Pin
                          |RL_SOL_COM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8005a9a:	4b9d      	ldr	r3, [pc, #628]	; (8005d10 <MX_GPIO_Init+0x320>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f003 f946 	bl	8008d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FET_DOME_LIGHT_Pin|FET_SOL_AF_Pin|FET_SOL_STEAM_Pin, GPIO_PIN_SET);
 8005aa6:	4b9a      	ldr	r3, [pc, #616]	; (8005d10 <MX_GPIO_Init+0x320>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	211a      	movs	r1, #26
 8005aac:	0018      	movs	r0, r3
 8005aae:	f003 f940 	bl	8008d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED24V_BLUE_Pin|LED24V_GREEN_Pin|SSWATER_SIGNAL_Pin, GPIO_PIN_SET);
 8005ab2:	2398      	movs	r3, #152	; 0x98
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	4895      	ldr	r0, [pc, #596]	; (8005d0c <MX_GPIO_Init+0x31c>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	0019      	movs	r1, r3
 8005abc:	f003 f939 	bl	8008d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SSDRAIN_LOGIC_Pin SSDRAIN_SIGNAL_Pin IN_SAFETY_Pin BLE_STATE_Pin
                           SSWATER_LOGIC_Pin */
  GPIO_InitStruct.Pin = SSDRAIN_LOGIC_Pin|SSDRAIN_SIGNAL_Pin|IN_SAFETY_Pin|BLE_STATE_Pin
 8005ac0:	193b      	adds	r3, r7, r4
 8005ac2:	22f2      	movs	r2, #242	; 0xf2
 8005ac4:	0192      	lsls	r2, r2, #6
 8005ac6:	601a      	str	r2, [r3, #0]
                          |SSWATER_LOGIC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ac8:	193b      	adds	r3, r7, r4
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ace:	193b      	adds	r3, r7, r4
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ad4:	193b      	adds	r3, r7, r4
 8005ad6:	4a8a      	ldr	r2, [pc, #552]	; (8005d00 <MX_GPIO_Init+0x310>)
 8005ad8:	0019      	movs	r1, r3
 8005ada:	0010      	movs	r0, r2
 8005adc:	f002 ffa8 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14_Pin LED2_BL_Pin LED1_YE_Pin */
  GPIO_InitStruct.Pin = PC14_Pin|LED2_BL_Pin|LED1_YE_Pin;
 8005ae0:	193b      	adds	r3, r7, r4
 8005ae2:	4a8c      	ldr	r2, [pc, #560]	; (8005d14 <MX_GPIO_Init+0x324>)
 8005ae4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ae6:	193b      	adds	r3, r7, r4
 8005ae8:	2201      	movs	r2, #1
 8005aea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aec:	193b      	adds	r3, r7, r4
 8005aee:	2200      	movs	r2, #0
 8005af0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af2:	193b      	adds	r3, r7, r4
 8005af4:	2200      	movs	r2, #0
 8005af6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005af8:	193b      	adds	r3, r7, r4
 8005afa:	4a81      	ldr	r2, [pc, #516]	; (8005d00 <MX_GPIO_Init+0x310>)
 8005afc:	0019      	movs	r1, r3
 8005afe:	0010      	movs	r0, r2
 8005b00:	f002 ff96 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_5V_CTRL_Pin */
  GPIO_InitStruct.Pin = SS_5V_CTRL_Pin;
 8005b04:	0021      	movs	r1, r4
 8005b06:	187b      	adds	r3, r7, r1
 8005b08:	2280      	movs	r2, #128	; 0x80
 8005b0a:	0212      	lsls	r2, r2, #8
 8005b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b0e:	000c      	movs	r4, r1
 8005b10:	193b      	adds	r3, r7, r4
 8005b12:	2201      	movs	r2, #1
 8005b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b16:	193b      	adds	r3, r7, r4
 8005b18:	2201      	movs	r2, #1
 8005b1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b1c:	193b      	adds	r3, r7, r4
 8005b1e:	2200      	movs	r2, #0
 8005b20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SS_5V_CTRL_GPIO_Port, &GPIO_InitStruct);
 8005b22:	193b      	adds	r3, r7, r4
 8005b24:	4a76      	ldr	r2, [pc, #472]	; (8005d00 <MX_GPIO_Init+0x310>)
 8005b26:	0019      	movs	r1, r3
 8005b28:	0010      	movs	r0, r2
 8005b2a:	f002 ff81 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8005b2e:	193b      	adds	r3, r7, r4
 8005b30:	2204      	movs	r2, #4
 8005b32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b34:	193b      	adds	r3, r7, r4
 8005b36:	2201      	movs	r2, #1
 8005b38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b3a:	193b      	adds	r3, r7, r4
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b40:	193b      	adds	r3, r7, r4
 8005b42:	2200      	movs	r2, #0
 8005b44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8005b46:	193b      	adds	r3, r7, r4
 8005b48:	4a6d      	ldr	r2, [pc, #436]	; (8005d00 <MX_GPIO_Init+0x310>)
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	0010      	movs	r0, r2
 8005b4e:	f002 ff6f 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_Pin RL_SS_STEAM_Pin TO_MASS_Pin BLE_EN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin|RL_SS_STEAM_Pin|TO_MASS_Pin|BLE_EN_Pin;
 8005b52:	0021      	movs	r1, r4
 8005b54:	187b      	adds	r3, r7, r1
 8005b56:	22b8      	movs	r2, #184	; 0xb8
 8005b58:	00d2      	lsls	r2, r2, #3
 8005b5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b5c:	000c      	movs	r4, r1
 8005b5e:	193b      	adds	r3, r7, r4
 8005b60:	2201      	movs	r2, #1
 8005b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b64:	193b      	adds	r3, r7, r4
 8005b66:	2202      	movs	r2, #2
 8005b68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b6a:	193b      	adds	r3, r7, r4
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b70:	193a      	adds	r2, r7, r4
 8005b72:	23a0      	movs	r3, #160	; 0xa0
 8005b74:	05db      	lsls	r3, r3, #23
 8005b76:	0011      	movs	r1, r2
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f002 ff59 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RL_DRAIN_Pin RL_WHIRL_Pin RL_AIR_Pin RL_STEAM100_Pin
                           RL_STEAM50_Pin RL_COM_Pin RL_SOL_COM_Pin */
  GPIO_InitStruct.Pin = RL_DRAIN_Pin|RL_WHIRL_Pin|RL_AIR_Pin|RL_STEAM100_Pin
 8005b7e:	193b      	adds	r3, r7, r4
 8005b80:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <MX_GPIO_Init+0x328>)
 8005b82:	601a      	str	r2, [r3, #0]
                          |RL_STEAM50_Pin|RL_COM_Pin|RL_SOL_COM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b84:	193b      	adds	r3, r7, r4
 8005b86:	2201      	movs	r2, #1
 8005b88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b8a:	193b      	adds	r3, r7, r4
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b90:	193b      	adds	r3, r7, r4
 8005b92:	2200      	movs	r2, #0
 8005b94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b96:	193b      	adds	r3, r7, r4
 8005b98:	4a5c      	ldr	r2, [pc, #368]	; (8005d0c <MX_GPIO_Init+0x31c>)
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	0010      	movs	r0, r2
 8005b9e:	f002 ff47 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUG_IO_Pin */
  GPIO_InitStruct.Pin = BUG_IO_Pin;
 8005ba2:	0021      	movs	r1, r4
 8005ba4:	187b      	adds	r3, r7, r1
 8005ba6:	2280      	movs	r2, #128	; 0x80
 8005ba8:	0192      	lsls	r2, r2, #6
 8005baa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bac:	000c      	movs	r4, r1
 8005bae:	193b      	adds	r3, r7, r4
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bb4:	193b      	adds	r3, r7, r4
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bba:	193b      	adds	r3, r7, r4
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUG_IO_GPIO_Port, &GPIO_InitStruct);
 8005bc0:	193b      	adds	r3, r7, r4
 8005bc2:	4a52      	ldr	r2, [pc, #328]	; (8005d0c <MX_GPIO_Init+0x31c>)
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	0010      	movs	r0, r2
 8005bc8:	f002 ff32 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_BUTTON_Pin IN_EN_DEBUG_Pin IN_JETSW_Pin IN_DRAINSW_Pin */
  GPIO_InitStruct.Pin = IN_BUTTON_Pin|IN_EN_DEBUG_Pin|IN_JETSW_Pin|IN_DRAINSW_Pin;
 8005bcc:	193b      	adds	r3, r7, r4
 8005bce:	4a53      	ldr	r2, [pc, #332]	; (8005d1c <MX_GPIO_Init+0x32c>)
 8005bd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bd2:	193b      	adds	r3, r7, r4
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bd8:	193b      	adds	r3, r7, r4
 8005bda:	2201      	movs	r2, #1
 8005bdc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bde:	193b      	adds	r3, r7, r4
 8005be0:	4a4a      	ldr	r2, [pc, #296]	; (8005d0c <MX_GPIO_Init+0x31c>)
 8005be2:	0019      	movs	r1, r3
 8005be4:	0010      	movs	r0, r2
 8005be6:	f002 ff23 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_EL814_Pin */
  GPIO_InitStruct.Pin = IN_EL814_Pin;
 8005bea:	193b      	adds	r3, r7, r4
 8005bec:	2280      	movs	r2, #128	; 0x80
 8005bee:	0092      	lsls	r2, r2, #2
 8005bf0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bf2:	193b      	adds	r3, r7, r4
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bf8:	193b      	adds	r3, r7, r4
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IN_EL814_GPIO_Port, &GPIO_InitStruct);
 8005bfe:	193a      	adds	r2, r7, r4
 8005c00:	23a0      	movs	r3, #160	; 0xa0
 8005c02:	05db      	lsls	r3, r3, #23
 8005c04:	0011      	movs	r1, r2
 8005c06:	0018      	movs	r0, r3
 8005c08:	f002 ff12 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIM_TRIAC_Pin */
  GPIO_InitStruct.Pin = DIM_TRIAC_Pin;
 8005c0c:	193b      	adds	r3, r7, r4
 8005c0e:	2240      	movs	r2, #64	; 0x40
 8005c10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c12:	193b      	adds	r3, r7, r4
 8005c14:	2201      	movs	r2, #1
 8005c16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005c18:	193b      	adds	r3, r7, r4
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c1e:	193b      	adds	r3, r7, r4
 8005c20:	2202      	movs	r2, #2
 8005c22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIM_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8005c24:	193b      	adds	r3, r7, r4
 8005c26:	4a36      	ldr	r2, [pc, #216]	; (8005d00 <MX_GPIO_Init+0x310>)
 8005c28:	0019      	movs	r1, r3
 8005c2a:	0010      	movs	r0, r2
 8005c2c:	f002 ff00 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin;
 8005c30:	0021      	movs	r1, r4
 8005c32:	187b      	adds	r3, r7, r1
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	0212      	lsls	r2, r2, #8
 8005c38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c3a:	000c      	movs	r4, r1
 8005c3c:	193b      	adds	r3, r7, r4
 8005c3e:	2201      	movs	r2, #1
 8005c40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c42:	193b      	adds	r3, r7, r4
 8005c44:	2200      	movs	r2, #0
 8005c46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c48:	193b      	adds	r3, r7, r4
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_IN2_GPIO_Port, &GPIO_InitStruct);
 8005c4e:	193a      	adds	r2, r7, r4
 8005c50:	23a0      	movs	r3, #160	; 0xa0
 8005c52:	05db      	lsls	r3, r3, #23
 8005c54:	0011      	movs	r1, r2
 8005c56:	0018      	movs	r0, r3
 8005c58:	f002 feea 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN1_Pin;
 8005c5c:	193b      	adds	r3, r7, r4
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c62:	193b      	adds	r3, r7, r4
 8005c64:	2201      	movs	r2, #1
 8005c66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c68:	193b      	adds	r3, r7, r4
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c6e:	193b      	adds	r3, r7, r4
 8005c70:	2200      	movs	r2, #0
 8005c72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_IN1_GPIO_Port, &GPIO_InitStruct);
 8005c74:	193b      	adds	r3, r7, r4
 8005c76:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <MX_GPIO_Init+0x320>)
 8005c78:	0019      	movs	r1, r3
 8005c7a:	0010      	movs	r0, r2
 8005c7c:	f002 fed8 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : FET_DOME_LIGHT_Pin FET_SOL_AF_Pin FET_SOL_STEAM_Pin */
  GPIO_InitStruct.Pin = FET_DOME_LIGHT_Pin|FET_SOL_AF_Pin|FET_SOL_STEAM_Pin;
 8005c80:	193b      	adds	r3, r7, r4
 8005c82:	221a      	movs	r2, #26
 8005c84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c86:	193b      	adds	r3, r7, r4
 8005c88:	2201      	movs	r2, #1
 8005c8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c8c:	193b      	adds	r3, r7, r4
 8005c8e:	2201      	movs	r2, #1
 8005c90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c92:	193b      	adds	r3, r7, r4
 8005c94:	2200      	movs	r2, #0
 8005c96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c98:	193b      	adds	r3, r7, r4
 8005c9a:	4a1d      	ldr	r2, [pc, #116]	; (8005d10 <MX_GPIO_Init+0x320>)
 8005c9c:	0019      	movs	r1, r3
 8005c9e:	0010      	movs	r0, r2
 8005ca0:	f002 fec6 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_Pin */
  GPIO_InitStruct.Pin = PB3_Pin;
 8005ca4:	193b      	adds	r3, r7, r4
 8005ca6:	2208      	movs	r2, #8
 8005ca8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005caa:	193b      	adds	r3, r7, r4
 8005cac:	2201      	movs	r2, #1
 8005cae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb0:	193b      	adds	r3, r7, r4
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cb6:	193b      	adds	r3, r7, r4
 8005cb8:	2200      	movs	r2, #0
 8005cba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 8005cbc:	193b      	adds	r3, r7, r4
 8005cbe:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <MX_GPIO_Init+0x31c>)
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	0010      	movs	r0, r2
 8005cc4:	f002 feb4 	bl	8008a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED24V_BLUE_Pin LED24V_GREEN_Pin SSWATER_SIGNAL_Pin */
  GPIO_InitStruct.Pin = LED24V_BLUE_Pin|LED24V_GREEN_Pin|SSWATER_SIGNAL_Pin;
 8005cc8:	0021      	movs	r1, r4
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	2298      	movs	r2, #152	; 0x98
 8005cce:	0052      	lsls	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cd2:	187b      	adds	r3, r7, r1
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005cd8:	187b      	adds	r3, r7, r1
 8005cda:	2201      	movs	r2, #1
 8005cdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cde:	187b      	adds	r3, r7, r1
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ce4:	187b      	adds	r3, r7, r1
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <MX_GPIO_Init+0x31c>)
 8005ce8:	0019      	movs	r1, r3
 8005cea:	0010      	movs	r0, r2
 8005cec:	f002 fea0 	bl	8008a30 <HAL_GPIO_Init>

}
 8005cf0:	46c0      	nop			; (mov r8, r8)
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b00b      	add	sp, #44	; 0x2c
 8005cf6:	bd90      	pop	{r4, r7, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	0000404e 	.word	0x0000404e
 8005d00:	50000800 	.word	0x50000800
 8005d04:	000085c0 	.word	0x000085c0
 8005d08:	00003c4f 	.word	0x00003c4f
 8005d0c:	50000400 	.word	0x50000400
 8005d10:	50000c00 	.word	0x50000c00
 8005d14:	0000400a 	.word	0x0000400a
 8005d18:	00001c47 	.word	0x00001c47
 8005d1c:	0000c280 	.word	0x0000c280

08005d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005d24:	b672      	cpsid	i
}
 8005d26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d28:	e7fe      	b.n	8005d28 <Error_Handler+0x8>
	...

08005d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d32:	4b11      	ldr	r3, [pc, #68]	; (8005d78 <HAL_MspInit+0x4c>)
 8005d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d36:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <HAL_MspInit+0x4c>)
 8005d38:	2101      	movs	r1, #1
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <HAL_MspInit+0x4c>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	2201      	movs	r2, #1
 8005d44:	4013      	ands	r3, r2
 8005d46:	607b      	str	r3, [r7, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <HAL_MspInit+0x4c>)
 8005d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_MspInit+0x4c>)
 8005d50:	2180      	movs	r1, #128	; 0x80
 8005d52:	0549      	lsls	r1, r1, #21
 8005d54:	430a      	orrs	r2, r1
 8005d56:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d58:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <HAL_MspInit+0x4c>)
 8005d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	055b      	lsls	r3, r3, #21
 8005d60:	4013      	ands	r3, r2
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8005d66:	23c0      	movs	r3, #192	; 0xc0
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 ff1c 	bl	8006ba8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d70:	46c0      	nop			; (mov r8, r8)
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b002      	add	sp, #8
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40021000 	.word	0x40021000

08005d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b091      	sub	sp, #68	; 0x44
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d84:	232c      	movs	r3, #44	; 0x2c
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	0018      	movs	r0, r3
 8005d8a:	2314      	movs	r3, #20
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	2100      	movs	r1, #0
 8005d90:	f006 ffdb 	bl	800cd4a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d94:	2410      	movs	r4, #16
 8005d96:	193b      	adds	r3, r7, r4
 8005d98:	0018      	movs	r0, r3
 8005d9a:	231c      	movs	r3, #28
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	2100      	movs	r1, #0
 8005da0:	f006 ffd3 	bl	800cd4a <memset>
  if(hadc->Instance==ADC1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a39      	ldr	r2, [pc, #228]	; (8005e90 <HAL_ADC_MspInit+0x114>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d16c      	bne.n	8005e88 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005dae:	193b      	adds	r3, r7, r4
 8005db0:	2280      	movs	r2, #128	; 0x80
 8005db2:	01d2      	lsls	r2, r2, #7
 8005db4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8005db6:	193b      	adds	r3, r7, r4
 8005db8:	2200      	movs	r2, #0
 8005dba:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dbc:	193b      	adds	r3, r7, r4
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f004 fcb0 	bl	800a724 <HAL_RCCEx_PeriphCLKConfig>
 8005dc4:	1e03      	subs	r3, r0, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8005dc8:	f7ff ffaa 	bl	8005d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005dcc:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <HAL_ADC_MspInit+0x118>)
 8005dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd0:	4b30      	ldr	r3, [pc, #192]	; (8005e94 <HAL_ADC_MspInit+0x118>)
 8005dd2:	2180      	movs	r1, #128	; 0x80
 8005dd4:	0349      	lsls	r1, r1, #13
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40
 8005dda:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <HAL_ADC_MspInit+0x118>)
 8005ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	035b      	lsls	r3, r3, #13
 8005de2:	4013      	ands	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005de8:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_ADC_MspInit+0x118>)
 8005dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dec:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <HAL_ADC_MspInit+0x118>)
 8005dee:	2101      	movs	r1, #1
 8005df0:	430a      	orrs	r2, r1
 8005df2:	635a      	str	r2, [r3, #52]	; 0x34
 8005df4:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <HAL_ADC_MspInit+0x118>)
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	2201      	movs	r2, #1
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005e00:	212c      	movs	r1, #44	; 0x2c
 8005e02:	187b      	adds	r3, r7, r1
 8005e04:	223c      	movs	r2, #60	; 0x3c
 8005e06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e08:	187b      	adds	r3, r7, r1
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0e:	187b      	adds	r3, r7, r1
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e14:	187a      	adds	r2, r7, r1
 8005e16:	23a0      	movs	r3, #160	; 0xa0
 8005e18:	05db      	lsls	r3, r3, #23
 8005e1a:	0011      	movs	r1, r2
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f002 fe07 	bl	8008a30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005e22:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e24:	4a1d      	ldr	r2, [pc, #116]	; (8005e9c <HAL_ADC_MspInit+0x120>)
 8005e26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005e28:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e2a:	2205      	movs	r2, #5
 8005e2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e2e:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e34:	4b18      	ldr	r3, [pc, #96]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e3a:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e3c:	2280      	movs	r2, #128	; 0x80
 8005e3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e40:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e42:	2280      	movs	r2, #128	; 0x80
 8005e44:	0052      	lsls	r2, r2, #1
 8005e46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e4a:	2280      	movs	r2, #128	; 0x80
 8005e4c:	00d2      	lsls	r2, r2, #3
 8005e4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e50:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e52:	2220      	movs	r2, #32
 8005e54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e5c:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f002 f928 	bl	80080b4 <HAL_DMA_Init>
 8005e64:	1e03      	subs	r3, r0, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8005e68:	f7ff ff5a 	bl	8005d20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e70:	651a      	str	r2, [r3, #80]	; 0x50
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	200c      	movs	r0, #12
 8005e7e:	f002 f8df 	bl	8008040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8005e82:	200c      	movs	r0, #12
 8005e84:	f002 f8f1 	bl	800806a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b011      	add	sp, #68	; 0x44
 8005e8e:	bd90      	pop	{r4, r7, pc}
 8005e90:	40012400 	.word	0x40012400
 8005e94:	40021000 	.word	0x40021000
 8005e98:	2000059c 	.word	0x2000059c
 8005e9c:	40020008 	.word	0x40020008

08005ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ea0:	b590      	push	{r4, r7, lr}
 8005ea2:	b08b      	sub	sp, #44	; 0x2c
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ea8:	2414      	movs	r4, #20
 8005eaa:	193b      	adds	r3, r7, r4
 8005eac:	0018      	movs	r0, r3
 8005eae:	2314      	movs	r3, #20
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	f006 ff49 	bl	800cd4a <memset>
  if(hi2c->Instance==I2C2)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <HAL_I2C_MspInit+0x90>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d131      	bne.n	8005f26 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <HAL_I2C_MspInit+0x94>)
 8005ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec6:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <HAL_I2C_MspInit+0x94>)
 8005ec8:	2101      	movs	r1, #1
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8005ece:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <HAL_I2C_MspInit+0x94>)
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
 8005ed8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005eda:	193b      	adds	r3, r7, r4
 8005edc:	22c0      	movs	r2, #192	; 0xc0
 8005ede:	0152      	lsls	r2, r2, #5
 8005ee0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ee2:	0021      	movs	r1, r4
 8005ee4:	187b      	adds	r3, r7, r1
 8005ee6:	2212      	movs	r2, #18
 8005ee8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eea:	187b      	adds	r3, r7, r1
 8005eec:	2201      	movs	r2, #1
 8005eee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ef0:	187b      	adds	r3, r7, r1
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005ef6:	187b      	adds	r3, r7, r1
 8005ef8:	2206      	movs	r2, #6
 8005efa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005efc:	187a      	adds	r2, r7, r1
 8005efe:	23a0      	movs	r3, #160	; 0xa0
 8005f00:	05db      	lsls	r3, r3, #23
 8005f02:	0011      	movs	r1, r2
 8005f04:	0018      	movs	r0, r3
 8005f06:	f002 fd93 	bl	8008a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <HAL_I2C_MspInit+0x94>)
 8005f0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <HAL_I2C_MspInit+0x94>)
 8005f10:	2180      	movs	r1, #128	; 0x80
 8005f12:	03c9      	lsls	r1, r1, #15
 8005f14:	430a      	orrs	r2, r1
 8005f16:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f18:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <HAL_I2C_MspInit+0x94>)
 8005f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	03db      	lsls	r3, r3, #15
 8005f20:	4013      	ands	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b00b      	add	sp, #44	; 0x2c
 8005f2c:	bd90      	pop	{r4, r7, pc}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	40005800 	.word	0x40005800
 8005f34:	40021000 	.word	0x40021000

08005f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a23      	ldr	r2, [pc, #140]	; (8005fd4 <HAL_TIM_Base_MspInit+0x9c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d10c      	bne.n	8005f64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f4a:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <HAL_TIM_Base_MspInit+0xa0>)
 8005f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f4e:	4b22      	ldr	r3, [pc, #136]	; (8005fd8 <HAL_TIM_Base_MspInit+0xa0>)
 8005f50:	2102      	movs	r1, #2
 8005f52:	430a      	orrs	r2, r1
 8005f54:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f56:	4b20      	ldr	r3, [pc, #128]	; (8005fd8 <HAL_TIM_Base_MspInit+0xa0>)
 8005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005f62:	e032      	b.n	8005fca <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1c      	ldr	r2, [pc, #112]	; (8005fdc <HAL_TIM_Base_MspInit+0xa4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d114      	bne.n	8005f98 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005f6e:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <HAL_TIM_Base_MspInit+0xa0>)
 8005f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f72:	4b19      	ldr	r3, [pc, #100]	; (8005fd8 <HAL_TIM_Base_MspInit+0xa0>)
 8005f74:	2110      	movs	r1, #16
 8005f76:	430a      	orrs	r2, r1
 8005f78:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f7a:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <HAL_TIM_Base_MspInit+0xa0>)
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	2210      	movs	r2, #16
 8005f80:	4013      	ands	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8005f86:	2200      	movs	r2, #0
 8005f88:	2101      	movs	r1, #1
 8005f8a:	2011      	movs	r0, #17
 8005f8c:	f002 f858 	bl	8008040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005f90:	2011      	movs	r0, #17
 8005f92:	f002 f86a 	bl	800806a <HAL_NVIC_EnableIRQ>
}
 8005f96:	e018      	b.n	8005fca <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a10      	ldr	r2, [pc, #64]	; (8005fe0 <HAL_TIM_Base_MspInit+0xa8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d113      	bne.n	8005fca <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <HAL_TIM_Base_MspInit+0xa0>)
 8005fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <HAL_TIM_Base_MspInit+0xa0>)
 8005fa8:	2120      	movs	r1, #32
 8005faa:	430a      	orrs	r2, r1
 8005fac:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fae:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <HAL_TIM_Base_MspInit+0xa0>)
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	2012      	movs	r0, #18
 8005fc0:	f002 f83e 	bl	8008040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005fc4:	2012      	movs	r0, #18
 8005fc6:	f002 f850 	bl	800806a <HAL_NVIC_EnableIRQ>
}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b006      	add	sp, #24
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40001000 	.word	0x40001000
 8005fe0:	40001400 	.word	0x40001400

08005fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b089      	sub	sp, #36	; 0x24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fec:	240c      	movs	r4, #12
 8005fee:	193b      	adds	r3, r7, r4
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	2314      	movs	r3, #20
 8005ff4:	001a      	movs	r2, r3
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	f006 fea7 	bl	800cd4a <memset>
  if(htim->Instance==TIM3)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <HAL_TIM_MspPostInit+0x70>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d122      	bne.n	800604c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <HAL_TIM_MspPostInit+0x74>)
 8006008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <HAL_TIM_MspPostInit+0x74>)
 800600c:	2104      	movs	r1, #4
 800600e:	430a      	orrs	r2, r1
 8006010:	635a      	str	r2, [r3, #52]	; 0x34
 8006012:	4b11      	ldr	r3, [pc, #68]	; (8006058 <HAL_TIM_MspPostInit+0x74>)
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	2204      	movs	r2, #4
 8006018:	4013      	ands	r3, r2
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH3_R_Pin|TIM3_CH4_SPOT_Pin;
 800601e:	193b      	adds	r3, r7, r4
 8006020:	22c0      	movs	r2, #192	; 0xc0
 8006022:	0092      	lsls	r2, r2, #2
 8006024:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006026:	0021      	movs	r1, r4
 8006028:	187b      	adds	r3, r7, r1
 800602a:	2202      	movs	r2, #2
 800602c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602e:	187b      	adds	r3, r7, r1
 8006030:	2200      	movs	r2, #0
 8006032:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006034:	187b      	adds	r3, r7, r1
 8006036:	2200      	movs	r2, #0
 8006038:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800603a:	187b      	adds	r3, r7, r1
 800603c:	2201      	movs	r2, #1
 800603e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006040:	187b      	adds	r3, r7, r1
 8006042:	4a06      	ldr	r2, [pc, #24]	; (800605c <HAL_TIM_MspPostInit+0x78>)
 8006044:	0019      	movs	r1, r3
 8006046:	0010      	movs	r0, r2
 8006048:	f002 fcf2 	bl	8008a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800604c:	46c0      	nop			; (mov r8, r8)
 800604e:	46bd      	mov	sp, r7
 8006050:	b009      	add	sp, #36	; 0x24
 8006052:	bd90      	pop	{r4, r7, pc}
 8006054:	40000400 	.word	0x40000400
 8006058:	40021000 	.word	0x40021000
 800605c:	50000800 	.word	0x50000800

08006060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006060:	b590      	push	{r4, r7, lr}
 8006062:	b097      	sub	sp, #92	; 0x5c
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006068:	2344      	movs	r3, #68	; 0x44
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	0018      	movs	r0, r3
 800606e:	2314      	movs	r3, #20
 8006070:	001a      	movs	r2, r3
 8006072:	2100      	movs	r1, #0
 8006074:	f006 fe69 	bl	800cd4a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006078:	2428      	movs	r4, #40	; 0x28
 800607a:	193b      	adds	r3, r7, r4
 800607c:	0018      	movs	r0, r3
 800607e:	231c      	movs	r3, #28
 8006080:	001a      	movs	r2, r3
 8006082:	2100      	movs	r1, #0
 8006084:	f006 fe61 	bl	800cd4a <memset>
  if(huart->Instance==USART1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a8b      	ldr	r2, [pc, #556]	; (80062bc <HAL_UART_MspInit+0x25c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d146      	bne.n	8006120 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006092:	193b      	adds	r3, r7, r4
 8006094:	2201      	movs	r2, #1
 8006096:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8006098:	193b      	adds	r3, r7, r4
 800609a:	2200      	movs	r2, #0
 800609c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800609e:	193b      	adds	r3, r7, r4
 80060a0:	0018      	movs	r0, r3
 80060a2:	f004 fb3f 	bl	800a724 <HAL_RCCEx_PeriphCLKConfig>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d001      	beq.n	80060ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80060aa:	f7ff fe39 	bl	8005d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060ae:	4b84      	ldr	r3, [pc, #528]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80060b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060b2:	4b83      	ldr	r3, [pc, #524]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80060b4:	2180      	movs	r1, #128	; 0x80
 80060b6:	01c9      	lsls	r1, r1, #7
 80060b8:	430a      	orrs	r2, r1
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40
 80060bc:	4b80      	ldr	r3, [pc, #512]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80060be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	01db      	lsls	r3, r3, #7
 80060c4:	4013      	ands	r3, r2
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ca:	4b7d      	ldr	r3, [pc, #500]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80060cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ce:	4b7c      	ldr	r3, [pc, #496]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80060d0:	2104      	movs	r1, #4
 80060d2:	430a      	orrs	r2, r1
 80060d4:	635a      	str	r2, [r3, #52]	; 0x34
 80060d6:	4b7a      	ldr	r3, [pc, #488]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	2204      	movs	r2, #4
 80060dc:	4013      	ands	r3, r2
 80060de:	623b      	str	r3, [r7, #32]
 80060e0:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80060e2:	2144      	movs	r1, #68	; 0x44
 80060e4:	187b      	adds	r3, r7, r1
 80060e6:	2230      	movs	r2, #48	; 0x30
 80060e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ea:	187b      	adds	r3, r7, r1
 80060ec:	2202      	movs	r2, #2
 80060ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f0:	187b      	adds	r3, r7, r1
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f6:	187b      	adds	r3, r7, r1
 80060f8:	2200      	movs	r2, #0
 80060fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80060fc:	187b      	adds	r3, r7, r1
 80060fe:	2201      	movs	r2, #1
 8006100:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006102:	187b      	adds	r3, r7, r1
 8006104:	4a6f      	ldr	r2, [pc, #444]	; (80062c4 <HAL_UART_MspInit+0x264>)
 8006106:	0019      	movs	r1, r3
 8006108:	0010      	movs	r0, r2
 800610a:	f002 fc91 	bl	8008a30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800610e:	2200      	movs	r2, #0
 8006110:	2100      	movs	r1, #0
 8006112:	201b      	movs	r0, #27
 8006114:	f001 ff94 	bl	8008040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006118:	201b      	movs	r0, #27
 800611a:	f001 ffa6 	bl	800806a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800611e:	e0c9      	b.n	80062b4 <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART2)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a68      	ldr	r2, [pc, #416]	; (80062c8 <HAL_UART_MspInit+0x268>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d147      	bne.n	80061ba <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800612a:	2128      	movs	r1, #40	; 0x28
 800612c:	187b      	adds	r3, r7, r1
 800612e:	2202      	movs	r2, #2
 8006130:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006132:	187b      	adds	r3, r7, r1
 8006134:	2200      	movs	r2, #0
 8006136:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006138:	187b      	adds	r3, r7, r1
 800613a:	0018      	movs	r0, r3
 800613c:	f004 faf2 	bl	800a724 <HAL_RCCEx_PeriphCLKConfig>
 8006140:	1e03      	subs	r3, r0, #0
 8006142:	d001      	beq.n	8006148 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8006144:	f7ff fdec 	bl	8005d20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006148:	4b5d      	ldr	r3, [pc, #372]	; (80062c0 <HAL_UART_MspInit+0x260>)
 800614a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800614c:	4b5c      	ldr	r3, [pc, #368]	; (80062c0 <HAL_UART_MspInit+0x260>)
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	0289      	lsls	r1, r1, #10
 8006152:	430a      	orrs	r2, r1
 8006154:	63da      	str	r2, [r3, #60]	; 0x3c
 8006156:	4b5a      	ldr	r3, [pc, #360]	; (80062c0 <HAL_UART_MspInit+0x260>)
 8006158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800615a:	2380      	movs	r3, #128	; 0x80
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	4013      	ands	r3, r2
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006164:	4b56      	ldr	r3, [pc, #344]	; (80062c0 <HAL_UART_MspInit+0x260>)
 8006166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006168:	4b55      	ldr	r3, [pc, #340]	; (80062c0 <HAL_UART_MspInit+0x260>)
 800616a:	2108      	movs	r1, #8
 800616c:	430a      	orrs	r2, r1
 800616e:	635a      	str	r2, [r3, #52]	; 0x34
 8006170:	4b53      	ldr	r3, [pc, #332]	; (80062c0 <HAL_UART_MspInit+0x260>)
 8006172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006174:	2208      	movs	r2, #8
 8006176:	4013      	ands	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800617c:	2144      	movs	r1, #68	; 0x44
 800617e:	187b      	adds	r3, r7, r1
 8006180:	2260      	movs	r2, #96	; 0x60
 8006182:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006184:	187b      	adds	r3, r7, r1
 8006186:	2202      	movs	r2, #2
 8006188:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618a:	187b      	adds	r3, r7, r1
 800618c:	2200      	movs	r2, #0
 800618e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006190:	187b      	adds	r3, r7, r1
 8006192:	2200      	movs	r2, #0
 8006194:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8006196:	187b      	adds	r3, r7, r1
 8006198:	2200      	movs	r2, #0
 800619a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800619c:	187b      	adds	r3, r7, r1
 800619e:	4a4b      	ldr	r2, [pc, #300]	; (80062cc <HAL_UART_MspInit+0x26c>)
 80061a0:	0019      	movs	r1, r3
 80061a2:	0010      	movs	r0, r2
 80061a4:	f002 fc44 	bl	8008a30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061a8:	2200      	movs	r2, #0
 80061aa:	2100      	movs	r1, #0
 80061ac:	201c      	movs	r0, #28
 80061ae:	f001 ff47 	bl	8008040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061b2:	201c      	movs	r0, #28
 80061b4:	f001 ff59 	bl	800806a <HAL_NVIC_EnableIRQ>
}
 80061b8:	e07c      	b.n	80062b4 <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART3)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a44      	ldr	r2, [pc, #272]	; (80062d0 <HAL_UART_MspInit+0x270>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d139      	bne.n	8006238 <HAL_UART_MspInit+0x1d8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80061c4:	4b3e      	ldr	r3, [pc, #248]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80061c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061c8:	4b3d      	ldr	r3, [pc, #244]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	02c9      	lsls	r1, r1, #11
 80061ce:	430a      	orrs	r2, r1
 80061d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80061d2:	4b3b      	ldr	r3, [pc, #236]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80061d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	02db      	lsls	r3, r3, #11
 80061da:	4013      	ands	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061e0:	4b37      	ldr	r3, [pc, #220]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80061e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e4:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80061e6:	2108      	movs	r1, #8
 80061e8:	430a      	orrs	r2, r1
 80061ea:	635a      	str	r2, [r3, #52]	; 0x34
 80061ec:	4b34      	ldr	r3, [pc, #208]	; (80062c0 <HAL_UART_MspInit+0x260>)
 80061ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f0:	2208      	movs	r2, #8
 80061f2:	4013      	ands	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80061f8:	2144      	movs	r1, #68	; 0x44
 80061fa:	187b      	adds	r3, r7, r1
 80061fc:	22c0      	movs	r2, #192	; 0xc0
 80061fe:	0092      	lsls	r2, r2, #2
 8006200:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006202:	187b      	adds	r3, r7, r1
 8006204:	2202      	movs	r2, #2
 8006206:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006208:	187b      	adds	r3, r7, r1
 800620a:	2200      	movs	r2, #0
 800620c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800620e:	187b      	adds	r3, r7, r1
 8006210:	2200      	movs	r2, #0
 8006212:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8006214:	187b      	adds	r3, r7, r1
 8006216:	2200      	movs	r2, #0
 8006218:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800621a:	187b      	adds	r3, r7, r1
 800621c:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <HAL_UART_MspInit+0x26c>)
 800621e:	0019      	movs	r1, r3
 8006220:	0010      	movs	r0, r2
 8006222:	f002 fc05 	bl	8008a30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	201d      	movs	r0, #29
 800622c:	f001 ff08 	bl	8008040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8006230:	201d      	movs	r0, #29
 8006232:	f001 ff1a 	bl	800806a <HAL_NVIC_EnableIRQ>
}
 8006236:	e03d      	b.n	80062b4 <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART4)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <HAL_UART_MspInit+0x274>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d138      	bne.n	80062b4 <HAL_UART_MspInit+0x254>
    __HAL_RCC_USART4_CLK_ENABLE();
 8006242:	4b1f      	ldr	r3, [pc, #124]	; (80062c0 <HAL_UART_MspInit+0x260>)
 8006244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006246:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <HAL_UART_MspInit+0x260>)
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	0309      	lsls	r1, r1, #12
 800624c:	430a      	orrs	r2, r1
 800624e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006250:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <HAL_UART_MspInit+0x260>)
 8006252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	031b      	lsls	r3, r3, #12
 8006258:	4013      	ands	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800625e:	4b18      	ldr	r3, [pc, #96]	; (80062c0 <HAL_UART_MspInit+0x260>)
 8006260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006262:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <HAL_UART_MspInit+0x260>)
 8006264:	2101      	movs	r1, #1
 8006266:	430a      	orrs	r2, r1
 8006268:	635a      	str	r2, [r3, #52]	; 0x34
 800626a:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <HAL_UART_MspInit+0x260>)
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	2201      	movs	r2, #1
 8006270:	4013      	ands	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]
 8006274:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006276:	2144      	movs	r1, #68	; 0x44
 8006278:	187b      	adds	r3, r7, r1
 800627a:	2203      	movs	r2, #3
 800627c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800627e:	187b      	adds	r3, r7, r1
 8006280:	2202      	movs	r2, #2
 8006282:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006284:	187b      	adds	r3, r7, r1
 8006286:	2200      	movs	r2, #0
 8006288:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800628a:	187b      	adds	r3, r7, r1
 800628c:	2200      	movs	r2, #0
 800628e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8006290:	187b      	adds	r3, r7, r1
 8006292:	2204      	movs	r2, #4
 8006294:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006296:	187a      	adds	r2, r7, r1
 8006298:	23a0      	movs	r3, #160	; 0xa0
 800629a:	05db      	lsls	r3, r3, #23
 800629c:	0011      	movs	r1, r2
 800629e:	0018      	movs	r0, r3
 80062a0:	f002 fbc6 	bl	8008a30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80062a4:	2200      	movs	r2, #0
 80062a6:	2100      	movs	r1, #0
 80062a8:	201d      	movs	r0, #29
 80062aa:	f001 fec9 	bl	8008040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80062ae:	201d      	movs	r0, #29
 80062b0:	f001 fedb 	bl	800806a <HAL_NVIC_EnableIRQ>
}
 80062b4:	46c0      	nop			; (mov r8, r8)
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b017      	add	sp, #92	; 0x5c
 80062ba:	bd90      	pop	{r4, r7, pc}
 80062bc:	40013800 	.word	0x40013800
 80062c0:	40021000 	.word	0x40021000
 80062c4:	50000800 	.word	0x50000800
 80062c8:	40004400 	.word	0x40004400
 80062cc:	50000c00 	.word	0x50000c00
 80062d0:	40004800 	.word	0x40004800
 80062d4:	40004c00 	.word	0x40004c00

080062d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062dc:	e7fe      	b.n	80062dc <NMI_Handler+0x4>

080062de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062e2:	e7fe      	b.n	80062e2 <HardFault_Handler+0x4>

080062e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80062e8:	46c0      	nop			; (mov r8, r8)
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062fc:	f000 fc14 	bl	8006b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8006300:	f001 fed0 	bl	80080a4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8006304:	46c0      	nop			; (mov r8, r8)
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <DMA1_Channel1_IRQHandler+0x14>)
 8006312:	0018      	movs	r0, r3
 8006314:	f002 f8aa 	bl	800846c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006318:	46c0      	nop			; (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	2000059c 	.word	0x2000059c

08006324 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006328:	4b03      	ldr	r3, [pc, #12]	; (8006338 <ADC1_IRQHandler+0x14>)
 800632a:	0018      	movs	r0, r3
 800632c:	f000 ffec 	bl	8007308 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8006330:	46c0      	nop			; (mov r8, r8)
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	20000538 	.word	0x20000538

0800633c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006340:	4b03      	ldr	r3, [pc, #12]	; (8006350 <TIM6_IRQHandler+0x14>)
 8006342:	0018      	movs	r0, r3
 8006344:	f004 fc5e 	bl	800ac04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8006348:	46c0      	nop			; (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	200006a8 	.word	0x200006a8

08006354 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006358:	4b03      	ldr	r3, [pc, #12]	; (8006368 <TIM7_IRQHandler+0x14>)
 800635a:	0018      	movs	r0, r3
 800635c:	f004 fc52 	bl	800ac04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	200006f4 	.word	0x200006f4

0800636c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006370:	4b03      	ldr	r3, [pc, #12]	; (8006380 <USART1_IRQHandler+0x14>)
 8006372:	0018      	movs	r0, r3
 8006374:	f005 fc1a 	bl	800bbac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	20000740 	.word	0x20000740

08006384 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006388:	4b03      	ldr	r3, [pc, #12]	; (8006398 <USART2_IRQHandler+0x14>)
 800638a:	0018      	movs	r0, r3
 800638c:	f005 fc0e 	bl	800bbac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006390:	46c0      	nop			; (mov r8, r8)
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	200007d4 	.word	0x200007d4

0800639c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <USART3_4_IRQHandler+0x1c>)
 80063a2:	0018      	movs	r0, r3
 80063a4:	f005 fc02 	bl	800bbac <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 80063a8:	4b04      	ldr	r3, [pc, #16]	; (80063bc <USART3_4_IRQHandler+0x20>)
 80063aa:	0018      	movs	r0, r3
 80063ac:	f005 fbfe 	bl	800bbac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80063b0:	46c0      	nop			; (mov r8, r8)
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	20000868 	.word	0x20000868
 80063bc:	200008fc 	.word	0x200008fc

080063c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
	return 1;
 80063c4:	2301      	movs	r3, #1
}
 80063c6:	0018      	movs	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <_kill>:

int _kill(int pid, int sig)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80063d6:	f006 fc6d 	bl	800ccb4 <__errno>
 80063da:	0003      	movs	r3, r0
 80063dc:	2216      	movs	r2, #22
 80063de:	601a      	str	r2, [r3, #0]
	return -1;
 80063e0:	2301      	movs	r3, #1
 80063e2:	425b      	negs	r3, r3
}
 80063e4:	0018      	movs	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b002      	add	sp, #8
 80063ea:	bd80      	pop	{r7, pc}

080063ec <_exit>:

void _exit (int status)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80063f4:	2301      	movs	r3, #1
 80063f6:	425a      	negs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	0011      	movs	r1, r2
 80063fc:	0018      	movs	r0, r3
 80063fe:	f7ff ffe5 	bl	80063cc <_kill>
	while (1) {}		/* Make sure we hang here */
 8006402:	e7fe      	b.n	8006402 <_exit+0x16>

08006404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	e00a      	b.n	800642c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006416:	e000      	b.n	800641a <_read+0x16>
 8006418:	bf00      	nop
 800641a:	0001      	movs	r1, r0
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	60ba      	str	r2, [r7, #8]
 8006422:	b2ca      	uxtb	r2, r1
 8006424:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	3301      	adds	r3, #1
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	dbf0      	blt.n	8006416 <_read+0x12>
	}

return len;
 8006434:	687b      	ldr	r3, [r7, #4]
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b006      	add	sp, #24
 800643c:	bd80      	pop	{r7, pc}

0800643e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e009      	b.n	8006464 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	60ba      	str	r2, [r7, #8]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	0018      	movs	r0, r3
 800645a:	e000      	b.n	800645e <_write+0x20>
 800645c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	3301      	adds	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	dbf1      	blt.n	8006450 <_write+0x12>
	}
	return len;
 800646c:	687b      	ldr	r3, [r7, #4]
}
 800646e:	0018      	movs	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	b006      	add	sp, #24
 8006474:	bd80      	pop	{r7, pc}

08006476 <_close>:

int _close(int file)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
	return -1;
 800647e:	2301      	movs	r3, #1
 8006480:	425b      	negs	r3, r3
}
 8006482:	0018      	movs	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	b002      	add	sp, #8
 8006488:	bd80      	pop	{r7, pc}

0800648a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	0192      	lsls	r2, r2, #6
 800649a:	605a      	str	r2, [r3, #4]
	return 0;
 800649c:	2300      	movs	r3, #0
}
 800649e:	0018      	movs	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b002      	add	sp, #8
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <_isatty>:

int _isatty(int file)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
	return 1;
 80064ae:	2301      	movs	r3, #1
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b002      	add	sp, #8
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
	return 0;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b004      	add	sp, #16
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064d8:	4a14      	ldr	r2, [pc, #80]	; (800652c <_sbrk+0x5c>)
 80064da:	4b15      	ldr	r3, [pc, #84]	; (8006530 <_sbrk+0x60>)
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064e4:	4b13      	ldr	r3, [pc, #76]	; (8006534 <_sbrk+0x64>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064ec:	4b11      	ldr	r3, [pc, #68]	; (8006534 <_sbrk+0x64>)
 80064ee:	4a12      	ldr	r2, [pc, #72]	; (8006538 <_sbrk+0x68>)
 80064f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064f2:	4b10      	ldr	r3, [pc, #64]	; (8006534 <_sbrk+0x64>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	18d3      	adds	r3, r2, r3
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d207      	bcs.n	8006510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006500:	f006 fbd8 	bl	800ccb4 <__errno>
 8006504:	0003      	movs	r3, r0
 8006506:	220c      	movs	r2, #12
 8006508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800650a:	2301      	movs	r3, #1
 800650c:	425b      	negs	r3, r3
 800650e:	e009      	b.n	8006524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006510:	4b08      	ldr	r3, [pc, #32]	; (8006534 <_sbrk+0x64>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <_sbrk+0x64>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	18d2      	adds	r2, r2, r3
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <_sbrk+0x64>)
 8006520:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006522:	68fb      	ldr	r3, [r7, #12]
}
 8006524:	0018      	movs	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	b006      	add	sp, #24
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20009000 	.word	0x20009000
 8006530:	00000400 	.word	0x00000400
 8006534:	20000990 	.word	0x20000990
 8006538:	200009d8 	.word	0x200009d8

0800653c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006540:	46c0      	nop			; (mov r8, r8)
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <Drv8251_Control>:
#include "myHeader.h"

MotorTestWater_t TWMOTOR;

void Drv8251_Control(Drv8251DirCtrl_e control)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	0002      	movs	r2, r0
 8006550:	1dfb      	adds	r3, r7, #7
 8006552:	701a      	strb	r2, [r3, #0]
  switch(control)
 8006554:	1dfb      	adds	r3, r7, #7
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b03      	cmp	r3, #3
 800655a:	d05a      	beq.n	8006612 <Drv8251_Control+0xca>
 800655c:	dd00      	ble.n	8006560 <Drv8251_Control+0x18>
 800655e:	e073      	b.n	8006648 <Drv8251_Control+0x100>
 8006560:	2b02      	cmp	r3, #2
 8006562:	d020      	beq.n	80065a6 <Drv8251_Control+0x5e>
 8006564:	dc70      	bgt.n	8006648 <Drv8251_Control+0x100>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <Drv8251_Control+0x28>
 800656a:	2b01      	cmp	r3, #1
 800656c:	d036      	beq.n	80065dc <Drv8251_Control+0x94>
      MOTOR_IN1_ON;
      MOTOR_IN2_ON;
      LED1_ON;
      LED2_ON;
      break;
    default:break;
 800656e:	e06b      	b.n	8006648 <Drv8251_Control+0x100>
      MOTOR_IN1_OFF;
 8006570:	4b38      	ldr	r3, [pc, #224]	; (8006654 <Drv8251_Control+0x10c>)
 8006572:	2200      	movs	r2, #0
 8006574:	2101      	movs	r1, #1
 8006576:	0018      	movs	r0, r3
 8006578:	f002 fbdb 	bl	8008d32 <HAL_GPIO_WritePin>
      MOTOR_IN2_OFF;
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	0219      	lsls	r1, r3, #8
 8006580:	23a0      	movs	r3, #160	; 0xa0
 8006582:	05db      	lsls	r3, r3, #23
 8006584:	2200      	movs	r2, #0
 8006586:	0018      	movs	r0, r3
 8006588:	f002 fbd3 	bl	8008d32 <HAL_GPIO_WritePin>
      LED1_OFF;
 800658c:	4b32      	ldr	r3, [pc, #200]	; (8006658 <Drv8251_Control+0x110>)
 800658e:	2200      	movs	r2, #0
 8006590:	2108      	movs	r1, #8
 8006592:	0018      	movs	r0, r3
 8006594:	f002 fbcd 	bl	8008d32 <HAL_GPIO_WritePin>
      LED2_OFF;
 8006598:	4b2f      	ldr	r3, [pc, #188]	; (8006658 <Drv8251_Control+0x110>)
 800659a:	2200      	movs	r2, #0
 800659c:	2102      	movs	r1, #2
 800659e:	0018      	movs	r0, r3
 80065a0:	f002 fbc7 	bl	8008d32 <HAL_GPIO_WritePin>
      break;
 80065a4:	e051      	b.n	800664a <Drv8251_Control+0x102>
      MOTOR_IN1_OFF;
 80065a6:	4b2b      	ldr	r3, [pc, #172]	; (8006654 <Drv8251_Control+0x10c>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	2101      	movs	r1, #1
 80065ac:	0018      	movs	r0, r3
 80065ae:	f002 fbc0 	bl	8008d32 <HAL_GPIO_WritePin>
      MOTOR_IN2_ON;
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	0219      	lsls	r1, r3, #8
 80065b6:	23a0      	movs	r3, #160	; 0xa0
 80065b8:	05db      	lsls	r3, r3, #23
 80065ba:	2201      	movs	r2, #1
 80065bc:	0018      	movs	r0, r3
 80065be:	f002 fbb8 	bl	8008d32 <HAL_GPIO_WritePin>
      LED1_OFF;
 80065c2:	4b25      	ldr	r3, [pc, #148]	; (8006658 <Drv8251_Control+0x110>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	2108      	movs	r1, #8
 80065c8:	0018      	movs	r0, r3
 80065ca:	f002 fbb2 	bl	8008d32 <HAL_GPIO_WritePin>
      LED2_ON;
 80065ce:	4b22      	ldr	r3, [pc, #136]	; (8006658 <Drv8251_Control+0x110>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	2102      	movs	r1, #2
 80065d4:	0018      	movs	r0, r3
 80065d6:	f002 fbac 	bl	8008d32 <HAL_GPIO_WritePin>
      break;
 80065da:	e036      	b.n	800664a <Drv8251_Control+0x102>
      MOTOR_IN1_ON;
 80065dc:	4b1d      	ldr	r3, [pc, #116]	; (8006654 <Drv8251_Control+0x10c>)
 80065de:	2201      	movs	r2, #1
 80065e0:	2101      	movs	r1, #1
 80065e2:	0018      	movs	r0, r3
 80065e4:	f002 fba5 	bl	8008d32 <HAL_GPIO_WritePin>
      MOTOR_IN2_OFF;
 80065e8:	2380      	movs	r3, #128	; 0x80
 80065ea:	0219      	lsls	r1, r3, #8
 80065ec:	23a0      	movs	r3, #160	; 0xa0
 80065ee:	05db      	lsls	r3, r3, #23
 80065f0:	2200      	movs	r2, #0
 80065f2:	0018      	movs	r0, r3
 80065f4:	f002 fb9d 	bl	8008d32 <HAL_GPIO_WritePin>
      LED1_ON;
 80065f8:	4b17      	ldr	r3, [pc, #92]	; (8006658 <Drv8251_Control+0x110>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	2108      	movs	r1, #8
 80065fe:	0018      	movs	r0, r3
 8006600:	f002 fb97 	bl	8008d32 <HAL_GPIO_WritePin>
      LED2_OFF;
 8006604:	4b14      	ldr	r3, [pc, #80]	; (8006658 <Drv8251_Control+0x110>)
 8006606:	2200      	movs	r2, #0
 8006608:	2102      	movs	r1, #2
 800660a:	0018      	movs	r0, r3
 800660c:	f002 fb91 	bl	8008d32 <HAL_GPIO_WritePin>
      break;
 8006610:	e01b      	b.n	800664a <Drv8251_Control+0x102>
      MOTOR_IN1_ON;
 8006612:	4b10      	ldr	r3, [pc, #64]	; (8006654 <Drv8251_Control+0x10c>)
 8006614:	2201      	movs	r2, #1
 8006616:	2101      	movs	r1, #1
 8006618:	0018      	movs	r0, r3
 800661a:	f002 fb8a 	bl	8008d32 <HAL_GPIO_WritePin>
      MOTOR_IN2_ON;
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	0219      	lsls	r1, r3, #8
 8006622:	23a0      	movs	r3, #160	; 0xa0
 8006624:	05db      	lsls	r3, r3, #23
 8006626:	2201      	movs	r2, #1
 8006628:	0018      	movs	r0, r3
 800662a:	f002 fb82 	bl	8008d32 <HAL_GPIO_WritePin>
      LED1_ON;
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <Drv8251_Control+0x110>)
 8006630:	2201      	movs	r2, #1
 8006632:	2108      	movs	r1, #8
 8006634:	0018      	movs	r0, r3
 8006636:	f002 fb7c 	bl	8008d32 <HAL_GPIO_WritePin>
      LED2_ON;
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <Drv8251_Control+0x110>)
 800663c:	2201      	movs	r2, #1
 800663e:	2102      	movs	r1, #2
 8006640:	0018      	movs	r0, r3
 8006642:	f002 fb76 	bl	8008d32 <HAL_GPIO_WritePin>
      break;
 8006646:	e000      	b.n	800664a <Drv8251_Control+0x102>
    default:break;
 8006648:	46c0      	nop			; (mov r8, r8)
  }
}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	46bd      	mov	sp, r7
 800664e:	b002      	add	sp, #8
 8006650:	bd80      	pop	{r7, pc}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	50000c00 	.word	0x50000c00
 8006658:	50000800 	.word	0x50000800

0800665c <testMotorSystickIrq1ms>:
      TWMOTOR.motorState = _DIR_LEFT;
      Drv8251_Control(_DIR_BRAKE);
  }
}

void testMotorSystickIrq1ms(MotorTestWater_t *mtor){
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  mtor->SWTS.Bit.RIGHT_SWT= Systick_ReadInput_poll(_IN_SW_RIGHT,SWTRIGHT_PinStt,10,10);
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	019b      	lsls	r3, r3, #6
 8006668:	4a77      	ldr	r2, [pc, #476]	; (8006848 <testMotorSystickIrq1ms+0x1ec>)
 800666a:	0019      	movs	r1, r3
 800666c:	0010      	movs	r0, r2
 800666e:	f002 fb43 	bl	8008cf8 <HAL_GPIO_ReadPin>
 8006672:	0003      	movs	r3, r0
 8006674:	0019      	movs	r1, r3
 8006676:	230a      	movs	r3, #10
 8006678:	220a      	movs	r2, #10
 800667a:	2002      	movs	r0, #2
 800667c:	f7fd f8cc 	bl	8003818 <Systick_ReadInput_poll>
 8006680:	0003      	movs	r3, r0
 8006682:	1c1a      	adds	r2, r3, #0
 8006684:	2301      	movs	r3, #1
 8006686:	4013      	ands	r3, r2
 8006688:	b2da      	uxtb	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2101      	movs	r1, #1
 800668e:	400a      	ands	r2, r1
 8006690:	0010      	movs	r0, r2
 8006692:	781a      	ldrb	r2, [r3, #0]
 8006694:	2101      	movs	r1, #1
 8006696:	438a      	bics	r2, r1
 8006698:	1c11      	adds	r1, r2, #0
 800669a:	1c02      	adds	r2, r0, #0
 800669c:	430a      	orrs	r2, r1
 800669e:	701a      	strb	r2, [r3, #0]
  mtor->SWTS.Bit.MID_SWT  = Systick_ReadInput_poll(_IN_SW_MID,SWTMID_PinStt,10,10);
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	4a68      	ldr	r2, [pc, #416]	; (8006848 <testMotorSystickIrq1ms+0x1ec>)
 80066a6:	0019      	movs	r1, r3
 80066a8:	0010      	movs	r0, r2
 80066aa:	f002 fb25 	bl	8008cf8 <HAL_GPIO_ReadPin>
 80066ae:	0003      	movs	r3, r0
 80066b0:	0019      	movs	r1, r3
 80066b2:	230a      	movs	r3, #10
 80066b4:	220a      	movs	r2, #10
 80066b6:	2001      	movs	r0, #1
 80066b8:	f7fd f8ae 	bl	8003818 <Systick_ReadInput_poll>
 80066bc:	0003      	movs	r3, r0
 80066be:	1c1a      	adds	r2, r3, #0
 80066c0:	2301      	movs	r3, #1
 80066c2:	4013      	ands	r3, r2
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2101      	movs	r1, #1
 80066ca:	400a      	ands	r2, r1
 80066cc:	1890      	adds	r0, r2, r2
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	2102      	movs	r1, #2
 80066d2:	438a      	bics	r2, r1
 80066d4:	1c11      	adds	r1, r2, #0
 80066d6:	1c02      	adds	r2, r0, #0
 80066d8:	430a      	orrs	r2, r1
 80066da:	701a      	strb	r2, [r3, #0]
  mtor->SWTS.Bit.LEFT_SWT = Systick_ReadInput_poll(_IN_SW_LEFT,SWTLEFT_PinStt,10,10);
 80066dc:	2380      	movs	r3, #128	; 0x80
 80066de:	015b      	lsls	r3, r3, #5
 80066e0:	4a59      	ldr	r2, [pc, #356]	; (8006848 <testMotorSystickIrq1ms+0x1ec>)
 80066e2:	0019      	movs	r1, r3
 80066e4:	0010      	movs	r0, r2
 80066e6:	f002 fb07 	bl	8008cf8 <HAL_GPIO_ReadPin>
 80066ea:	0003      	movs	r3, r0
 80066ec:	0019      	movs	r1, r3
 80066ee:	230a      	movs	r3, #10
 80066f0:	220a      	movs	r2, #10
 80066f2:	2000      	movs	r0, #0
 80066f4:	f7fd f890 	bl	8003818 <Systick_ReadInput_poll>
 80066f8:	0003      	movs	r3, r0
 80066fa:	1c1a      	adds	r2, r3, #0
 80066fc:	2301      	movs	r3, #1
 80066fe:	4013      	ands	r3, r2
 8006700:	b2da      	uxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2101      	movs	r1, #1
 8006706:	400a      	ands	r2, r1
 8006708:	0090      	lsls	r0, r2, #2
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	2104      	movs	r1, #4
 800670e:	438a      	bics	r2, r1
 8006710:	1c11      	adds	r1, r2, #0
 8006712:	1c02      	adds	r2, r0, #0
 8006714:	430a      	orrs	r2, r1
 8006716:	701a      	strb	r2, [r3, #0]

  mtor->SWTS.Bit.RIGHT_IR = IRRIGHT_PinStt;//Systick_ReadInput_poll(_IN_IR_LEFT,IRRIGHT_PinStt,2,2);
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4a4b      	ldr	r2, [pc, #300]	; (800684c <testMotorSystickIrq1ms+0x1f0>)
 800671e:	0019      	movs	r1, r3
 8006720:	0010      	movs	r0, r2
 8006722:	f002 fae9 	bl	8008cf8 <HAL_GPIO_ReadPin>
 8006726:	0003      	movs	r3, r0
 8006728:	1c1a      	adds	r2, r3, #0
 800672a:	2301      	movs	r3, #1
 800672c:	4013      	ands	r3, r2
 800672e:	b2da      	uxtb	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2101      	movs	r1, #1
 8006734:	400a      	ands	r2, r1
 8006736:	00d0      	lsls	r0, r2, #3
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	2108      	movs	r1, #8
 800673c:	438a      	bics	r2, r1
 800673e:	1c11      	adds	r1, r2, #0
 8006740:	1c02      	adds	r2, r0, #0
 8006742:	430a      	orrs	r2, r1
 8006744:	701a      	strb	r2, [r3, #0]
  mtor->SWTS.Bit.LEFT_IR = IRLEFT_PinStt;//Systick_ReadInput_poll(_IN_IR_RIGHT,IRLEFT_PinStt,2,2);
 8006746:	4b41      	ldr	r3, [pc, #260]	; (800684c <testMotorSystickIrq1ms+0x1f0>)
 8006748:	2180      	movs	r1, #128	; 0x80
 800674a:	0018      	movs	r0, r3
 800674c:	f002 fad4 	bl	8008cf8 <HAL_GPIO_ReadPin>
 8006750:	0003      	movs	r3, r0
 8006752:	1c1a      	adds	r2, r3, #0
 8006754:	2301      	movs	r3, #1
 8006756:	4013      	ands	r3, r2
 8006758:	b2da      	uxtb	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2101      	movs	r1, #1
 800675e:	400a      	ands	r2, r1
 8006760:	0110      	lsls	r0, r2, #4
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	2110      	movs	r1, #16
 8006766:	438a      	bics	r2, r1
 8006768:	1c11      	adds	r1, r2, #0
 800676a:	1c02      	adds	r2, r0, #0
 800676c:	430a      	orrs	r2, r1
 800676e:	701a      	strb	r2, [r3, #0]

  //update Posistion
  if(mtor->SWTS.Bit.LEFT_SWT==0 && mtor->SWTS.Bit.MID_SWT && mtor->SWTS.Bit.RIGHT_SWT) mtor->atPosition = _POS_LEFT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2204      	movs	r2, #4
 8006776:	4013      	ands	r3, r2
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d111      	bne.n	80067a2 <testMotorSystickIrq1ms+0x146>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2202      	movs	r2, #2
 8006784:	4013      	ands	r3, r2
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <testMotorSystickIrq1ms+0x146>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2201      	movs	r2, #1
 8006792:	4013      	ands	r3, r2
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <testMotorSystickIrq1ms+0x146>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	709a      	strb	r2, [r3, #2]
 80067a0:	e04e      	b.n	8006840 <testMotorSystickIrq1ms+0x1e4>
  else if(mtor->SWTS.Bit.LEFT_SWT && mtor->SWTS.Bit.MID_SWT==0 && mtor->SWTS.Bit.RIGHT_SWT) mtor->atPosition = _POS_MID;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2204      	movs	r2, #4
 80067a8:	4013      	ands	r3, r2
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d011      	beq.n	80067d4 <testMotorSystickIrq1ms+0x178>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2202      	movs	r2, #2
 80067b6:	4013      	ands	r3, r2
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <testMotorSystickIrq1ms+0x178>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2201      	movs	r2, #1
 80067c4:	4013      	ands	r3, r2
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <testMotorSystickIrq1ms+0x178>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	709a      	strb	r2, [r3, #2]
 80067d2:	e035      	b.n	8006840 <testMotorSystickIrq1ms+0x1e4>
  else if(mtor->SWTS.Bit.LEFT_SWT && mtor->SWTS.Bit.MID_SWT && mtor->SWTS.Bit.RIGHT_SWT==0) mtor->atPosition = _POS_RIGHT;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2204      	movs	r2, #4
 80067da:	4013      	ands	r3, r2
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d011      	beq.n	8006806 <testMotorSystickIrq1ms+0x1aa>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2202      	movs	r2, #2
 80067e8:	4013      	ands	r3, r2
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <testMotorSystickIrq1ms+0x1aa>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2201      	movs	r2, #1
 80067f6:	4013      	ands	r3, r2
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <testMotorSystickIrq1ms+0x1aa>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2203      	movs	r2, #3
 8006802:	709a      	strb	r2, [r3, #2]
 8006804:	e01c      	b.n	8006840 <testMotorSystickIrq1ms+0x1e4>
  else if(mtor->SWTS.Bit.LEFT_SWT && mtor->SWTS.Bit.MID_SWT && mtor->SWTS.Bit.RIGHT_SWT) mtor->atPosition = _POS_UNKNOWN;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2204      	movs	r2, #4
 800680c:	4013      	ands	r3, r2
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d011      	beq.n	8006838 <testMotorSystickIrq1ms+0x1dc>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2202      	movs	r2, #2
 800681a:	4013      	ands	r3, r2
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <testMotorSystickIrq1ms+0x1dc>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2201      	movs	r2, #1
 8006828:	4013      	ands	r3, r2
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <testMotorSystickIrq1ms+0x1dc>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	709a      	strb	r2, [r3, #2]
 8006836:	e003      	b.n	8006840 <testMotorSystickIrq1ms+0x1e4>
  else mtor->atPosition = _POS_SWT_ERROR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2204      	movs	r2, #4
 800683c:	709a      	strb	r2, [r3, #2]
}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	46c0      	nop			; (mov r8, r8)
 8006842:	46bd      	mov	sp, r7
 8006844:	b002      	add	sp, #8
 8006846:	bd80      	pop	{r7, pc}
 8006848:	50000800 	.word	0x50000800
 800684c:	50000400 	.word	0x50000400

08006850 <MotorTestWaterSensorInit>:

void MotorTestWaterSensorInit(MotorTestWater_t *mtor){
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  mtor->motorState = _DIR_COAST;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	705a      	strb	r2, [r3, #1]
  Drv8251_Control(mtor->motorState);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	0018      	movs	r0, r3
 8006864:	f7ff fe70 	bl	8006548 <Drv8251_Control>
  timer_set(&mtor->_timeRunMotor, 200);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	21c8      	movs	r1, #200	; 0xc8
 800686e:	0018      	movs	r0, r3
 8006870:	f7fc fc0a 	bl	8003088 <timer_set>
}
 8006874:	46c0      	nop			; (mov r8, r8)
 8006876:	46bd      	mov	sp, r7
 8006878:	b002      	add	sp, #8
 800687a:	bd80      	pop	{r7, pc}

0800687c <MotorTestWaterSensorLoop>:

void MotorTestWaterSensorLoop(MotorTestWater_t *mtor){
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]

  //Nếu hoạt động quá thời gian được set thì thả nổi lại
  if(timer_expired(&mtor->_timeRunMotor)){
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3304      	adds	r3, #4
 8006888:	0018      	movs	r0, r3
 800688a:	f7fc fc27 	bl	80030dc <timer_expired>
 800688e:	1e03      	subs	r3, r0, #0
 8006890:	d022      	beq.n	80068d8 <MotorTestWaterSensorLoop+0x5c>
      if(mtor->goPosition==_POS_MID && mtor->motorState == _DIR_LEFT){
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	78db      	ldrb	r3, [r3, #3]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d113      	bne.n	80068c2 <MotorTestWaterSensorLoop+0x46>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d10f      	bne.n	80068c2 <MotorTestWaterSensorLoop+0x46>
	  mtor->motorState=_DIR_RIGHT;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	705a      	strb	r2, [r3, #1]
	  Drv8251_Control(mtor->motorState);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7ff fe4b 	bl	8006548 <Drv8251_Control>
	  timer_set(&mtor->_timeRunMotor, 3*_TIMEOUT_CHECK_MID);//thời gian tối quay ngược trở lại để tìm vị trí MID , gấp 3 lần giá trị cũ
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4a18      	ldr	r2, [pc, #96]	; (8006918 <MotorTestWaterSensorLoop+0x9c>)
 80068b8:	0011      	movs	r1, r2
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7fc fbe4 	bl	8003088 <timer_set>
 80068c0:	e00a      	b.n	80068d8 <MotorTestWaterSensorLoop+0x5c>
      }
      else {
	  MotorGotoPosition(mtor,_POS_UNKNOWN,0);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	2100      	movs	r1, #0
 80068c8:	0018      	movs	r0, r3
 80068ca:	f000 f827 	bl	800691c <MotorGotoPosition>
	  timer_stop(&mtor->_timeRunMotor);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3304      	adds	r3, #4
 80068d2:	0018      	movs	r0, r3
 80068d4:	f7fc fc28 	bl	8003128 <timer_stop>
      }
  }

  //Nếu trước đó ko điều khiển
  if(mtor->goPosition==_POS_UNKNOWN)return;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	78db      	ldrb	r3, [r3, #3]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d016      	beq.n	800690e <MotorTestWaterSensorLoop+0x92>
  //Nếu trước đó có điều khiển thì đúng vị trí sẽ dừng lại
  if(mtor->atPosition == mtor->goPosition){
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	789a      	ldrb	r2, [r3, #2]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	78db      	ldrb	r3, [r3, #3]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d111      	bne.n	8006910 <MotorTestWaterSensorLoop+0x94>
    mtor->goPosition = _POS_UNKNOWN;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	70da      	strb	r2, [r3, #3]
    mtor->motorState = _DIR_BRAKE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2203      	movs	r2, #3
 80068f6:	705a      	strb	r2, [r3, #1]
    timer_stop(&mtor->_timeRunMotor);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3304      	adds	r3, #4
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7fc fc13 	bl	8003128 <timer_stop>
    Drv8251_Control(mtor->motorState);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	0018      	movs	r0, r3
 8006908:	f7ff fe1e 	bl	8006548 <Drv8251_Control>
 800690c:	e000      	b.n	8006910 <MotorTestWaterSensorLoop+0x94>
  if(mtor->goPosition==_POS_UNKNOWN)return;
 800690e:	46c0      	nop			; (mov r8, r8)
  }
}
 8006910:	46bd      	mov	sp, r7
 8006912:	b002      	add	sp, #8
 8006914:	bd80      	pop	{r7, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	00001770 	.word	0x00001770

0800691c <MotorGotoPosition>:

void MotorGotoPosition(MotorTestWater_t *mtor,PositionMotor_t gotoPositon,uint32_t timeOut){
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	200b      	movs	r0, #11
 8006928:	183b      	adds	r3, r7, r0
 800692a:	1c0a      	adds	r2, r1, #0
 800692c:	701a      	strb	r2, [r3, #0]

  //Nếu các CTHT bị lỗi
  if(mtor->atPosition==_POS_SWT_ERROR) return;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	789b      	ldrb	r3, [r3, #2]
 8006932:	2b04      	cmp	r3, #4
 8006934:	d05d      	beq.n	80069f2 <MotorGotoPosition+0xd6>
  //Vị trí hiện tại và vị trí muốn đến trùng nhau
  if(mtor->atPosition == gotoPositon || mtor->atPosition==_POS_SWT_ERROR) return;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	789b      	ldrb	r3, [r3, #2]
 800693a:	183a      	adds	r2, r7, r0
 800693c:	7812      	ldrb	r2, [r2, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d059      	beq.n	80069f6 <MotorGotoPosition+0xda>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	789b      	ldrb	r3, [r3, #2]
 8006946:	2b04      	cmp	r3, #4
 8006948:	d055      	beq.n	80069f6 <MotorGotoPosition+0xda>

  //Set thời gian hoạt động tối đa
  if(timeOut)timer_set(&mtor->_timeRunMotor, timeOut);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <MotorGotoPosition+0x42>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3304      	adds	r3, #4
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	0011      	movs	r1, r2
 8006958:	0018      	movs	r0, r3
 800695a:	f7fc fb95 	bl	8003088 <timer_set>
  mtor->goPosition = gotoPositon;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	220b      	movs	r2, #11
 8006962:	18ba      	adds	r2, r7, r2
 8006964:	7812      	ldrb	r2, [r2, #0]
 8006966:	70da      	strb	r2, [r3, #3]
  //các Trường hợp điều khiển
  switch(mtor->goPosition){
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	78db      	ldrb	r3, [r3, #3]
 800696c:	2b03      	cmp	r3, #3
 800696e:	d009      	beq.n	8006984 <MotorGotoPosition+0x68>
 8006970:	dc2c      	bgt.n	80069cc <MotorGotoPosition+0xb0>
 8006972:	2b01      	cmp	r3, #1
 8006974:	d002      	beq.n	800697c <MotorGotoPosition+0x60>
 8006976:	2b02      	cmp	r3, #2
 8006978:	d008      	beq.n	800698c <MotorGotoPosition+0x70>
 800697a:	e027      	b.n	80069cc <MotorGotoPosition+0xb0>
    //Muốn qua trái
    case _POS_LEFT:
      mtor->motorState = _DIR_LEFT;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2202      	movs	r2, #2
 8006980:	705a      	strb	r2, [r3, #1]
      break;
 8006982:	e030      	b.n	80069e6 <MotorGotoPosition+0xca>

    //Muốn qua phải
    case _POS_RIGHT:
      mtor->motorState = _DIR_RIGHT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	705a      	strb	r2, [r3, #1]
      break;
 800698a:	e02c      	b.n	80069e6 <MotorGotoPosition+0xca>

    //Muốn về ở giữa
    case _POS_MID:
      if(mtor->atPosition==_POS_LEFT){
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	789b      	ldrb	r3, [r3, #2]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d103      	bne.n	800699c <MotorGotoPosition+0x80>
	mtor->motorState = _DIR_RIGHT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	705a      	strb	r2, [r3, #1]
      {
	//nếu ko xác định được vị trí thì chạy qua trái trước
	mtor->motorState = _DIR_LEFT;
	timer_set(&mtor->_timeRunMotor, _TIMEOUT_CHECK_MID);//set thời gian tối thiều là 2s
      }
      break;
 800699a:	e023      	b.n	80069e4 <MotorGotoPosition+0xc8>
      else if(mtor->atPosition==_POS_RIGHT){
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	789b      	ldrb	r3, [r3, #2]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d103      	bne.n	80069ac <MotorGotoPosition+0x90>
	mtor->motorState = _DIR_LEFT;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2202      	movs	r2, #2
 80069a8:	705a      	strb	r2, [r3, #1]
      break;
 80069aa:	e01b      	b.n	80069e4 <MotorGotoPosition+0xc8>
      else if(mtor->atPosition==_POS_UNKNOWN)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	789b      	ldrb	r3, [r3, #2]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d117      	bne.n	80069e4 <MotorGotoPosition+0xc8>
	mtor->motorState = _DIR_LEFT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2202      	movs	r2, #2
 80069b8:	705a      	strb	r2, [r3, #1]
	timer_set(&mtor->_timeRunMotor, _TIMEOUT_CHECK_MID);//set thời gian tối thiều là 2s
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3304      	adds	r3, #4
 80069be:	22fa      	movs	r2, #250	; 0xfa
 80069c0:	00d2      	lsls	r2, r2, #3
 80069c2:	0011      	movs	r1, r2
 80069c4:	0018      	movs	r0, r3
 80069c6:	f7fc fb5f 	bl	8003088 <timer_set>
      break;
 80069ca:	e00b      	b.n	80069e4 <MotorGotoPosition+0xc8>

    //ko xảy ra các trường hợp khác , ko biết thì thả nổi mtor
    default:
      mtor->goPosition = _POS_UNKNOWN;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	70da      	strb	r2, [r3, #3]
      mtor->motorState = _DIR_COAST;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	705a      	strb	r2, [r3, #1]
      timer_stop(&mtor->_timeRunMotor);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3304      	adds	r3, #4
 80069dc:	0018      	movs	r0, r3
 80069de:	f7fc fba3 	bl	8003128 <timer_stop>
      return;
 80069e2:	e009      	b.n	80069f8 <MotorGotoPosition+0xdc>
      break;
 80069e4:	46c0      	nop			; (mov r8, r8)
  }
  Drv8251_Control(mtor->motorState);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7ff fdac 	bl	8006548 <Drv8251_Control>
 80069f0:	e002      	b.n	80069f8 <MotorGotoPosition+0xdc>
  if(mtor->atPosition==_POS_SWT_ERROR) return;
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	e000      	b.n	80069f8 <MotorGotoPosition+0xdc>
  if(mtor->atPosition == gotoPositon || mtor->atPosition==_POS_SWT_ERROR) return;
 80069f6:	46c0      	nop			; (mov r8, r8)
}
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b004      	add	sp, #16
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006a00:	480d      	ldr	r0, [pc, #52]	; (8006a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006a02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006a04:	f7ff fd9a 	bl	800653c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a08:	480c      	ldr	r0, [pc, #48]	; (8006a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8006a0a:	490d      	ldr	r1, [pc, #52]	; (8006a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006a0c:	4a0d      	ldr	r2, [pc, #52]	; (8006a44 <LoopForever+0xe>)
  movs r3, #0
 8006a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a10:	e002      	b.n	8006a18 <LoopCopyDataInit>

08006a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a16:	3304      	adds	r3, #4

08006a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a1c:	d3f9      	bcc.n	8006a12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a1e:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a20:	4c0a      	ldr	r4, [pc, #40]	; (8006a4c <LoopForever+0x16>)
  movs r3, #0
 8006a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a24:	e001      	b.n	8006a2a <LoopFillZerobss>

08006a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a28:	3204      	adds	r2, #4

08006a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a2c:	d3fb      	bcc.n	8006a26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006a2e:	f006 f947 	bl	800ccc0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006a32:	f7fe fc23 	bl	800527c <main>

08006a36 <LoopForever>:

LoopForever:
  b LoopForever
 8006a36:	e7fe      	b.n	8006a36 <LoopForever>
  ldr   r0, =_estack
 8006a38:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8006a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a40:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8006a44:	0801054c 	.word	0x0801054c
  ldr r2, =_sbss
 8006a48:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8006a4c:	200009d8 	.word	0x200009d8

08006a50 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a50:	e7fe      	b.n	8006a50 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08006a54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a5a:	1dfb      	adds	r3, r7, #7
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_Init+0x3c>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <HAL_Init+0x3c>)
 8006a66:	2180      	movs	r1, #128	; 0x80
 8006a68:	0049      	lsls	r1, r1, #1
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a6e:	2000      	movs	r0, #0
 8006a70:	f000 f810 	bl	8006a94 <HAL_InitTick>
 8006a74:	1e03      	subs	r3, r0, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006a78:	1dfb      	adds	r3, r7, #7
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e001      	b.n	8006a84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006a80:	f7ff f954 	bl	8005d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a84:	1dfb      	adds	r3, r7, #7
 8006a86:	781b      	ldrb	r3, [r3, #0]
}
 8006a88:	0018      	movs	r0, r3
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b002      	add	sp, #8
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40022000 	.word	0x40022000

08006a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a94:	b590      	push	{r4, r7, lr}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006a9c:	230f      	movs	r3, #15
 8006a9e:	18fb      	adds	r3, r7, r3
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006aa4:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <HAL_InitTick+0x88>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02b      	beq.n	8006b04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006aac:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <HAL_InitTick+0x8c>)
 8006aae:	681c      	ldr	r4, [r3, #0]
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <HAL_InitTick+0x88>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	0019      	movs	r1, r3
 8006ab6:	23fa      	movs	r3, #250	; 0xfa
 8006ab8:	0098      	lsls	r0, r3, #2
 8006aba:	f7f9 fb3d 	bl	8000138 <__udivsi3>
 8006abe:	0003      	movs	r3, r0
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	0020      	movs	r0, r4
 8006ac4:	f7f9 fb38 	bl	8000138 <__udivsi3>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	0018      	movs	r0, r3
 8006acc:	f001 fadd 	bl	800808a <HAL_SYSTICK_Config>
 8006ad0:	1e03      	subs	r3, r0, #0
 8006ad2:	d112      	bne.n	8006afa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d80a      	bhi.n	8006af0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	2301      	movs	r3, #1
 8006ade:	425b      	negs	r3, r3
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f001 faac 	bl	8008040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ae8:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <HAL_InitTick+0x90>)
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e00d      	b.n	8006b0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006af0:	230f      	movs	r3, #15
 8006af2:	18fb      	adds	r3, r7, r3
 8006af4:	2201      	movs	r2, #1
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	e008      	b.n	8006b0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006afa:	230f      	movs	r3, #15
 8006afc:	18fb      	adds	r3, r7, r3
 8006afe:	2201      	movs	r2, #1
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e003      	b.n	8006b0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b04:	230f      	movs	r3, #15
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	2201      	movs	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006b0c:	230f      	movs	r3, #15
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	781b      	ldrb	r3, [r3, #0]
}
 8006b12:	0018      	movs	r0, r3
 8006b14:	46bd      	mov	sp, r7
 8006b16:	b005      	add	sp, #20
 8006b18:	bd90      	pop	{r4, r7, pc}
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	20000014 	.word	0x20000014
 8006b20:	2000000c 	.word	0x2000000c
 8006b24:	20000010 	.word	0x20000010

08006b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_IncTick+0x1c>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	001a      	movs	r2, r3
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <HAL_IncTick+0x20>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	18d2      	adds	r2, r2, r3
 8006b38:	4b03      	ldr	r3, [pc, #12]	; (8006b48 <HAL_IncTick+0x20>)
 8006b3a:	601a      	str	r2, [r3, #0]
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	20000014 	.word	0x20000014
 8006b48:	200009a8 	.word	0x200009a8

08006b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <HAL_GetTick+0x10>)
 8006b52:	681b      	ldr	r3, [r3, #0]
}
 8006b54:	0018      	movs	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	200009a8 	.word	0x200009a8

08006b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b68:	f7ff fff0 	bl	8006b4c <HAL_GetTick>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3301      	adds	r3, #1
 8006b78:	d005      	beq.n	8006b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <HAL_Delay+0x44>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	001a      	movs	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	189b      	adds	r3, r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	f7ff ffe0 	bl	8006b4c <HAL_GetTick>
 8006b8c:	0002      	movs	r2, r0
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d8f7      	bhi.n	8006b88 <HAL_Delay+0x28>
  {
  }
}
 8006b98:	46c0      	nop			; (mov r8, r8)
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	b004      	add	sp, #16
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	20000014 	.word	0x20000014

08006ba8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	0019      	movs	r1, r3
 8006bba:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	601a      	str	r2, [r3, #0]
}
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b002      	add	sp, #8
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	fffff9ff 	.word	0xfffff9ff

08006bd4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a05      	ldr	r2, [pc, #20]	; (8006bf8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8006be4:	401a      	ands	r2, r3
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	601a      	str	r2, [r3, #0]
}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b002      	add	sp, #8
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	fe3fffff 	.word	0xfe3fffff

08006bfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	23e0      	movs	r3, #224	; 0xe0
 8006c0a:	045b      	lsls	r3, r3, #17
 8006c0c:	4013      	ands	r3, r2
}
 8006c0e:	0018      	movs	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b002      	add	sp, #8
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	2104      	movs	r1, #4
 8006c2a:	400a      	ands	r2, r1
 8006c2c:	2107      	movs	r1, #7
 8006c2e:	4091      	lsls	r1, r2
 8006c30:	000a      	movs	r2, r1
 8006c32:	43d2      	mvns	r2, r2
 8006c34:	401a      	ands	r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2104      	movs	r1, #4
 8006c3a:	400b      	ands	r3, r1
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4099      	lsls	r1, r3
 8006c40:	000b      	movs	r3, r1
 8006c42:	431a      	orrs	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006c48:	46c0      	nop			; (mov r8, r8)
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	b004      	add	sp, #16
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	2104      	movs	r1, #4
 8006c62:	400a      	ands	r2, r1
 8006c64:	2107      	movs	r1, #7
 8006c66:	4091      	lsls	r1, r2
 8006c68:	000a      	movs	r2, r1
 8006c6a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2104      	movs	r1, #4
 8006c70:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006c72:	40da      	lsrs	r2, r3
 8006c74:	0013      	movs	r3, r2
}
 8006c76:	0018      	movs	r0, r3
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	b002      	add	sp, #8
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	23c0      	movs	r3, #192	; 0xc0
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d101      	bne.n	8006c96 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	0018      	movs	r0, r3
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b002      	add	sp, #8
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	211f      	movs	r1, #31
 8006cb4:	400a      	ands	r2, r1
 8006cb6:	210f      	movs	r1, #15
 8006cb8:	4091      	lsls	r1, r2
 8006cba:	000a      	movs	r2, r1
 8006cbc:	43d2      	mvns	r2, r2
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	0e9b      	lsrs	r3, r3, #26
 8006cc4:	210f      	movs	r1, #15
 8006cc6:	4019      	ands	r1, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	201f      	movs	r0, #31
 8006ccc:	4003      	ands	r3, r0
 8006cce:	4099      	lsls	r1, r3
 8006cd0:	000b      	movs	r3, r1
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006cd8:	46c0      	nop			; (mov r8, r8)
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b004      	add	sp, #16
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	035b      	lsls	r3, r3, #13
 8006cf2:	0b5b      	lsrs	r3, r3, #13
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	b002      	add	sp, #8
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	0352      	lsls	r2, r2, #13
 8006d14:	0b52      	lsrs	r2, r2, #13
 8006d16:	43d2      	mvns	r2, r2
 8006d18:	401a      	ands	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b002      	add	sp, #8
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2203      	movs	r2, #3
 8006d34:	4013      	ands	r3, r2
}
 8006d36:	0018      	movs	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	0212      	lsls	r2, r2, #8
 8006d54:	43d2      	mvns	r2, r2
 8006d56:	401a      	ands	r2, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	400b      	ands	r3, r1
 8006d60:	4904      	ldr	r1, [pc, #16]	; (8006d74 <LL_ADC_SetChannelSamplingTime+0x34>)
 8006d62:	400b      	ands	r3, r1
 8006d64:	431a      	orrs	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	b004      	add	sp, #16
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	07ffff00 	.word	0x07ffff00

08006d78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	4a05      	ldr	r2, [pc, #20]	; (8006d9c <LL_ADC_EnableInternalRegulator+0x24>)
 8006d86:	4013      	ands	r3, r2
 8006d88:	2280      	movs	r2, #128	; 0x80
 8006d8a:	0552      	lsls	r2, r2, #21
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b002      	add	sp, #8
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	6fffffe8 	.word	0x6fffffe8

08006da0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	2380      	movs	r3, #128	; 0x80
 8006dae:	055b      	lsls	r3, r3, #21
 8006db0:	401a      	ands	r2, r3
 8006db2:	2380      	movs	r3, #128	; 0x80
 8006db4:	055b      	lsls	r3, r3, #21
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d101      	bne.n	8006dbe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	b002      	add	sp, #8
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	4a04      	ldr	r2, [pc, #16]	; (8006de8 <LL_ADC_Enable+0x20>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2201      	movs	r2, #1
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006de0:	46c0      	nop			; (mov r8, r8)
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b002      	add	sp, #8
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	7fffffe8 	.word	0x7fffffe8

08006dec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <LL_ADC_Disable+0x20>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006e04:	46c0      	nop			; (mov r8, r8)
 8006e06:	46bd      	mov	sp, r7
 8006e08:	b002      	add	sp, #8
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	7fffffe8 	.word	0x7fffffe8

08006e10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <LL_ADC_IsEnabled+0x18>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e000      	b.n	8006e2a <LL_ADC_IsEnabled+0x1a>
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	b002      	add	sp, #8
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d101      	bne.n	8006e4a <LL_ADC_IsDisableOngoing+0x18>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <LL_ADC_IsDisableOngoing+0x1a>
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b002      	add	sp, #8
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	4a04      	ldr	r2, [pc, #16]	; (8006e74 <LL_ADC_REG_StartConversion+0x20>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	2204      	movs	r2, #4
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006e6c:	46c0      	nop			; (mov r8, r8)
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	b002      	add	sp, #8
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	7fffffe8 	.word	0x7fffffe8

08006e78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2204      	movs	r2, #4
 8006e86:	4013      	ands	r3, r2
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d101      	bne.n	8006e90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	0018      	movs	r0, r3
 8006e94:	46bd      	mov	sp, r7
 8006e96:	b002      	add	sp, #8
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ea4:	231f      	movs	r3, #31
 8006ea6:	18fb      	adds	r3, r7, r3
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e17f      	b.n	80071c2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	0018      	movs	r0, r3
 8006ece:	f7fe ff55 	bl	8005d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2254      	movs	r2, #84	; 0x54
 8006edc:	2100      	movs	r1, #0
 8006ede:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f7ff ff5b 	bl	8006da0 <LL_ADC_IsInternalRegulatorEnabled>
 8006eea:	1e03      	subs	r3, r0, #0
 8006eec:	d115      	bne.n	8006f1a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7ff ff40 	bl	8006d78 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ef8:	4bb4      	ldr	r3, [pc, #720]	; (80071cc <HAL_ADC_Init+0x330>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	49b4      	ldr	r1, [pc, #720]	; (80071d0 <HAL_ADC_Init+0x334>)
 8006efe:	0018      	movs	r0, r3
 8006f00:	f7f9 f91a 	bl	8000138 <__udivsi3>
 8006f04:	0003      	movs	r3, r0
 8006f06:	3301      	adds	r3, #1
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006f0c:	e002      	b.n	8006f14 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f9      	bne.n	8006f0e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f7ff ff3e 	bl	8006da0 <LL_ADC_IsInternalRegulatorEnabled>
 8006f24:	1e03      	subs	r3, r0, #0
 8006f26:	d10f      	bne.n	8006f48 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	2210      	movs	r2, #16
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f38:	2201      	movs	r2, #1
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006f40:	231f      	movs	r3, #31
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f7ff ff93 	bl	8006e78 <LL_ADC_REG_IsConversionOngoing>
 8006f52:	0003      	movs	r3, r0
 8006f54:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5a:	2210      	movs	r2, #16
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	d000      	beq.n	8006f62 <HAL_ADC_Init+0xc6>
 8006f60:	e122      	b.n	80071a8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d000      	beq.n	8006f6a <HAL_ADC_Init+0xce>
 8006f68:	e11e      	b.n	80071a8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6e:	4a99      	ldr	r2, [pc, #612]	; (80071d4 <HAL_ADC_Init+0x338>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	2202      	movs	r2, #2
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f7ff ff46 	bl	8006e10 <LL_ADC_IsEnabled>
 8006f84:	1e03      	subs	r3, r0, #0
 8006f86:	d000      	beq.n	8006f8a <HAL_ADC_Init+0xee>
 8006f88:	e0ad      	b.n	80070e6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	7e1b      	ldrb	r3, [r3, #24]
 8006f92:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8006f94:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	7e5b      	ldrb	r3, [r3, #25]
 8006f9a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006f9c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	7e9b      	ldrb	r3, [r3, #26]
 8006fa2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006fa4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_ADC_Init+0x118>
 8006fae:	2380      	movs	r3, #128	; 0x80
 8006fb0:	015b      	lsls	r3, r3, #5
 8006fb2:	e000      	b.n	8006fb6 <HAL_ADC_Init+0x11a>
 8006fb4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006fb6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006fbc:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	da04      	bge.n	8006fd0 <HAL_ADC_Init+0x134>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	e001      	b.n	8006fd4 <HAL_ADC_Init+0x138>
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8006fd4:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	212c      	movs	r1, #44	; 0x2c
 8006fda:	5c5b      	ldrb	r3, [r3, r1]
 8006fdc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006fde:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	5c9b      	ldrb	r3, [r3, r2]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d115      	bne.n	800701c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	7e9b      	ldrb	r3, [r3, #26]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d105      	bne.n	8007004 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2280      	movs	r2, #128	; 0x80
 8006ffc:	0252      	lsls	r2, r2, #9
 8006ffe:	4313      	orrs	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	e00b      	b.n	800701c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007008:	2220      	movs	r2, #32
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007014:	2201      	movs	r2, #1
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007028:	23e0      	movs	r3, #224	; 0xe0
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007032:	4313      	orrs	r3, r2
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	4313      	orrs	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4a65      	ldr	r2, [pc, #404]	; (80071d8 <HAL_ADC_Init+0x33c>)
 8007042:	4013      	ands	r3, r2
 8007044:	0019      	movs	r1, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	430a      	orrs	r2, r1
 800704e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	0f9b      	lsrs	r3, r3, #30
 8007056:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800705c:	4313      	orrs	r3, r2
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	223c      	movs	r2, #60	; 0x3c
 8007068:	5c9b      	ldrb	r3, [r3, r2]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d111      	bne.n	8007092 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	0f9b      	lsrs	r3, r3, #30
 8007074:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800707a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8007080:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8007086:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	2201      	movs	r2, #1
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	4a50      	ldr	r2, [pc, #320]	; (80071dc <HAL_ADC_Init+0x340>)
 800709a:	4013      	ands	r3, r2
 800709c:	0019      	movs	r1, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	23c0      	movs	r3, #192	; 0xc0
 80070ae:	061b      	lsls	r3, r3, #24
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d018      	beq.n	80070e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80070b8:	2380      	movs	r3, #128	; 0x80
 80070ba:	05db      	lsls	r3, r3, #23
 80070bc:	429a      	cmp	r2, r3
 80070be:	d012      	beq.n	80070e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80070c4:	2380      	movs	r3, #128	; 0x80
 80070c6:	061b      	lsls	r3, r3, #24
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d00c      	beq.n	80070e6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80070cc:	4b44      	ldr	r3, [pc, #272]	; (80071e0 <HAL_ADC_Init+0x344>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a44      	ldr	r2, [pc, #272]	; (80071e4 <HAL_ADC_Init+0x348>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	0019      	movs	r1, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	23f0      	movs	r3, #240	; 0xf0
 80070dc:	039b      	lsls	r3, r3, #14
 80070de:	401a      	ands	r2, r3
 80070e0:	4b3f      	ldr	r3, [pc, #252]	; (80071e0 <HAL_ADC_Init+0x344>)
 80070e2:	430a      	orrs	r2, r1
 80070e4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	001a      	movs	r2, r3
 80070f0:	2100      	movs	r1, #0
 80070f2:	f7ff fd90 	bl	8006c16 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	493a      	ldr	r1, [pc, #232]	; (80071e8 <HAL_ADC_Init+0x34c>)
 8007100:	001a      	movs	r2, r3
 8007102:	f7ff fd88 	bl	8006c16 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2110      	movs	r1, #16
 800711a:	4249      	negs	r1, r1
 800711c:	430a      	orrs	r2, r1
 800711e:	629a      	str	r2, [r3, #40]	; 0x28
 8007120:	e018      	b.n	8007154 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	2380      	movs	r3, #128	; 0x80
 8007128:	039b      	lsls	r3, r3, #14
 800712a:	429a      	cmp	r2, r3
 800712c:	d112      	bne.n	8007154 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	3b01      	subs	r3, #1
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	221c      	movs	r2, #28
 800713e:	4013      	ands	r3, r2
 8007140:	2210      	movs	r2, #16
 8007142:	4252      	negs	r2, r2
 8007144:	409a      	lsls	r2, r3
 8007146:	0011      	movs	r1, r2
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2100      	movs	r1, #0
 800715a:	0018      	movs	r0, r3
 800715c:	f7ff fd78 	bl	8006c50 <LL_ADC_GetSamplingTimeCommonChannels>
 8007160:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007166:	429a      	cmp	r2, r3
 8007168:	d10b      	bne.n	8007182 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007174:	2203      	movs	r2, #3
 8007176:	4393      	bics	r3, r2
 8007178:	2201      	movs	r2, #1
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007180:	e01c      	b.n	80071bc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007186:	2212      	movs	r2, #18
 8007188:	4393      	bics	r3, r2
 800718a:	2210      	movs	r2, #16
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	2201      	movs	r2, #1
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800719e:	231f      	movs	r3, #31
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80071a6:	e009      	b.n	80071bc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ac:	2210      	movs	r2, #16
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80071b4:	231f      	movs	r3, #31
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	2201      	movs	r2, #1
 80071ba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80071bc:	231f      	movs	r3, #31
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	781b      	ldrb	r3, [r3, #0]
}
 80071c2:	0018      	movs	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b008      	add	sp, #32
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	2000000c 	.word	0x2000000c
 80071d0:	00030d40 	.word	0x00030d40
 80071d4:	fffffefd 	.word	0xfffffefd
 80071d8:	fffe0201 	.word	0xfffe0201
 80071dc:	1ffffc02 	.word	0x1ffffc02
 80071e0:	40012708 	.word	0x40012708
 80071e4:	ffc3ffff 	.word	0xffc3ffff
 80071e8:	07ffff04 	.word	0x07ffff04

080071ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80071ec:	b5b0      	push	{r4, r5, r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	0018      	movs	r0, r3
 80071fe:	f7ff fe3b 	bl	8006e78 <LL_ADC_REG_IsConversionOngoing>
 8007202:	1e03      	subs	r3, r0, #0
 8007204:	d16c      	bne.n	80072e0 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2254      	movs	r2, #84	; 0x54
 800720a:	5c9b      	ldrb	r3, [r3, r2]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_ADC_Start_DMA+0x28>
 8007210:	2302      	movs	r3, #2
 8007212:	e06c      	b.n	80072ee <HAL_ADC_Start_DMA+0x102>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2254      	movs	r2, #84	; 0x54
 8007218:	2101      	movs	r1, #1
 800721a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	4013      	ands	r3, r2
 8007226:	d113      	bne.n	8007250 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	0018      	movs	r0, r3
 800722e:	f7ff fdef 	bl	8006e10 <LL_ADC_IsEnabled>
 8007232:	1e03      	subs	r3, r0, #0
 8007234:	d004      	beq.n	8007240 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	0018      	movs	r0, r3
 800723c:	f7ff fdd6 	bl	8006dec <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2101      	movs	r1, #1
 800724c:	430a      	orrs	r2, r1
 800724e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007250:	2517      	movs	r5, #23
 8007252:	197c      	adds	r4, r7, r5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	0018      	movs	r0, r3
 8007258:	f000 fb5e 	bl	8007918 <ADC_Enable>
 800725c:	0003      	movs	r3, r0
 800725e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007260:	002c      	movs	r4, r5
 8007262:	193b      	adds	r3, r7, r4
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d13e      	bne.n	80072e8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726e:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <HAL_ADC_Start_DMA+0x10c>)
 8007270:	4013      	ands	r3, r2
 8007272:	2280      	movs	r2, #128	; 0x80
 8007274:	0052      	lsls	r2, r2, #1
 8007276:	431a      	orrs	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007286:	4a1d      	ldr	r2, [pc, #116]	; (80072fc <HAL_ADC_Start_DMA+0x110>)
 8007288:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728e:	4a1c      	ldr	r2, [pc, #112]	; (8007300 <HAL_ADC_Start_DMA+0x114>)
 8007290:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007296:	4a1b      	ldr	r2, [pc, #108]	; (8007304 <HAL_ADC_Start_DMA+0x118>)
 8007298:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	221c      	movs	r2, #28
 80072a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2254      	movs	r2, #84	; 0x54
 80072a6:	2100      	movs	r1, #0
 80072a8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2110      	movs	r1, #16
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3340      	adds	r3, #64	; 0x40
 80072c4:	0019      	movs	r1, r3
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	193c      	adds	r4, r7, r4
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f000 ff7c 	bl	80081c8 <HAL_DMA_Start_IT>
 80072d0:	0003      	movs	r3, r0
 80072d2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	0018      	movs	r0, r3
 80072da:	f7ff fdbb 	bl	8006e54 <LL_ADC_REG_StartConversion>
 80072de:	e003      	b.n	80072e8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80072e0:	2317      	movs	r3, #23
 80072e2:	18fb      	adds	r3, r7, r3
 80072e4:	2202      	movs	r2, #2
 80072e6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80072e8:	2317      	movs	r3, #23
 80072ea:	18fb      	adds	r3, r7, r3
 80072ec:	781b      	ldrb	r3, [r3, #0]
}
 80072ee:	0018      	movs	r0, r3
 80072f0:	46bd      	mov	sp, r7
 80072f2:	b006      	add	sp, #24
 80072f4:	bdb0      	pop	{r4, r5, r7, pc}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	fffff0fe 	.word	0xfffff0fe
 80072fc:	08007ae1 	.word	0x08007ae1
 8007300:	08007ba9 	.word	0x08007ba9
 8007304:	08007bc7 	.word	0x08007bc7

08007308 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2202      	movs	r2, #2
 8007328:	4013      	ands	r3, r2
 800732a:	d017      	beq.n	800735c <HAL_ADC_IRQHandler+0x54>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2202      	movs	r2, #2
 8007330:	4013      	ands	r3, r2
 8007332:	d013      	beq.n	800735c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007338:	2210      	movs	r2, #16
 800733a:	4013      	ands	r3, r2
 800733c:	d106      	bne.n	800734c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007342:	2280      	movs	r2, #128	; 0x80
 8007344:	0112      	lsls	r2, r2, #4
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	0018      	movs	r0, r3
 8007350:	f000 fdba 	bl	8007ec8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2202      	movs	r2, #2
 800735a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2204      	movs	r2, #4
 8007360:	4013      	ands	r3, r2
 8007362:	d003      	beq.n	800736c <HAL_ADC_IRQHandler+0x64>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2204      	movs	r2, #4
 8007368:	4013      	ands	r3, r2
 800736a:	d107      	bne.n	800737c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	2208      	movs	r2, #8
 8007370:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007372:	d04d      	beq.n	8007410 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2208      	movs	r2, #8
 8007378:	4013      	ands	r3, r2
 800737a:	d049      	beq.n	8007410 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007380:	2210      	movs	r2, #16
 8007382:	4013      	ands	r3, r2
 8007384:	d106      	bne.n	8007394 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738a:	2280      	movs	r2, #128	; 0x80
 800738c:	0092      	lsls	r2, r2, #2
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	0018      	movs	r0, r3
 800739a:	f7ff fc70 	bl	8006c7e <LL_ADC_REG_IsTriggerSourceSWStart>
 800739e:	1e03      	subs	r3, r0, #0
 80073a0:	d02e      	beq.n	8007400 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7e9b      	ldrb	r3, [r3, #26]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d12a      	bne.n	8007400 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2208      	movs	r2, #8
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d123      	bne.n	8007400 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	0018      	movs	r0, r3
 80073be:	f7ff fd5b 	bl	8006e78 <LL_ADC_REG_IsConversionOngoing>
 80073c2:	1e03      	subs	r3, r0, #0
 80073c4:	d110      	bne.n	80073e8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	210c      	movs	r1, #12
 80073d2:	438a      	bics	r2, r1
 80073d4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073da:	4a56      	ldr	r2, [pc, #344]	; (8007534 <HAL_ADC_IRQHandler+0x22c>)
 80073dc:	4013      	ands	r3, r2
 80073de:	2201      	movs	r2, #1
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	659a      	str	r2, [r3, #88]	; 0x58
 80073e6:	e00b      	b.n	8007400 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ec:	2220      	movs	r2, #32
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f8:	2201      	movs	r2, #1
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	0018      	movs	r0, r3
 8007404:	f7fc fc98 	bl	8003d38 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	220c      	movs	r2, #12
 800740e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2280      	movs	r2, #128	; 0x80
 8007414:	4013      	ands	r3, r2
 8007416:	d012      	beq.n	800743e <HAL_ADC_IRQHandler+0x136>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2280      	movs	r2, #128	; 0x80
 800741c:	4013      	ands	r3, r2
 800741e:	d00e      	beq.n	800743e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007424:	2280      	movs	r2, #128	; 0x80
 8007426:	0252      	lsls	r2, r2, #9
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	0018      	movs	r0, r3
 8007432:	f000 f889 	bl	8007548 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2280      	movs	r2, #128	; 0x80
 800743c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	2380      	movs	r3, #128	; 0x80
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	4013      	ands	r3, r2
 8007446:	d014      	beq.n	8007472 <HAL_ADC_IRQHandler+0x16a>
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	4013      	ands	r3, r2
 8007450:	d00f      	beq.n	8007472 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	0292      	lsls	r2, r2, #10
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	0018      	movs	r0, r3
 8007464:	f000 fd20 	bl	8007ea8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	0052      	lsls	r2, r2, #1
 8007470:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	2380      	movs	r3, #128	; 0x80
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4013      	ands	r3, r2
 800747a:	d014      	beq.n	80074a6 <HAL_ADC_IRQHandler+0x19e>
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	2380      	movs	r3, #128	; 0x80
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4013      	ands	r3, r2
 8007484:	d00f      	beq.n	80074a6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	2280      	movs	r2, #128	; 0x80
 800748c:	02d2      	lsls	r2, r2, #11
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	0018      	movs	r0, r3
 8007498:	f000 fd0e 	bl	8007eb8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2280      	movs	r2, #128	; 0x80
 80074a2:	0092      	lsls	r2, r2, #2
 80074a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	2210      	movs	r2, #16
 80074aa:	4013      	ands	r3, r2
 80074ac:	d02b      	beq.n	8007506 <HAL_ADC_IRQHandler+0x1fe>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2210      	movs	r2, #16
 80074b2:	4013      	ands	r3, r2
 80074b4:	d027      	beq.n	8007506 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d102      	bne.n	80074c4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80074be:	2301      	movs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	e008      	b.n	80074d6 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	0018      	movs	r0, r3
 80074ca:	f7ff fc2c 	bl	8006d26 <LL_ADC_REG_GetDMATransfer>
 80074ce:	1e03      	subs	r3, r0, #0
 80074d0:	d001      	beq.n	80074d6 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80074d2:	2301      	movs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d110      	bne.n	80074fe <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e0:	2280      	movs	r2, #128	; 0x80
 80074e2:	00d2      	lsls	r2, r2, #3
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ee:	2202      	movs	r2, #2
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	0018      	movs	r0, r3
 80074fa:	f000 f82d 	bl	8007558 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2210      	movs	r2, #16
 8007504:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	2380      	movs	r3, #128	; 0x80
 800750a:	019b      	lsls	r3, r3, #6
 800750c:	4013      	ands	r3, r2
 800750e:	d00d      	beq.n	800752c <HAL_ADC_IRQHandler+0x224>
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	2380      	movs	r3, #128	; 0x80
 8007514:	019b      	lsls	r3, r3, #6
 8007516:	4013      	ands	r3, r2
 8007518:	d008      	beq.n	800752c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0018      	movs	r0, r3
 800751e:	f000 fcdb 	bl	8007ed8 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2280      	movs	r2, #128	; 0x80
 8007528:	0192      	lsls	r2, r2, #6
 800752a:	601a      	str	r2, [r3, #0]
  }
}
 800752c:	46c0      	nop			; (mov r8, r8)
 800752e:	46bd      	mov	sp, r7
 8007530:	b006      	add	sp, #24
 8007532:	bd80      	pop	{r7, pc}
 8007534:	fffffefe 	.word	0xfffffefe

08007538 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007540:	46c0      	nop			; (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	b002      	add	sp, #8
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	46bd      	mov	sp, r7
 8007554:	b002      	add	sp, #8
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007560:	46c0      	nop			; (mov r8, r8)
 8007562:	46bd      	mov	sp, r7
 8007564:	b002      	add	sp, #8
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007572:	2317      	movs	r3, #23
 8007574:	18fb      	adds	r3, r7, r3
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2254      	movs	r2, #84	; 0x54
 8007582:	5c9b      	ldrb	r3, [r3, r2]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_ADC_ConfigChannel+0x24>
 8007588:	2302      	movs	r3, #2
 800758a:	e1c0      	b.n	800790e <HAL_ADC_ConfigChannel+0x3a6>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2254      	movs	r2, #84	; 0x54
 8007590:	2101      	movs	r1, #1
 8007592:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	0018      	movs	r0, r3
 800759a:	f7ff fc6d 	bl	8006e78 <LL_ADC_REG_IsConversionOngoing>
 800759e:	1e03      	subs	r3, r0, #0
 80075a0:	d000      	beq.n	80075a4 <HAL_ADC_ConfigChannel+0x3c>
 80075a2:	e1a3      	b.n	80078ec <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d100      	bne.n	80075ae <HAL_ADC_ConfigChannel+0x46>
 80075ac:	e143      	b.n	8007836 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	2380      	movs	r3, #128	; 0x80
 80075b4:	061b      	lsls	r3, r3, #24
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d004      	beq.n	80075c4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80075be:	4ac1      	ldr	r2, [pc, #772]	; (80078c4 <HAL_ADC_ConfigChannel+0x35c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d108      	bne.n	80075d6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	0019      	movs	r1, r3
 80075ce:	0010      	movs	r0, r2
 80075d0:	f7ff fb86 	bl	8006ce0 <LL_ADC_REG_SetSequencerChAdd>
 80075d4:	e0c9      	b.n	800776a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	211f      	movs	r1, #31
 80075e0:	400b      	ands	r3, r1
 80075e2:	210f      	movs	r1, #15
 80075e4:	4099      	lsls	r1, r3
 80075e6:	000b      	movs	r3, r1
 80075e8:	43db      	mvns	r3, r3
 80075ea:	4013      	ands	r3, r2
 80075ec:	0019      	movs	r1, r3
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	035b      	lsls	r3, r3, #13
 80075f4:	0b5b      	lsrs	r3, r3, #13
 80075f6:	d105      	bne.n	8007604 <HAL_ADC_ConfigChannel+0x9c>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	0e9b      	lsrs	r3, r3, #26
 80075fe:	221f      	movs	r2, #31
 8007600:	4013      	ands	r3, r2
 8007602:	e098      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2201      	movs	r2, #1
 800760a:	4013      	ands	r3, r2
 800760c:	d000      	beq.n	8007610 <HAL_ADC_ConfigChannel+0xa8>
 800760e:	e091      	b.n	8007734 <HAL_ADC_ConfigChannel+0x1cc>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2202      	movs	r2, #2
 8007616:	4013      	ands	r3, r2
 8007618:	d000      	beq.n	800761c <HAL_ADC_ConfigChannel+0xb4>
 800761a:	e089      	b.n	8007730 <HAL_ADC_ConfigChannel+0x1c8>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2204      	movs	r2, #4
 8007622:	4013      	ands	r3, r2
 8007624:	d000      	beq.n	8007628 <HAL_ADC_ConfigChannel+0xc0>
 8007626:	e081      	b.n	800772c <HAL_ADC_ConfigChannel+0x1c4>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2208      	movs	r2, #8
 800762e:	4013      	ands	r3, r2
 8007630:	d000      	beq.n	8007634 <HAL_ADC_ConfigChannel+0xcc>
 8007632:	e079      	b.n	8007728 <HAL_ADC_ConfigChannel+0x1c0>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2210      	movs	r2, #16
 800763a:	4013      	ands	r3, r2
 800763c:	d000      	beq.n	8007640 <HAL_ADC_ConfigChannel+0xd8>
 800763e:	e071      	b.n	8007724 <HAL_ADC_ConfigChannel+0x1bc>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2220      	movs	r2, #32
 8007646:	4013      	ands	r3, r2
 8007648:	d000      	beq.n	800764c <HAL_ADC_ConfigChannel+0xe4>
 800764a:	e069      	b.n	8007720 <HAL_ADC_ConfigChannel+0x1b8>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2240      	movs	r2, #64	; 0x40
 8007652:	4013      	ands	r3, r2
 8007654:	d000      	beq.n	8007658 <HAL_ADC_ConfigChannel+0xf0>
 8007656:	e061      	b.n	800771c <HAL_ADC_ConfigChannel+0x1b4>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2280      	movs	r2, #128	; 0x80
 800765e:	4013      	ands	r3, r2
 8007660:	d000      	beq.n	8007664 <HAL_ADC_ConfigChannel+0xfc>
 8007662:	e059      	b.n	8007718 <HAL_ADC_ConfigChannel+0x1b0>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	2380      	movs	r3, #128	; 0x80
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	4013      	ands	r3, r2
 800766e:	d151      	bne.n	8007714 <HAL_ADC_ConfigChannel+0x1ac>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4013      	ands	r3, r2
 800767a:	d149      	bne.n	8007710 <HAL_ADC_ConfigChannel+0x1a8>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	2380      	movs	r3, #128	; 0x80
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	4013      	ands	r3, r2
 8007686:	d141      	bne.n	800770c <HAL_ADC_ConfigChannel+0x1a4>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	2380      	movs	r3, #128	; 0x80
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	4013      	ands	r3, r2
 8007692:	d139      	bne.n	8007708 <HAL_ADC_ConfigChannel+0x1a0>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	2380      	movs	r3, #128	; 0x80
 800769a:	015b      	lsls	r3, r3, #5
 800769c:	4013      	ands	r3, r2
 800769e:	d131      	bne.n	8007704 <HAL_ADC_ConfigChannel+0x19c>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	019b      	lsls	r3, r3, #6
 80076a8:	4013      	ands	r3, r2
 80076aa:	d129      	bne.n	8007700 <HAL_ADC_ConfigChannel+0x198>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	2380      	movs	r3, #128	; 0x80
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	4013      	ands	r3, r2
 80076b6:	d121      	bne.n	80076fc <HAL_ADC_ConfigChannel+0x194>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	2380      	movs	r3, #128	; 0x80
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	4013      	ands	r3, r2
 80076c2:	d119      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x190>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	025b      	lsls	r3, r3, #9
 80076cc:	4013      	ands	r3, r2
 80076ce:	d111      	bne.n	80076f4 <HAL_ADC_ConfigChannel+0x18c>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	2380      	movs	r3, #128	; 0x80
 80076d6:	029b      	lsls	r3, r3, #10
 80076d8:	4013      	ands	r3, r2
 80076da:	d109      	bne.n	80076f0 <HAL_ADC_ConfigChannel+0x188>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	02db      	lsls	r3, r3, #11
 80076e4:	4013      	ands	r3, r2
 80076e6:	d001      	beq.n	80076ec <HAL_ADC_ConfigChannel+0x184>
 80076e8:	2312      	movs	r3, #18
 80076ea:	e024      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 80076ec:	2300      	movs	r3, #0
 80076ee:	e022      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 80076f0:	2311      	movs	r3, #17
 80076f2:	e020      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 80076f4:	2310      	movs	r3, #16
 80076f6:	e01e      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 80076f8:	230f      	movs	r3, #15
 80076fa:	e01c      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 80076fc:	230e      	movs	r3, #14
 80076fe:	e01a      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007700:	230d      	movs	r3, #13
 8007702:	e018      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007704:	230c      	movs	r3, #12
 8007706:	e016      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007708:	230b      	movs	r3, #11
 800770a:	e014      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 800770c:	230a      	movs	r3, #10
 800770e:	e012      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007710:	2309      	movs	r3, #9
 8007712:	e010      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007714:	2308      	movs	r3, #8
 8007716:	e00e      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007718:	2307      	movs	r3, #7
 800771a:	e00c      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 800771c:	2306      	movs	r3, #6
 800771e:	e00a      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007720:	2305      	movs	r3, #5
 8007722:	e008      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007724:	2304      	movs	r3, #4
 8007726:	e006      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007728:	2303      	movs	r3, #3
 800772a:	e004      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 800772c:	2302      	movs	r3, #2
 800772e:	e002      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <HAL_ADC_ConfigChannel+0x1ce>
 8007734:	2300      	movs	r3, #0
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	6852      	ldr	r2, [r2, #4]
 800773a:	201f      	movs	r0, #31
 800773c:	4002      	ands	r2, r0
 800773e:	4093      	lsls	r3, r2
 8007740:	000a      	movs	r2, r1
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	089b      	lsrs	r3, r3, #2
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	429a      	cmp	r2, r3
 8007756:	d808      	bhi.n	800776a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	6859      	ldr	r1, [r3, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	001a      	movs	r2, r3
 8007766:	f7ff fa9b 	bl	8006ca0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6818      	ldr	r0, [r3, #0]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6819      	ldr	r1, [r3, #0]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	001a      	movs	r2, r3
 8007778:	f7ff fae2 	bl	8006d40 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	db00      	blt.n	8007786 <HAL_ADC_ConfigChannel+0x21e>
 8007784:	e0bc      	b.n	8007900 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007786:	4b50      	ldr	r3, [pc, #320]	; (80078c8 <HAL_ADC_ConfigChannel+0x360>)
 8007788:	0018      	movs	r0, r3
 800778a:	f7ff fa37 	bl	8006bfc <LL_ADC_GetCommonPathInternalCh>
 800778e:	0003      	movs	r3, r0
 8007790:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a4d      	ldr	r2, [pc, #308]	; (80078cc <HAL_ADC_ConfigChannel+0x364>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d122      	bne.n	80077e2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	2380      	movs	r3, #128	; 0x80
 80077a0:	041b      	lsls	r3, r3, #16
 80077a2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80077a4:	d11d      	bne.n	80077e2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2280      	movs	r2, #128	; 0x80
 80077aa:	0412      	lsls	r2, r2, #16
 80077ac:	4313      	orrs	r3, r2
 80077ae:	4a46      	ldr	r2, [pc, #280]	; (80078c8 <HAL_ADC_ConfigChannel+0x360>)
 80077b0:	0019      	movs	r1, r3
 80077b2:	0010      	movs	r0, r2
 80077b4:	f7ff fa0e 	bl	8006bd4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80077b8:	4b45      	ldr	r3, [pc, #276]	; (80078d0 <HAL_ADC_ConfigChannel+0x368>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4945      	ldr	r1, [pc, #276]	; (80078d4 <HAL_ADC_ConfigChannel+0x36c>)
 80077be:	0018      	movs	r0, r3
 80077c0:	f7f8 fcba 	bl	8000138 <__udivsi3>
 80077c4:	0003      	movs	r3, r0
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	0013      	movs	r3, r2
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	189b      	adds	r3, r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80077d2:	e002      	b.n	80077da <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f9      	bne.n	80077d4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80077e0:	e08e      	b.n	8007900 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a3c      	ldr	r2, [pc, #240]	; (80078d8 <HAL_ADC_ConfigChannel+0x370>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d10e      	bne.n	800780a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	2380      	movs	r3, #128	; 0x80
 80077f0:	045b      	lsls	r3, r3, #17
 80077f2:	4013      	ands	r3, r2
 80077f4:	d109      	bne.n	800780a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2280      	movs	r2, #128	; 0x80
 80077fa:	0452      	lsls	r2, r2, #17
 80077fc:	4313      	orrs	r3, r2
 80077fe:	4a32      	ldr	r2, [pc, #200]	; (80078c8 <HAL_ADC_ConfigChannel+0x360>)
 8007800:	0019      	movs	r1, r3
 8007802:	0010      	movs	r0, r2
 8007804:	f7ff f9e6 	bl	8006bd4 <LL_ADC_SetCommonPathInternalCh>
 8007808:	e07a      	b.n	8007900 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a33      	ldr	r2, [pc, #204]	; (80078dc <HAL_ADC_ConfigChannel+0x374>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d000      	beq.n	8007816 <HAL_ADC_ConfigChannel+0x2ae>
 8007814:	e074      	b.n	8007900 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	03db      	lsls	r3, r3, #15
 800781c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800781e:	d000      	beq.n	8007822 <HAL_ADC_ConfigChannel+0x2ba>
 8007820:	e06e      	b.n	8007900 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2280      	movs	r2, #128	; 0x80
 8007826:	03d2      	lsls	r2, r2, #15
 8007828:	4313      	orrs	r3, r2
 800782a:	4a27      	ldr	r2, [pc, #156]	; (80078c8 <HAL_ADC_ConfigChannel+0x360>)
 800782c:	0019      	movs	r1, r3
 800782e:	0010      	movs	r0, r2
 8007830:	f7ff f9d0 	bl	8006bd4 <LL_ADC_SetCommonPathInternalCh>
 8007834:	e064      	b.n	8007900 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	2380      	movs	r3, #128	; 0x80
 800783c:	061b      	lsls	r3, r3, #24
 800783e:	429a      	cmp	r2, r3
 8007840:	d004      	beq.n	800784c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007846:	4a1f      	ldr	r2, [pc, #124]	; (80078c4 <HAL_ADC_ConfigChannel+0x35c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d107      	bne.n	800785c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	0019      	movs	r1, r3
 8007856:	0010      	movs	r0, r2
 8007858:	f7ff fa53 	bl	8006d02 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	da4d      	bge.n	8007900 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007864:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <HAL_ADC_ConfigChannel+0x360>)
 8007866:	0018      	movs	r0, r3
 8007868:	f7ff f9c8 	bl	8006bfc <LL_ADC_GetCommonPathInternalCh>
 800786c:	0003      	movs	r3, r0
 800786e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a15      	ldr	r2, [pc, #84]	; (80078cc <HAL_ADC_ConfigChannel+0x364>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d108      	bne.n	800788c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4a18      	ldr	r2, [pc, #96]	; (80078e0 <HAL_ADC_ConfigChannel+0x378>)
 800787e:	4013      	ands	r3, r2
 8007880:	4a11      	ldr	r2, [pc, #68]	; (80078c8 <HAL_ADC_ConfigChannel+0x360>)
 8007882:	0019      	movs	r1, r3
 8007884:	0010      	movs	r0, r2
 8007886:	f7ff f9a5 	bl	8006bd4 <LL_ADC_SetCommonPathInternalCh>
 800788a:	e039      	b.n	8007900 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a11      	ldr	r2, [pc, #68]	; (80078d8 <HAL_ADC_ConfigChannel+0x370>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d108      	bne.n	80078a8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	4a12      	ldr	r2, [pc, #72]	; (80078e4 <HAL_ADC_ConfigChannel+0x37c>)
 800789a:	4013      	ands	r3, r2
 800789c:	4a0a      	ldr	r2, [pc, #40]	; (80078c8 <HAL_ADC_ConfigChannel+0x360>)
 800789e:	0019      	movs	r1, r3
 80078a0:	0010      	movs	r0, r2
 80078a2:	f7ff f997 	bl	8006bd4 <LL_ADC_SetCommonPathInternalCh>
 80078a6:	e02b      	b.n	8007900 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a0b      	ldr	r2, [pc, #44]	; (80078dc <HAL_ADC_ConfigChannel+0x374>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d126      	bne.n	8007900 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	4a0c      	ldr	r2, [pc, #48]	; (80078e8 <HAL_ADC_ConfigChannel+0x380>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	4a03      	ldr	r2, [pc, #12]	; (80078c8 <HAL_ADC_ConfigChannel+0x360>)
 80078ba:	0019      	movs	r1, r3
 80078bc:	0010      	movs	r0, r2
 80078be:	f7ff f989 	bl	8006bd4 <LL_ADC_SetCommonPathInternalCh>
 80078c2:	e01d      	b.n	8007900 <HAL_ADC_ConfigChannel+0x398>
 80078c4:	80000004 	.word	0x80000004
 80078c8:	40012708 	.word	0x40012708
 80078cc:	b0001000 	.word	0xb0001000
 80078d0:	2000000c 	.word	0x2000000c
 80078d4:	00030d40 	.word	0x00030d40
 80078d8:	b8004000 	.word	0xb8004000
 80078dc:	b4002000 	.word	0xb4002000
 80078e0:	ff7fffff 	.word	0xff7fffff
 80078e4:	feffffff 	.word	0xfeffffff
 80078e8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	2220      	movs	r2, #32
 80078f2:	431a      	orrs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80078f8:	2317      	movs	r3, #23
 80078fa:	18fb      	adds	r3, r7, r3
 80078fc:	2201      	movs	r2, #1
 80078fe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2254      	movs	r2, #84	; 0x54
 8007904:	2100      	movs	r1, #0
 8007906:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007908:	2317      	movs	r3, #23
 800790a:	18fb      	adds	r3, r7, r3
 800790c:	781b      	ldrb	r3, [r3, #0]
}
 800790e:	0018      	movs	r0, r3
 8007910:	46bd      	mov	sp, r7
 8007912:	b006      	add	sp, #24
 8007914:	bd80      	pop	{r7, pc}
 8007916:	46c0      	nop			; (mov r8, r8)

08007918 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007920:	2300      	movs	r3, #0
 8007922:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	0018      	movs	r0, r3
 800792a:	f7ff fa71 	bl	8006e10 <LL_ADC_IsEnabled>
 800792e:	1e03      	subs	r3, r0, #0
 8007930:	d000      	beq.n	8007934 <ADC_Enable+0x1c>
 8007932:	e069      	b.n	8007a08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	4a36      	ldr	r2, [pc, #216]	; (8007a14 <ADC_Enable+0xfc>)
 800793c:	4013      	ands	r3, r2
 800793e:	d00d      	beq.n	800795c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007944:	2210      	movs	r2, #16
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007950:	2201      	movs	r2, #1
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e056      	b.n	8007a0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	0018      	movs	r0, r3
 8007962:	f7ff fa31 	bl	8006dc8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8007966:	4b2c      	ldr	r3, [pc, #176]	; (8007a18 <ADC_Enable+0x100>)
 8007968:	0018      	movs	r0, r3
 800796a:	f7ff f947 	bl	8006bfc <LL_ADC_GetCommonPathInternalCh>
 800796e:	0002      	movs	r2, r0
 8007970:	2380      	movs	r3, #128	; 0x80
 8007972:	041b      	lsls	r3, r3, #16
 8007974:	4013      	ands	r3, r2
 8007976:	d00f      	beq.n	8007998 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007978:	4b28      	ldr	r3, [pc, #160]	; (8007a1c <ADC_Enable+0x104>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4928      	ldr	r1, [pc, #160]	; (8007a20 <ADC_Enable+0x108>)
 800797e:	0018      	movs	r0, r3
 8007980:	f7f8 fbda 	bl	8000138 <__udivsi3>
 8007984:	0003      	movs	r3, r0
 8007986:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8007988:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800798a:	e002      	b.n	8007992 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	3b01      	subs	r3, #1
 8007990:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f9      	bne.n	800798c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7e5b      	ldrb	r3, [r3, #25]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d033      	beq.n	8007a08 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80079a0:	f7ff f8d4 	bl	8006b4c <HAL_GetTick>
 80079a4:	0003      	movs	r3, r0
 80079a6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80079a8:	e027      	b.n	80079fa <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	0018      	movs	r0, r3
 80079b0:	f7ff fa2e 	bl	8006e10 <LL_ADC_IsEnabled>
 80079b4:	1e03      	subs	r3, r0, #0
 80079b6:	d104      	bne.n	80079c2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	0018      	movs	r0, r3
 80079be:	f7ff fa03 	bl	8006dc8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80079c2:	f7ff f8c3 	bl	8006b4c <HAL_GetTick>
 80079c6:	0002      	movs	r2, r0
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d914      	bls.n	80079fa <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2201      	movs	r2, #1
 80079d8:	4013      	ands	r3, r2
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d00d      	beq.n	80079fa <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e2:	2210      	movs	r2, #16
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ee:	2201      	movs	r2, #1
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e007      	b.n	8007a0a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2201      	movs	r2, #1
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d1d0      	bne.n	80079aa <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b004      	add	sp, #16
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	80000017 	.word	0x80000017
 8007a18:	40012708 	.word	0x40012708
 8007a1c:	2000000c 	.word	0x2000000c
 8007a20:	00030d40 	.word	0x00030d40

08007a24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7ff f9fe 	bl	8006e32 <LL_ADC_IsDisableOngoing>
 8007a36:	0003      	movs	r3, r0
 8007a38:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f7ff f9e6 	bl	8006e10 <LL_ADC_IsEnabled>
 8007a44:	1e03      	subs	r3, r0, #0
 8007a46:	d046      	beq.n	8007ad6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d143      	bne.n	8007ad6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2205      	movs	r2, #5
 8007a56:	4013      	ands	r3, r2
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d10d      	bne.n	8007a78 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f7ff f9c3 	bl	8006dec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2203      	movs	r2, #3
 8007a6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007a6e:	f7ff f86d 	bl	8006b4c <HAL_GetTick>
 8007a72:	0003      	movs	r3, r0
 8007a74:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007a76:	e028      	b.n	8007aca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7c:	2210      	movs	r2, #16
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a88:	2201      	movs	r2, #1
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e021      	b.n	8007ad8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007a94:	f7ff f85a 	bl	8006b4c <HAL_GetTick>
 8007a98:	0002      	movs	r2, r0
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d913      	bls.n	8007aca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	4013      	ands	r3, r2
 8007aac:	d00d      	beq.n	8007aca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab2:	2210      	movs	r2, #16
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007abe:	2201      	movs	r2, #1
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e006      	b.n	8007ad8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	d1de      	bne.n	8007a94 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	0018      	movs	r0, r3
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b004      	add	sp, #16
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af2:	2250      	movs	r2, #80	; 0x50
 8007af4:	4013      	ands	r3, r2
 8007af6:	d141      	bne.n	8007b7c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afc:	2280      	movs	r2, #128	; 0x80
 8007afe:	0092      	lsls	r2, r2, #2
 8007b00:	431a      	orrs	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff f8b7 	bl	8006c7e <LL_ADC_REG_IsTriggerSourceSWStart>
 8007b10:	1e03      	subs	r3, r0, #0
 8007b12:	d02e      	beq.n	8007b72 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	7e9b      	ldrb	r3, [r3, #26]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d12a      	bne.n	8007b72 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2208      	movs	r2, #8
 8007b24:	4013      	ands	r3, r2
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d123      	bne.n	8007b72 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f7ff f9a2 	bl	8006e78 <LL_ADC_REG_IsConversionOngoing>
 8007b34:	1e03      	subs	r3, r0, #0
 8007b36:	d110      	bne.n	8007b5a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	210c      	movs	r1, #12
 8007b44:	438a      	bics	r2, r1
 8007b46:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b4c:	4a15      	ldr	r2, [pc, #84]	; (8007ba4 <ADC_DMAConvCplt+0xc4>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2201      	movs	r2, #1
 8007b52:	431a      	orrs	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	659a      	str	r2, [r3, #88]	; 0x58
 8007b58:	e00b      	b.n	8007b72 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5e:	2220      	movs	r2, #32
 8007b60:	431a      	orrs	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	0018      	movs	r0, r3
 8007b76:	f7fc f8df 	bl	8003d38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007b7a:	e00f      	b.n	8007b9c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b80:	2210      	movs	r2, #16
 8007b82:	4013      	ands	r3, r2
 8007b84:	d004      	beq.n	8007b90 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	0018      	movs	r0, r3
 8007b8a:	f7ff fce5 	bl	8007558 <HAL_ADC_ErrorCallback>
}
 8007b8e:	e005      	b.n	8007b9c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	0010      	movs	r0, r2
 8007b9a:	4798      	blx	r3
}
 8007b9c:	46c0      	nop			; (mov r8, r8)
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b004      	add	sp, #16
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	fffffefe 	.word	0xfffffefe

08007ba8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	0018      	movs	r0, r3
 8007bba:	f7ff fcbd 	bl	8007538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	b004      	add	sp, #16
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd8:	2240      	movs	r2, #64	; 0x40
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be4:	2204      	movs	r2, #4
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f7ff fcb2 	bl	8007558 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007bf4:	46c0      	nop			; (mov r8, r8)
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b004      	add	sp, #16
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <LL_ADC_SetCalibrationFactor>:
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	22b4      	movs	r2, #180	; 0xb4
 8007c0a:	589b      	ldr	r3, [r3, r2]
 8007c0c:	227f      	movs	r2, #127	; 0x7f
 8007c0e:	4393      	bics	r3, r2
 8007c10:	001a      	movs	r2, r3
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	21b4      	movs	r1, #180	; 0xb4
 8007c1a:	505a      	str	r2, [r3, r1]
}
 8007c1c:	46c0      	nop			; (mov r8, r8)
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	b002      	add	sp, #8
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <LL_ADC_GetCalibrationFactor>:
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	22b4      	movs	r2, #180	; 0xb4
 8007c30:	589b      	ldr	r3, [r3, r2]
 8007c32:	227f      	movs	r2, #127	; 0x7f
 8007c34:	4013      	ands	r3, r2
}
 8007c36:	0018      	movs	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	b002      	add	sp, #8
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <LL_ADC_Enable>:
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <LL_ADC_Enable+0x20>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2201      	movs	r2, #1
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	609a      	str	r2, [r3, #8]
}
 8007c58:	46c0      	nop			; (mov r8, r8)
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b002      	add	sp, #8
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	7fffffe8 	.word	0x7fffffe8

08007c64 <LL_ADC_Disable>:
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	4a04      	ldr	r2, [pc, #16]	; (8007c84 <LL_ADC_Disable+0x20>)
 8007c72:	4013      	ands	r3, r2
 8007c74:	2202      	movs	r2, #2
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	609a      	str	r2, [r3, #8]
}
 8007c7c:	46c0      	nop			; (mov r8, r8)
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b002      	add	sp, #8
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	7fffffe8 	.word	0x7fffffe8

08007c88 <LL_ADC_IsEnabled>:
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2201      	movs	r2, #1
 8007c96:	4013      	ands	r3, r2
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d101      	bne.n	8007ca0 <LL_ADC_IsEnabled+0x18>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <LL_ADC_IsEnabled+0x1a>
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	b002      	add	sp, #8
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <LL_ADC_StartCalibration>:
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <LL_ADC_StartCalibration+0x24>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2280      	movs	r2, #128	; 0x80
 8007cbe:	0612      	lsls	r2, r2, #24
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	609a      	str	r2, [r3, #8]
}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	b002      	add	sp, #8
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	7fffffe8 	.word	0x7fffffe8

08007cd4 <LL_ADC_IsCalibrationOnGoing>:
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	0fdb      	lsrs	r3, r3, #31
 8007ce2:	07da      	lsls	r2, r3, #31
 8007ce4:	2380      	movs	r3, #128	; 0x80
 8007ce6:	061b      	lsls	r3, r3, #24
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d101      	bne.n	8007cf0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	b002      	add	sp, #8
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	b089      	sub	sp, #36	; 0x24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007d04:	2300      	movs	r3, #0
 8007d06:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2254      	movs	r2, #84	; 0x54
 8007d10:	5c9b      	ldrb	r3, [r3, r2]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <HAL_ADCEx_Calibration_Start+0x1e>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e0ba      	b.n	8007e90 <HAL_ADCEx_Calibration_Start+0x194>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2254      	movs	r2, #84	; 0x54
 8007d1e:	2101      	movs	r1, #1
 8007d20:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007d22:	2317      	movs	r3, #23
 8007d24:	18fc      	adds	r4, r7, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	0018      	movs	r0, r3
 8007d2a:	f7ff fe7b 	bl	8007a24 <ADC_Disable>
 8007d2e:	0003      	movs	r3, r0
 8007d30:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	0018      	movs	r0, r3
 8007d38:	f7ff ffa6 	bl	8007c88 <LL_ADC_IsEnabled>
 8007d3c:	1e03      	subs	r3, r0, #0
 8007d3e:	d000      	beq.n	8007d42 <HAL_ADCEx_Calibration_Start+0x46>
 8007d40:	e099      	b.n	8007e76 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d46:	4a54      	ldr	r2, [pc, #336]	; (8007e98 <HAL_ADCEx_Calibration_Start+0x19c>)
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	4a50      	ldr	r2, [pc, #320]	; (8007e9c <HAL_ADCEx_Calibration_Start+0x1a0>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	494d      	ldr	r1, [pc, #308]	; (8007ea0 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8007d6a:	400a      	ands	r2, r1
 8007d6c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007d6e:	2300      	movs	r3, #0
 8007d70:	61fb      	str	r3, [r7, #28]
 8007d72:	e02d      	b.n	8007dd0 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7ff ff97 	bl	8007cac <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007d7e:	e014      	b.n	8007daa <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	3301      	adds	r3, #1
 8007d84:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	4a46      	ldr	r2, [pc, #280]	; (8007ea4 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d90d      	bls.n	8007daa <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d92:	2212      	movs	r2, #18
 8007d94:	4393      	bics	r3, r2
 8007d96:	2210      	movs	r2, #16
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2254      	movs	r2, #84	; 0x54
 8007da2:	2100      	movs	r1, #0
 8007da4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e072      	b.n	8007e90 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	0018      	movs	r0, r3
 8007db0:	f7ff ff90 	bl	8007cd4 <LL_ADC_IsCalibrationOnGoing>
 8007db4:	1e03      	subs	r3, r0, #0
 8007db6:	d1e3      	bne.n	8007d80 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f7ff ff31 	bl	8007c24 <LL_ADC_GetCalibrationFactor>
 8007dc2:	0002      	movs	r2, r0
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	189b      	adds	r3, r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b07      	cmp	r3, #7
 8007dd4:	d9ce      	bls.n	8007d74 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007dd6:	69f9      	ldr	r1, [r7, #28]
 8007dd8:	69b8      	ldr	r0, [r7, #24]
 8007dda:	f7f8 f9ad 	bl	8000138 <__udivsi3>
 8007dde:	0003      	movs	r3, r0
 8007de0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	0018      	movs	r0, r3
 8007de8:	f7ff ff2a 	bl	8007c40 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	0011      	movs	r1, r2
 8007df4:	0018      	movs	r0, r3
 8007df6:	f7ff ff01 	bl	8007bfc <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f7ff ff30 	bl	8007c64 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007e04:	f7fe fea2 	bl	8006b4c <HAL_GetTick>
 8007e08:	0003      	movs	r3, r0
 8007e0a:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e0c:	e01b      	b.n	8007e46 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007e0e:	f7fe fe9d 	bl	8006b4c <HAL_GetTick>
 8007e12:	0002      	movs	r2, r0
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d914      	bls.n	8007e46 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	0018      	movs	r0, r3
 8007e22:	f7ff ff31 	bl	8007c88 <LL_ADC_IsEnabled>
 8007e26:	1e03      	subs	r3, r0, #0
 8007e28:	d00d      	beq.n	8007e46 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2e:	2210      	movs	r2, #16
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e024      	b.n	8007e90 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	f7ff ff1c 	bl	8007c88 <LL_ADC_IsEnabled>
 8007e50:	1e03      	subs	r3, r0, #0
 8007e52:	d1dc      	bne.n	8007e0e <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68d9      	ldr	r1, [r3, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e68:	2203      	movs	r2, #3
 8007e6a:	4393      	bics	r3, r2
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	659a      	str	r2, [r3, #88]	; 0x58
 8007e74:	e005      	b.n	8007e82 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7a:	2210      	movs	r2, #16
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2254      	movs	r2, #84	; 0x54
 8007e86:	2100      	movs	r1, #0
 8007e88:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007e8a:	2317      	movs	r3, #23
 8007e8c:	18fb      	adds	r3, r7, r3
 8007e8e:	781b      	ldrb	r3, [r3, #0]
}
 8007e90:	0018      	movs	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b009      	add	sp, #36	; 0x24
 8007e96:	bd90      	pop	{r4, r7, pc}
 8007e98:	fffffefd 	.word	0xfffffefd
 8007e9c:	00008003 	.word	0x00008003
 8007ea0:	ffff7ffc 	.word	0xffff7ffc
 8007ea4:	0002f1ff 	.word	0x0002f1ff

08007ea8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007eb0:	46c0      	nop			; (mov r8, r8)
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007ec0:	46c0      	nop			; (mov r8, r8)
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	b002      	add	sp, #8
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007ed0:	46c0      	nop			; (mov r8, r8)
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	b002      	add	sp, #8
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8007ee0:	46c0      	nop			; (mov r8, r8)
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	b002      	add	sp, #8
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <__NVIC_EnableIRQ>:
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	0002      	movs	r2, r0
 8007ef0:	1dfb      	adds	r3, r7, #7
 8007ef2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007ef4:	1dfb      	adds	r3, r7, #7
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8007efa:	d809      	bhi.n	8007f10 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007efc:	1dfb      	adds	r3, r7, #7
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	001a      	movs	r2, r3
 8007f02:	231f      	movs	r3, #31
 8007f04:	401a      	ands	r2, r3
 8007f06:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <__NVIC_EnableIRQ+0x30>)
 8007f08:	2101      	movs	r1, #1
 8007f0a:	4091      	lsls	r1, r2
 8007f0c:	000a      	movs	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]
}
 8007f10:	46c0      	nop			; (mov r8, r8)
 8007f12:	46bd      	mov	sp, r7
 8007f14:	b002      	add	sp, #8
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	e000e100 	.word	0xe000e100

08007f1c <__NVIC_SetPriority>:
{
 8007f1c:	b590      	push	{r4, r7, lr}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	0002      	movs	r2, r0
 8007f24:	6039      	str	r1, [r7, #0]
 8007f26:	1dfb      	adds	r3, r7, #7
 8007f28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f2a:	1dfb      	adds	r3, r7, #7
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f30:	d828      	bhi.n	8007f84 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f32:	4a2f      	ldr	r2, [pc, #188]	; (8007ff0 <__NVIC_SetPriority+0xd4>)
 8007f34:	1dfb      	adds	r3, r7, #7
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	089b      	lsrs	r3, r3, #2
 8007f3c:	33c0      	adds	r3, #192	; 0xc0
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	589b      	ldr	r3, [r3, r2]
 8007f42:	1dfa      	adds	r2, r7, #7
 8007f44:	7812      	ldrb	r2, [r2, #0]
 8007f46:	0011      	movs	r1, r2
 8007f48:	2203      	movs	r2, #3
 8007f4a:	400a      	ands	r2, r1
 8007f4c:	00d2      	lsls	r2, r2, #3
 8007f4e:	21ff      	movs	r1, #255	; 0xff
 8007f50:	4091      	lsls	r1, r2
 8007f52:	000a      	movs	r2, r1
 8007f54:	43d2      	mvns	r2, r2
 8007f56:	401a      	ands	r2, r3
 8007f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	019b      	lsls	r3, r3, #6
 8007f5e:	22ff      	movs	r2, #255	; 0xff
 8007f60:	401a      	ands	r2, r3
 8007f62:	1dfb      	adds	r3, r7, #7
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	0018      	movs	r0, r3
 8007f68:	2303      	movs	r3, #3
 8007f6a:	4003      	ands	r3, r0
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f70:	481f      	ldr	r0, [pc, #124]	; (8007ff0 <__NVIC_SetPriority+0xd4>)
 8007f72:	1dfb      	adds	r3, r7, #7
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b25b      	sxtb	r3, r3
 8007f78:	089b      	lsrs	r3, r3, #2
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	33c0      	adds	r3, #192	; 0xc0
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	501a      	str	r2, [r3, r0]
}
 8007f82:	e031      	b.n	8007fe8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f84:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <__NVIC_SetPriority+0xd8>)
 8007f86:	1dfb      	adds	r3, r7, #7
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	0019      	movs	r1, r3
 8007f8c:	230f      	movs	r3, #15
 8007f8e:	400b      	ands	r3, r1
 8007f90:	3b08      	subs	r3, #8
 8007f92:	089b      	lsrs	r3, r3, #2
 8007f94:	3306      	adds	r3, #6
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	18d3      	adds	r3, r2, r3
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	1dfa      	adds	r2, r7, #7
 8007fa0:	7812      	ldrb	r2, [r2, #0]
 8007fa2:	0011      	movs	r1, r2
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	400a      	ands	r2, r1
 8007fa8:	00d2      	lsls	r2, r2, #3
 8007faa:	21ff      	movs	r1, #255	; 0xff
 8007fac:	4091      	lsls	r1, r2
 8007fae:	000a      	movs	r2, r1
 8007fb0:	43d2      	mvns	r2, r2
 8007fb2:	401a      	ands	r2, r3
 8007fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	019b      	lsls	r3, r3, #6
 8007fba:	22ff      	movs	r2, #255	; 0xff
 8007fbc:	401a      	ands	r2, r3
 8007fbe:	1dfb      	adds	r3, r7, #7
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	4003      	ands	r3, r0
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007fcc:	4809      	ldr	r0, [pc, #36]	; (8007ff4 <__NVIC_SetPriority+0xd8>)
 8007fce:	1dfb      	adds	r3, r7, #7
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	001c      	movs	r4, r3
 8007fd4:	230f      	movs	r3, #15
 8007fd6:	4023      	ands	r3, r4
 8007fd8:	3b08      	subs	r3, #8
 8007fda:	089b      	lsrs	r3, r3, #2
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	3306      	adds	r3, #6
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	18c3      	adds	r3, r0, r3
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	601a      	str	r2, [r3, #0]
}
 8007fe8:	46c0      	nop			; (mov r8, r8)
 8007fea:	46bd      	mov	sp, r7
 8007fec:	b003      	add	sp, #12
 8007fee:	bd90      	pop	{r4, r7, pc}
 8007ff0:	e000e100 	.word	0xe000e100
 8007ff4:	e000ed00 	.word	0xe000ed00

08007ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	1e5a      	subs	r2, r3, #1
 8008004:	2380      	movs	r3, #128	; 0x80
 8008006:	045b      	lsls	r3, r3, #17
 8008008:	429a      	cmp	r2, r3
 800800a:	d301      	bcc.n	8008010 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800800c:	2301      	movs	r3, #1
 800800e:	e010      	b.n	8008032 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008010:	4b0a      	ldr	r3, [pc, #40]	; (800803c <SysTick_Config+0x44>)
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	3a01      	subs	r2, #1
 8008016:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008018:	2301      	movs	r3, #1
 800801a:	425b      	negs	r3, r3
 800801c:	2103      	movs	r1, #3
 800801e:	0018      	movs	r0, r3
 8008020:	f7ff ff7c 	bl	8007f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <SysTick_Config+0x44>)
 8008026:	2200      	movs	r2, #0
 8008028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800802a:	4b04      	ldr	r3, [pc, #16]	; (800803c <SysTick_Config+0x44>)
 800802c:	2207      	movs	r2, #7
 800802e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008030:	2300      	movs	r3, #0
}
 8008032:	0018      	movs	r0, r3
 8008034:	46bd      	mov	sp, r7
 8008036:	b002      	add	sp, #8
 8008038:	bd80      	pop	{r7, pc}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	e000e010 	.word	0xe000e010

08008040 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	607a      	str	r2, [r7, #4]
 800804a:	210f      	movs	r1, #15
 800804c:	187b      	adds	r3, r7, r1
 800804e:	1c02      	adds	r2, r0, #0
 8008050:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	187b      	adds	r3, r7, r1
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	b25b      	sxtb	r3, r3
 800805a:	0011      	movs	r1, r2
 800805c:	0018      	movs	r0, r3
 800805e:	f7ff ff5d 	bl	8007f1c <__NVIC_SetPriority>
}
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	46bd      	mov	sp, r7
 8008066:	b004      	add	sp, #16
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	0002      	movs	r2, r0
 8008072:	1dfb      	adds	r3, r7, #7
 8008074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008076:	1dfb      	adds	r3, r7, #7
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b25b      	sxtb	r3, r3
 800807c:	0018      	movs	r0, r3
 800807e:	f7ff ff33 	bl	8007ee8 <__NVIC_EnableIRQ>
}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	46bd      	mov	sp, r7
 8008086:	b002      	add	sp, #8
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0018      	movs	r0, r3
 8008096:	f7ff ffaf 	bl	8007ff8 <SysTick_Config>
 800809a:	0003      	movs	r3, r0
}
 800809c:	0018      	movs	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	b002      	add	sp, #8
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80080a8:	f7fb fe72 	bl	8003d90 <HAL_SYSTICK_Callback>
}
 80080ac:	46c0      	nop			; (mov r8, r8)
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e077      	b.n	80081b6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a3d      	ldr	r2, [pc, #244]	; (80081c0 <HAL_DMA_Init+0x10c>)
 80080cc:	4694      	mov	ip, r2
 80080ce:	4463      	add	r3, ip
 80080d0:	2114      	movs	r1, #20
 80080d2:	0018      	movs	r0, r3
 80080d4:	f7f8 f830 	bl	8000138 <__udivsi3>
 80080d8:	0003      	movs	r3, r0
 80080da:	009a      	lsls	r2, r3, #2
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2225      	movs	r2, #37	; 0x25
 80080e4:	2102      	movs	r1, #2
 80080e6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4934      	ldr	r1, [pc, #208]	; (80081c4 <HAL_DMA_Init+0x110>)
 80080f4:	400a      	ands	r2, r1
 80080f6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6819      	ldr	r1, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	431a      	orrs	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	431a      	orrs	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	0018      	movs	r0, r3
 8008132:	f000 fa8d 	bl	8008650 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689a      	ldr	r2, [r3, #8]
 800813a:	2380      	movs	r3, #128	; 0x80
 800813c:	01db      	lsls	r3, r3, #7
 800813e:	429a      	cmp	r2, r3
 8008140:	d102      	bne.n	8008148 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008150:	213f      	movs	r1, #63	; 0x3f
 8008152:	400a      	ands	r2, r1
 8008154:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800815e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d011      	beq.n	800818c <HAL_DMA_Init+0xd8>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2b04      	cmp	r3, #4
 800816e:	d80d      	bhi.n	800818c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	0018      	movs	r0, r3
 8008174:	f000 fa98 	bl	80086a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008188:	605a      	str	r2, [r3, #4]
 800818a:	e008      	b.n	800819e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2225      	movs	r2, #37	; 0x25
 80081a8:	2101      	movs	r1, #1
 80081aa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2224      	movs	r2, #36	; 0x24
 80081b0:	2100      	movs	r1, #0
 80081b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	0018      	movs	r0, r3
 80081b8:	46bd      	mov	sp, r7
 80081ba:	b002      	add	sp, #8
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	bffdfff8 	.word	0xbffdfff8
 80081c4:	ffff800f 	.word	0xffff800f

080081c8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2317      	movs	r3, #23
 80081d8:	18fb      	adds	r3, r7, r3
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2224      	movs	r2, #36	; 0x24
 80081e2:	5c9b      	ldrb	r3, [r3, r2]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d101      	bne.n	80081ec <HAL_DMA_Start_IT+0x24>
 80081e8:	2302      	movs	r3, #2
 80081ea:	e06f      	b.n	80082cc <HAL_DMA_Start_IT+0x104>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2224      	movs	r2, #36	; 0x24
 80081f0:	2101      	movs	r1, #1
 80081f2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2225      	movs	r2, #37	; 0x25
 80081f8:	5c9b      	ldrb	r3, [r3, r2]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d157      	bne.n	80082b0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2225      	movs	r2, #37	; 0x25
 8008204:	2102      	movs	r1, #2
 8008206:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2101      	movs	r1, #1
 800821a:	438a      	bics	r2, r1
 800821c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f9d3 	bl	80085d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822e:	2b00      	cmp	r3, #0
 8008230:	d008      	beq.n	8008244 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	210e      	movs	r1, #14
 800823e:	430a      	orrs	r2, r1
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e00f      	b.n	8008264 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2104      	movs	r1, #4
 8008250:	438a      	bics	r2, r1
 8008252:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	210a      	movs	r1, #10
 8008260:	430a      	orrs	r2, r1
 8008262:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	2380      	movs	r3, #128	; 0x80
 800826c:	025b      	lsls	r3, r3, #9
 800826e:	4013      	ands	r3, r2
 8008270:	d008      	beq.n	8008284 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827c:	2180      	movs	r1, #128	; 0x80
 800827e:	0049      	lsls	r1, r1, #1
 8008280:	430a      	orrs	r2, r1
 8008282:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008296:	2180      	movs	r1, #128	; 0x80
 8008298:	0049      	lsls	r1, r1, #1
 800829a:	430a      	orrs	r2, r1
 800829c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2101      	movs	r1, #1
 80082aa:	430a      	orrs	r2, r1
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e00a      	b.n	80082c6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2280      	movs	r2, #128	; 0x80
 80082b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2224      	movs	r2, #36	; 0x24
 80082ba:	2100      	movs	r1, #0
 80082bc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80082be:	2317      	movs	r3, #23
 80082c0:	18fb      	adds	r3, r7, r3
 80082c2:	2201      	movs	r2, #1
 80082c4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80082c6:	2317      	movs	r3, #23
 80082c8:	18fb      	adds	r3, r7, r3
 80082ca:	781b      	ldrb	r3, [r3, #0]
}
 80082cc:	0018      	movs	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b006      	add	sp, #24
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e050      	b.n	8008388 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2225      	movs	r2, #37	; 0x25
 80082ea:	5c9b      	ldrb	r3, [r3, r2]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d008      	beq.n	8008304 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2204      	movs	r2, #4
 80082f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2224      	movs	r2, #36	; 0x24
 80082fc:	2100      	movs	r1, #0
 80082fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e041      	b.n	8008388 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	210e      	movs	r1, #14
 8008310:	438a      	bics	r2, r1
 8008312:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831e:	491c      	ldr	r1, [pc, #112]	; (8008390 <HAL_DMA_Abort+0xbc>)
 8008320:	400a      	ands	r2, r1
 8008322:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2101      	movs	r1, #1
 8008330:	438a      	bics	r2, r1
 8008332:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8008334:	4b17      	ldr	r3, [pc, #92]	; (8008394 <HAL_DMA_Abort+0xc0>)
 8008336:	6859      	ldr	r1, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833c:	221c      	movs	r2, #28
 800833e:	4013      	ands	r3, r2
 8008340:	2201      	movs	r2, #1
 8008342:	409a      	lsls	r2, r3
 8008344:	4b13      	ldr	r3, [pc, #76]	; (8008394 <HAL_DMA_Abort+0xc0>)
 8008346:	430a      	orrs	r2, r1
 8008348:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008352:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00c      	beq.n	8008376 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008366:	490a      	ldr	r1, [pc, #40]	; (8008390 <HAL_DMA_Abort+0xbc>)
 8008368:	400a      	ands	r2, r1
 800836a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008374:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2225      	movs	r2, #37	; 0x25
 800837a:	2101      	movs	r1, #1
 800837c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2224      	movs	r2, #36	; 0x24
 8008382:	2100      	movs	r1, #0
 8008384:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	0018      	movs	r0, r3
 800838a:	46bd      	mov	sp, r7
 800838c:	b002      	add	sp, #8
 800838e:	bd80      	pop	{r7, pc}
 8008390:	fffffeff 	.word	0xfffffeff
 8008394:	40020000 	.word	0x40020000

08008398 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083a0:	210f      	movs	r1, #15
 80083a2:	187b      	adds	r3, r7, r1
 80083a4:	2200      	movs	r2, #0
 80083a6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2225      	movs	r2, #37	; 0x25
 80083ac:	5c9b      	ldrb	r3, [r3, r2]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d006      	beq.n	80083c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2204      	movs	r2, #4
 80083b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80083ba:	187b      	adds	r3, r7, r1
 80083bc:	2201      	movs	r2, #1
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	e049      	b.n	8008456 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	210e      	movs	r1, #14
 80083ce:	438a      	bics	r2, r1
 80083d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2101      	movs	r1, #1
 80083de:	438a      	bics	r2, r1
 80083e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ec:	491d      	ldr	r1, [pc, #116]	; (8008464 <HAL_DMA_Abort_IT+0xcc>)
 80083ee:	400a      	ands	r2, r1
 80083f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80083f2:	4b1d      	ldr	r3, [pc, #116]	; (8008468 <HAL_DMA_Abort_IT+0xd0>)
 80083f4:	6859      	ldr	r1, [r3, #4]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	221c      	movs	r2, #28
 80083fc:	4013      	ands	r3, r2
 80083fe:	2201      	movs	r2, #1
 8008400:	409a      	lsls	r2, r3
 8008402:	4b19      	ldr	r3, [pc, #100]	; (8008468 <HAL_DMA_Abort_IT+0xd0>)
 8008404:	430a      	orrs	r2, r1
 8008406:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008410:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00c      	beq.n	8008434 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008424:	490f      	ldr	r1, [pc, #60]	; (8008464 <HAL_DMA_Abort_IT+0xcc>)
 8008426:	400a      	ands	r2, r1
 8008428:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008432:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2225      	movs	r2, #37	; 0x25
 8008438:	2101      	movs	r1, #1
 800843a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2224      	movs	r2, #36	; 0x24
 8008440:	2100      	movs	r1, #0
 8008442:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d004      	beq.n	8008456 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	0010      	movs	r0, r2
 8008454:	4798      	blx	r3
    }
  }
  return status;
 8008456:	230f      	movs	r3, #15
 8008458:	18fb      	adds	r3, r7, r3
 800845a:	781b      	ldrb	r3, [r3, #0]
}
 800845c:	0018      	movs	r0, r3
 800845e:	46bd      	mov	sp, r7
 8008460:	b004      	add	sp, #16
 8008462:	bd80      	pop	{r7, pc}
 8008464:	fffffeff 	.word	0xfffffeff
 8008468:	40020000 	.word	0x40020000

0800846c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8008474:	4b55      	ldr	r3, [pc, #340]	; (80085cc <HAL_DMA_IRQHandler+0x160>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008486:	221c      	movs	r2, #28
 8008488:	4013      	ands	r3, r2
 800848a:	2204      	movs	r2, #4
 800848c:	409a      	lsls	r2, r3
 800848e:	0013      	movs	r3, r2
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4013      	ands	r3, r2
 8008494:	d027      	beq.n	80084e6 <HAL_DMA_IRQHandler+0x7a>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2204      	movs	r2, #4
 800849a:	4013      	ands	r3, r2
 800849c:	d023      	beq.n	80084e6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2220      	movs	r2, #32
 80084a6:	4013      	ands	r3, r2
 80084a8:	d107      	bne.n	80084ba <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2104      	movs	r1, #4
 80084b6:	438a      	bics	r2, r1
 80084b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80084ba:	4b44      	ldr	r3, [pc, #272]	; (80085cc <HAL_DMA_IRQHandler+0x160>)
 80084bc:	6859      	ldr	r1, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	221c      	movs	r2, #28
 80084c4:	4013      	ands	r3, r2
 80084c6:	2204      	movs	r2, #4
 80084c8:	409a      	lsls	r2, r3
 80084ca:	4b40      	ldr	r3, [pc, #256]	; (80085cc <HAL_DMA_IRQHandler+0x160>)
 80084cc:	430a      	orrs	r2, r1
 80084ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d100      	bne.n	80084da <HAL_DMA_IRQHandler+0x6e>
 80084d8:	e073      	b.n	80085c2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	0010      	movs	r0, r2
 80084e2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80084e4:	e06d      	b.n	80085c2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	221c      	movs	r2, #28
 80084ec:	4013      	ands	r3, r2
 80084ee:	2202      	movs	r2, #2
 80084f0:	409a      	lsls	r2, r3
 80084f2:	0013      	movs	r3, r2
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4013      	ands	r3, r2
 80084f8:	d02e      	beq.n	8008558 <HAL_DMA_IRQHandler+0xec>
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2202      	movs	r2, #2
 80084fe:	4013      	ands	r3, r2
 8008500:	d02a      	beq.n	8008558 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2220      	movs	r2, #32
 800850a:	4013      	ands	r3, r2
 800850c:	d10b      	bne.n	8008526 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	210a      	movs	r1, #10
 800851a:	438a      	bics	r2, r1
 800851c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2225      	movs	r2, #37	; 0x25
 8008522:	2101      	movs	r1, #1
 8008524:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8008526:	4b29      	ldr	r3, [pc, #164]	; (80085cc <HAL_DMA_IRQHandler+0x160>)
 8008528:	6859      	ldr	r1, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	221c      	movs	r2, #28
 8008530:	4013      	ands	r3, r2
 8008532:	2202      	movs	r2, #2
 8008534:	409a      	lsls	r2, r3
 8008536:	4b25      	ldr	r3, [pc, #148]	; (80085cc <HAL_DMA_IRQHandler+0x160>)
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2224      	movs	r2, #36	; 0x24
 8008540:	2100      	movs	r1, #0
 8008542:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d03a      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	0010      	movs	r0, r2
 8008554:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8008556:	e034      	b.n	80085c2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	221c      	movs	r2, #28
 800855e:	4013      	ands	r3, r2
 8008560:	2208      	movs	r2, #8
 8008562:	409a      	lsls	r2, r3
 8008564:	0013      	movs	r3, r2
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4013      	ands	r3, r2
 800856a:	d02b      	beq.n	80085c4 <HAL_DMA_IRQHandler+0x158>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2208      	movs	r2, #8
 8008570:	4013      	ands	r3, r2
 8008572:	d027      	beq.n	80085c4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	210e      	movs	r1, #14
 8008580:	438a      	bics	r2, r1
 8008582:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8008584:	4b11      	ldr	r3, [pc, #68]	; (80085cc <HAL_DMA_IRQHandler+0x160>)
 8008586:	6859      	ldr	r1, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	221c      	movs	r2, #28
 800858e:	4013      	ands	r3, r2
 8008590:	2201      	movs	r2, #1
 8008592:	409a      	lsls	r2, r3
 8008594:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <HAL_DMA_IRQHandler+0x160>)
 8008596:	430a      	orrs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2225      	movs	r2, #37	; 0x25
 80085a4:	2101      	movs	r1, #1
 80085a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2224      	movs	r2, #36	; 0x24
 80085ac:	2100      	movs	r1, #0
 80085ae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	0010      	movs	r0, r2
 80085c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	46c0      	nop			; (mov r8, r8)
}
 80085c6:	46bd      	mov	sp, r7
 80085c8:	b004      	add	sp, #16
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	40020000 	.word	0x40020000

080085d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80085e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80085f8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80085fa:	4b14      	ldr	r3, [pc, #80]	; (800864c <DMA_SetConfig+0x7c>)
 80085fc:	6859      	ldr	r1, [r3, #4]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	221c      	movs	r2, #28
 8008604:	4013      	ands	r3, r2
 8008606:	2201      	movs	r2, #1
 8008608:	409a      	lsls	r2, r3
 800860a:	4b10      	ldr	r3, [pc, #64]	; (800864c <DMA_SetConfig+0x7c>)
 800860c:	430a      	orrs	r2, r1
 800860e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b10      	cmp	r3, #16
 800861e:	d108      	bne.n	8008632 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008630:	e007      	b.n	8008642 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	60da      	str	r2, [r3, #12]
}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	46bd      	mov	sp, r7
 8008646:	b004      	add	sp, #16
 8008648:	bd80      	pop	{r7, pc}
 800864a:	46c0      	nop			; (mov r8, r8)
 800864c:	40020000 	.word	0x40020000

08008650 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	089b      	lsrs	r3, r3, #2
 800865e:	4a10      	ldr	r2, [pc, #64]	; (80086a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8008660:	4694      	mov	ip, r2
 8008662:	4463      	add	r3, ip
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	001a      	movs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	001a      	movs	r2, r3
 8008672:	23ff      	movs	r3, #255	; 0xff
 8008674:	4013      	ands	r3, r2
 8008676:	3b08      	subs	r3, #8
 8008678:	2114      	movs	r1, #20
 800867a:	0018      	movs	r0, r3
 800867c:	f7f7 fd5c 	bl	8000138 <__udivsi3>
 8008680:	0003      	movs	r3, r0
 8008682:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a07      	ldr	r2, [pc, #28]	; (80086a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8008688:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	221f      	movs	r2, #31
 800868e:	4013      	ands	r3, r2
 8008690:	2201      	movs	r2, #1
 8008692:	409a      	lsls	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8008698:	46c0      	nop			; (mov r8, r8)
 800869a:	46bd      	mov	sp, r7
 800869c:	b004      	add	sp, #16
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	10008200 	.word	0x10008200
 80086a4:	40020880 	.word	0x40020880

080086a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	223f      	movs	r2, #63	; 0x3f
 80086b6:	4013      	ands	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	4a0a      	ldr	r2, [pc, #40]	; (80086e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80086be:	4694      	mov	ip, r2
 80086c0:	4463      	add	r3, ip
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	001a      	movs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a07      	ldr	r2, [pc, #28]	; (80086ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80086ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	2203      	movs	r2, #3
 80086d6:	4013      	ands	r3, r2
 80086d8:	2201      	movs	r2, #1
 80086da:	409a      	lsls	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	659a      	str	r2, [r3, #88]	; 0x58
}
 80086e0:	46c0      	nop			; (mov r8, r8)
 80086e2:	46bd      	mov	sp, r7
 80086e4:	b004      	add	sp, #16
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	1000823f 	.word	0x1000823f
 80086ec:	40020940 	.word	0x40020940

080086f0 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80086f0:	b5b0      	push	{r4, r5, r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	603a      	str	r2, [r7, #0]
 80086fc:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80086fe:	4b21      	ldr	r3, [pc, #132]	; (8008784 <HAL_FLASH_Program+0x94>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d101      	bne.n	800870a <HAL_FLASH_Program+0x1a>
 8008706:	2302      	movs	r3, #2
 8008708:	e038      	b.n	800877c <HAL_FLASH_Program+0x8c>
 800870a:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <HAL_FLASH_Program+0x94>)
 800870c:	2201      	movs	r2, #1
 800870e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008710:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <HAL_FLASH_Program+0x94>)
 8008712:	2200      	movs	r2, #0
 8008714:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008716:	2517      	movs	r5, #23
 8008718:	197c      	adds	r4, r7, r5
 800871a:	23fa      	movs	r3, #250	; 0xfa
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	0018      	movs	r0, r3
 8008720:	f000 f874 	bl	800880c <FLASH_WaitForLastOperation>
 8008724:	0003      	movs	r3, r0
 8008726:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008728:	197b      	adds	r3, r7, r5
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d11f      	bne.n	8008770 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d106      	bne.n	8008744 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	0008      	movs	r0, r1
 800873e:	f000 f8b3 	bl	80088a8 <FLASH_Program_DoubleWord>
 8008742:	e005      	b.n	8008750 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	0011      	movs	r1, r2
 800874a:	0018      	movs	r0, r3
 800874c:	f007 fa98 	bl	800fc80 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008750:	2317      	movs	r3, #23
 8008752:	18fc      	adds	r4, r7, r3
 8008754:	23fa      	movs	r3, #250	; 0xfa
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	0018      	movs	r0, r3
 800875a:	f000 f857 	bl	800880c <FLASH_WaitForLastOperation>
 800875e:	0003      	movs	r3, r0
 8008760:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8008762:	4b09      	ldr	r3, [pc, #36]	; (8008788 <HAL_FLASH_Program+0x98>)
 8008764:	695a      	ldr	r2, [r3, #20]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	43d9      	mvns	r1, r3
 800876a:	4b07      	ldr	r3, [pc, #28]	; (8008788 <HAL_FLASH_Program+0x98>)
 800876c:	400a      	ands	r2, r1
 800876e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008770:	4b04      	ldr	r3, [pc, #16]	; (8008784 <HAL_FLASH_Program+0x94>)
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008776:	2317      	movs	r3, #23
 8008778:	18fb      	adds	r3, r7, r3
 800877a:	781b      	ldrb	r3, [r3, #0]
}
 800877c:	0018      	movs	r0, r3
 800877e:	46bd      	mov	sp, r7
 8008780:	b006      	add	sp, #24
 8008782:	bdb0      	pop	{r4, r5, r7, pc}
 8008784:	200009ac 	.word	0x200009ac
 8008788:	40022000 	.word	0x40022000

0800878c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008792:	1dfb      	adds	r3, r7, #7
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008798:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <HAL_FLASH_Unlock+0x3c>)
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	da0c      	bge.n	80087ba <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80087a0:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <HAL_FLASH_Unlock+0x3c>)
 80087a2:	4a0a      	ldr	r2, [pc, #40]	; (80087cc <HAL_FLASH_Unlock+0x40>)
 80087a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80087a6:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <HAL_FLASH_Unlock+0x3c>)
 80087a8:	4a09      	ldr	r2, [pc, #36]	; (80087d0 <HAL_FLASH_Unlock+0x44>)
 80087aa:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80087ac:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <HAL_FLASH_Unlock+0x3c>)
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da02      	bge.n	80087ba <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80087b4:	1dfb      	adds	r3, r7, #7
 80087b6:	2201      	movs	r2, #1
 80087b8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80087ba:	1dfb      	adds	r3, r7, #7
 80087bc:	781b      	ldrb	r3, [r3, #0]
}
 80087be:	0018      	movs	r0, r3
 80087c0:	46bd      	mov	sp, r7
 80087c2:	b002      	add	sp, #8
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	40022000 	.word	0x40022000
 80087cc:	45670123 	.word	0x45670123
 80087d0:	cdef89ab 	.word	0xcdef89ab

080087d4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80087da:	1dfb      	adds	r3, r7, #7
 80087dc:	2201      	movs	r2, #1
 80087de:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <HAL_FLASH_Lock+0x34>)
 80087e2:	695a      	ldr	r2, [r3, #20]
 80087e4:	4b08      	ldr	r3, [pc, #32]	; (8008808 <HAL_FLASH_Lock+0x34>)
 80087e6:	2180      	movs	r1, #128	; 0x80
 80087e8:	0609      	lsls	r1, r1, #24
 80087ea:	430a      	orrs	r2, r1
 80087ec:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80087ee:	4b06      	ldr	r3, [pc, #24]	; (8008808 <HAL_FLASH_Lock+0x34>)
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da02      	bge.n	80087fc <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80087f6:	1dfb      	adds	r3, r7, #7
 80087f8:	2200      	movs	r2, #0
 80087fa:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80087fc:	1dfb      	adds	r3, r7, #7
 80087fe:	781b      	ldrb	r3, [r3, #0]
}
 8008800:	0018      	movs	r0, r3
 8008802:	46bd      	mov	sp, r7
 8008804:	b002      	add	sp, #8
 8008806:	bd80      	pop	{r7, pc}
 8008808:	40022000 	.word	0x40022000

0800880c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008814:	f7fe f99a 	bl	8006b4c <HAL_GetTick>
 8008818:	0002      	movs	r2, r0
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	189b      	adds	r3, r3, r2
 800881e:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8008820:	2380      	movs	r3, #128	; 0x80
 8008822:	025b      	lsls	r3, r3, #9
 8008824:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8008826:	e007      	b.n	8008838 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8008828:	f7fe f990 	bl	8006b4c <HAL_GetTick>
 800882c:	0002      	movs	r2, r0
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4293      	cmp	r3, r2
 8008832:	d801      	bhi.n	8008838 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e02a      	b.n	800888e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8008838:	4b17      	ldr	r3, [pc, #92]	; (8008898 <FLASH_WaitForLastOperation+0x8c>)
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	4013      	ands	r3, r2
 8008840:	d1f2      	bne.n	8008828 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <FLASH_WaitForLastOperation+0x8c>)
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	4a15      	ldr	r2, [pc, #84]	; (800889c <FLASH_WaitForLastOperation+0x90>)
 8008848:	4013      	ands	r3, r2
 800884a:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800884c:	4b12      	ldr	r3, [pc, #72]	; (8008898 <FLASH_WaitForLastOperation+0x8c>)
 800884e:	4a14      	ldr	r2, [pc, #80]	; (80088a0 <FLASH_WaitForLastOperation+0x94>)
 8008850:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d004      	beq.n	8008862 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008858:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <FLASH_WaitForLastOperation+0x98>)
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e015      	b.n	800888e <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8008862:	f7fe f973 	bl	8006b4c <HAL_GetTick>
 8008866:	0002      	movs	r2, r0
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	189b      	adds	r3, r3, r2
 800886c:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800886e:	e007      	b.n	8008880 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8008870:	f7fe f96c 	bl	8006b4c <HAL_GetTick>
 8008874:	0002      	movs	r2, r0
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4293      	cmp	r3, r2
 800887a:	d801      	bhi.n	8008880 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e006      	b.n	800888e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8008880:	4b05      	ldr	r3, [pc, #20]	; (8008898 <FLASH_WaitForLastOperation+0x8c>)
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	02db      	lsls	r3, r3, #11
 8008888:	4013      	ands	r3, r2
 800888a:	d1f1      	bne.n	8008870 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	0018      	movs	r0, r3
 8008890:	46bd      	mov	sp, r7
 8008892:	b004      	add	sp, #16
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	40022000 	.word	0x40022000
 800889c:	000083fa 	.word	0x000083fa
 80088a0:	000083fb 	.word	0x000083fb
 80088a4:	200009ac 	.word	0x200009ac

080088a8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80088a8:	b5b0      	push	{r4, r5, r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	603a      	str	r2, [r7, #0]
 80088b2:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80088b4:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <FLASH_Program_DoubleWord+0x3c>)
 80088b6:	695a      	ldr	r2, [r3, #20]
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <FLASH_Program_DoubleWord+0x3c>)
 80088ba:	2101      	movs	r1, #1
 80088bc:	430a      	orrs	r2, r1
 80088be:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80088c6:	f3bf 8f6f 	isb	sy
}
 80088ca:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	001c      	movs	r4, r3
 80088d0:	2300      	movs	r3, #0
 80088d2:	001d      	movs	r5, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3304      	adds	r3, #4
 80088d8:	0022      	movs	r2, r4
 80088da:	601a      	str	r2, [r3, #0]
}
 80088dc:	46c0      	nop			; (mov r8, r8)
 80088de:	46bd      	mov	sp, r7
 80088e0:	b004      	add	sp, #16
 80088e2:	bdb0      	pop	{r4, r5, r7, pc}
 80088e4:	40022000 	.word	0x40022000

080088e8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80088e8:	b5b0      	push	{r4, r5, r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80088f2:	4b35      	ldr	r3, [pc, #212]	; (80089c8 <HAL_FLASHEx_Erase+0xe0>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d101      	bne.n	80088fe <HAL_FLASHEx_Erase+0x16>
 80088fa:	2302      	movs	r3, #2
 80088fc:	e05f      	b.n	80089be <HAL_FLASHEx_Erase+0xd6>
 80088fe:	4b32      	ldr	r3, [pc, #200]	; (80089c8 <HAL_FLASHEx_Erase+0xe0>)
 8008900:	2201      	movs	r2, #1
 8008902:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008904:	4b30      	ldr	r3, [pc, #192]	; (80089c8 <HAL_FLASHEx_Erase+0xe0>)
 8008906:	2200      	movs	r2, #0
 8008908:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800890a:	250f      	movs	r5, #15
 800890c:	197c      	adds	r4, r7, r5
 800890e:	23fa      	movs	r3, #250	; 0xfa
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	0018      	movs	r0, r3
 8008914:	f7ff ff7a 	bl	800880c <FLASH_WaitForLastOperation>
 8008918:	0003      	movs	r3, r0
 800891a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800891c:	002c      	movs	r4, r5
 800891e:	193b      	adds	r3, r7, r4
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d145      	bne.n	80089b2 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2204      	movs	r2, #4
 800892a:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b04      	cmp	r3, #4
 8008932:	d10d      	bne.n	8008950 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	0018      	movs	r0, r3
 800893a:	f000 f849 	bl	80089d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800893e:	193c      	adds	r4, r7, r4
 8008940:	23fa      	movs	r3, #250	; 0xfa
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	0018      	movs	r0, r3
 8008946:	f7ff ff61 	bl	800880c <FLASH_WaitForLastOperation>
 800894a:	0003      	movs	r3, r0
 800894c:	7023      	strb	r3, [r4, #0]
 800894e:	e030      	b.n	80089b2 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2201      	movs	r2, #1
 8008954:	4252      	negs	r2, r2
 8008956:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	60bb      	str	r3, [r7, #8]
 800895e:	e01a      	b.n	8008996 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	0011      	movs	r1, r2
 8008968:	0018      	movs	r0, r3
 800896a:	f000 f845 	bl	80089f8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800896e:	250f      	movs	r5, #15
 8008970:	197c      	adds	r4, r7, r5
 8008972:	23fa      	movs	r3, #250	; 0xfa
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	0018      	movs	r0, r3
 8008978:	f7ff ff48 	bl	800880c <FLASH_WaitForLastOperation>
 800897c:	0003      	movs	r3, r0
 800897e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8008980:	197b      	adds	r3, r7, r5
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	601a      	str	r2, [r3, #0]
          break;
 800898e:	e00a      	b.n	80089a6 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	3301      	adds	r3, #1
 8008994:	60bb      	str	r3, [r7, #8]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689a      	ldr	r2, [r3, #8]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	18d3      	adds	r3, r2, r3
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d3dc      	bcc.n	8008960 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80089a6:	4b09      	ldr	r3, [pc, #36]	; (80089cc <HAL_FLASHEx_Erase+0xe4>)
 80089a8:	695a      	ldr	r2, [r3, #20]
 80089aa:	4b08      	ldr	r3, [pc, #32]	; (80089cc <HAL_FLASHEx_Erase+0xe4>)
 80089ac:	2102      	movs	r1, #2
 80089ae:	438a      	bics	r2, r1
 80089b0:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80089b2:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <HAL_FLASHEx_Erase+0xe0>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80089b8:	230f      	movs	r3, #15
 80089ba:	18fb      	adds	r3, r7, r3
 80089bc:	781b      	ldrb	r3, [r3, #0]
}
 80089be:	0018      	movs	r0, r3
 80089c0:	46bd      	mov	sp, r7
 80089c2:	b004      	add	sp, #16
 80089c4:	bdb0      	pop	{r4, r5, r7, pc}
 80089c6:	46c0      	nop			; (mov r8, r8)
 80089c8:	200009ac 	.word	0x200009ac
 80089cc:	40022000 	.word	0x40022000

080089d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <FLASH_MassErase+0x24>)
 80089da:	695a      	ldr	r2, [r3, #20]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	431a      	orrs	r2, r3
 80089e0:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <FLASH_MassErase+0x24>)
 80089e2:	2180      	movs	r1, #128	; 0x80
 80089e4:	0249      	lsls	r1, r1, #9
 80089e6:	430a      	orrs	r2, r1
 80089e8:	615a      	str	r2, [r3, #20]
}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	46bd      	mov	sp, r7
 80089ee:	b002      	add	sp, #8
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	40022000 	.word	0x40022000

080089f8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <FLASH_PageErase+0x2c>)
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	4a08      	ldr	r2, [pc, #32]	; (8008a28 <FLASH_PageErase+0x30>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	00da      	lsls	r2, r3, #3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	4b03      	ldr	r3, [pc, #12]	; (8008a24 <FLASH_PageErase+0x2c>)
 8008a16:	4905      	ldr	r1, [pc, #20]	; (8008a2c <FLASH_PageErase+0x34>)
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	615a      	str	r2, [r3, #20]
}
 8008a1c:	46c0      	nop			; (mov r8, r8)
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	b004      	add	sp, #16
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	40022000 	.word	0x40022000
 8008a28:	ffffe007 	.word	0xffffe007
 8008a2c:	00010002 	.word	0x00010002

08008a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a3e:	e147      	b.n	8008cd0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2101      	movs	r1, #1
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4091      	lsls	r1, r2
 8008a4a:	000a      	movs	r2, r1
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d100      	bne.n	8008a58 <HAL_GPIO_Init+0x28>
 8008a56:	e138      	b.n	8008cca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	4013      	ands	r3, r2
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d005      	beq.n	8008a70 <HAL_GPIO_Init+0x40>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2203      	movs	r2, #3
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d130      	bne.n	8008ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	2203      	movs	r2, #3
 8008a7c:	409a      	lsls	r2, r3
 8008a7e:	0013      	movs	r3, r2
 8008a80:	43da      	mvns	r2, r3
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	4013      	ands	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	409a      	lsls	r2, r3
 8008a92:	0013      	movs	r3, r2
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	409a      	lsls	r2, r3
 8008aac:	0013      	movs	r3, r2
 8008aae:	43da      	mvns	r2, r3
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	091b      	lsrs	r3, r3, #4
 8008abc:	2201      	movs	r2, #1
 8008abe:	401a      	ands	r2, r3
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	409a      	lsls	r2, r3
 8008ac4:	0013      	movs	r3, r2
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d017      	beq.n	8008b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	2203      	movs	r2, #3
 8008aea:	409a      	lsls	r2, r3
 8008aec:	0013      	movs	r3, r2
 8008aee:	43da      	mvns	r2, r3
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	4013      	ands	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	409a      	lsls	r2, r3
 8008b00:	0013      	movs	r3, r2
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	2203      	movs	r2, #3
 8008b14:	4013      	ands	r3, r2
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d123      	bne.n	8008b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	08da      	lsrs	r2, r3, #3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	3208      	adds	r2, #8
 8008b22:	0092      	lsls	r2, r2, #2
 8008b24:	58d3      	ldr	r3, [r2, r3]
 8008b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2207      	movs	r2, #7
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	220f      	movs	r2, #15
 8008b32:	409a      	lsls	r2, r3
 8008b34:	0013      	movs	r3, r2
 8008b36:	43da      	mvns	r2, r3
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	691a      	ldr	r2, [r3, #16]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2107      	movs	r1, #7
 8008b46:	400b      	ands	r3, r1
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	409a      	lsls	r2, r3
 8008b4c:	0013      	movs	r3, r2
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	08da      	lsrs	r2, r3, #3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3208      	adds	r2, #8
 8008b5c:	0092      	lsls	r2, r2, #2
 8008b5e:	6939      	ldr	r1, [r7, #16]
 8008b60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	409a      	lsls	r2, r3
 8008b70:	0013      	movs	r3, r2
 8008b72:	43da      	mvns	r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	4013      	ands	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	2203      	movs	r2, #3
 8008b80:	401a      	ands	r2, r3
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	409a      	lsls	r2, r3
 8008b88:	0013      	movs	r3, r2
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	23c0      	movs	r3, #192	; 0xc0
 8008b9c:	029b      	lsls	r3, r3, #10
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	d100      	bne.n	8008ba4 <HAL_GPIO_Init+0x174>
 8008ba2:	e092      	b.n	8008cca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008ba4:	4a50      	ldr	r2, [pc, #320]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	089b      	lsrs	r3, r3, #2
 8008baa:	3318      	adds	r3, #24
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	589b      	ldr	r3, [r3, r2]
 8008bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2203      	movs	r2, #3
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	220f      	movs	r2, #15
 8008bbc:	409a      	lsls	r2, r3
 8008bbe:	0013      	movs	r3, r2
 8008bc0:	43da      	mvns	r2, r3
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	23a0      	movs	r3, #160	; 0xa0
 8008bcc:	05db      	lsls	r3, r3, #23
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d013      	beq.n	8008bfa <HAL_GPIO_Init+0x1ca>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a45      	ldr	r2, [pc, #276]	; (8008cec <HAL_GPIO_Init+0x2bc>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00d      	beq.n	8008bf6 <HAL_GPIO_Init+0x1c6>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a44      	ldr	r2, [pc, #272]	; (8008cf0 <HAL_GPIO_Init+0x2c0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d007      	beq.n	8008bf2 <HAL_GPIO_Init+0x1c2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a43      	ldr	r2, [pc, #268]	; (8008cf4 <HAL_GPIO_Init+0x2c4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d101      	bne.n	8008bee <HAL_GPIO_Init+0x1be>
 8008bea:	2303      	movs	r3, #3
 8008bec:	e006      	b.n	8008bfc <HAL_GPIO_Init+0x1cc>
 8008bee:	2305      	movs	r3, #5
 8008bf0:	e004      	b.n	8008bfc <HAL_GPIO_Init+0x1cc>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e002      	b.n	8008bfc <HAL_GPIO_Init+0x1cc>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e000      	b.n	8008bfc <HAL_GPIO_Init+0x1cc>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	2103      	movs	r1, #3
 8008c00:	400a      	ands	r2, r1
 8008c02:	00d2      	lsls	r2, r2, #3
 8008c04:	4093      	lsls	r3, r2
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008c0c:	4936      	ldr	r1, [pc, #216]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	089b      	lsrs	r3, r3, #2
 8008c12:	3318      	adds	r3, #24
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c1a:	4b33      	ldr	r3, [pc, #204]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	43da      	mvns	r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	4013      	ands	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	2380      	movs	r3, #128	; 0x80
 8008c30:	035b      	lsls	r3, r3, #13
 8008c32:	4013      	ands	r3, r2
 8008c34:	d003      	beq.n	8008c3e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008c3e:	4b2a      	ldr	r3, [pc, #168]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008c44:	4b28      	ldr	r3, [pc, #160]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	43da      	mvns	r2, r3
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	4013      	ands	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	2380      	movs	r3, #128	; 0x80
 8008c5a:	039b      	lsls	r3, r3, #14
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	d003      	beq.n	8008c68 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008c68:	4b1f      	ldr	r3, [pc, #124]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008c6e:	4a1e      	ldr	r2, [pc, #120]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008c70:	2384      	movs	r3, #132	; 0x84
 8008c72:	58d3      	ldr	r3, [r2, r3]
 8008c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	43da      	mvns	r2, r3
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	2380      	movs	r3, #128	; 0x80
 8008c86:	029b      	lsls	r3, r3, #10
 8008c88:	4013      	ands	r3, r2
 8008c8a:	d003      	beq.n	8008c94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008c94:	4914      	ldr	r1, [pc, #80]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008c96:	2284      	movs	r2, #132	; 0x84
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008c9c:	4a12      	ldr	r2, [pc, #72]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008c9e:	2380      	movs	r3, #128	; 0x80
 8008ca0:	58d3      	ldr	r3, [r2, r3]
 8008ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	43da      	mvns	r2, r3
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	4013      	ands	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	2380      	movs	r3, #128	; 0x80
 8008cb4:	025b      	lsls	r3, r3, #9
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	d003      	beq.n	8008cc2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008cc2:	4909      	ldr	r1, [pc, #36]	; (8008ce8 <HAL_GPIO_Init+0x2b8>)
 8008cc4:	2280      	movs	r2, #128	; 0x80
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	40da      	lsrs	r2, r3
 8008cd8:	1e13      	subs	r3, r2, #0
 8008cda:	d000      	beq.n	8008cde <HAL_GPIO_Init+0x2ae>
 8008cdc:	e6b0      	b.n	8008a40 <HAL_GPIO_Init+0x10>
  }
}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	46c0      	nop			; (mov r8, r8)
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	b006      	add	sp, #24
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	40021800 	.word	0x40021800
 8008cec:	50000400 	.word	0x50000400
 8008cf0:	50000800 	.word	0x50000800
 8008cf4:	50000c00 	.word	0x50000c00

08008cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	000a      	movs	r2, r1
 8008d02:	1cbb      	adds	r3, r7, #2
 8008d04:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	1cba      	adds	r2, r7, #2
 8008d0c:	8812      	ldrh	r2, [r2, #0]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	d004      	beq.n	8008d1c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008d12:	230f      	movs	r3, #15
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	2201      	movs	r2, #1
 8008d18:	701a      	strb	r2, [r3, #0]
 8008d1a:	e003      	b.n	8008d24 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d1c:	230f      	movs	r3, #15
 8008d1e:	18fb      	adds	r3, r7, r3
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008d24:	230f      	movs	r3, #15
 8008d26:	18fb      	adds	r3, r7, r3
 8008d28:	781b      	ldrb	r3, [r3, #0]
}
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b004      	add	sp, #16
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	0008      	movs	r0, r1
 8008d3c:	0011      	movs	r1, r2
 8008d3e:	1cbb      	adds	r3, r7, #2
 8008d40:	1c02      	adds	r2, r0, #0
 8008d42:	801a      	strh	r2, [r3, #0]
 8008d44:	1c7b      	adds	r3, r7, #1
 8008d46:	1c0a      	adds	r2, r1, #0
 8008d48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d4a:	1c7b      	adds	r3, r7, #1
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d004      	beq.n	8008d5c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008d52:	1cbb      	adds	r3, r7, #2
 8008d54:	881a      	ldrh	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008d5a:	e003      	b.n	8008d64 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008d5c:	1cbb      	adds	r3, r7, #2
 8008d5e:	881a      	ldrh	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008d64:	46c0      	nop			; (mov r8, r8)
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b002      	add	sp, #8
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e082      	b.n	8008e84 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2241      	movs	r2, #65	; 0x41
 8008d82:	5c9b      	ldrb	r3, [r3, r2]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d107      	bne.n	8008d9a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2240      	movs	r2, #64	; 0x40
 8008d8e:	2100      	movs	r1, #0
 8008d90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	0018      	movs	r0, r3
 8008d96:	f7fd f883 	bl	8005ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2241      	movs	r2, #65	; 0x41
 8008d9e:	2124      	movs	r1, #36	; 0x24
 8008da0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2101      	movs	r1, #1
 8008dae:	438a      	bics	r2, r1
 8008db0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4934      	ldr	r1, [pc, #208]	; (8008e8c <HAL_I2C_Init+0x120>)
 8008dbc:	400a      	ands	r2, r1
 8008dbe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689a      	ldr	r2, [r3, #8]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4931      	ldr	r1, [pc, #196]	; (8008e90 <HAL_I2C_Init+0x124>)
 8008dcc:	400a      	ands	r2, r1
 8008dce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d108      	bne.n	8008dea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2180      	movs	r1, #128	; 0x80
 8008de2:	0209      	lsls	r1, r1, #8
 8008de4:	430a      	orrs	r2, r1
 8008de6:	609a      	str	r2, [r3, #8]
 8008de8:	e007      	b.n	8008dfa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2184      	movs	r1, #132	; 0x84
 8008df4:	0209      	lsls	r1, r1, #8
 8008df6:	430a      	orrs	r2, r1
 8008df8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d104      	bne.n	8008e0c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2280      	movs	r2, #128	; 0x80
 8008e08:	0112      	lsls	r2, r2, #4
 8008e0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	491f      	ldr	r1, [pc, #124]	; (8008e94 <HAL_I2C_Init+0x128>)
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	491a      	ldr	r1, [pc, #104]	; (8008e90 <HAL_I2C_Init+0x124>)
 8008e28:	400a      	ands	r2, r1
 8008e2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69d9      	ldr	r1, [r3, #28]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1a      	ldr	r2, [r3, #32]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2101      	movs	r1, #1
 8008e62:	430a      	orrs	r2, r1
 8008e64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2241      	movs	r2, #65	; 0x41
 8008e70:	2120      	movs	r1, #32
 8008e72:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2242      	movs	r2, #66	; 0x42
 8008e7e:	2100      	movs	r1, #0
 8008e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	0018      	movs	r0, r3
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b002      	add	sp, #8
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	f0ffffff 	.word	0xf0ffffff
 8008e90:	ffff7fff 	.word	0xffff7fff
 8008e94:	02008000 	.word	0x02008000

08008e98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008e98:	b590      	push	{r4, r7, lr}
 8008e9a:	b089      	sub	sp, #36	; 0x24
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	0008      	movs	r0, r1
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	0019      	movs	r1, r3
 8008ea6:	230a      	movs	r3, #10
 8008ea8:	18fb      	adds	r3, r7, r3
 8008eaa:	1c02      	adds	r2, r0, #0
 8008eac:	801a      	strh	r2, [r3, #0]
 8008eae:	2308      	movs	r3, #8
 8008eb0:	18fb      	adds	r3, r7, r3
 8008eb2:	1c0a      	adds	r2, r1, #0
 8008eb4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2241      	movs	r2, #65	; 0x41
 8008eba:	5c9b      	ldrb	r3, [r3, r2]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b20      	cmp	r3, #32
 8008ec0:	d000      	beq.n	8008ec4 <HAL_I2C_Master_Transmit+0x2c>
 8008ec2:	e0e7      	b.n	8009094 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2240      	movs	r2, #64	; 0x40
 8008ec8:	5c9b      	ldrb	r3, [r3, r2]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d101      	bne.n	8008ed2 <HAL_I2C_Master_Transmit+0x3a>
 8008ece:	2302      	movs	r3, #2
 8008ed0:	e0e1      	b.n	8009096 <HAL_I2C_Master_Transmit+0x1fe>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2240      	movs	r2, #64	; 0x40
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008eda:	f7fd fe37 	bl	8006b4c <HAL_GetTick>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ee2:	2380      	movs	r3, #128	; 0x80
 8008ee4:	0219      	lsls	r1, r3, #8
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	2319      	movs	r3, #25
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f000 fc24 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8008ef4:	1e03      	subs	r3, r0, #0
 8008ef6:	d001      	beq.n	8008efc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e0cc      	b.n	8009096 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2241      	movs	r2, #65	; 0x41
 8008f00:	2121      	movs	r1, #33	; 0x21
 8008f02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2242      	movs	r2, #66	; 0x42
 8008f08:	2110      	movs	r1, #16
 8008f0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2208      	movs	r2, #8
 8008f1c:	18ba      	adds	r2, r7, r2
 8008f1e:	8812      	ldrh	r2, [r2, #0]
 8008f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2bff      	cmp	r3, #255	; 0xff
 8008f30:	d911      	bls.n	8008f56 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	22ff      	movs	r2, #255	; 0xff
 8008f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	2380      	movs	r3, #128	; 0x80
 8008f40:	045c      	lsls	r4, r3, #17
 8008f42:	230a      	movs	r3, #10
 8008f44:	18fb      	adds	r3, r7, r3
 8008f46:	8819      	ldrh	r1, [r3, #0]
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	4b55      	ldr	r3, [pc, #340]	; (80090a0 <HAL_I2C_Master_Transmit+0x208>)
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	0023      	movs	r3, r4
 8008f50:	f000 fdae 	bl	8009ab0 <I2C_TransferConfig>
 8008f54:	e075      	b.n	8009042 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	2380      	movs	r3, #128	; 0x80
 8008f68:	049c      	lsls	r4, r3, #18
 8008f6a:	230a      	movs	r3, #10
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	8819      	ldrh	r1, [r3, #0]
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	4b4b      	ldr	r3, [pc, #300]	; (80090a0 <HAL_I2C_Master_Transmit+0x208>)
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	0023      	movs	r3, r4
 8008f78:	f000 fd9a 	bl	8009ab0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008f7c:	e061      	b.n	8009042 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	0018      	movs	r0, r3
 8008f86:	f000 fc18 	bl	80097ba <I2C_WaitOnTXISFlagUntilTimeout>
 8008f8a:	1e03      	subs	r3, r0, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e081      	b.n	8009096 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	781a      	ldrb	r2, [r3, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d03a      	beq.n	8009042 <HAL_I2C_Master_Transmit+0x1aa>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d136      	bne.n	8009042 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	0013      	movs	r3, r2
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2180      	movs	r1, #128	; 0x80
 8008fe2:	f000 fbab 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8008fe6:	1e03      	subs	r3, r0, #0
 8008fe8:	d001      	beq.n	8008fee <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e053      	b.n	8009096 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2bff      	cmp	r3, #255	; 0xff
 8008ff6:	d911      	bls.n	800901c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	22ff      	movs	r2, #255	; 0xff
 8008ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009002:	b2da      	uxtb	r2, r3
 8009004:	2380      	movs	r3, #128	; 0x80
 8009006:	045c      	lsls	r4, r3, #17
 8009008:	230a      	movs	r3, #10
 800900a:	18fb      	adds	r3, r7, r3
 800900c:	8819      	ldrh	r1, [r3, #0]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	2300      	movs	r3, #0
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	0023      	movs	r3, r4
 8009016:	f000 fd4b 	bl	8009ab0 <I2C_TransferConfig>
 800901a:	e012      	b.n	8009042 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009020:	b29a      	uxth	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800902a:	b2da      	uxtb	r2, r3
 800902c:	2380      	movs	r3, #128	; 0x80
 800902e:	049c      	lsls	r4, r3, #18
 8009030:	230a      	movs	r3, #10
 8009032:	18fb      	adds	r3, r7, r3
 8009034:	8819      	ldrh	r1, [r3, #0]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	2300      	movs	r3, #0
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	0023      	movs	r3, r4
 800903e:	f000 fd37 	bl	8009ab0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009046:	b29b      	uxth	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d198      	bne.n	8008f7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	0018      	movs	r0, r3
 8009054:	f000 fbf0 	bl	8009838 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009058:	1e03      	subs	r3, r0, #0
 800905a:	d001      	beq.n	8009060 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e01a      	b.n	8009096 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2220      	movs	r2, #32
 8009066:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	490c      	ldr	r1, [pc, #48]	; (80090a4 <HAL_I2C_Master_Transmit+0x20c>)
 8009074:	400a      	ands	r2, r1
 8009076:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2241      	movs	r2, #65	; 0x41
 800907c:	2120      	movs	r1, #32
 800907e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2242      	movs	r2, #66	; 0x42
 8009084:	2100      	movs	r1, #0
 8009086:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2240      	movs	r2, #64	; 0x40
 800908c:	2100      	movs	r1, #0
 800908e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	e000      	b.n	8009096 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8009094:	2302      	movs	r3, #2
  }
}
 8009096:	0018      	movs	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	b007      	add	sp, #28
 800909c:	bd90      	pop	{r4, r7, pc}
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	80002000 	.word	0x80002000
 80090a4:	fe00e800 	.word	0xfe00e800

080090a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090a8:	b590      	push	{r4, r7, lr}
 80090aa:	b089      	sub	sp, #36	; 0x24
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	000c      	movs	r4, r1
 80090b2:	0010      	movs	r0, r2
 80090b4:	0019      	movs	r1, r3
 80090b6:	230a      	movs	r3, #10
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	1c22      	adds	r2, r4, #0
 80090bc:	801a      	strh	r2, [r3, #0]
 80090be:	2308      	movs	r3, #8
 80090c0:	18fb      	adds	r3, r7, r3
 80090c2:	1c02      	adds	r2, r0, #0
 80090c4:	801a      	strh	r2, [r3, #0]
 80090c6:	1dbb      	adds	r3, r7, #6
 80090c8:	1c0a      	adds	r2, r1, #0
 80090ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2241      	movs	r2, #65	; 0x41
 80090d0:	5c9b      	ldrb	r3, [r3, r2]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	d000      	beq.n	80090da <HAL_I2C_Mem_Write+0x32>
 80090d8:	e10c      	b.n	80092f4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80090da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d004      	beq.n	80090ea <HAL_I2C_Mem_Write+0x42>
 80090e0:	232c      	movs	r3, #44	; 0x2c
 80090e2:	18fb      	adds	r3, r7, r3
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d105      	bne.n	80090f6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2280      	movs	r2, #128	; 0x80
 80090ee:	0092      	lsls	r2, r2, #2
 80090f0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e0ff      	b.n	80092f6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2240      	movs	r2, #64	; 0x40
 80090fa:	5c9b      	ldrb	r3, [r3, r2]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_I2C_Mem_Write+0x5c>
 8009100:	2302      	movs	r3, #2
 8009102:	e0f8      	b.n	80092f6 <HAL_I2C_Mem_Write+0x24e>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2240      	movs	r2, #64	; 0x40
 8009108:	2101      	movs	r1, #1
 800910a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800910c:	f7fd fd1e 	bl	8006b4c <HAL_GetTick>
 8009110:	0003      	movs	r3, r0
 8009112:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009114:	2380      	movs	r3, #128	; 0x80
 8009116:	0219      	lsls	r1, r3, #8
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	2319      	movs	r3, #25
 8009120:	2201      	movs	r2, #1
 8009122:	f000 fb0b 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8009126:	1e03      	subs	r3, r0, #0
 8009128:	d001      	beq.n	800912e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e0e3      	b.n	80092f6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2241      	movs	r2, #65	; 0x41
 8009132:	2121      	movs	r1, #33	; 0x21
 8009134:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2242      	movs	r2, #66	; 0x42
 800913a:	2140      	movs	r1, #64	; 0x40
 800913c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	222c      	movs	r2, #44	; 0x2c
 800914e:	18ba      	adds	r2, r7, r2
 8009150:	8812      	ldrh	r2, [r2, #0]
 8009152:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800915a:	1dbb      	adds	r3, r7, #6
 800915c:	881c      	ldrh	r4, [r3, #0]
 800915e:	2308      	movs	r3, #8
 8009160:	18fb      	adds	r3, r7, r3
 8009162:	881a      	ldrh	r2, [r3, #0]
 8009164:	230a      	movs	r3, #10
 8009166:	18fb      	adds	r3, r7, r3
 8009168:	8819      	ldrh	r1, [r3, #0]
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	0023      	movs	r3, r4
 8009176:	f000 f9f9 	bl	800956c <I2C_RequestMemoryWrite>
 800917a:	1e03      	subs	r3, r0, #0
 800917c:	d005      	beq.n	800918a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2240      	movs	r2, #64	; 0x40
 8009182:	2100      	movs	r1, #0
 8009184:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e0b5      	b.n	80092f6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800918e:	b29b      	uxth	r3, r3
 8009190:	2bff      	cmp	r3, #255	; 0xff
 8009192:	d911      	bls.n	80091b8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	22ff      	movs	r2, #255	; 0xff
 8009198:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	2380      	movs	r3, #128	; 0x80
 80091a2:	045c      	lsls	r4, r3, #17
 80091a4:	230a      	movs	r3, #10
 80091a6:	18fb      	adds	r3, r7, r3
 80091a8:	8819      	ldrh	r1, [r3, #0]
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	2300      	movs	r3, #0
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	0023      	movs	r3, r4
 80091b2:	f000 fc7d 	bl	8009ab0 <I2C_TransferConfig>
 80091b6:	e012      	b.n	80091de <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091bc:	b29a      	uxth	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	2380      	movs	r3, #128	; 0x80
 80091ca:	049c      	lsls	r4, r3, #18
 80091cc:	230a      	movs	r3, #10
 80091ce:	18fb      	adds	r3, r7, r3
 80091d0:	8819      	ldrh	r1, [r3, #0]
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	2300      	movs	r3, #0
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	0023      	movs	r3, r4
 80091da:	f000 fc69 	bl	8009ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	0018      	movs	r0, r3
 80091e6:	f000 fae8 	bl	80097ba <I2C_WaitOnTXISFlagUntilTimeout>
 80091ea:	1e03      	subs	r3, r0, #0
 80091ec:	d001      	beq.n	80091f2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e081      	b.n	80092f6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	781a      	ldrb	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800921a:	3b01      	subs	r3, #1
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009226:	b29b      	uxth	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	d03a      	beq.n	80092a2 <HAL_I2C_Mem_Write+0x1fa>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009230:	2b00      	cmp	r3, #0
 8009232:	d136      	bne.n	80092a2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	0013      	movs	r3, r2
 800923e:	2200      	movs	r2, #0
 8009240:	2180      	movs	r1, #128	; 0x80
 8009242:	f000 fa7b 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8009246:	1e03      	subs	r3, r0, #0
 8009248:	d001      	beq.n	800924e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e053      	b.n	80092f6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009252:	b29b      	uxth	r3, r3
 8009254:	2bff      	cmp	r3, #255	; 0xff
 8009256:	d911      	bls.n	800927c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	22ff      	movs	r2, #255	; 0xff
 800925c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009262:	b2da      	uxtb	r2, r3
 8009264:	2380      	movs	r3, #128	; 0x80
 8009266:	045c      	lsls	r4, r3, #17
 8009268:	230a      	movs	r3, #10
 800926a:	18fb      	adds	r3, r7, r3
 800926c:	8819      	ldrh	r1, [r3, #0]
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	2300      	movs	r3, #0
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	0023      	movs	r3, r4
 8009276:	f000 fc1b 	bl	8009ab0 <I2C_TransferConfig>
 800927a:	e012      	b.n	80092a2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009280:	b29a      	uxth	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800928a:	b2da      	uxtb	r2, r3
 800928c:	2380      	movs	r3, #128	; 0x80
 800928e:	049c      	lsls	r4, r3, #18
 8009290:	230a      	movs	r3, #10
 8009292:	18fb      	adds	r3, r7, r3
 8009294:	8819      	ldrh	r1, [r3, #0]
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	2300      	movs	r3, #0
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	0023      	movs	r3, r4
 800929e:	f000 fc07 	bl	8009ab0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d198      	bne.n	80091de <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	0018      	movs	r0, r3
 80092b4:	f000 fac0 	bl	8009838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092b8:	1e03      	subs	r3, r0, #0
 80092ba:	d001      	beq.n	80092c0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e01a      	b.n	80092f6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2220      	movs	r2, #32
 80092c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	490b      	ldr	r1, [pc, #44]	; (8009300 <HAL_I2C_Mem_Write+0x258>)
 80092d4:	400a      	ands	r2, r1
 80092d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2241      	movs	r2, #65	; 0x41
 80092dc:	2120      	movs	r1, #32
 80092de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2242      	movs	r2, #66	; 0x42
 80092e4:	2100      	movs	r1, #0
 80092e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2240      	movs	r2, #64	; 0x40
 80092ec:	2100      	movs	r1, #0
 80092ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	e000      	b.n	80092f6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80092f4:	2302      	movs	r3, #2
  }
}
 80092f6:	0018      	movs	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b007      	add	sp, #28
 80092fc:	bd90      	pop	{r4, r7, pc}
 80092fe:	46c0      	nop			; (mov r8, r8)
 8009300:	fe00e800 	.word	0xfe00e800

08009304 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009304:	b590      	push	{r4, r7, lr}
 8009306:	b089      	sub	sp, #36	; 0x24
 8009308:	af02      	add	r7, sp, #8
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	000c      	movs	r4, r1
 800930e:	0010      	movs	r0, r2
 8009310:	0019      	movs	r1, r3
 8009312:	230a      	movs	r3, #10
 8009314:	18fb      	adds	r3, r7, r3
 8009316:	1c22      	adds	r2, r4, #0
 8009318:	801a      	strh	r2, [r3, #0]
 800931a:	2308      	movs	r3, #8
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	1c02      	adds	r2, r0, #0
 8009320:	801a      	strh	r2, [r3, #0]
 8009322:	1dbb      	adds	r3, r7, #6
 8009324:	1c0a      	adds	r2, r1, #0
 8009326:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2241      	movs	r2, #65	; 0x41
 800932c:	5c9b      	ldrb	r3, [r3, r2]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b20      	cmp	r3, #32
 8009332:	d000      	beq.n	8009336 <HAL_I2C_Mem_Read+0x32>
 8009334:	e110      	b.n	8009558 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <HAL_I2C_Mem_Read+0x42>
 800933c:	232c      	movs	r3, #44	; 0x2c
 800933e:	18fb      	adds	r3, r7, r3
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d105      	bne.n	8009352 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2280      	movs	r2, #128	; 0x80
 800934a:	0092      	lsls	r2, r2, #2
 800934c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e103      	b.n	800955a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2240      	movs	r2, #64	; 0x40
 8009356:	5c9b      	ldrb	r3, [r3, r2]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d101      	bne.n	8009360 <HAL_I2C_Mem_Read+0x5c>
 800935c:	2302      	movs	r3, #2
 800935e:	e0fc      	b.n	800955a <HAL_I2C_Mem_Read+0x256>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2240      	movs	r2, #64	; 0x40
 8009364:	2101      	movs	r1, #1
 8009366:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009368:	f7fd fbf0 	bl	8006b4c <HAL_GetTick>
 800936c:	0003      	movs	r3, r0
 800936e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009370:	2380      	movs	r3, #128	; 0x80
 8009372:	0219      	lsls	r1, r3, #8
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	2319      	movs	r3, #25
 800937c:	2201      	movs	r2, #1
 800937e:	f000 f9dd 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8009382:	1e03      	subs	r3, r0, #0
 8009384:	d001      	beq.n	800938a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e0e7      	b.n	800955a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2241      	movs	r2, #65	; 0x41
 800938e:	2122      	movs	r1, #34	; 0x22
 8009390:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2242      	movs	r2, #66	; 0x42
 8009396:	2140      	movs	r1, #64	; 0x40
 8009398:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	222c      	movs	r2, #44	; 0x2c
 80093aa:	18ba      	adds	r2, r7, r2
 80093ac:	8812      	ldrh	r2, [r2, #0]
 80093ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093b6:	1dbb      	adds	r3, r7, #6
 80093b8:	881c      	ldrh	r4, [r3, #0]
 80093ba:	2308      	movs	r3, #8
 80093bc:	18fb      	adds	r3, r7, r3
 80093be:	881a      	ldrh	r2, [r3, #0]
 80093c0:	230a      	movs	r3, #10
 80093c2:	18fb      	adds	r3, r7, r3
 80093c4:	8819      	ldrh	r1, [r3, #0]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	0023      	movs	r3, r4
 80093d2:	f000 f92f 	bl	8009634 <I2C_RequestMemoryRead>
 80093d6:	1e03      	subs	r3, r0, #0
 80093d8:	d005      	beq.n	80093e6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2240      	movs	r2, #64	; 0x40
 80093de:	2100      	movs	r1, #0
 80093e0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e0b9      	b.n	800955a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2bff      	cmp	r3, #255	; 0xff
 80093ee:	d911      	bls.n	8009414 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	22ff      	movs	r2, #255	; 0xff
 80093f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	2380      	movs	r3, #128	; 0x80
 80093fe:	045c      	lsls	r4, r3, #17
 8009400:	230a      	movs	r3, #10
 8009402:	18fb      	adds	r3, r7, r3
 8009404:	8819      	ldrh	r1, [r3, #0]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	4b56      	ldr	r3, [pc, #344]	; (8009564 <HAL_I2C_Mem_Read+0x260>)
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	0023      	movs	r3, r4
 800940e:	f000 fb4f 	bl	8009ab0 <I2C_TransferConfig>
 8009412:	e012      	b.n	800943a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009418:	b29a      	uxth	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009422:	b2da      	uxtb	r2, r3
 8009424:	2380      	movs	r3, #128	; 0x80
 8009426:	049c      	lsls	r4, r3, #18
 8009428:	230a      	movs	r3, #10
 800942a:	18fb      	adds	r3, r7, r3
 800942c:	8819      	ldrh	r1, [r3, #0]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	4b4c      	ldr	r3, [pc, #304]	; (8009564 <HAL_I2C_Mem_Read+0x260>)
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	0023      	movs	r3, r4
 8009436:	f000 fb3b 	bl	8009ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800943a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	0013      	movs	r3, r2
 8009444:	2200      	movs	r2, #0
 8009446:	2104      	movs	r1, #4
 8009448:	f000 f978 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 800944c:	1e03      	subs	r3, r0, #0
 800944e:	d001      	beq.n	8009454 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e082      	b.n	800955a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947c:	b29b      	uxth	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948a:	b29b      	uxth	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d03a      	beq.n	8009506 <HAL_I2C_Mem_Read+0x202>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009494:	2b00      	cmp	r3, #0
 8009496:	d136      	bne.n	8009506 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	0013      	movs	r3, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	2180      	movs	r1, #128	; 0x80
 80094a6:	f000 f949 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 80094aa:	1e03      	subs	r3, r0, #0
 80094ac:	d001      	beq.n	80094b2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e053      	b.n	800955a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2bff      	cmp	r3, #255	; 0xff
 80094ba:	d911      	bls.n	80094e0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	22ff      	movs	r2, #255	; 0xff
 80094c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	2380      	movs	r3, #128	; 0x80
 80094ca:	045c      	lsls	r4, r3, #17
 80094cc:	230a      	movs	r3, #10
 80094ce:	18fb      	adds	r3, r7, r3
 80094d0:	8819      	ldrh	r1, [r3, #0]
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	2300      	movs	r3, #0
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	0023      	movs	r3, r4
 80094da:	f000 fae9 	bl	8009ab0 <I2C_TransferConfig>
 80094de:	e012      	b.n	8009506 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	2380      	movs	r3, #128	; 0x80
 80094f2:	049c      	lsls	r4, r3, #18
 80094f4:	230a      	movs	r3, #10
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	8819      	ldrh	r1, [r3, #0]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	0023      	movs	r3, r4
 8009502:	f000 fad5 	bl	8009ab0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950a:	b29b      	uxth	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d194      	bne.n	800943a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0018      	movs	r0, r3
 8009518:	f000 f98e 	bl	8009838 <I2C_WaitOnSTOPFlagUntilTimeout>
 800951c:	1e03      	subs	r3, r0, #0
 800951e:	d001      	beq.n	8009524 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e01a      	b.n	800955a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2220      	movs	r2, #32
 800952a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	490c      	ldr	r1, [pc, #48]	; (8009568 <HAL_I2C_Mem_Read+0x264>)
 8009538:	400a      	ands	r2, r1
 800953a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2241      	movs	r2, #65	; 0x41
 8009540:	2120      	movs	r1, #32
 8009542:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2242      	movs	r2, #66	; 0x42
 8009548:	2100      	movs	r1, #0
 800954a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2240      	movs	r2, #64	; 0x40
 8009550:	2100      	movs	r1, #0
 8009552:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	e000      	b.n	800955a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8009558:	2302      	movs	r3, #2
  }
}
 800955a:	0018      	movs	r0, r3
 800955c:	46bd      	mov	sp, r7
 800955e:	b007      	add	sp, #28
 8009560:	bd90      	pop	{r4, r7, pc}
 8009562:	46c0      	nop			; (mov r8, r8)
 8009564:	80002400 	.word	0x80002400
 8009568:	fe00e800 	.word	0xfe00e800

0800956c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800956c:	b5b0      	push	{r4, r5, r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af02      	add	r7, sp, #8
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	000c      	movs	r4, r1
 8009576:	0010      	movs	r0, r2
 8009578:	0019      	movs	r1, r3
 800957a:	250a      	movs	r5, #10
 800957c:	197b      	adds	r3, r7, r5
 800957e:	1c22      	adds	r2, r4, #0
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	2308      	movs	r3, #8
 8009584:	18fb      	adds	r3, r7, r3
 8009586:	1c02      	adds	r2, r0, #0
 8009588:	801a      	strh	r2, [r3, #0]
 800958a:	1dbb      	adds	r3, r7, #6
 800958c:	1c0a      	adds	r2, r1, #0
 800958e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009590:	1dbb      	adds	r3, r7, #6
 8009592:	881b      	ldrh	r3, [r3, #0]
 8009594:	b2da      	uxtb	r2, r3
 8009596:	2380      	movs	r3, #128	; 0x80
 8009598:	045c      	lsls	r4, r3, #17
 800959a:	197b      	adds	r3, r7, r5
 800959c:	8819      	ldrh	r1, [r3, #0]
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	4b23      	ldr	r3, [pc, #140]	; (8009630 <I2C_RequestMemoryWrite+0xc4>)
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	0023      	movs	r3, r4
 80095a6:	f000 fa83 	bl	8009ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ac:	6a39      	ldr	r1, [r7, #32]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	0018      	movs	r0, r3
 80095b2:	f000 f902 	bl	80097ba <I2C_WaitOnTXISFlagUntilTimeout>
 80095b6:	1e03      	subs	r3, r0, #0
 80095b8:	d001      	beq.n	80095be <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e033      	b.n	8009626 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095be:	1dbb      	adds	r3, r7, #6
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d107      	bne.n	80095d6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095c6:	2308      	movs	r3, #8
 80095c8:	18fb      	adds	r3, r7, r3
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	629a      	str	r2, [r3, #40]	; 0x28
 80095d4:	e019      	b.n	800960a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095d6:	2308      	movs	r3, #8
 80095d8:	18fb      	adds	r3, r7, r3
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	0a1b      	lsrs	r3, r3, #8
 80095de:	b29b      	uxth	r3, r3
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ea:	6a39      	ldr	r1, [r7, #32]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	0018      	movs	r0, r3
 80095f0:	f000 f8e3 	bl	80097ba <I2C_WaitOnTXISFlagUntilTimeout>
 80095f4:	1e03      	subs	r3, r0, #0
 80095f6:	d001      	beq.n	80095fc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e014      	b.n	8009626 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095fc:	2308      	movs	r3, #8
 80095fe:	18fb      	adds	r3, r7, r3
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	b2da      	uxtb	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800960a:	6a3a      	ldr	r2, [r7, #32]
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	0013      	movs	r3, r2
 8009614:	2200      	movs	r2, #0
 8009616:	2180      	movs	r1, #128	; 0x80
 8009618:	f000 f890 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 800961c:	1e03      	subs	r3, r0, #0
 800961e:	d001      	beq.n	8009624 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e000      	b.n	8009626 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	0018      	movs	r0, r3
 8009628:	46bd      	mov	sp, r7
 800962a:	b004      	add	sp, #16
 800962c:	bdb0      	pop	{r4, r5, r7, pc}
 800962e:	46c0      	nop			; (mov r8, r8)
 8009630:	80002000 	.word	0x80002000

08009634 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009634:	b5b0      	push	{r4, r5, r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af02      	add	r7, sp, #8
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	000c      	movs	r4, r1
 800963e:	0010      	movs	r0, r2
 8009640:	0019      	movs	r1, r3
 8009642:	250a      	movs	r5, #10
 8009644:	197b      	adds	r3, r7, r5
 8009646:	1c22      	adds	r2, r4, #0
 8009648:	801a      	strh	r2, [r3, #0]
 800964a:	2308      	movs	r3, #8
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	1c02      	adds	r2, r0, #0
 8009650:	801a      	strh	r2, [r3, #0]
 8009652:	1dbb      	adds	r3, r7, #6
 8009654:	1c0a      	adds	r2, r1, #0
 8009656:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009658:	1dbb      	adds	r3, r7, #6
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b2da      	uxtb	r2, r3
 800965e:	197b      	adds	r3, r7, r5
 8009660:	8819      	ldrh	r1, [r3, #0]
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	4b23      	ldr	r3, [pc, #140]	; (80096f4 <I2C_RequestMemoryRead+0xc0>)
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	2300      	movs	r3, #0
 800966a:	f000 fa21 	bl	8009ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800966e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009670:	6a39      	ldr	r1, [r7, #32]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	0018      	movs	r0, r3
 8009676:	f000 f8a0 	bl	80097ba <I2C_WaitOnTXISFlagUntilTimeout>
 800967a:	1e03      	subs	r3, r0, #0
 800967c:	d001      	beq.n	8009682 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e033      	b.n	80096ea <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009682:	1dbb      	adds	r3, r7, #6
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d107      	bne.n	800969a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800968a:	2308      	movs	r3, #8
 800968c:	18fb      	adds	r3, r7, r3
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	b2da      	uxtb	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	629a      	str	r2, [r3, #40]	; 0x28
 8009698:	e019      	b.n	80096ce <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800969a:	2308      	movs	r3, #8
 800969c:	18fb      	adds	r3, r7, r3
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	0a1b      	lsrs	r3, r3, #8
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ae:	6a39      	ldr	r1, [r7, #32]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	0018      	movs	r0, r3
 80096b4:	f000 f881 	bl	80097ba <I2C_WaitOnTXISFlagUntilTimeout>
 80096b8:	1e03      	subs	r3, r0, #0
 80096ba:	d001      	beq.n	80096c0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e014      	b.n	80096ea <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096c0:	2308      	movs	r3, #8
 80096c2:	18fb      	adds	r3, r7, r3
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80096ce:	6a3a      	ldr	r2, [r7, #32]
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	0013      	movs	r3, r2
 80096d8:	2200      	movs	r2, #0
 80096da:	2140      	movs	r1, #64	; 0x40
 80096dc:	f000 f82e 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 80096e0:	1e03      	subs	r3, r0, #0
 80096e2:	d001      	beq.n	80096e8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e000      	b.n	80096ea <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	0018      	movs	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b004      	add	sp, #16
 80096f0:	bdb0      	pop	{r4, r5, r7, pc}
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	80002000 	.word	0x80002000

080096f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	2202      	movs	r2, #2
 8009708:	4013      	ands	r3, r2
 800970a:	2b02      	cmp	r3, #2
 800970c:	d103      	bne.n	8009716 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2200      	movs	r2, #0
 8009714:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	2201      	movs	r2, #1
 800971e:	4013      	ands	r3, r2
 8009720:	2b01      	cmp	r3, #1
 8009722:	d007      	beq.n	8009734 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2101      	movs	r1, #1
 8009730:	430a      	orrs	r2, r1
 8009732:	619a      	str	r2, [r3, #24]
  }
}
 8009734:	46c0      	nop			; (mov r8, r8)
 8009736:	46bd      	mov	sp, r7
 8009738:	b002      	add	sp, #8
 800973a:	bd80      	pop	{r7, pc}

0800973c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	1dfb      	adds	r3, r7, #7
 800974a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800974c:	e021      	b.n	8009792 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	3301      	adds	r3, #1
 8009752:	d01e      	beq.n	8009792 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009754:	f7fd f9fa 	bl	8006b4c <HAL_GetTick>
 8009758:	0002      	movs	r2, r0
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d302      	bcc.n	800976a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d113      	bne.n	8009792 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976e:	2220      	movs	r2, #32
 8009770:	431a      	orrs	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2241      	movs	r2, #65	; 0x41
 800977a:	2120      	movs	r1, #32
 800977c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2242      	movs	r2, #66	; 0x42
 8009782:	2100      	movs	r1, #0
 8009784:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2240      	movs	r2, #64	; 0x40
 800978a:	2100      	movs	r1, #0
 800978c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e00f      	b.n	80097b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	4013      	ands	r3, r2
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	425a      	negs	r2, r3
 80097a2:	4153      	adcs	r3, r2
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	001a      	movs	r2, r3
 80097a8:	1dfb      	adds	r3, r7, #7
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d0ce      	beq.n	800974e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	0018      	movs	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	b004      	add	sp, #16
 80097b8:	bd80      	pop	{r7, pc}

080097ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80097c6:	e02b      	b.n	8009820 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	68b9      	ldr	r1, [r7, #8]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	0018      	movs	r0, r3
 80097d0:	f000 f86e 	bl	80098b0 <I2C_IsErrorOccurred>
 80097d4:	1e03      	subs	r3, r0, #0
 80097d6:	d001      	beq.n	80097dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e029      	b.n	8009830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	3301      	adds	r3, #1
 80097e0:	d01e      	beq.n	8009820 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097e2:	f7fd f9b3 	bl	8006b4c <HAL_GetTick>
 80097e6:	0002      	movs	r2, r0
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d302      	bcc.n	80097f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d113      	bne.n	8009820 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097fc:	2220      	movs	r2, #32
 80097fe:	431a      	orrs	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2241      	movs	r2, #65	; 0x41
 8009808:	2120      	movs	r1, #32
 800980a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2242      	movs	r2, #66	; 0x42
 8009810:	2100      	movs	r1, #0
 8009812:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2240      	movs	r2, #64	; 0x40
 8009818:	2100      	movs	r1, #0
 800981a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e007      	b.n	8009830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	2202      	movs	r2, #2
 8009828:	4013      	ands	r3, r2
 800982a:	2b02      	cmp	r3, #2
 800982c:	d1cc      	bne.n	80097c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	0018      	movs	r0, r3
 8009832:	46bd      	mov	sp, r7
 8009834:	b004      	add	sp, #16
 8009836:	bd80      	pop	{r7, pc}

08009838 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009844:	e028      	b.n	8009898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	0018      	movs	r0, r3
 800984e:	f000 f82f 	bl	80098b0 <I2C_IsErrorOccurred>
 8009852:	1e03      	subs	r3, r0, #0
 8009854:	d001      	beq.n	800985a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e026      	b.n	80098a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800985a:	f7fd f977 	bl	8006b4c <HAL_GetTick>
 800985e:	0002      	movs	r2, r0
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	429a      	cmp	r2, r3
 8009868:	d302      	bcc.n	8009870 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d113      	bne.n	8009898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009874:	2220      	movs	r2, #32
 8009876:	431a      	orrs	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2241      	movs	r2, #65	; 0x41
 8009880:	2120      	movs	r1, #32
 8009882:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2242      	movs	r2, #66	; 0x42
 8009888:	2100      	movs	r1, #0
 800988a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2240      	movs	r2, #64	; 0x40
 8009890:	2100      	movs	r1, #0
 8009892:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e007      	b.n	80098a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	2220      	movs	r2, #32
 80098a0:	4013      	ands	r3, r2
 80098a2:	2b20      	cmp	r3, #32
 80098a4:	d1cf      	bne.n	8009846 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	0018      	movs	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b004      	add	sp, #16
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098b0:	b590      	push	{r4, r7, lr}
 80098b2:	b08b      	sub	sp, #44	; 0x2c
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098bc:	2327      	movs	r3, #39	; 0x27
 80098be:	18fb      	adds	r3, r7, r3
 80098c0:	2200      	movs	r2, #0
 80098c2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	2210      	movs	r2, #16
 80098d8:	4013      	ands	r3, r2
 80098da:	d100      	bne.n	80098de <I2C_IsErrorOccurred+0x2e>
 80098dc:	e082      	b.n	80099e4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2210      	movs	r2, #16
 80098e4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098e6:	e060      	b.n	80099aa <I2C_IsErrorOccurred+0xfa>
 80098e8:	2427      	movs	r4, #39	; 0x27
 80098ea:	193b      	adds	r3, r7, r4
 80098ec:	193a      	adds	r2, r7, r4
 80098ee:	7812      	ldrb	r2, [r2, #0]
 80098f0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	3301      	adds	r3, #1
 80098f6:	d058      	beq.n	80099aa <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80098f8:	f7fd f928 	bl	8006b4c <HAL_GetTick>
 80098fc:	0002      	movs	r2, r0
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	429a      	cmp	r2, r3
 8009906:	d306      	bcc.n	8009916 <I2C_IsErrorOccurred+0x66>
 8009908:	193b      	adds	r3, r7, r4
 800990a:	193a      	adds	r2, r7, r4
 800990c:	7812      	ldrb	r2, [r2, #0]
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d149      	bne.n	80099aa <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	2380      	movs	r3, #128	; 0x80
 800991e:	01db      	lsls	r3, r3, #7
 8009920:	4013      	ands	r3, r2
 8009922:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009924:	2013      	movs	r0, #19
 8009926:	183b      	adds	r3, r7, r0
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	2142      	movs	r1, #66	; 0x42
 800992c:	5c52      	ldrb	r2, [r2, r1]
 800992e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699a      	ldr	r2, [r3, #24]
 8009936:	2380      	movs	r3, #128	; 0x80
 8009938:	021b      	lsls	r3, r3, #8
 800993a:	401a      	ands	r2, r3
 800993c:	2380      	movs	r3, #128	; 0x80
 800993e:	021b      	lsls	r3, r3, #8
 8009940:	429a      	cmp	r2, r3
 8009942:	d126      	bne.n	8009992 <I2C_IsErrorOccurred+0xe2>
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	2380      	movs	r3, #128	; 0x80
 8009948:	01db      	lsls	r3, r3, #7
 800994a:	429a      	cmp	r2, r3
 800994c:	d021      	beq.n	8009992 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800994e:	183b      	adds	r3, r7, r0
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b20      	cmp	r3, #32
 8009954:	d01d      	beq.n	8009992 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2180      	movs	r1, #128	; 0x80
 8009962:	01c9      	lsls	r1, r1, #7
 8009964:	430a      	orrs	r2, r1
 8009966:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009968:	f7fd f8f0 	bl	8006b4c <HAL_GetTick>
 800996c:	0003      	movs	r3, r0
 800996e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009970:	e00f      	b.n	8009992 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009972:	f7fd f8eb 	bl	8006b4c <HAL_GetTick>
 8009976:	0002      	movs	r2, r0
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b19      	cmp	r3, #25
 800997e:	d908      	bls.n	8009992 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	2220      	movs	r2, #32
 8009984:	4313      	orrs	r3, r2
 8009986:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009988:	2327      	movs	r3, #39	; 0x27
 800998a:	18fb      	adds	r3, r7, r3
 800998c:	2201      	movs	r2, #1
 800998e:	701a      	strb	r2, [r3, #0]

              break;
 8009990:	e00b      	b.n	80099aa <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	2220      	movs	r2, #32
 800999a:	4013      	ands	r3, r2
 800999c:	2127      	movs	r1, #39	; 0x27
 800999e:	187a      	adds	r2, r7, r1
 80099a0:	1879      	adds	r1, r7, r1
 80099a2:	7809      	ldrb	r1, [r1, #0]
 80099a4:	7011      	strb	r1, [r2, #0]
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d1e3      	bne.n	8009972 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	2220      	movs	r2, #32
 80099b2:	4013      	ands	r3, r2
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d004      	beq.n	80099c2 <I2C_IsErrorOccurred+0x112>
 80099b8:	2327      	movs	r3, #39	; 0x27
 80099ba:	18fb      	adds	r3, r7, r3
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d092      	beq.n	80098e8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80099c2:	2327      	movs	r3, #39	; 0x27
 80099c4:	18fb      	adds	r3, r7, r3
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d103      	bne.n	80099d4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2220      	movs	r2, #32
 80099d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	2204      	movs	r2, #4
 80099d8:	4313      	orrs	r3, r2
 80099da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80099dc:	2327      	movs	r3, #39	; 0x27
 80099de:	18fb      	adds	r3, r7, r3
 80099e0:	2201      	movs	r2, #1
 80099e2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	2380      	movs	r3, #128	; 0x80
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	4013      	ands	r3, r2
 80099f4:	d00c      	beq.n	8009a10 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	2201      	movs	r2, #1
 80099fa:	4313      	orrs	r3, r2
 80099fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2280      	movs	r2, #128	; 0x80
 8009a04:	0052      	lsls	r2, r2, #1
 8009a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a08:	2327      	movs	r3, #39	; 0x27
 8009a0a:	18fb      	adds	r3, r7, r3
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	2380      	movs	r3, #128	; 0x80
 8009a14:	00db      	lsls	r3, r3, #3
 8009a16:	4013      	ands	r3, r2
 8009a18:	d00c      	beq.n	8009a34 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	2208      	movs	r2, #8
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2280      	movs	r2, #128	; 0x80
 8009a28:	00d2      	lsls	r2, r2, #3
 8009a2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a2c:	2327      	movs	r3, #39	; 0x27
 8009a2e:	18fb      	adds	r3, r7, r3
 8009a30:	2201      	movs	r2, #1
 8009a32:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	2380      	movs	r3, #128	; 0x80
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	d00c      	beq.n	8009a58 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	2202      	movs	r2, #2
 8009a42:	4313      	orrs	r3, r2
 8009a44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2280      	movs	r2, #128	; 0x80
 8009a4c:	0092      	lsls	r2, r2, #2
 8009a4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a50:	2327      	movs	r3, #39	; 0x27
 8009a52:	18fb      	adds	r3, r7, r3
 8009a54:	2201      	movs	r2, #1
 8009a56:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8009a58:	2327      	movs	r3, #39	; 0x27
 8009a5a:	18fb      	adds	r3, r7, r3
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d01d      	beq.n	8009a9e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	0018      	movs	r0, r3
 8009a66:	f7ff fe47 	bl	80096f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	490d      	ldr	r1, [pc, #52]	; (8009aac <I2C_IsErrorOccurred+0x1fc>)
 8009a76:	400a      	ands	r2, r1
 8009a78:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	431a      	orrs	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2241      	movs	r2, #65	; 0x41
 8009a8a:	2120      	movs	r1, #32
 8009a8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2242      	movs	r2, #66	; 0x42
 8009a92:	2100      	movs	r1, #0
 8009a94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2240      	movs	r2, #64	; 0x40
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009a9e:	2327      	movs	r3, #39	; 0x27
 8009aa0:	18fb      	adds	r3, r7, r3
 8009aa2:	781b      	ldrb	r3, [r3, #0]
}
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	b00b      	add	sp, #44	; 0x2c
 8009aaa:	bd90      	pop	{r4, r7, pc}
 8009aac:	fe00e800 	.word	0xfe00e800

08009ab0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009ab0:	b590      	push	{r4, r7, lr}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	0008      	movs	r0, r1
 8009aba:	0011      	movs	r1, r2
 8009abc:	607b      	str	r3, [r7, #4]
 8009abe:	240a      	movs	r4, #10
 8009ac0:	193b      	adds	r3, r7, r4
 8009ac2:	1c02      	adds	r2, r0, #0
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	2009      	movs	r0, #9
 8009ac8:	183b      	adds	r3, r7, r0
 8009aca:	1c0a      	adds	r2, r1, #0
 8009acc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ace:	193b      	adds	r3, r7, r4
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	059b      	lsls	r3, r3, #22
 8009ad4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ad6:	183b      	adds	r3, r7, r0
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	0419      	lsls	r1, r3, #16
 8009adc:	23ff      	movs	r3, #255	; 0xff
 8009ade:	041b      	lsls	r3, r3, #16
 8009ae0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ae2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	4313      	orrs	r3, r2
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	085b      	lsrs	r3, r3, #1
 8009af0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009afa:	0d51      	lsrs	r1, r2, #21
 8009afc:	2280      	movs	r2, #128	; 0x80
 8009afe:	00d2      	lsls	r2, r2, #3
 8009b00:	400a      	ands	r2, r1
 8009b02:	4907      	ldr	r1, [pc, #28]	; (8009b20 <I2C_TransferConfig+0x70>)
 8009b04:	430a      	orrs	r2, r1
 8009b06:	43d2      	mvns	r2, r2
 8009b08:	401a      	ands	r2, r3
 8009b0a:	0011      	movs	r1, r2
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b16:	46c0      	nop			; (mov r8, r8)
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	b007      	add	sp, #28
 8009b1c:	bd90      	pop	{r4, r7, pc}
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	03ff63ff 	.word	0x03ff63ff

08009b24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2241      	movs	r2, #65	; 0x41
 8009b32:	5c9b      	ldrb	r3, [r3, r2]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d138      	bne.n	8009bac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2240      	movs	r2, #64	; 0x40
 8009b3e:	5c9b      	ldrb	r3, [r3, r2]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d101      	bne.n	8009b48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b44:	2302      	movs	r3, #2
 8009b46:	e032      	b.n	8009bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2240      	movs	r2, #64	; 0x40
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2241      	movs	r2, #65	; 0x41
 8009b54:	2124      	movs	r1, #36	; 0x24
 8009b56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2101      	movs	r1, #1
 8009b64:	438a      	bics	r2, r1
 8009b66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4911      	ldr	r1, [pc, #68]	; (8009bb8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009b74:	400a      	ands	r2, r1
 8009b76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6819      	ldr	r1, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2101      	movs	r1, #1
 8009b94:	430a      	orrs	r2, r1
 8009b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2241      	movs	r2, #65	; 0x41
 8009b9c:	2120      	movs	r1, #32
 8009b9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2240      	movs	r2, #64	; 0x40
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e000      	b.n	8009bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bac:	2302      	movs	r3, #2
  }
}
 8009bae:	0018      	movs	r0, r3
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	b002      	add	sp, #8
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	46c0      	nop			; (mov r8, r8)
 8009bb8:	ffffefff 	.word	0xffffefff

08009bbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2241      	movs	r2, #65	; 0x41
 8009bca:	5c9b      	ldrb	r3, [r3, r2]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d139      	bne.n	8009c46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2240      	movs	r2, #64	; 0x40
 8009bd6:	5c9b      	ldrb	r3, [r3, r2]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d101      	bne.n	8009be0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e033      	b.n	8009c48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2240      	movs	r2, #64	; 0x40
 8009be4:	2101      	movs	r1, #1
 8009be6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2241      	movs	r2, #65	; 0x41
 8009bec:	2124      	movs	r1, #36	; 0x24
 8009bee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	438a      	bics	r2, r1
 8009bfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4a11      	ldr	r2, [pc, #68]	; (8009c50 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2241      	movs	r2, #65	; 0x41
 8009c36:	2120      	movs	r1, #32
 8009c38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2240      	movs	r2, #64	; 0x40
 8009c3e:	2100      	movs	r1, #0
 8009c40:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	e000      	b.n	8009c48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c46:	2302      	movs	r3, #2
  }
}
 8009c48:	0018      	movs	r0, r3
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	b004      	add	sp, #16
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	fffff0ff 	.word	0xfffff0ff

08009c54 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e03d      	b.n	8009ce2 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a20      	ldr	r2, [pc, #128]	; (8009cec <HAL_IWDG_Init+0x98>)
 8009c6c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a1f      	ldr	r2, [pc, #124]	; (8009cf0 <HAL_IWDG_Init+0x9c>)
 8009c74:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6852      	ldr	r2, [r2, #4]
 8009c7e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6892      	ldr	r2, [r2, #8]
 8009c88:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009c8a:	f7fc ff5f 	bl	8006b4c <HAL_GetTick>
 8009c8e:	0003      	movs	r3, r0
 8009c90:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009c92:	e00e      	b.n	8009cb2 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009c94:	f7fc ff5a 	bl	8006b4c <HAL_GetTick>
 8009c98:	0002      	movs	r2, r0
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	2b31      	cmp	r3, #49	; 0x31
 8009ca0:	d907      	bls.n	8009cb2 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	2207      	movs	r2, #7
 8009caa:	4013      	ands	r3, r2
 8009cac:	d001      	beq.n	8009cb2 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e017      	b.n	8009ce2 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	2207      	movs	r2, #7
 8009cba:	4013      	ands	r3, r2
 8009cbc:	d1ea      	bne.n	8009c94 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	691a      	ldr	r2, [r3, #16]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d005      	beq.n	8009cd8 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	68d2      	ldr	r2, [r2, #12]
 8009cd4:	611a      	str	r2, [r3, #16]
 8009cd6:	e003      	b.n	8009ce0 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a05      	ldr	r2, [pc, #20]	; (8009cf4 <HAL_IWDG_Init+0xa0>)
 8009cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b004      	add	sp, #16
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	46c0      	nop			; (mov r8, r8)
 8009cec:	0000cccc 	.word	0x0000cccc
 8009cf0:	00005555 	.word	0x00005555
 8009cf4:	0000aaaa 	.word	0x0000aaaa

08009cf8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a03      	ldr	r2, [pc, #12]	; (8009d14 <HAL_IWDG_Refresh+0x1c>)
 8009d06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	b002      	add	sp, #8
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	46c0      	nop			; (mov r8, r8)
 8009d14:	0000aaaa 	.word	0x0000aaaa

08009d18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009d20:	4b19      	ldr	r3, [pc, #100]	; (8009d88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a19      	ldr	r2, [pc, #100]	; (8009d8c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009d26:	4013      	ands	r3, r2
 8009d28:	0019      	movs	r1, r3
 8009d2a:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	2380      	movs	r3, #128	; 0x80
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d11f      	bne.n	8009d7c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009d3c:	4b14      	ldr	r3, [pc, #80]	; (8009d90 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	0013      	movs	r3, r2
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	189b      	adds	r3, r3, r2
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	4912      	ldr	r1, [pc, #72]	; (8009d94 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009d4a:	0018      	movs	r0, r3
 8009d4c:	f7f6 f9f4 	bl	8000138 <__udivsi3>
 8009d50:	0003      	movs	r3, r0
 8009d52:	3301      	adds	r3, #1
 8009d54:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d56:	e008      	b.n	8009d6a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	e001      	b.n	8009d6a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e009      	b.n	8009d7e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d6a:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009d6c:	695a      	ldr	r2, [r3, #20]
 8009d6e:	2380      	movs	r3, #128	; 0x80
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	401a      	ands	r2, r3
 8009d74:	2380      	movs	r3, #128	; 0x80
 8009d76:	00db      	lsls	r3, r3, #3
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d0ed      	beq.n	8009d58 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	0018      	movs	r0, r3
 8009d80:	46bd      	mov	sp, r7
 8009d82:	b004      	add	sp, #16
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	46c0      	nop			; (mov r8, r8)
 8009d88:	40007000 	.word	0x40007000
 8009d8c:	fffff9ff 	.word	0xfffff9ff
 8009d90:	2000000c 	.word	0x2000000c
 8009d94:	000f4240 	.word	0x000f4240

08009d98 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009d9c:	4b03      	ldr	r3, [pc, #12]	; (8009dac <LL_RCC_GetAPB1Prescaler+0x14>)
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	23e0      	movs	r3, #224	; 0xe0
 8009da2:	01db      	lsls	r3, r3, #7
 8009da4:	4013      	ands	r3, r2
}
 8009da6:	0018      	movs	r0, r3
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	40021000 	.word	0x40021000

08009db0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e2f3      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	4013      	ands	r3, r2
 8009dca:	d100      	bne.n	8009dce <HAL_RCC_OscConfig+0x1e>
 8009dcc:	e07c      	b.n	8009ec8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dce:	4bc3      	ldr	r3, [pc, #780]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	2238      	movs	r2, #56	; 0x38
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009dd8:	4bc0      	ldr	r3, [pc, #768]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	2203      	movs	r2, #3
 8009dde:	4013      	ands	r3, r2
 8009de0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	2b10      	cmp	r3, #16
 8009de6:	d102      	bne.n	8009dee <HAL_RCC_OscConfig+0x3e>
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d002      	beq.n	8009df4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	2b08      	cmp	r3, #8
 8009df2:	d10b      	bne.n	8009e0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009df4:	4bb9      	ldr	r3, [pc, #740]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	2380      	movs	r3, #128	; 0x80
 8009dfa:	029b      	lsls	r3, r3, #10
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	d062      	beq.n	8009ec6 <HAL_RCC_OscConfig+0x116>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d15e      	bne.n	8009ec6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e2ce      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	2380      	movs	r3, #128	; 0x80
 8009e12:	025b      	lsls	r3, r3, #9
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d107      	bne.n	8009e28 <HAL_RCC_OscConfig+0x78>
 8009e18:	4bb0      	ldr	r3, [pc, #704]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	4baf      	ldr	r3, [pc, #700]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e1e:	2180      	movs	r1, #128	; 0x80
 8009e20:	0249      	lsls	r1, r1, #9
 8009e22:	430a      	orrs	r2, r1
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	e020      	b.n	8009e6a <HAL_RCC_OscConfig+0xba>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	23a0      	movs	r3, #160	; 0xa0
 8009e2e:	02db      	lsls	r3, r3, #11
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d10e      	bne.n	8009e52 <HAL_RCC_OscConfig+0xa2>
 8009e34:	4ba9      	ldr	r3, [pc, #676]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	4ba8      	ldr	r3, [pc, #672]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e3a:	2180      	movs	r1, #128	; 0x80
 8009e3c:	02c9      	lsls	r1, r1, #11
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	4ba6      	ldr	r3, [pc, #664]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4ba5      	ldr	r3, [pc, #660]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e48:	2180      	movs	r1, #128	; 0x80
 8009e4a:	0249      	lsls	r1, r1, #9
 8009e4c:	430a      	orrs	r2, r1
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	e00b      	b.n	8009e6a <HAL_RCC_OscConfig+0xba>
 8009e52:	4ba2      	ldr	r3, [pc, #648]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	4ba1      	ldr	r3, [pc, #644]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e58:	49a1      	ldr	r1, [pc, #644]	; (800a0e0 <HAL_RCC_OscConfig+0x330>)
 8009e5a:	400a      	ands	r2, r1
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	4b9f      	ldr	r3, [pc, #636]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	4b9e      	ldr	r3, [pc, #632]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e64:	499f      	ldr	r1, [pc, #636]	; (800a0e4 <HAL_RCC_OscConfig+0x334>)
 8009e66:	400a      	ands	r2, r1
 8009e68:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d014      	beq.n	8009e9c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e72:	f7fc fe6b 	bl	8006b4c <HAL_GetTick>
 8009e76:	0003      	movs	r3, r0
 8009e78:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e7a:	e008      	b.n	8009e8e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e7c:	f7fc fe66 	bl	8006b4c <HAL_GetTick>
 8009e80:	0002      	movs	r2, r0
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	2b64      	cmp	r3, #100	; 0x64
 8009e88:	d901      	bls.n	8009e8e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	e28d      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e8e:	4b93      	ldr	r3, [pc, #588]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	2380      	movs	r3, #128	; 0x80
 8009e94:	029b      	lsls	r3, r3, #10
 8009e96:	4013      	ands	r3, r2
 8009e98:	d0f0      	beq.n	8009e7c <HAL_RCC_OscConfig+0xcc>
 8009e9a:	e015      	b.n	8009ec8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e9c:	f7fc fe56 	bl	8006b4c <HAL_GetTick>
 8009ea0:	0003      	movs	r3, r0
 8009ea2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ea4:	e008      	b.n	8009eb8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ea6:	f7fc fe51 	bl	8006b4c <HAL_GetTick>
 8009eaa:	0002      	movs	r2, r0
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	2b64      	cmp	r3, #100	; 0x64
 8009eb2:	d901      	bls.n	8009eb8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e278      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009eb8:	4b88      	ldr	r3, [pc, #544]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	2380      	movs	r3, #128	; 0x80
 8009ebe:	029b      	lsls	r3, r3, #10
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	d1f0      	bne.n	8009ea6 <HAL_RCC_OscConfig+0xf6>
 8009ec4:	e000      	b.n	8009ec8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ec6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2202      	movs	r2, #2
 8009ece:	4013      	ands	r3, r2
 8009ed0:	d100      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x124>
 8009ed2:	e099      	b.n	800a008 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ed4:	4b81      	ldr	r3, [pc, #516]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	2238      	movs	r2, #56	; 0x38
 8009eda:	4013      	ands	r3, r2
 8009edc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ede:	4b7f      	ldr	r3, [pc, #508]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	2b10      	cmp	r3, #16
 8009eec:	d102      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x144>
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d002      	beq.n	8009efa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d135      	bne.n	8009f66 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009efa:	4b78      	ldr	r3, [pc, #480]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	2380      	movs	r3, #128	; 0x80
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	4013      	ands	r3, r2
 8009f04:	d005      	beq.n	8009f12 <HAL_RCC_OscConfig+0x162>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e24b      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f12:	4b72      	ldr	r3, [pc, #456]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	4a74      	ldr	r2, [pc, #464]	; (800a0e8 <HAL_RCC_OscConfig+0x338>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	0019      	movs	r1, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	021a      	lsls	r2, r3, #8
 8009f22:	4b6e      	ldr	r3, [pc, #440]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009f24:	430a      	orrs	r2, r1
 8009f26:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d112      	bne.n	8009f54 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009f2e:	4b6b      	ldr	r3, [pc, #428]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a6e      	ldr	r2, [pc, #440]	; (800a0ec <HAL_RCC_OscConfig+0x33c>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	0019      	movs	r1, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691a      	ldr	r2, [r3, #16]
 8009f3c:	4b67      	ldr	r3, [pc, #412]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009f42:	4b66      	ldr	r3, [pc, #408]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	0adb      	lsrs	r3, r3, #11
 8009f48:	2207      	movs	r2, #7
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	4a68      	ldr	r2, [pc, #416]	; (800a0f0 <HAL_RCC_OscConfig+0x340>)
 8009f4e:	40da      	lsrs	r2, r3
 8009f50:	4b68      	ldr	r3, [pc, #416]	; (800a0f4 <HAL_RCC_OscConfig+0x344>)
 8009f52:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009f54:	4b68      	ldr	r3, [pc, #416]	; (800a0f8 <HAL_RCC_OscConfig+0x348>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f7fc fd9b 	bl	8006a94 <HAL_InitTick>
 8009f5e:	1e03      	subs	r3, r0, #0
 8009f60:	d051      	beq.n	800a006 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e221      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d030      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009f6e:	4b5b      	ldr	r3, [pc, #364]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a5e      	ldr	r2, [pc, #376]	; (800a0ec <HAL_RCC_OscConfig+0x33c>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	0019      	movs	r1, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691a      	ldr	r2, [r3, #16]
 8009f7c:	4b57      	ldr	r3, [pc, #348]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009f82:	4b56      	ldr	r3, [pc, #344]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	4b55      	ldr	r3, [pc, #340]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009f88:	2180      	movs	r1, #128	; 0x80
 8009f8a:	0049      	lsls	r1, r1, #1
 8009f8c:	430a      	orrs	r2, r1
 8009f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f90:	f7fc fddc 	bl	8006b4c <HAL_GetTick>
 8009f94:	0003      	movs	r3, r0
 8009f96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f98:	e008      	b.n	8009fac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f9a:	f7fc fdd7 	bl	8006b4c <HAL_GetTick>
 8009f9e:	0002      	movs	r2, r0
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d901      	bls.n	8009fac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e1fe      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009fac:	4b4b      	ldr	r3, [pc, #300]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	2380      	movs	r3, #128	; 0x80
 8009fb2:	00db      	lsls	r3, r3, #3
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	d0f0      	beq.n	8009f9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fb8:	4b48      	ldr	r3, [pc, #288]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	4a4a      	ldr	r2, [pc, #296]	; (800a0e8 <HAL_RCC_OscConfig+0x338>)
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	0019      	movs	r1, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	021a      	lsls	r2, r3, #8
 8009fc8:	4b44      	ldr	r3, [pc, #272]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	e01b      	b.n	800a008 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009fd0:	4b42      	ldr	r3, [pc, #264]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	4b41      	ldr	r3, [pc, #260]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009fd6:	4949      	ldr	r1, [pc, #292]	; (800a0fc <HAL_RCC_OscConfig+0x34c>)
 8009fd8:	400a      	ands	r2, r1
 8009fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fdc:	f7fc fdb6 	bl	8006b4c <HAL_GetTick>
 8009fe0:	0003      	movs	r3, r0
 8009fe2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fe4:	e008      	b.n	8009ff8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fe6:	f7fc fdb1 	bl	8006b4c <HAL_GetTick>
 8009fea:	0002      	movs	r2, r0
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d901      	bls.n	8009ff8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e1d8      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ff8:	4b38      	ldr	r3, [pc, #224]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	2380      	movs	r3, #128	; 0x80
 8009ffe:	00db      	lsls	r3, r3, #3
 800a000:	4013      	ands	r3, r2
 800a002:	d1f0      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x236>
 800a004:	e000      	b.n	800a008 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a006:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2208      	movs	r2, #8
 800a00e:	4013      	ands	r3, r2
 800a010:	d047      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a012:	4b32      	ldr	r3, [pc, #200]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	2238      	movs	r2, #56	; 0x38
 800a018:	4013      	ands	r3, r2
 800a01a:	2b18      	cmp	r3, #24
 800a01c:	d10a      	bne.n	800a034 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a01e:	4b2f      	ldr	r3, [pc, #188]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a022:	2202      	movs	r2, #2
 800a024:	4013      	ands	r3, r2
 800a026:	d03c      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x2f2>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d138      	bne.n	800a0a2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e1ba      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d019      	beq.n	800a070 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a03c:	4b27      	ldr	r3, [pc, #156]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a03e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a040:	4b26      	ldr	r3, [pc, #152]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a042:	2101      	movs	r1, #1
 800a044:	430a      	orrs	r2, r1
 800a046:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a048:	f7fc fd80 	bl	8006b4c <HAL_GetTick>
 800a04c:	0003      	movs	r3, r0
 800a04e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a050:	e008      	b.n	800a064 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a052:	f7fc fd7b 	bl	8006b4c <HAL_GetTick>
 800a056:	0002      	movs	r2, r0
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d901      	bls.n	800a064 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e1a2      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a064:	4b1d      	ldr	r3, [pc, #116]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a068:	2202      	movs	r2, #2
 800a06a:	4013      	ands	r3, r2
 800a06c:	d0f1      	beq.n	800a052 <HAL_RCC_OscConfig+0x2a2>
 800a06e:	e018      	b.n	800a0a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a070:	4b1a      	ldr	r3, [pc, #104]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a072:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a074:	4b19      	ldr	r3, [pc, #100]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a076:	2101      	movs	r1, #1
 800a078:	438a      	bics	r2, r1
 800a07a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a07c:	f7fc fd66 	bl	8006b4c <HAL_GetTick>
 800a080:	0003      	movs	r3, r0
 800a082:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a084:	e008      	b.n	800a098 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a086:	f7fc fd61 	bl	8006b4c <HAL_GetTick>
 800a08a:	0002      	movs	r2, r0
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	2b02      	cmp	r3, #2
 800a092:	d901      	bls.n	800a098 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e188      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a098:	4b10      	ldr	r3, [pc, #64]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a09a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a09c:	2202      	movs	r2, #2
 800a09e:	4013      	ands	r3, r2
 800a0a0:	d1f1      	bne.n	800a086 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2204      	movs	r2, #4
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	d100      	bne.n	800a0ae <HAL_RCC_OscConfig+0x2fe>
 800a0ac:	e0c6      	b.n	800a23c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0ae:	231f      	movs	r3, #31
 800a0b0:	18fb      	adds	r3, r7, r3
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a0b6:	4b09      	ldr	r3, [pc, #36]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	2238      	movs	r2, #56	; 0x38
 800a0bc:	4013      	ands	r3, r2
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	d11e      	bne.n	800a100 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a0c2:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <HAL_RCC_OscConfig+0x32c>)
 800a0c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	d100      	bne.n	800a0ce <HAL_RCC_OscConfig+0x31e>
 800a0cc:	e0b6      	b.n	800a23c <HAL_RCC_OscConfig+0x48c>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d000      	beq.n	800a0d8 <HAL_RCC_OscConfig+0x328>
 800a0d6:	e0b1      	b.n	800a23c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e166      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
 800a0dc:	40021000 	.word	0x40021000
 800a0e0:	fffeffff 	.word	0xfffeffff
 800a0e4:	fffbffff 	.word	0xfffbffff
 800a0e8:	ffff80ff 	.word	0xffff80ff
 800a0ec:	ffffc7ff 	.word	0xffffc7ff
 800a0f0:	00f42400 	.word	0x00f42400
 800a0f4:	2000000c 	.word	0x2000000c
 800a0f8:	20000010 	.word	0x20000010
 800a0fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a100:	4bac      	ldr	r3, [pc, #688]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a104:	2380      	movs	r3, #128	; 0x80
 800a106:	055b      	lsls	r3, r3, #21
 800a108:	4013      	ands	r3, r2
 800a10a:	d101      	bne.n	800a110 <HAL_RCC_OscConfig+0x360>
 800a10c:	2301      	movs	r3, #1
 800a10e:	e000      	b.n	800a112 <HAL_RCC_OscConfig+0x362>
 800a110:	2300      	movs	r3, #0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d011      	beq.n	800a13a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a116:	4ba7      	ldr	r3, [pc, #668]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a11a:	4ba6      	ldr	r3, [pc, #664]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a11c:	2180      	movs	r1, #128	; 0x80
 800a11e:	0549      	lsls	r1, r1, #21
 800a120:	430a      	orrs	r2, r1
 800a122:	63da      	str	r2, [r3, #60]	; 0x3c
 800a124:	4ba3      	ldr	r3, [pc, #652]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a128:	2380      	movs	r3, #128	; 0x80
 800a12a:	055b      	lsls	r3, r3, #21
 800a12c:	4013      	ands	r3, r2
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a132:	231f      	movs	r3, #31
 800a134:	18fb      	adds	r3, r7, r3
 800a136:	2201      	movs	r2, #1
 800a138:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a13a:	4b9f      	ldr	r3, [pc, #636]	; (800a3b8 <HAL_RCC_OscConfig+0x608>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	2380      	movs	r3, #128	; 0x80
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	4013      	ands	r3, r2
 800a144:	d11a      	bne.n	800a17c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a146:	4b9c      	ldr	r3, [pc, #624]	; (800a3b8 <HAL_RCC_OscConfig+0x608>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	4b9b      	ldr	r3, [pc, #620]	; (800a3b8 <HAL_RCC_OscConfig+0x608>)
 800a14c:	2180      	movs	r1, #128	; 0x80
 800a14e:	0049      	lsls	r1, r1, #1
 800a150:	430a      	orrs	r2, r1
 800a152:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a154:	f7fc fcfa 	bl	8006b4c <HAL_GetTick>
 800a158:	0003      	movs	r3, r0
 800a15a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a15c:	e008      	b.n	800a170 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a15e:	f7fc fcf5 	bl	8006b4c <HAL_GetTick>
 800a162:	0002      	movs	r2, r0
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d901      	bls.n	800a170 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e11c      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a170:	4b91      	ldr	r3, [pc, #580]	; (800a3b8 <HAL_RCC_OscConfig+0x608>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	2380      	movs	r3, #128	; 0x80
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	4013      	ands	r3, r2
 800a17a:	d0f0      	beq.n	800a15e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d106      	bne.n	800a192 <HAL_RCC_OscConfig+0x3e2>
 800a184:	4b8b      	ldr	r3, [pc, #556]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a188:	4b8a      	ldr	r3, [pc, #552]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a18a:	2101      	movs	r1, #1
 800a18c:	430a      	orrs	r2, r1
 800a18e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a190:	e01c      	b.n	800a1cc <HAL_RCC_OscConfig+0x41c>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	2b05      	cmp	r3, #5
 800a198:	d10c      	bne.n	800a1b4 <HAL_RCC_OscConfig+0x404>
 800a19a:	4b86      	ldr	r3, [pc, #536]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a19c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a19e:	4b85      	ldr	r3, [pc, #532]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a1a0:	2104      	movs	r1, #4
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1a6:	4b83      	ldr	r3, [pc, #524]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a1a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1aa:	4b82      	ldr	r3, [pc, #520]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1b2:	e00b      	b.n	800a1cc <HAL_RCC_OscConfig+0x41c>
 800a1b4:	4b7f      	ldr	r3, [pc, #508]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a1b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1b8:	4b7e      	ldr	r3, [pc, #504]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	438a      	bics	r2, r1
 800a1be:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1c0:	4b7c      	ldr	r3, [pc, #496]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a1c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1c4:	4b7b      	ldr	r3, [pc, #492]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a1c6:	2104      	movs	r1, #4
 800a1c8:	438a      	bics	r2, r1
 800a1ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d014      	beq.n	800a1fe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d4:	f7fc fcba 	bl	8006b4c <HAL_GetTick>
 800a1d8:	0003      	movs	r3, r0
 800a1da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1dc:	e009      	b.n	800a1f2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1de:	f7fc fcb5 	bl	8006b4c <HAL_GetTick>
 800a1e2:	0002      	movs	r2, r0
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	4a74      	ldr	r2, [pc, #464]	; (800a3bc <HAL_RCC_OscConfig+0x60c>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e0db      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1f2:	4b70      	ldr	r3, [pc, #448]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a1f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	d0f0      	beq.n	800a1de <HAL_RCC_OscConfig+0x42e>
 800a1fc:	e013      	b.n	800a226 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1fe:	f7fc fca5 	bl	8006b4c <HAL_GetTick>
 800a202:	0003      	movs	r3, r0
 800a204:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a206:	e009      	b.n	800a21c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a208:	f7fc fca0 	bl	8006b4c <HAL_GetTick>
 800a20c:	0002      	movs	r2, r0
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	4a6a      	ldr	r2, [pc, #424]	; (800a3bc <HAL_RCC_OscConfig+0x60c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d901      	bls.n	800a21c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e0c6      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a21c:	4b65      	ldr	r3, [pc, #404]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a21e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a220:	2202      	movs	r2, #2
 800a222:	4013      	ands	r3, r2
 800a224:	d1f0      	bne.n	800a208 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a226:	231f      	movs	r3, #31
 800a228:	18fb      	adds	r3, r7, r3
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d105      	bne.n	800a23c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a230:	4b60      	ldr	r3, [pc, #384]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a234:	4b5f      	ldr	r3, [pc, #380]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a236:	4962      	ldr	r1, [pc, #392]	; (800a3c0 <HAL_RCC_OscConfig+0x610>)
 800a238:	400a      	ands	r2, r1
 800a23a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d100      	bne.n	800a246 <HAL_RCC_OscConfig+0x496>
 800a244:	e0b0      	b.n	800a3a8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a246:	4b5b      	ldr	r3, [pc, #364]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	2238      	movs	r2, #56	; 0x38
 800a24c:	4013      	ands	r3, r2
 800a24e:	2b10      	cmp	r3, #16
 800a250:	d100      	bne.n	800a254 <HAL_RCC_OscConfig+0x4a4>
 800a252:	e078      	b.n	800a346 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d153      	bne.n	800a304 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a25c:	4b55      	ldr	r3, [pc, #340]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	4b54      	ldr	r3, [pc, #336]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a262:	4958      	ldr	r1, [pc, #352]	; (800a3c4 <HAL_RCC_OscConfig+0x614>)
 800a264:	400a      	ands	r2, r1
 800a266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a268:	f7fc fc70 	bl	8006b4c <HAL_GetTick>
 800a26c:	0003      	movs	r3, r0
 800a26e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a270:	e008      	b.n	800a284 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a272:	f7fc fc6b 	bl	8006b4c <HAL_GetTick>
 800a276:	0002      	movs	r2, r0
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d901      	bls.n	800a284 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e092      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a284:	4b4b      	ldr	r3, [pc, #300]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	2380      	movs	r3, #128	; 0x80
 800a28a:	049b      	lsls	r3, r3, #18
 800a28c:	4013      	ands	r3, r2
 800a28e:	d1f0      	bne.n	800a272 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a290:	4b48      	ldr	r3, [pc, #288]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	4a4c      	ldr	r2, [pc, #304]	; (800a3c8 <HAL_RCC_OscConfig+0x618>)
 800a296:	4013      	ands	r3, r2
 800a298:	0019      	movs	r1, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1a      	ldr	r2, [r3, #32]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a8:	021b      	lsls	r3, r3, #8
 800a2aa:	431a      	orrs	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	4b3e      	ldr	r3, [pc, #248]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2be:	4b3d      	ldr	r3, [pc, #244]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	4b3c      	ldr	r3, [pc, #240]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a2c4:	2180      	movs	r1, #128	; 0x80
 800a2c6:	0449      	lsls	r1, r1, #17
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a2cc:	4b39      	ldr	r3, [pc, #228]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	4b38      	ldr	r3, [pc, #224]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a2d2:	2180      	movs	r1, #128	; 0x80
 800a2d4:	0549      	lsls	r1, r1, #21
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2da:	f7fc fc37 	bl	8006b4c <HAL_GetTick>
 800a2de:	0003      	movs	r3, r0
 800a2e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2e2:	e008      	b.n	800a2f6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2e4:	f7fc fc32 	bl	8006b4c <HAL_GetTick>
 800a2e8:	0002      	movs	r2, r0
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d901      	bls.n	800a2f6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e059      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2f6:	4b2f      	ldr	r3, [pc, #188]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	2380      	movs	r3, #128	; 0x80
 800a2fc:	049b      	lsls	r3, r3, #18
 800a2fe:	4013      	ands	r3, r2
 800a300:	d0f0      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x534>
 800a302:	e051      	b.n	800a3a8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a304:	4b2b      	ldr	r3, [pc, #172]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	4b2a      	ldr	r3, [pc, #168]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a30a:	492e      	ldr	r1, [pc, #184]	; (800a3c4 <HAL_RCC_OscConfig+0x614>)
 800a30c:	400a      	ands	r2, r1
 800a30e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a310:	f7fc fc1c 	bl	8006b4c <HAL_GetTick>
 800a314:	0003      	movs	r3, r0
 800a316:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a318:	e008      	b.n	800a32c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a31a:	f7fc fc17 	bl	8006b4c <HAL_GetTick>
 800a31e:	0002      	movs	r2, r0
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	2b02      	cmp	r3, #2
 800a326:	d901      	bls.n	800a32c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e03e      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a32c:	4b21      	ldr	r3, [pc, #132]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	2380      	movs	r3, #128	; 0x80
 800a332:	049b      	lsls	r3, r3, #18
 800a334:	4013      	ands	r3, r2
 800a336:	d1f0      	bne.n	800a31a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800a338:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	4b1d      	ldr	r3, [pc, #116]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a33e:	4923      	ldr	r1, [pc, #140]	; (800a3cc <HAL_RCC_OscConfig+0x61c>)
 800a340:	400a      	ands	r2, r1
 800a342:	60da      	str	r2, [r3, #12]
 800a344:	e030      	b.n	800a3a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d101      	bne.n	800a352 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e02b      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a352:	4b18      	ldr	r3, [pc, #96]	; (800a3b4 <HAL_RCC_OscConfig+0x604>)
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2203      	movs	r2, #3
 800a35c:	401a      	ands	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	429a      	cmp	r2, r3
 800a364:	d11e      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2270      	movs	r2, #112	; 0x70
 800a36a:	401a      	ands	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a370:	429a      	cmp	r2, r3
 800a372:	d117      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	23fe      	movs	r3, #254	; 0xfe
 800a378:	01db      	lsls	r3, r3, #7
 800a37a:	401a      	ands	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a380:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a382:	429a      	cmp	r2, r3
 800a384:	d10e      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	23f8      	movs	r3, #248	; 0xf8
 800a38a:	039b      	lsls	r3, r3, #14
 800a38c:	401a      	ands	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a392:	429a      	cmp	r2, r3
 800a394:	d106      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	0f5b      	lsrs	r3, r3, #29
 800a39a:	075a      	lsls	r2, r3, #29
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d001      	beq.n	800a3a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e000      	b.n	800a3aa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	0018      	movs	r0, r3
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	b008      	add	sp, #32
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	40021000 	.word	0x40021000
 800a3b8:	40007000 	.word	0x40007000
 800a3bc:	00001388 	.word	0x00001388
 800a3c0:	efffffff 	.word	0xefffffff
 800a3c4:	feffffff 	.word	0xfeffffff
 800a3c8:	1fc1808c 	.word	0x1fc1808c
 800a3cc:	effefffc 	.word	0xeffefffc

0800a3d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e0e9      	b.n	800a5b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a3e4:	4b76      	ldr	r3, [pc, #472]	; (800a5c0 <HAL_RCC_ClockConfig+0x1f0>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2207      	movs	r2, #7
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d91e      	bls.n	800a430 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3f2:	4b73      	ldr	r3, [pc, #460]	; (800a5c0 <HAL_RCC_ClockConfig+0x1f0>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2207      	movs	r2, #7
 800a3f8:	4393      	bics	r3, r2
 800a3fa:	0019      	movs	r1, r3
 800a3fc:	4b70      	ldr	r3, [pc, #448]	; (800a5c0 <HAL_RCC_ClockConfig+0x1f0>)
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a404:	f7fc fba2 	bl	8006b4c <HAL_GetTick>
 800a408:	0003      	movs	r3, r0
 800a40a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a40c:	e009      	b.n	800a422 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a40e:	f7fc fb9d 	bl	8006b4c <HAL_GetTick>
 800a412:	0002      	movs	r2, r0
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	4a6a      	ldr	r2, [pc, #424]	; (800a5c4 <HAL_RCC_ClockConfig+0x1f4>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d901      	bls.n	800a422 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e0ca      	b.n	800a5b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a422:	4b67      	ldr	r3, [pc, #412]	; (800a5c0 <HAL_RCC_ClockConfig+0x1f0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2207      	movs	r2, #7
 800a428:	4013      	ands	r3, r2
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d1ee      	bne.n	800a40e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2202      	movs	r2, #2
 800a436:	4013      	ands	r3, r2
 800a438:	d015      	beq.n	800a466 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2204      	movs	r2, #4
 800a440:	4013      	ands	r3, r2
 800a442:	d006      	beq.n	800a452 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a444:	4b60      	ldr	r3, [pc, #384]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a446:	689a      	ldr	r2, [r3, #8]
 800a448:	4b5f      	ldr	r3, [pc, #380]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a44a:	21e0      	movs	r1, #224	; 0xe0
 800a44c:	01c9      	lsls	r1, r1, #7
 800a44e:	430a      	orrs	r2, r1
 800a450:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a452:	4b5d      	ldr	r3, [pc, #372]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	4a5d      	ldr	r2, [pc, #372]	; (800a5cc <HAL_RCC_ClockConfig+0x1fc>)
 800a458:	4013      	ands	r3, r2
 800a45a:	0019      	movs	r1, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	4b59      	ldr	r3, [pc, #356]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a462:	430a      	orrs	r2, r1
 800a464:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2201      	movs	r2, #1
 800a46c:	4013      	ands	r3, r2
 800a46e:	d057      	beq.n	800a520 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d107      	bne.n	800a488 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a478:	4b53      	ldr	r3, [pc, #332]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	2380      	movs	r3, #128	; 0x80
 800a47e:	029b      	lsls	r3, r3, #10
 800a480:	4013      	ands	r3, r2
 800a482:	d12b      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e097      	b.n	800a5b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d107      	bne.n	800a4a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a490:	4b4d      	ldr	r3, [pc, #308]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	2380      	movs	r3, #128	; 0x80
 800a496:	049b      	lsls	r3, r3, #18
 800a498:	4013      	ands	r3, r2
 800a49a:	d11f      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e08b      	b.n	800a5b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d107      	bne.n	800a4b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4a8:	4b47      	ldr	r3, [pc, #284]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	2380      	movs	r3, #128	; 0x80
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	d113      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e07f      	b.n	800a5b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d106      	bne.n	800a4ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a4c0:	4b41      	ldr	r3, [pc, #260]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a4c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	d108      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e074      	b.n	800a5b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4ce:	4b3e      	ldr	r3, [pc, #248]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	d101      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e06d      	b.n	800a5b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a4dc:	4b3a      	ldr	r3, [pc, #232]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2207      	movs	r2, #7
 800a4e2:	4393      	bics	r3, r2
 800a4e4:	0019      	movs	r1, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	4b37      	ldr	r3, [pc, #220]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4f0:	f7fc fb2c 	bl	8006b4c <HAL_GetTick>
 800a4f4:	0003      	movs	r3, r0
 800a4f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4f8:	e009      	b.n	800a50e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4fa:	f7fc fb27 	bl	8006b4c <HAL_GetTick>
 800a4fe:	0002      	movs	r2, r0
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	4a2f      	ldr	r2, [pc, #188]	; (800a5c4 <HAL_RCC_ClockConfig+0x1f4>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d901      	bls.n	800a50e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e054      	b.n	800a5b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a50e:	4b2e      	ldr	r3, [pc, #184]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	2238      	movs	r2, #56	; 0x38
 800a514:	401a      	ands	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d1ec      	bne.n	800a4fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a520:	4b27      	ldr	r3, [pc, #156]	; (800a5c0 <HAL_RCC_ClockConfig+0x1f0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2207      	movs	r2, #7
 800a526:	4013      	ands	r3, r2
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d21e      	bcs.n	800a56c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a52e:	4b24      	ldr	r3, [pc, #144]	; (800a5c0 <HAL_RCC_ClockConfig+0x1f0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2207      	movs	r2, #7
 800a534:	4393      	bics	r3, r2
 800a536:	0019      	movs	r1, r3
 800a538:	4b21      	ldr	r3, [pc, #132]	; (800a5c0 <HAL_RCC_ClockConfig+0x1f0>)
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a540:	f7fc fb04 	bl	8006b4c <HAL_GetTick>
 800a544:	0003      	movs	r3, r0
 800a546:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a548:	e009      	b.n	800a55e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a54a:	f7fc faff 	bl	8006b4c <HAL_GetTick>
 800a54e:	0002      	movs	r2, r0
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	4a1b      	ldr	r2, [pc, #108]	; (800a5c4 <HAL_RCC_ClockConfig+0x1f4>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d901      	bls.n	800a55e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e02c      	b.n	800a5b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a55e:	4b18      	ldr	r3, [pc, #96]	; (800a5c0 <HAL_RCC_ClockConfig+0x1f0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2207      	movs	r2, #7
 800a564:	4013      	ands	r3, r2
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d1ee      	bne.n	800a54a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2204      	movs	r2, #4
 800a572:	4013      	ands	r3, r2
 800a574:	d009      	beq.n	800a58a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a576:	4b14      	ldr	r3, [pc, #80]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	4a15      	ldr	r2, [pc, #84]	; (800a5d0 <HAL_RCC_ClockConfig+0x200>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	0019      	movs	r1, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	4b10      	ldr	r3, [pc, #64]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a586:	430a      	orrs	r2, r1
 800a588:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a58a:	f000 f829 	bl	800a5e0 <HAL_RCC_GetSysClockFreq>
 800a58e:	0001      	movs	r1, r0
 800a590:	4b0d      	ldr	r3, [pc, #52]	; (800a5c8 <HAL_RCC_ClockConfig+0x1f8>)
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	0a1b      	lsrs	r3, r3, #8
 800a596:	220f      	movs	r2, #15
 800a598:	401a      	ands	r2, r3
 800a59a:	4b0e      	ldr	r3, [pc, #56]	; (800a5d4 <HAL_RCC_ClockConfig+0x204>)
 800a59c:	0092      	lsls	r2, r2, #2
 800a59e:	58d3      	ldr	r3, [r2, r3]
 800a5a0:	221f      	movs	r2, #31
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	000a      	movs	r2, r1
 800a5a6:	40da      	lsrs	r2, r3
 800a5a8:	4b0b      	ldr	r3, [pc, #44]	; (800a5d8 <HAL_RCC_ClockConfig+0x208>)
 800a5aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <HAL_RCC_ClockConfig+0x20c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f7fc fa6f 	bl	8006a94 <HAL_InitTick>
 800a5b6:	0003      	movs	r3, r0
}
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	b004      	add	sp, #16
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	40022000 	.word	0x40022000
 800a5c4:	00001388 	.word	0x00001388
 800a5c8:	40021000 	.word	0x40021000
 800a5cc:	fffff0ff 	.word	0xfffff0ff
 800a5d0:	ffff8fff 	.word	0xffff8fff
 800a5d4:	0801008c 	.word	0x0801008c
 800a5d8:	2000000c 	.word	0x2000000c
 800a5dc:	20000010 	.word	0x20000010

0800a5e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a5e6:	4b3c      	ldr	r3, [pc, #240]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2238      	movs	r2, #56	; 0x38
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	d10f      	bne.n	800a610 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a5f0:	4b39      	ldr	r3, [pc, #228]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	0adb      	lsrs	r3, r3, #11
 800a5f6:	2207      	movs	r2, #7
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	409a      	lsls	r2, r3
 800a5fe:	0013      	movs	r3, r2
 800a600:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	4835      	ldr	r0, [pc, #212]	; (800a6dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800a606:	f7f5 fd97 	bl	8000138 <__udivsi3>
 800a60a:	0003      	movs	r3, r0
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	e05d      	b.n	800a6cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a610:	4b31      	ldr	r3, [pc, #196]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	2238      	movs	r2, #56	; 0x38
 800a616:	4013      	ands	r3, r2
 800a618:	2b08      	cmp	r3, #8
 800a61a:	d102      	bne.n	800a622 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a61c:	4b30      	ldr	r3, [pc, #192]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800a61e:	613b      	str	r3, [r7, #16]
 800a620:	e054      	b.n	800a6cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a622:	4b2d      	ldr	r3, [pc, #180]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	2238      	movs	r2, #56	; 0x38
 800a628:	4013      	ands	r3, r2
 800a62a:	2b10      	cmp	r3, #16
 800a62c:	d138      	bne.n	800a6a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a62e:	4b2a      	ldr	r3, [pc, #168]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	2203      	movs	r2, #3
 800a634:	4013      	ands	r3, r2
 800a636:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a638:	4b27      	ldr	r3, [pc, #156]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	091b      	lsrs	r3, r3, #4
 800a63e:	2207      	movs	r2, #7
 800a640:	4013      	ands	r3, r2
 800a642:	3301      	adds	r3, #1
 800a644:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d10d      	bne.n	800a668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a64c:	68b9      	ldr	r1, [r7, #8]
 800a64e:	4824      	ldr	r0, [pc, #144]	; (800a6e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800a650:	f7f5 fd72 	bl	8000138 <__udivsi3>
 800a654:	0003      	movs	r3, r0
 800a656:	0019      	movs	r1, r3
 800a658:	4b1f      	ldr	r3, [pc, #124]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	0a1b      	lsrs	r3, r3, #8
 800a65e:	227f      	movs	r2, #127	; 0x7f
 800a660:	4013      	ands	r3, r2
 800a662:	434b      	muls	r3, r1
 800a664:	617b      	str	r3, [r7, #20]
        break;
 800a666:	e00d      	b.n	800a684 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a668:	68b9      	ldr	r1, [r7, #8]
 800a66a:	481c      	ldr	r0, [pc, #112]	; (800a6dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800a66c:	f7f5 fd64 	bl	8000138 <__udivsi3>
 800a670:	0003      	movs	r3, r0
 800a672:	0019      	movs	r1, r3
 800a674:	4b18      	ldr	r3, [pc, #96]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	0a1b      	lsrs	r3, r3, #8
 800a67a:	227f      	movs	r2, #127	; 0x7f
 800a67c:	4013      	ands	r3, r2
 800a67e:	434b      	muls	r3, r1
 800a680:	617b      	str	r3, [r7, #20]
        break;
 800a682:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a684:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	0f5b      	lsrs	r3, r3, #29
 800a68a:	2207      	movs	r2, #7
 800a68c:	4013      	ands	r3, r2
 800a68e:	3301      	adds	r3, #1
 800a690:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	6978      	ldr	r0, [r7, #20]
 800a696:	f7f5 fd4f 	bl	8000138 <__udivsi3>
 800a69a:	0003      	movs	r3, r0
 800a69c:	613b      	str	r3, [r7, #16]
 800a69e:	e015      	b.n	800a6cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a6a0:	4b0d      	ldr	r3, [pc, #52]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	2238      	movs	r2, #56	; 0x38
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	2b20      	cmp	r3, #32
 800a6aa:	d103      	bne.n	800a6b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a6ac:	2380      	movs	r3, #128	; 0x80
 800a6ae:	021b      	lsls	r3, r3, #8
 800a6b0:	613b      	str	r3, [r7, #16]
 800a6b2:	e00b      	b.n	800a6cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a6b4:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	2238      	movs	r2, #56	; 0x38
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	2b18      	cmp	r3, #24
 800a6be:	d103      	bne.n	800a6c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a6c0:	23fa      	movs	r3, #250	; 0xfa
 800a6c2:	01db      	lsls	r3, r3, #7
 800a6c4:	613b      	str	r3, [r7, #16]
 800a6c6:	e001      	b.n	800a6cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a6cc:	693b      	ldr	r3, [r7, #16]
}
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	b006      	add	sp, #24
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	46c0      	nop			; (mov r8, r8)
 800a6d8:	40021000 	.word	0x40021000
 800a6dc:	00f42400 	.word	0x00f42400
 800a6e0:	007a1200 	.word	0x007a1200

0800a6e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a6e8:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
}
 800a6ec:	0018      	movs	r0, r3
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	46c0      	nop			; (mov r8, r8)
 800a6f4:	2000000c 	.word	0x2000000c

0800a6f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6f8:	b5b0      	push	{r4, r5, r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a6fc:	f7ff fff2 	bl	800a6e4 <HAL_RCC_GetHCLKFreq>
 800a700:	0004      	movs	r4, r0
 800a702:	f7ff fb49 	bl	8009d98 <LL_RCC_GetAPB1Prescaler>
 800a706:	0003      	movs	r3, r0
 800a708:	0b1a      	lsrs	r2, r3, #12
 800a70a:	4b05      	ldr	r3, [pc, #20]	; (800a720 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a70c:	0092      	lsls	r2, r2, #2
 800a70e:	58d3      	ldr	r3, [r2, r3]
 800a710:	221f      	movs	r2, #31
 800a712:	4013      	ands	r3, r2
 800a714:	40dc      	lsrs	r4, r3
 800a716:	0023      	movs	r3, r4
}
 800a718:	0018      	movs	r0, r3
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bdb0      	pop	{r4, r5, r7, pc}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	080100cc 	.word	0x080100cc

0800a724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a72c:	2313      	movs	r3, #19
 800a72e:	18fb      	adds	r3, r7, r3
 800a730:	2200      	movs	r2, #0
 800a732:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a734:	2312      	movs	r3, #18
 800a736:	18fb      	adds	r3, r7, r3
 800a738:	2200      	movs	r2, #0
 800a73a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	2380      	movs	r3, #128	; 0x80
 800a742:	029b      	lsls	r3, r3, #10
 800a744:	4013      	ands	r3, r2
 800a746:	d100      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a748:	e0a3      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a74a:	2011      	movs	r0, #17
 800a74c:	183b      	adds	r3, r7, r0
 800a74e:	2200      	movs	r2, #0
 800a750:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a752:	4b86      	ldr	r3, [pc, #536]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a756:	2380      	movs	r3, #128	; 0x80
 800a758:	055b      	lsls	r3, r3, #21
 800a75a:	4013      	ands	r3, r2
 800a75c:	d110      	bne.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a75e:	4b83      	ldr	r3, [pc, #524]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a762:	4b82      	ldr	r3, [pc, #520]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a764:	2180      	movs	r1, #128	; 0x80
 800a766:	0549      	lsls	r1, r1, #21
 800a768:	430a      	orrs	r2, r1
 800a76a:	63da      	str	r2, [r3, #60]	; 0x3c
 800a76c:	4b7f      	ldr	r3, [pc, #508]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a76e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a770:	2380      	movs	r3, #128	; 0x80
 800a772:	055b      	lsls	r3, r3, #21
 800a774:	4013      	ands	r3, r2
 800a776:	60bb      	str	r3, [r7, #8]
 800a778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a77a:	183b      	adds	r3, r7, r0
 800a77c:	2201      	movs	r2, #1
 800a77e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a780:	4b7b      	ldr	r3, [pc, #492]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	4b7a      	ldr	r3, [pc, #488]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a786:	2180      	movs	r1, #128	; 0x80
 800a788:	0049      	lsls	r1, r1, #1
 800a78a:	430a      	orrs	r2, r1
 800a78c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a78e:	f7fc f9dd 	bl	8006b4c <HAL_GetTick>
 800a792:	0003      	movs	r3, r0
 800a794:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a796:	e00b      	b.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a798:	f7fc f9d8 	bl	8006b4c <HAL_GetTick>
 800a79c:	0002      	movs	r2, r0
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d904      	bls.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a7a6:	2313      	movs	r3, #19
 800a7a8:	18fb      	adds	r3, r7, r3
 800a7aa:	2203      	movs	r2, #3
 800a7ac:	701a      	strb	r2, [r3, #0]
        break;
 800a7ae:	e005      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7b0:	4b6f      	ldr	r3, [pc, #444]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	2380      	movs	r3, #128	; 0x80
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	d0ed      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a7bc:	2313      	movs	r3, #19
 800a7be:	18fb      	adds	r3, r7, r3
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d154      	bne.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a7c6:	4b69      	ldr	r3, [pc, #420]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7ca:	23c0      	movs	r3, #192	; 0xc0
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d019      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d014      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a7e2:	4b62      	ldr	r3, [pc, #392]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e6:	4a63      	ldr	r2, [pc, #396]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7ec:	4b5f      	ldr	r3, [pc, #380]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7f0:	4b5e      	ldr	r3, [pc, #376]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7f2:	2180      	movs	r1, #128	; 0x80
 800a7f4:	0249      	lsls	r1, r1, #9
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a7fa:	4b5c      	ldr	r3, [pc, #368]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a7fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7fe:	4b5b      	ldr	r3, [pc, #364]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a800:	495d      	ldr	r1, [pc, #372]	; (800a978 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800a802:	400a      	ands	r2, r1
 800a804:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a806:	4b59      	ldr	r3, [pc, #356]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2201      	movs	r2, #1
 800a810:	4013      	ands	r3, r2
 800a812:	d016      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a814:	f7fc f99a 	bl	8006b4c <HAL_GetTick>
 800a818:	0003      	movs	r3, r0
 800a81a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a81c:	e00c      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a81e:	f7fc f995 	bl	8006b4c <HAL_GetTick>
 800a822:	0002      	movs	r2, r0
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	4a54      	ldr	r2, [pc, #336]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d904      	bls.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a82e:	2313      	movs	r3, #19
 800a830:	18fb      	adds	r3, r7, r3
 800a832:	2203      	movs	r2, #3
 800a834:	701a      	strb	r2, [r3, #0]
            break;
 800a836:	e004      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a838:	4b4c      	ldr	r3, [pc, #304]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a83a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a83c:	2202      	movs	r2, #2
 800a83e:	4013      	ands	r3, r2
 800a840:	d0ed      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a842:	2313      	movs	r3, #19
 800a844:	18fb      	adds	r3, r7, r3
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10a      	bne.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a84c:	4b47      	ldr	r3, [pc, #284]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a84e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a850:	4a48      	ldr	r2, [pc, #288]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a852:	4013      	ands	r3, r2
 800a854:	0019      	movs	r1, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	699a      	ldr	r2, [r3, #24]
 800a85a:	4b44      	ldr	r3, [pc, #272]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a85c:	430a      	orrs	r2, r1
 800a85e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a860:	e00c      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a862:	2312      	movs	r3, #18
 800a864:	18fb      	adds	r3, r7, r3
 800a866:	2213      	movs	r2, #19
 800a868:	18ba      	adds	r2, r7, r2
 800a86a:	7812      	ldrb	r2, [r2, #0]
 800a86c:	701a      	strb	r2, [r3, #0]
 800a86e:	e005      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a870:	2312      	movs	r3, #18
 800a872:	18fb      	adds	r3, r7, r3
 800a874:	2213      	movs	r2, #19
 800a876:	18ba      	adds	r2, r7, r2
 800a878:	7812      	ldrb	r2, [r2, #0]
 800a87a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a87c:	2311      	movs	r3, #17
 800a87e:	18fb      	adds	r3, r7, r3
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d105      	bne.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a886:	4b39      	ldr	r3, [pc, #228]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a88a:	4b38      	ldr	r3, [pc, #224]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a88c:	493c      	ldr	r1, [pc, #240]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a88e:	400a      	ands	r2, r1
 800a890:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2201      	movs	r2, #1
 800a898:	4013      	ands	r3, r2
 800a89a:	d009      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a89c:	4b33      	ldr	r3, [pc, #204]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a0:	2203      	movs	r2, #3
 800a8a2:	4393      	bics	r3, r2
 800a8a4:	0019      	movs	r1, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	4b30      	ldr	r3, [pc, #192]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	d009      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a8ba:	4b2c      	ldr	r3, [pc, #176]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8be:	220c      	movs	r2, #12
 800a8c0:	4393      	bics	r3, r2
 800a8c2:	0019      	movs	r1, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	689a      	ldr	r2, [r3, #8]
 800a8c8:	4b28      	ldr	r3, [pc, #160]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	d009      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a8d8:	4b24      	ldr	r3, [pc, #144]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8dc:	4a29      	ldr	r2, [pc, #164]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a8de:	4013      	ands	r3, r2
 800a8e0:	0019      	movs	r1, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68da      	ldr	r2, [r3, #12]
 800a8e6:	4b21      	ldr	r3, [pc, #132]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	2380      	movs	r3, #128	; 0x80
 800a8f2:	01db      	lsls	r3, r3, #7
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	d015      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a8f8:	4b1c      	ldr	r3, [pc, #112]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	0899      	lsrs	r1, r3, #2
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	695a      	ldr	r2, [r3, #20]
 800a904:	4b19      	ldr	r3, [pc, #100]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a906:	430a      	orrs	r2, r1
 800a908:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	695a      	ldr	r2, [r3, #20]
 800a90e:	2380      	movs	r3, #128	; 0x80
 800a910:	05db      	lsls	r3, r3, #23
 800a912:	429a      	cmp	r2, r3
 800a914:	d106      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a916:	4b15      	ldr	r3, [pc, #84]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	4b14      	ldr	r3, [pc, #80]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a91c:	2180      	movs	r1, #128	; 0x80
 800a91e:	0249      	lsls	r1, r1, #9
 800a920:	430a      	orrs	r2, r1
 800a922:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	2380      	movs	r3, #128	; 0x80
 800a92a:	011b      	lsls	r3, r3, #4
 800a92c:	4013      	ands	r3, r2
 800a92e:	d016      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a930:	4b0e      	ldr	r3, [pc, #56]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a934:	4a14      	ldr	r2, [pc, #80]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a936:	4013      	ands	r3, r2
 800a938:	0019      	movs	r1, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	691a      	ldr	r2, [r3, #16]
 800a93e:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a940:	430a      	orrs	r2, r1
 800a942:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691a      	ldr	r2, [r3, #16]
 800a948:	2380      	movs	r3, #128	; 0x80
 800a94a:	01db      	lsls	r3, r3, #7
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d106      	bne.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a950:	4b06      	ldr	r3, [pc, #24]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	4b05      	ldr	r3, [pc, #20]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a956:	2180      	movs	r1, #128	; 0x80
 800a958:	0249      	lsls	r1, r1, #9
 800a95a:	430a      	orrs	r2, r1
 800a95c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a95e:	2312      	movs	r3, #18
 800a960:	18fb      	adds	r3, r7, r3
 800a962:	781b      	ldrb	r3, [r3, #0]
}
 800a964:	0018      	movs	r0, r3
 800a966:	46bd      	mov	sp, r7
 800a968:	b006      	add	sp, #24
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	40021000 	.word	0x40021000
 800a970:	40007000 	.word	0x40007000
 800a974:	fffffcff 	.word	0xfffffcff
 800a978:	fffeffff 	.word	0xfffeffff
 800a97c:	00001388 	.word	0x00001388
 800a980:	efffffff 	.word	0xefffffff
 800a984:	ffffcfff 	.word	0xffffcfff
 800a988:	ffff3fff 	.word	0xffff3fff

0800a98c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e04a      	b.n	800aa34 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	223d      	movs	r2, #61	; 0x3d
 800a9a2:	5c9b      	ldrb	r3, [r3, r2]
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d107      	bne.n	800a9ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	223c      	movs	r2, #60	; 0x3c
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	0018      	movs	r0, r3
 800a9b6:	f7fb fabf 	bl	8005f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	223d      	movs	r2, #61	; 0x3d
 800a9be:	2102      	movs	r1, #2
 800a9c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	0019      	movs	r1, r3
 800a9cc:	0010      	movs	r0, r2
 800a9ce:	f000 fc41 	bl	800b254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2248      	movs	r2, #72	; 0x48
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	223e      	movs	r2, #62	; 0x3e
 800a9de:	2101      	movs	r1, #1
 800a9e0:	5499      	strb	r1, [r3, r2]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	223f      	movs	r2, #63	; 0x3f
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	5499      	strb	r1, [r3, r2]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2240      	movs	r2, #64	; 0x40
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	5499      	strb	r1, [r3, r2]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2241      	movs	r2, #65	; 0x41
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	5499      	strb	r1, [r3, r2]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2242      	movs	r2, #66	; 0x42
 800a9fe:	2101      	movs	r1, #1
 800aa00:	5499      	strb	r1, [r3, r2]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2243      	movs	r2, #67	; 0x43
 800aa06:	2101      	movs	r1, #1
 800aa08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2244      	movs	r2, #68	; 0x44
 800aa0e:	2101      	movs	r1, #1
 800aa10:	5499      	strb	r1, [r3, r2]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2245      	movs	r2, #69	; 0x45
 800aa16:	2101      	movs	r1, #1
 800aa18:	5499      	strb	r1, [r3, r2]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2246      	movs	r2, #70	; 0x46
 800aa1e:	2101      	movs	r1, #1
 800aa20:	5499      	strb	r1, [r3, r2]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2247      	movs	r2, #71	; 0x47
 800aa26:	2101      	movs	r1, #1
 800aa28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	223d      	movs	r2, #61	; 0x3d
 800aa2e:	2101      	movs	r1, #1
 800aa30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	0018      	movs	r0, r3
 800aa36:	46bd      	mov	sp, r7
 800aa38:	b002      	add	sp, #8
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	223d      	movs	r2, #61	; 0x3d
 800aa48:	5c9b      	ldrb	r3, [r3, r2]
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d001      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e03c      	b.n	800aace <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	223d      	movs	r2, #61	; 0x3d
 800aa58:	2102      	movs	r1, #2
 800aa5a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68da      	ldr	r2, [r3, #12]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2101      	movs	r1, #1
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a19      	ldr	r2, [pc, #100]	; (800aad8 <HAL_TIM_Base_Start_IT+0x9c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d009      	beq.n	800aa8a <HAL_TIM_Base_Start_IT+0x4e>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a18      	ldr	r2, [pc, #96]	; (800aadc <HAL_TIM_Base_Start_IT+0xa0>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d004      	beq.n	800aa8a <HAL_TIM_Base_Start_IT+0x4e>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a16      	ldr	r2, [pc, #88]	; (800aae0 <HAL_TIM_Base_Start_IT+0xa4>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d116      	bne.n	800aab8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	4a14      	ldr	r2, [pc, #80]	; (800aae4 <HAL_TIM_Base_Start_IT+0xa8>)
 800aa92:	4013      	ands	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2b06      	cmp	r3, #6
 800aa9a:	d016      	beq.n	800aaca <HAL_TIM_Base_Start_IT+0x8e>
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	2380      	movs	r3, #128	; 0x80
 800aaa0:	025b      	lsls	r3, r3, #9
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d011      	beq.n	800aaca <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2101      	movs	r1, #1
 800aab2:	430a      	orrs	r2, r1
 800aab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aab6:	e008      	b.n	800aaca <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2101      	movs	r1, #1
 800aac4:	430a      	orrs	r2, r1
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	e000      	b.n	800aacc <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaca:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	0018      	movs	r0, r3
 800aad0:	46bd      	mov	sp, r7
 800aad2:	b004      	add	sp, #16
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	40012c00 	.word	0x40012c00
 800aadc:	40000400 	.word	0x40000400
 800aae0:	40014000 	.word	0x40014000
 800aae4:	00010007 	.word	0x00010007

0800aae8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68da      	ldr	r2, [r3, #12]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2101      	movs	r1, #1
 800aafc:	438a      	bics	r2, r1
 800aafe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	4a0d      	ldr	r2, [pc, #52]	; (800ab3c <HAL_TIM_Base_Stop_IT+0x54>)
 800ab08:	4013      	ands	r3, r2
 800ab0a:	d10d      	bne.n	800ab28 <HAL_TIM_Base_Stop_IT+0x40>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	4a0b      	ldr	r2, [pc, #44]	; (800ab40 <HAL_TIM_Base_Stop_IT+0x58>)
 800ab14:	4013      	ands	r3, r2
 800ab16:	d107      	bne.n	800ab28 <HAL_TIM_Base_Stop_IT+0x40>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2101      	movs	r1, #1
 800ab24:	438a      	bics	r2, r1
 800ab26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	223d      	movs	r2, #61	; 0x3d
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	0018      	movs	r0, r3
 800ab34:	46bd      	mov	sp, r7
 800ab36:	b002      	add	sp, #8
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	46c0      	nop			; (mov r8, r8)
 800ab3c:	00001111 	.word	0x00001111
 800ab40:	00000444 	.word	0x00000444

0800ab44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e04a      	b.n	800abec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	223d      	movs	r2, #61	; 0x3d
 800ab5a:	5c9b      	ldrb	r3, [r3, r2]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d107      	bne.n	800ab72 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	223c      	movs	r2, #60	; 0x3c
 800ab66:	2100      	movs	r1, #0
 800ab68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	0018      	movs	r0, r3
 800ab6e:	f000 f841 	bl	800abf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	223d      	movs	r2, #61	; 0x3d
 800ab76:	2102      	movs	r1, #2
 800ab78:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3304      	adds	r3, #4
 800ab82:	0019      	movs	r1, r3
 800ab84:	0010      	movs	r0, r2
 800ab86:	f000 fb65 	bl	800b254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2248      	movs	r2, #72	; 0x48
 800ab8e:	2101      	movs	r1, #1
 800ab90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	223e      	movs	r2, #62	; 0x3e
 800ab96:	2101      	movs	r1, #1
 800ab98:	5499      	strb	r1, [r3, r2]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	223f      	movs	r2, #63	; 0x3f
 800ab9e:	2101      	movs	r1, #1
 800aba0:	5499      	strb	r1, [r3, r2]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2240      	movs	r2, #64	; 0x40
 800aba6:	2101      	movs	r1, #1
 800aba8:	5499      	strb	r1, [r3, r2]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2241      	movs	r2, #65	; 0x41
 800abae:	2101      	movs	r1, #1
 800abb0:	5499      	strb	r1, [r3, r2]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2242      	movs	r2, #66	; 0x42
 800abb6:	2101      	movs	r1, #1
 800abb8:	5499      	strb	r1, [r3, r2]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2243      	movs	r2, #67	; 0x43
 800abbe:	2101      	movs	r1, #1
 800abc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2244      	movs	r2, #68	; 0x44
 800abc6:	2101      	movs	r1, #1
 800abc8:	5499      	strb	r1, [r3, r2]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2245      	movs	r2, #69	; 0x45
 800abce:	2101      	movs	r1, #1
 800abd0:	5499      	strb	r1, [r3, r2]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2246      	movs	r2, #70	; 0x46
 800abd6:	2101      	movs	r1, #1
 800abd8:	5499      	strb	r1, [r3, r2]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2247      	movs	r2, #71	; 0x47
 800abde:	2101      	movs	r1, #1
 800abe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	223d      	movs	r2, #61	; 0x3d
 800abe6:	2101      	movs	r1, #1
 800abe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	0018      	movs	r0, r3
 800abee:	46bd      	mov	sp, r7
 800abf0:	b002      	add	sp, #8
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abfc:	46c0      	nop			; (mov r8, r8)
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b002      	add	sp, #8
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	2202      	movs	r2, #2
 800ac14:	4013      	ands	r3, r2
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d124      	bne.n	800ac64 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	2202      	movs	r2, #2
 800ac22:	4013      	ands	r3, r2
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d11d      	bne.n	800ac64 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2203      	movs	r2, #3
 800ac2e:	4252      	negs	r2, r2
 800ac30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	2203      	movs	r2, #3
 800ac40:	4013      	ands	r3, r2
 800ac42:	d004      	beq.n	800ac4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	0018      	movs	r0, r3
 800ac48:	f000 faec 	bl	800b224 <HAL_TIM_IC_CaptureCallback>
 800ac4c:	e007      	b.n	800ac5e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	0018      	movs	r0, r3
 800ac52:	f000 fadf 	bl	800b214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	0018      	movs	r0, r3
 800ac5a:	f000 faeb 	bl	800b234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	2204      	movs	r2, #4
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d125      	bne.n	800acbe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	2204      	movs	r2, #4
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	d11e      	bne.n	800acbe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2205      	movs	r2, #5
 800ac86:	4252      	negs	r2, r2
 800ac88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	699a      	ldr	r2, [r3, #24]
 800ac96:	23c0      	movs	r3, #192	; 0xc0
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	d004      	beq.n	800aca8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	0018      	movs	r0, r3
 800aca2:	f000 fabf 	bl	800b224 <HAL_TIM_IC_CaptureCallback>
 800aca6:	e007      	b.n	800acb8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	0018      	movs	r0, r3
 800acac:	f000 fab2 	bl	800b214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	0018      	movs	r0, r3
 800acb4:	f000 fabe 	bl	800b234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	2208      	movs	r2, #8
 800acc6:	4013      	ands	r3, r2
 800acc8:	2b08      	cmp	r3, #8
 800acca:	d124      	bne.n	800ad16 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	2208      	movs	r2, #8
 800acd4:	4013      	ands	r3, r2
 800acd6:	2b08      	cmp	r3, #8
 800acd8:	d11d      	bne.n	800ad16 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2209      	movs	r2, #9
 800ace0:	4252      	negs	r2, r2
 800ace2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2204      	movs	r2, #4
 800ace8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	2203      	movs	r2, #3
 800acf2:	4013      	ands	r3, r2
 800acf4:	d004      	beq.n	800ad00 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	0018      	movs	r0, r3
 800acfa:	f000 fa93 	bl	800b224 <HAL_TIM_IC_CaptureCallback>
 800acfe:	e007      	b.n	800ad10 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	0018      	movs	r0, r3
 800ad04:	f000 fa86 	bl	800b214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	f000 fa92 	bl	800b234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	2210      	movs	r2, #16
 800ad1e:	4013      	ands	r3, r2
 800ad20:	2b10      	cmp	r3, #16
 800ad22:	d125      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	2210      	movs	r2, #16
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	2b10      	cmp	r3, #16
 800ad30:	d11e      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2211      	movs	r2, #17
 800ad38:	4252      	negs	r2, r2
 800ad3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2208      	movs	r2, #8
 800ad40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	69da      	ldr	r2, [r3, #28]
 800ad48:	23c0      	movs	r3, #192	; 0xc0
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	d004      	beq.n	800ad5a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	0018      	movs	r0, r3
 800ad54:	f000 fa66 	bl	800b224 <HAL_TIM_IC_CaptureCallback>
 800ad58:	e007      	b.n	800ad6a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	f000 fa59 	bl	800b214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	0018      	movs	r0, r3
 800ad66:	f000 fa65 	bl	800b234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2201      	movs	r2, #1
 800ad78:	4013      	ands	r3, r2
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d10f      	bne.n	800ad9e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	2201      	movs	r2, #1
 800ad86:	4013      	ands	r3, r2
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d108      	bne.n	800ad9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2202      	movs	r2, #2
 800ad92:	4252      	negs	r2, r2
 800ad94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	0018      	movs	r0, r3
 800ad9a:	f7f8 ffd5 	bl	8003d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	2280      	movs	r2, #128	; 0x80
 800ada6:	4013      	ands	r3, r2
 800ada8:	2b80      	cmp	r3, #128	; 0x80
 800adaa:	d10f      	bne.n	800adcc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	2280      	movs	r2, #128	; 0x80
 800adb4:	4013      	ands	r3, r2
 800adb6:	2b80      	cmp	r3, #128	; 0x80
 800adb8:	d108      	bne.n	800adcc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2281      	movs	r2, #129	; 0x81
 800adc0:	4252      	negs	r2, r2
 800adc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	0018      	movs	r0, r3
 800adc8:	f000 fe8a 	bl	800bae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	691a      	ldr	r2, [r3, #16]
 800add2:	2380      	movs	r3, #128	; 0x80
 800add4:	005b      	lsls	r3, r3, #1
 800add6:	401a      	ands	r2, r3
 800add8:	2380      	movs	r3, #128	; 0x80
 800adda:	005b      	lsls	r3, r3, #1
 800addc:	429a      	cmp	r2, r3
 800adde:	d10e      	bne.n	800adfe <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	2280      	movs	r2, #128	; 0x80
 800ade8:	4013      	ands	r3, r2
 800adea:	2b80      	cmp	r3, #128	; 0x80
 800adec:	d107      	bne.n	800adfe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a1c      	ldr	r2, [pc, #112]	; (800ae64 <HAL_TIM_IRQHandler+0x260>)
 800adf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	0018      	movs	r0, r3
 800adfa:	f000 fe79 	bl	800baf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	2240      	movs	r2, #64	; 0x40
 800ae06:	4013      	ands	r3, r2
 800ae08:	2b40      	cmp	r3, #64	; 0x40
 800ae0a:	d10f      	bne.n	800ae2c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	2240      	movs	r2, #64	; 0x40
 800ae14:	4013      	ands	r3, r2
 800ae16:	2b40      	cmp	r3, #64	; 0x40
 800ae18:	d108      	bne.n	800ae2c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2241      	movs	r2, #65	; 0x41
 800ae20:	4252      	negs	r2, r2
 800ae22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	0018      	movs	r0, r3
 800ae28:	f000 fa0c 	bl	800b244 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	2220      	movs	r2, #32
 800ae34:	4013      	ands	r3, r2
 800ae36:	2b20      	cmp	r3, #32
 800ae38:	d10f      	bne.n	800ae5a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	2220      	movs	r2, #32
 800ae42:	4013      	ands	r3, r2
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	d108      	bne.n	800ae5a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2221      	movs	r2, #33	; 0x21
 800ae4e:	4252      	negs	r2, r2
 800ae50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	0018      	movs	r0, r3
 800ae56:	f000 fe3b 	bl	800bad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae5a:	46c0      	nop			; (mov r8, r8)
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	b002      	add	sp, #8
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	46c0      	nop			; (mov r8, r8)
 800ae64:	fffffeff 	.word	0xfffffeff

0800ae68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae74:	2317      	movs	r3, #23
 800ae76:	18fb      	adds	r3, r7, r3
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	223c      	movs	r2, #60	; 0x3c
 800ae80:	5c9b      	ldrb	r3, [r3, r2]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d101      	bne.n	800ae8a <HAL_TIM_PWM_ConfigChannel+0x22>
 800ae86:	2302      	movs	r3, #2
 800ae88:	e0e5      	b.n	800b056 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	223c      	movs	r2, #60	; 0x3c
 800ae8e:	2101      	movs	r1, #1
 800ae90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b14      	cmp	r3, #20
 800ae96:	d900      	bls.n	800ae9a <HAL_TIM_PWM_ConfigChannel+0x32>
 800ae98:	e0d1      	b.n	800b03e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	009a      	lsls	r2, r3, #2
 800ae9e:	4b70      	ldr	r3, [pc, #448]	; (800b060 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800aea0:	18d3      	adds	r3, r2, r3
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	0011      	movs	r1, r2
 800aeae:	0018      	movs	r0, r3
 800aeb0:	f000 fa46 	bl	800b340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	699a      	ldr	r2, [r3, #24]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2108      	movs	r1, #8
 800aec0:	430a      	orrs	r2, r1
 800aec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699a      	ldr	r2, [r3, #24]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2104      	movs	r1, #4
 800aed0:	438a      	bics	r2, r1
 800aed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6999      	ldr	r1, [r3, #24]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	691a      	ldr	r2, [r3, #16]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	619a      	str	r2, [r3, #24]
      break;
 800aee6:	e0af      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	0011      	movs	r1, r2
 800aef0:	0018      	movs	r0, r3
 800aef2:	f000 faaf 	bl	800b454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	699a      	ldr	r2, [r3, #24]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2180      	movs	r1, #128	; 0x80
 800af02:	0109      	lsls	r1, r1, #4
 800af04:	430a      	orrs	r2, r1
 800af06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4954      	ldr	r1, [pc, #336]	; (800b064 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800af14:	400a      	ands	r2, r1
 800af16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	6999      	ldr	r1, [r3, #24]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	021a      	lsls	r2, r3, #8
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	430a      	orrs	r2, r1
 800af2a:	619a      	str	r2, [r3, #24]
      break;
 800af2c:	e08c      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	0011      	movs	r1, r2
 800af36:	0018      	movs	r0, r3
 800af38:	f000 fb10 	bl	800b55c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	69da      	ldr	r2, [r3, #28]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2108      	movs	r1, #8
 800af48:	430a      	orrs	r2, r1
 800af4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	69da      	ldr	r2, [r3, #28]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2104      	movs	r1, #4
 800af58:	438a      	bics	r2, r1
 800af5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	69d9      	ldr	r1, [r3, #28]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	691a      	ldr	r2, [r3, #16]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	61da      	str	r2, [r3, #28]
      break;
 800af6e:	e06b      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	0011      	movs	r1, r2
 800af78:	0018      	movs	r0, r3
 800af7a:	f000 fb77 	bl	800b66c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	69da      	ldr	r2, [r3, #28]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2180      	movs	r1, #128	; 0x80
 800af8a:	0109      	lsls	r1, r1, #4
 800af8c:	430a      	orrs	r2, r1
 800af8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	69da      	ldr	r2, [r3, #28]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4932      	ldr	r1, [pc, #200]	; (800b064 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800af9c:	400a      	ands	r2, r1
 800af9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	69d9      	ldr	r1, [r3, #28]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	021a      	lsls	r2, r3, #8
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	61da      	str	r2, [r3, #28]
      break;
 800afb4:	e048      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	0011      	movs	r1, r2
 800afbe:	0018      	movs	r0, r3
 800afc0:	f000 fbbe 	bl	800b740 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2108      	movs	r1, #8
 800afd0:	430a      	orrs	r2, r1
 800afd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2104      	movs	r1, #4
 800afe0:	438a      	bics	r2, r1
 800afe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	691a      	ldr	r2, [r3, #16]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	430a      	orrs	r2, r1
 800aff4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aff6:	e027      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	0011      	movs	r1, r2
 800b000:	0018      	movs	r0, r3
 800b002:	f000 fbfd 	bl	800b800 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2180      	movs	r1, #128	; 0x80
 800b012:	0109      	lsls	r1, r1, #4
 800b014:	430a      	orrs	r2, r1
 800b016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4910      	ldr	r1, [pc, #64]	; (800b064 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b024:	400a      	ands	r2, r1
 800b026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	021a      	lsls	r2, r3, #8
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	430a      	orrs	r2, r1
 800b03a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b03c:	e004      	b.n	800b048 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800b03e:	2317      	movs	r3, #23
 800b040:	18fb      	adds	r3, r7, r3
 800b042:	2201      	movs	r2, #1
 800b044:	701a      	strb	r2, [r3, #0]
      break;
 800b046:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	223c      	movs	r2, #60	; 0x3c
 800b04c:	2100      	movs	r1, #0
 800b04e:	5499      	strb	r1, [r3, r2]

  return status;
 800b050:	2317      	movs	r3, #23
 800b052:	18fb      	adds	r3, r7, r3
 800b054:	781b      	ldrb	r3, [r3, #0]
}
 800b056:	0018      	movs	r0, r3
 800b058:	46bd      	mov	sp, r7
 800b05a:	b006      	add	sp, #24
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	46c0      	nop			; (mov r8, r8)
 800b060:	080100ec 	.word	0x080100ec
 800b064:	fffffbff 	.word	0xfffffbff

0800b068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b072:	230f      	movs	r3, #15
 800b074:	18fb      	adds	r3, r7, r3
 800b076:	2200      	movs	r2, #0
 800b078:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	223c      	movs	r2, #60	; 0x3c
 800b07e:	5c9b      	ldrb	r3, [r3, r2]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d101      	bne.n	800b088 <HAL_TIM_ConfigClockSource+0x20>
 800b084:	2302      	movs	r3, #2
 800b086:	e0bc      	b.n	800b202 <HAL_TIM_ConfigClockSource+0x19a>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	223c      	movs	r2, #60	; 0x3c
 800b08c:	2101      	movs	r1, #1
 800b08e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	223d      	movs	r2, #61	; 0x3d
 800b094:	2102      	movs	r1, #2
 800b096:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	4a5a      	ldr	r2, [pc, #360]	; (800b20c <HAL_TIM_ConfigClockSource+0x1a4>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	4a59      	ldr	r2, [pc, #356]	; (800b210 <HAL_TIM_ConfigClockSource+0x1a8>)
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2280      	movs	r2, #128	; 0x80
 800b0be:	0192      	lsls	r2, r2, #6
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d040      	beq.n	800b146 <HAL_TIM_ConfigClockSource+0xde>
 800b0c4:	2280      	movs	r2, #128	; 0x80
 800b0c6:	0192      	lsls	r2, r2, #6
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d900      	bls.n	800b0ce <HAL_TIM_ConfigClockSource+0x66>
 800b0cc:	e088      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x178>
 800b0ce:	2280      	movs	r2, #128	; 0x80
 800b0d0:	0152      	lsls	r2, r2, #5
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d100      	bne.n	800b0d8 <HAL_TIM_ConfigClockSource+0x70>
 800b0d6:	e088      	b.n	800b1ea <HAL_TIM_ConfigClockSource+0x182>
 800b0d8:	2280      	movs	r2, #128	; 0x80
 800b0da:	0152      	lsls	r2, r2, #5
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d900      	bls.n	800b0e2 <HAL_TIM_ConfigClockSource+0x7a>
 800b0e0:	e07e      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x178>
 800b0e2:	2b70      	cmp	r3, #112	; 0x70
 800b0e4:	d018      	beq.n	800b118 <HAL_TIM_ConfigClockSource+0xb0>
 800b0e6:	d900      	bls.n	800b0ea <HAL_TIM_ConfigClockSource+0x82>
 800b0e8:	e07a      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x178>
 800b0ea:	2b60      	cmp	r3, #96	; 0x60
 800b0ec:	d04f      	beq.n	800b18e <HAL_TIM_ConfigClockSource+0x126>
 800b0ee:	d900      	bls.n	800b0f2 <HAL_TIM_ConfigClockSource+0x8a>
 800b0f0:	e076      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x178>
 800b0f2:	2b50      	cmp	r3, #80	; 0x50
 800b0f4:	d03b      	beq.n	800b16e <HAL_TIM_ConfigClockSource+0x106>
 800b0f6:	d900      	bls.n	800b0fa <HAL_TIM_ConfigClockSource+0x92>
 800b0f8:	e072      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x178>
 800b0fa:	2b40      	cmp	r3, #64	; 0x40
 800b0fc:	d057      	beq.n	800b1ae <HAL_TIM_ConfigClockSource+0x146>
 800b0fe:	d900      	bls.n	800b102 <HAL_TIM_ConfigClockSource+0x9a>
 800b100:	e06e      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x178>
 800b102:	2b30      	cmp	r3, #48	; 0x30
 800b104:	d063      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0x166>
 800b106:	d86b      	bhi.n	800b1e0 <HAL_TIM_ConfigClockSource+0x178>
 800b108:	2b20      	cmp	r3, #32
 800b10a:	d060      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0x166>
 800b10c:	d868      	bhi.n	800b1e0 <HAL_TIM_ConfigClockSource+0x178>
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d05d      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0x166>
 800b112:	2b10      	cmp	r3, #16
 800b114:	d05b      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0x166>
 800b116:	e063      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6818      	ldr	r0, [r3, #0]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	6899      	ldr	r1, [r3, #8]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	f000 fc4a 	bl	800b9c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2277      	movs	r2, #119	; 0x77
 800b138:	4313      	orrs	r3, r2
 800b13a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	609a      	str	r2, [r3, #8]
      break;
 800b144:	e052      	b.n	800b1ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6818      	ldr	r0, [r3, #0]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	6899      	ldr	r1, [r3, #8]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	f000 fc33 	bl	800b9c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689a      	ldr	r2, [r3, #8]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2180      	movs	r1, #128	; 0x80
 800b166:	01c9      	lsls	r1, r1, #7
 800b168:	430a      	orrs	r2, r1
 800b16a:	609a      	str	r2, [r3, #8]
      break;
 800b16c:	e03e      	b.n	800b1ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6818      	ldr	r0, [r3, #0]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	6859      	ldr	r1, [r3, #4]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	001a      	movs	r2, r3
 800b17c:	f000 fba4 	bl	800b8c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2150      	movs	r1, #80	; 0x50
 800b186:	0018      	movs	r0, r3
 800b188:	f000 fbfe 	bl	800b988 <TIM_ITRx_SetConfig>
      break;
 800b18c:	e02e      	b.n	800b1ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6859      	ldr	r1, [r3, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	001a      	movs	r2, r3
 800b19c:	f000 fbc2 	bl	800b924 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2160      	movs	r1, #96	; 0x60
 800b1a6:	0018      	movs	r0, r3
 800b1a8:	f000 fbee 	bl	800b988 <TIM_ITRx_SetConfig>
      break;
 800b1ac:	e01e      	b.n	800b1ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	6859      	ldr	r1, [r3, #4]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	001a      	movs	r2, r3
 800b1bc:	f000 fb84 	bl	800b8c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2140      	movs	r1, #64	; 0x40
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f000 fbde 	bl	800b988 <TIM_ITRx_SetConfig>
      break;
 800b1cc:	e00e      	b.n	800b1ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	0019      	movs	r1, r3
 800b1d8:	0010      	movs	r0, r2
 800b1da:	f000 fbd5 	bl	800b988 <TIM_ITRx_SetConfig>
      break;
 800b1de:	e005      	b.n	800b1ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800b1e0:	230f      	movs	r3, #15
 800b1e2:	18fb      	adds	r3, r7, r3
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	701a      	strb	r2, [r3, #0]
      break;
 800b1e8:	e000      	b.n	800b1ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 800b1ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	223d      	movs	r2, #61	; 0x3d
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	223c      	movs	r2, #60	; 0x3c
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	5499      	strb	r1, [r3, r2]

  return status;
 800b1fc:	230f      	movs	r3, #15
 800b1fe:	18fb      	adds	r3, r7, r3
 800b200:	781b      	ldrb	r3, [r3, #0]
}
 800b202:	0018      	movs	r0, r3
 800b204:	46bd      	mov	sp, r7
 800b206:	b004      	add	sp, #16
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	46c0      	nop			; (mov r8, r8)
 800b20c:	ffceff88 	.word	0xffceff88
 800b210:	ffff00ff 	.word	0xffff00ff

0800b214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b21c:	46c0      	nop			; (mov r8, r8)
 800b21e:	46bd      	mov	sp, r7
 800b220:	b002      	add	sp, #8
 800b222:	bd80      	pop	{r7, pc}

0800b224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b22c:	46c0      	nop			; (mov r8, r8)
 800b22e:	46bd      	mov	sp, r7
 800b230:	b002      	add	sp, #8
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b23c:	46c0      	nop			; (mov r8, r8)
 800b23e:	46bd      	mov	sp, r7
 800b240:	b002      	add	sp, #8
 800b242:	bd80      	pop	{r7, pc}

0800b244 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b24c:	46c0      	nop			; (mov r8, r8)
 800b24e:	46bd      	mov	sp, r7
 800b250:	b002      	add	sp, #8
 800b252:	bd80      	pop	{r7, pc}

0800b254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a2f      	ldr	r2, [pc, #188]	; (800b324 <TIM_Base_SetConfig+0xd0>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d003      	beq.n	800b274 <TIM_Base_SetConfig+0x20>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a2e      	ldr	r2, [pc, #184]	; (800b328 <TIM_Base_SetConfig+0xd4>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d108      	bne.n	800b286 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2270      	movs	r2, #112	; 0x70
 800b278:	4393      	bics	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	4313      	orrs	r3, r2
 800b284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a26      	ldr	r2, [pc, #152]	; (800b324 <TIM_Base_SetConfig+0xd0>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d013      	beq.n	800b2b6 <TIM_Base_SetConfig+0x62>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a25      	ldr	r2, [pc, #148]	; (800b328 <TIM_Base_SetConfig+0xd4>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00f      	beq.n	800b2b6 <TIM_Base_SetConfig+0x62>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a24      	ldr	r2, [pc, #144]	; (800b32c <TIM_Base_SetConfig+0xd8>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d00b      	beq.n	800b2b6 <TIM_Base_SetConfig+0x62>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a23      	ldr	r2, [pc, #140]	; (800b330 <TIM_Base_SetConfig+0xdc>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d007      	beq.n	800b2b6 <TIM_Base_SetConfig+0x62>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a22      	ldr	r2, [pc, #136]	; (800b334 <TIM_Base_SetConfig+0xe0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d003      	beq.n	800b2b6 <TIM_Base_SetConfig+0x62>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a21      	ldr	r2, [pc, #132]	; (800b338 <TIM_Base_SetConfig+0xe4>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d108      	bne.n	800b2c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	4a20      	ldr	r2, [pc, #128]	; (800b33c <TIM_Base_SetConfig+0xe8>)
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2280      	movs	r2, #128	; 0x80
 800b2cc:	4393      	bics	r3, r2
 800b2ce:	001a      	movs	r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	695b      	ldr	r3, [r3, #20]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	689a      	ldr	r2, [r3, #8]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a0c      	ldr	r2, [pc, #48]	; (800b324 <TIM_Base_SetConfig+0xd0>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d00b      	beq.n	800b30e <TIM_Base_SetConfig+0xba>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a0d      	ldr	r2, [pc, #52]	; (800b330 <TIM_Base_SetConfig+0xdc>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d007      	beq.n	800b30e <TIM_Base_SetConfig+0xba>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a0c      	ldr	r2, [pc, #48]	; (800b334 <TIM_Base_SetConfig+0xe0>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d003      	beq.n	800b30e <TIM_Base_SetConfig+0xba>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a0b      	ldr	r2, [pc, #44]	; (800b338 <TIM_Base_SetConfig+0xe4>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d103      	bne.n	800b316 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	691a      	ldr	r2, [r3, #16]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	615a      	str	r2, [r3, #20]
}
 800b31c:	46c0      	nop			; (mov r8, r8)
 800b31e:	46bd      	mov	sp, r7
 800b320:	b004      	add	sp, #16
 800b322:	bd80      	pop	{r7, pc}
 800b324:	40012c00 	.word	0x40012c00
 800b328:	40000400 	.word	0x40000400
 800b32c:	40002000 	.word	0x40002000
 800b330:	40014000 	.word	0x40014000
 800b334:	40014400 	.word	0x40014400
 800b338:	40014800 	.word	0x40014800
 800b33c:	fffffcff 	.word	0xfffffcff

0800b340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	2201      	movs	r2, #1
 800b350:	4393      	bics	r3, r2
 800b352:	001a      	movs	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4a32      	ldr	r2, [pc, #200]	; (800b438 <TIM_OC1_SetConfig+0xf8>)
 800b36e:	4013      	ands	r3, r2
 800b370:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2203      	movs	r2, #3
 800b376:	4393      	bics	r3, r2
 800b378:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	4313      	orrs	r3, r2
 800b382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2202      	movs	r2, #2
 800b388:	4393      	bics	r3, r2
 800b38a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	4313      	orrs	r3, r2
 800b394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a28      	ldr	r2, [pc, #160]	; (800b43c <TIM_OC1_SetConfig+0xfc>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d00b      	beq.n	800b3b6 <TIM_OC1_SetConfig+0x76>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a27      	ldr	r2, [pc, #156]	; (800b440 <TIM_OC1_SetConfig+0x100>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d007      	beq.n	800b3b6 <TIM_OC1_SetConfig+0x76>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a26      	ldr	r2, [pc, #152]	; (800b444 <TIM_OC1_SetConfig+0x104>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d003      	beq.n	800b3b6 <TIM_OC1_SetConfig+0x76>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a25      	ldr	r2, [pc, #148]	; (800b448 <TIM_OC1_SetConfig+0x108>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d10c      	bne.n	800b3d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2208      	movs	r2, #8
 800b3ba:	4393      	bics	r3, r2
 800b3bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2204      	movs	r2, #4
 800b3cc:	4393      	bics	r3, r2
 800b3ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a1a      	ldr	r2, [pc, #104]	; (800b43c <TIM_OC1_SetConfig+0xfc>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d00b      	beq.n	800b3f0 <TIM_OC1_SetConfig+0xb0>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a19      	ldr	r2, [pc, #100]	; (800b440 <TIM_OC1_SetConfig+0x100>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d007      	beq.n	800b3f0 <TIM_OC1_SetConfig+0xb0>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a18      	ldr	r2, [pc, #96]	; (800b444 <TIM_OC1_SetConfig+0x104>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d003      	beq.n	800b3f0 <TIM_OC1_SetConfig+0xb0>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a17      	ldr	r2, [pc, #92]	; (800b448 <TIM_OC1_SetConfig+0x108>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d111      	bne.n	800b414 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	4a16      	ldr	r2, [pc, #88]	; (800b44c <TIM_OC1_SetConfig+0x10c>)
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	4a15      	ldr	r2, [pc, #84]	; (800b450 <TIM_OC1_SetConfig+0x110>)
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	4313      	orrs	r3, r2
 800b408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	4313      	orrs	r3, r2
 800b412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	621a      	str	r2, [r3, #32]
}
 800b42e:	46c0      	nop			; (mov r8, r8)
 800b430:	46bd      	mov	sp, r7
 800b432:	b006      	add	sp, #24
 800b434:	bd80      	pop	{r7, pc}
 800b436:	46c0      	nop			; (mov r8, r8)
 800b438:	fffeff8f 	.word	0xfffeff8f
 800b43c:	40012c00 	.word	0x40012c00
 800b440:	40014000 	.word	0x40014000
 800b444:	40014400 	.word	0x40014400
 800b448:	40014800 	.word	0x40014800
 800b44c:	fffffeff 	.word	0xfffffeff
 800b450:	fffffdff 	.word	0xfffffdff

0800b454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	2210      	movs	r2, #16
 800b464:	4393      	bics	r3, r2
 800b466:	001a      	movs	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a1b      	ldr	r3, [r3, #32]
 800b470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	4a2e      	ldr	r2, [pc, #184]	; (800b53c <TIM_OC2_SetConfig+0xe8>)
 800b482:	4013      	ands	r3, r2
 800b484:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	4a2d      	ldr	r2, [pc, #180]	; (800b540 <TIM_OC2_SetConfig+0xec>)
 800b48a:	4013      	ands	r3, r2
 800b48c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	021b      	lsls	r3, r3, #8
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4313      	orrs	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2220      	movs	r2, #32
 800b49e:	4393      	bics	r3, r2
 800b4a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	011b      	lsls	r3, r3, #4
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a24      	ldr	r2, [pc, #144]	; (800b544 <TIM_OC2_SetConfig+0xf0>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d10d      	bne.n	800b4d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2280      	movs	r2, #128	; 0x80
 800b4ba:	4393      	bics	r3, r2
 800b4bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	011b      	lsls	r3, r3, #4
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	2240      	movs	r2, #64	; 0x40
 800b4ce:	4393      	bics	r3, r2
 800b4d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a1b      	ldr	r2, [pc, #108]	; (800b544 <TIM_OC2_SetConfig+0xf0>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d00b      	beq.n	800b4f2 <TIM_OC2_SetConfig+0x9e>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a1a      	ldr	r2, [pc, #104]	; (800b548 <TIM_OC2_SetConfig+0xf4>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d007      	beq.n	800b4f2 <TIM_OC2_SetConfig+0x9e>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a19      	ldr	r2, [pc, #100]	; (800b54c <TIM_OC2_SetConfig+0xf8>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d003      	beq.n	800b4f2 <TIM_OC2_SetConfig+0x9e>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a18      	ldr	r2, [pc, #96]	; (800b550 <TIM_OC2_SetConfig+0xfc>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d113      	bne.n	800b51a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	4a17      	ldr	r2, [pc, #92]	; (800b554 <TIM_OC2_SetConfig+0x100>)
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	4a16      	ldr	r2, [pc, #88]	; (800b558 <TIM_OC2_SetConfig+0x104>)
 800b4fe:	4013      	ands	r3, r2
 800b500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	695b      	ldr	r3, [r3, #20]
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	4313      	orrs	r3, r2
 800b518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	693a      	ldr	r2, [r7, #16]
 800b51e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	621a      	str	r2, [r3, #32]
}
 800b534:	46c0      	nop			; (mov r8, r8)
 800b536:	46bd      	mov	sp, r7
 800b538:	b006      	add	sp, #24
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	feff8fff 	.word	0xfeff8fff
 800b540:	fffffcff 	.word	0xfffffcff
 800b544:	40012c00 	.word	0x40012c00
 800b548:	40014000 	.word	0x40014000
 800b54c:	40014400 	.word	0x40014400
 800b550:	40014800 	.word	0x40014800
 800b554:	fffffbff 	.word	0xfffffbff
 800b558:	fffff7ff 	.word	0xfffff7ff

0800b55c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a1b      	ldr	r3, [r3, #32]
 800b56a:	4a35      	ldr	r2, [pc, #212]	; (800b640 <TIM_OC3_SetConfig+0xe4>)
 800b56c:	401a      	ands	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	4a2f      	ldr	r2, [pc, #188]	; (800b644 <TIM_OC3_SetConfig+0xe8>)
 800b588:	4013      	ands	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2203      	movs	r2, #3
 800b590:	4393      	bics	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	4a29      	ldr	r2, [pc, #164]	; (800b648 <TIM_OC3_SetConfig+0xec>)
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	021b      	lsls	r3, r3, #8
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a25      	ldr	r2, [pc, #148]	; (800b64c <TIM_OC3_SetConfig+0xf0>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d10d      	bne.n	800b5d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	4a24      	ldr	r2, [pc, #144]	; (800b650 <TIM_OC3_SetConfig+0xf4>)
 800b5be:	4013      	ands	r3, r2
 800b5c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	021b      	lsls	r3, r3, #8
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	4a20      	ldr	r2, [pc, #128]	; (800b654 <TIM_OC3_SetConfig+0xf8>)
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a1c      	ldr	r2, [pc, #112]	; (800b64c <TIM_OC3_SetConfig+0xf0>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d00b      	beq.n	800b5f6 <TIM_OC3_SetConfig+0x9a>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a1d      	ldr	r2, [pc, #116]	; (800b658 <TIM_OC3_SetConfig+0xfc>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d007      	beq.n	800b5f6 <TIM_OC3_SetConfig+0x9a>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a1c      	ldr	r2, [pc, #112]	; (800b65c <TIM_OC3_SetConfig+0x100>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d003      	beq.n	800b5f6 <TIM_OC3_SetConfig+0x9a>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a1b      	ldr	r2, [pc, #108]	; (800b660 <TIM_OC3_SetConfig+0x104>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d113      	bne.n	800b61e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	4a1a      	ldr	r2, [pc, #104]	; (800b664 <TIM_OC3_SetConfig+0x108>)
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	4a19      	ldr	r2, [pc, #100]	; (800b668 <TIM_OC3_SetConfig+0x10c>)
 800b602:	4013      	ands	r3, r2
 800b604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	011b      	lsls	r3, r3, #4
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	4313      	orrs	r3, r2
 800b610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	011b      	lsls	r3, r3, #4
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	697a      	ldr	r2, [r7, #20]
 800b636:	621a      	str	r2, [r3, #32]
}
 800b638:	46c0      	nop			; (mov r8, r8)
 800b63a:	46bd      	mov	sp, r7
 800b63c:	b006      	add	sp, #24
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	fffffeff 	.word	0xfffffeff
 800b644:	fffeff8f 	.word	0xfffeff8f
 800b648:	fffffdff 	.word	0xfffffdff
 800b64c:	40012c00 	.word	0x40012c00
 800b650:	fffff7ff 	.word	0xfffff7ff
 800b654:	fffffbff 	.word	0xfffffbff
 800b658:	40014000 	.word	0x40014000
 800b65c:	40014400 	.word	0x40014400
 800b660:	40014800 	.word	0x40014800
 800b664:	ffffefff 	.word	0xffffefff
 800b668:	ffffdfff 	.word	0xffffdfff

0800b66c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	4a28      	ldr	r2, [pc, #160]	; (800b71c <TIM_OC4_SetConfig+0xb0>)
 800b67c:	401a      	ands	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	69db      	ldr	r3, [r3, #28]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4a22      	ldr	r2, [pc, #136]	; (800b720 <TIM_OC4_SetConfig+0xb4>)
 800b698:	4013      	ands	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4a21      	ldr	r2, [pc, #132]	; (800b724 <TIM_OC4_SetConfig+0xb8>)
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	021b      	lsls	r3, r3, #8
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	4a1d      	ldr	r2, [pc, #116]	; (800b728 <TIM_OC4_SetConfig+0xbc>)
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	031b      	lsls	r3, r3, #12
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a19      	ldr	r2, [pc, #100]	; (800b72c <TIM_OC4_SetConfig+0xc0>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d00b      	beq.n	800b6e4 <TIM_OC4_SetConfig+0x78>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a18      	ldr	r2, [pc, #96]	; (800b730 <TIM_OC4_SetConfig+0xc4>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d007      	beq.n	800b6e4 <TIM_OC4_SetConfig+0x78>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a17      	ldr	r2, [pc, #92]	; (800b734 <TIM_OC4_SetConfig+0xc8>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d003      	beq.n	800b6e4 <TIM_OC4_SetConfig+0x78>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a16      	ldr	r2, [pc, #88]	; (800b738 <TIM_OC4_SetConfig+0xcc>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d109      	bne.n	800b6f8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	4a15      	ldr	r2, [pc, #84]	; (800b73c <TIM_OC4_SetConfig+0xd0>)
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	695b      	ldr	r3, [r3, #20]
 800b6f0:	019b      	lsls	r3, r3, #6
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	693a      	ldr	r2, [r7, #16]
 800b710:	621a      	str	r2, [r3, #32]
}
 800b712:	46c0      	nop			; (mov r8, r8)
 800b714:	46bd      	mov	sp, r7
 800b716:	b006      	add	sp, #24
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	46c0      	nop			; (mov r8, r8)
 800b71c:	ffffefff 	.word	0xffffefff
 800b720:	feff8fff 	.word	0xfeff8fff
 800b724:	fffffcff 	.word	0xfffffcff
 800b728:	ffffdfff 	.word	0xffffdfff
 800b72c:	40012c00 	.word	0x40012c00
 800b730:	40014000 	.word	0x40014000
 800b734:	40014400 	.word	0x40014400
 800b738:	40014800 	.word	0x40014800
 800b73c:	ffffbfff 	.word	0xffffbfff

0800b740 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	4a25      	ldr	r2, [pc, #148]	; (800b7e4 <TIM_OC5_SetConfig+0xa4>)
 800b750:	401a      	ands	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4a1f      	ldr	r2, [pc, #124]	; (800b7e8 <TIM_OC5_SetConfig+0xa8>)
 800b76c:	4013      	ands	r3, r2
 800b76e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	4313      	orrs	r3, r2
 800b778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	4a1b      	ldr	r2, [pc, #108]	; (800b7ec <TIM_OC5_SetConfig+0xac>)
 800b77e:	4013      	ands	r3, r2
 800b780:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	041b      	lsls	r3, r3, #16
 800b788:	693a      	ldr	r2, [r7, #16]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a17      	ldr	r2, [pc, #92]	; (800b7f0 <TIM_OC5_SetConfig+0xb0>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d00b      	beq.n	800b7ae <TIM_OC5_SetConfig+0x6e>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a16      	ldr	r2, [pc, #88]	; (800b7f4 <TIM_OC5_SetConfig+0xb4>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d007      	beq.n	800b7ae <TIM_OC5_SetConfig+0x6e>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a15      	ldr	r2, [pc, #84]	; (800b7f8 <TIM_OC5_SetConfig+0xb8>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d003      	beq.n	800b7ae <TIM_OC5_SetConfig+0x6e>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a14      	ldr	r2, [pc, #80]	; (800b7fc <TIM_OC5_SetConfig+0xbc>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d109      	bne.n	800b7c2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	4a0c      	ldr	r2, [pc, #48]	; (800b7e4 <TIM_OC5_SetConfig+0xa4>)
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	021b      	lsls	r3, r3, #8
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	685a      	ldr	r2, [r3, #4]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	621a      	str	r2, [r3, #32]
}
 800b7dc:	46c0      	nop			; (mov r8, r8)
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	b006      	add	sp, #24
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	fffeffff 	.word	0xfffeffff
 800b7e8:	fffeff8f 	.word	0xfffeff8f
 800b7ec:	fffdffff 	.word	0xfffdffff
 800b7f0:	40012c00 	.word	0x40012c00
 800b7f4:	40014000 	.word	0x40014000
 800b7f8:	40014400 	.word	0x40014400
 800b7fc:	40014800 	.word	0x40014800

0800b800 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	4a26      	ldr	r2, [pc, #152]	; (800b8a8 <TIM_OC6_SetConfig+0xa8>)
 800b810:	401a      	ands	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	4a20      	ldr	r2, [pc, #128]	; (800b8ac <TIM_OC6_SetConfig+0xac>)
 800b82c:	4013      	ands	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	021b      	lsls	r3, r3, #8
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4313      	orrs	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	4a1c      	ldr	r2, [pc, #112]	; (800b8b0 <TIM_OC6_SetConfig+0xb0>)
 800b840:	4013      	ands	r3, r2
 800b842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	051b      	lsls	r3, r3, #20
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a18      	ldr	r2, [pc, #96]	; (800b8b4 <TIM_OC6_SetConfig+0xb4>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d00b      	beq.n	800b870 <TIM_OC6_SetConfig+0x70>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a17      	ldr	r2, [pc, #92]	; (800b8b8 <TIM_OC6_SetConfig+0xb8>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d007      	beq.n	800b870 <TIM_OC6_SetConfig+0x70>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a16      	ldr	r2, [pc, #88]	; (800b8bc <TIM_OC6_SetConfig+0xbc>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d003      	beq.n	800b870 <TIM_OC6_SetConfig+0x70>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a15      	ldr	r2, [pc, #84]	; (800b8c0 <TIM_OC6_SetConfig+0xc0>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d109      	bne.n	800b884 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	4a14      	ldr	r2, [pc, #80]	; (800b8c4 <TIM_OC6_SetConfig+0xc4>)
 800b874:	4013      	ands	r3, r2
 800b876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	029b      	lsls	r3, r3, #10
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	4313      	orrs	r3, r2
 800b882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	621a      	str	r2, [r3, #32]
}
 800b89e:	46c0      	nop			; (mov r8, r8)
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	b006      	add	sp, #24
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	46c0      	nop			; (mov r8, r8)
 800b8a8:	ffefffff 	.word	0xffefffff
 800b8ac:	feff8fff 	.word	0xfeff8fff
 800b8b0:	ffdfffff 	.word	0xffdfffff
 800b8b4:	40012c00 	.word	0x40012c00
 800b8b8:	40014000 	.word	0x40014000
 800b8bc:	40014400 	.word	0x40014400
 800b8c0:	40014800 	.word	0x40014800
 800b8c4:	fffbffff 	.word	0xfffbffff

0800b8c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	4393      	bics	r3, r2
 800b8e2:	001a      	movs	r2, r3
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	22f0      	movs	r2, #240	; 0xf0
 800b8f2:	4393      	bics	r3, r2
 800b8f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	011b      	lsls	r3, r3, #4
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	220a      	movs	r2, #10
 800b904:	4393      	bics	r3, r2
 800b906:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	621a      	str	r2, [r3, #32]
}
 800b91c:	46c0      	nop			; (mov r8, r8)
 800b91e:	46bd      	mov	sp, r7
 800b920:	b006      	add	sp, #24
 800b922:	bd80      	pop	{r7, pc}

0800b924 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6a1b      	ldr	r3, [r3, #32]
 800b934:	2210      	movs	r2, #16
 800b936:	4393      	bics	r3, r2
 800b938:	001a      	movs	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a1b      	ldr	r3, [r3, #32]
 800b948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	4a0d      	ldr	r2, [pc, #52]	; (800b984 <TIM_TI2_ConfigInputStage+0x60>)
 800b94e:	4013      	ands	r3, r2
 800b950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	031b      	lsls	r3, r3, #12
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	4313      	orrs	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	22a0      	movs	r2, #160	; 0xa0
 800b960:	4393      	bics	r3, r2
 800b962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	011b      	lsls	r3, r3, #4
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	697a      	ldr	r2, [r7, #20]
 800b972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	621a      	str	r2, [r3, #32]
}
 800b97a:	46c0      	nop			; (mov r8, r8)
 800b97c:	46bd      	mov	sp, r7
 800b97e:	b006      	add	sp, #24
 800b980:	bd80      	pop	{r7, pc}
 800b982:	46c0      	nop			; (mov r8, r8)
 800b984:	ffff0fff 	.word	0xffff0fff

0800b988 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	4a08      	ldr	r2, [pc, #32]	; (800b9bc <TIM_ITRx_SetConfig+0x34>)
 800b99c:	4013      	ands	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	2207      	movs	r2, #7
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	609a      	str	r2, [r3, #8]
}
 800b9b2:	46c0      	nop			; (mov r8, r8)
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	b004      	add	sp, #16
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	46c0      	nop			; (mov r8, r8)
 800b9bc:	ffcfff8f 	.word	0xffcfff8f

0800b9c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	4a09      	ldr	r2, [pc, #36]	; (800b9fc <TIM_ETR_SetConfig+0x3c>)
 800b9d8:	4013      	ands	r3, r2
 800b9da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	021a      	lsls	r2, r3, #8
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	609a      	str	r2, [r3, #8]
}
 800b9f4:	46c0      	nop			; (mov r8, r8)
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	b006      	add	sp, #24
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	ffff00ff 	.word	0xffff00ff

0800ba00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	223c      	movs	r2, #60	; 0x3c
 800ba0e:	5c9b      	ldrb	r3, [r3, r2]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d101      	bne.n	800ba18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba14:	2302      	movs	r3, #2
 800ba16:	e04f      	b.n	800bab8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	223c      	movs	r2, #60	; 0x3c
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	223d      	movs	r2, #61	; 0x3d
 800ba24:	2102      	movs	r1, #2
 800ba26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a20      	ldr	r2, [pc, #128]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d108      	bne.n	800ba54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4a1f      	ldr	r2, [pc, #124]	; (800bac4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ba46:	4013      	ands	r3, r2
 800ba48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2270      	movs	r2, #112	; 0x70
 800ba58:	4393      	bics	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a13      	ldr	r2, [pc, #76]	; (800bac0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d009      	beq.n	800ba8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a12      	ldr	r2, [pc, #72]	; (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d004      	beq.n	800ba8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a11      	ldr	r2, [pc, #68]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d10c      	bne.n	800baa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	2280      	movs	r2, #128	; 0x80
 800ba90:	4393      	bics	r3, r2
 800ba92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	223d      	movs	r2, #61	; 0x3d
 800baaa:	2101      	movs	r1, #1
 800baac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	223c      	movs	r2, #60	; 0x3c
 800bab2:	2100      	movs	r1, #0
 800bab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	0018      	movs	r0, r3
 800baba:	46bd      	mov	sp, r7
 800babc:	b004      	add	sp, #16
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	40012c00 	.word	0x40012c00
 800bac4:	ff0fffff 	.word	0xff0fffff
 800bac8:	40000400 	.word	0x40000400
 800bacc:	40014000 	.word	0x40014000

0800bad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bad8:	46c0      	nop			; (mov r8, r8)
 800bada:	46bd      	mov	sp, r7
 800badc:	b002      	add	sp, #8
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bae8:	46c0      	nop			; (mov r8, r8)
 800baea:	46bd      	mov	sp, r7
 800baec:	b002      	add	sp, #8
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800baf8:	46c0      	nop			; (mov r8, r8)
 800bafa:	46bd      	mov	sp, r7
 800bafc:	b002      	add	sp, #8
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d101      	bne.n	800bb12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e046      	b.n	800bba0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2288      	movs	r2, #136	; 0x88
 800bb16:	589b      	ldr	r3, [r3, r2]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d107      	bne.n	800bb2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2284      	movs	r2, #132	; 0x84
 800bb20:	2100      	movs	r1, #0
 800bb22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	0018      	movs	r0, r3
 800bb28:	f7fa fa9a 	bl	8006060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2288      	movs	r2, #136	; 0x88
 800bb30:	2124      	movs	r1, #36	; 0x24
 800bb32:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2101      	movs	r1, #1
 800bb40:	438a      	bics	r2, r1
 800bb42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	0018      	movs	r0, r3
 800bb48:	f000 fb6a 	bl	800c220 <UART_SetConfig>
 800bb4c:	0003      	movs	r3, r0
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d101      	bne.n	800bb56 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e024      	b.n	800bba0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	0018      	movs	r0, r3
 800bb62:	f000 fd01 	bl	800c568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	490d      	ldr	r1, [pc, #52]	; (800bba8 <HAL_UART_Init+0xa8>)
 800bb72:	400a      	ands	r2, r1
 800bb74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	689a      	ldr	r2, [r3, #8]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	212a      	movs	r1, #42	; 0x2a
 800bb82:	438a      	bics	r2, r1
 800bb84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2101      	movs	r1, #1
 800bb92:	430a      	orrs	r2, r1
 800bb94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	0018      	movs	r0, r3
 800bb9a:	f000 fd99 	bl	800c6d0 <UART_CheckIdleState>
 800bb9e:	0003      	movs	r3, r0
}
 800bba0:	0018      	movs	r0, r3
 800bba2:	46bd      	mov	sp, r7
 800bba4:	b002      	add	sp, #8
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	ffffb7ff 	.word	0xffffb7ff

0800bbac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbac:	b5b0      	push	{r4, r5, r7, lr}
 800bbae:	b0aa      	sub	sp, #168	; 0xa8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	22a4      	movs	r2, #164	; 0xa4
 800bbbc:	18b9      	adds	r1, r7, r2
 800bbbe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	20a0      	movs	r0, #160	; 0xa0
 800bbc8:	1839      	adds	r1, r7, r0
 800bbca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	249c      	movs	r4, #156	; 0x9c
 800bbd4:	1939      	adds	r1, r7, r4
 800bbd6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bbd8:	0011      	movs	r1, r2
 800bbda:	18bb      	adds	r3, r7, r2
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4aa2      	ldr	r2, [pc, #648]	; (800be68 <HAL_UART_IRQHandler+0x2bc>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	2298      	movs	r2, #152	; 0x98
 800bbe4:	18bd      	adds	r5, r7, r2
 800bbe6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800bbe8:	18bb      	adds	r3, r7, r2
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d11a      	bne.n	800bc26 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbf0:	187b      	adds	r3, r7, r1
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2220      	movs	r2, #32
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	d015      	beq.n	800bc26 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbfa:	183b      	adds	r3, r7, r0
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	4013      	ands	r3, r2
 800bc02:	d105      	bne.n	800bc10 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc04:	193b      	adds	r3, r7, r4
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	2380      	movs	r3, #128	; 0x80
 800bc0a:	055b      	lsls	r3, r3, #21
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	d00a      	beq.n	800bc26 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d100      	bne.n	800bc1a <HAL_UART_IRQHandler+0x6e>
 800bc18:	e2dc      	b.n	800c1d4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	0010      	movs	r0, r2
 800bc22:	4798      	blx	r3
      }
      return;
 800bc24:	e2d6      	b.n	800c1d4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc26:	2398      	movs	r3, #152	; 0x98
 800bc28:	18fb      	adds	r3, r7, r3
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d100      	bne.n	800bc32 <HAL_UART_IRQHandler+0x86>
 800bc30:	e122      	b.n	800be78 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc32:	239c      	movs	r3, #156	; 0x9c
 800bc34:	18fb      	adds	r3, r7, r3
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a8c      	ldr	r2, [pc, #560]	; (800be6c <HAL_UART_IRQHandler+0x2c0>)
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	d106      	bne.n	800bc4c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc3e:	23a0      	movs	r3, #160	; 0xa0
 800bc40:	18fb      	adds	r3, r7, r3
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a8a      	ldr	r2, [pc, #552]	; (800be70 <HAL_UART_IRQHandler+0x2c4>)
 800bc46:	4013      	ands	r3, r2
 800bc48:	d100      	bne.n	800bc4c <HAL_UART_IRQHandler+0xa0>
 800bc4a:	e115      	b.n	800be78 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc4c:	23a4      	movs	r3, #164	; 0xa4
 800bc4e:	18fb      	adds	r3, r7, r3
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2201      	movs	r2, #1
 800bc54:	4013      	ands	r3, r2
 800bc56:	d012      	beq.n	800bc7e <HAL_UART_IRQHandler+0xd2>
 800bc58:	23a0      	movs	r3, #160	; 0xa0
 800bc5a:	18fb      	adds	r3, r7, r3
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	2380      	movs	r3, #128	; 0x80
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	4013      	ands	r3, r2
 800bc64:	d00b      	beq.n	800bc7e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2290      	movs	r2, #144	; 0x90
 800bc72:	589b      	ldr	r3, [r3, r2]
 800bc74:	2201      	movs	r2, #1
 800bc76:	431a      	orrs	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2190      	movs	r1, #144	; 0x90
 800bc7c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc7e:	23a4      	movs	r3, #164	; 0xa4
 800bc80:	18fb      	adds	r3, r7, r3
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2202      	movs	r2, #2
 800bc86:	4013      	ands	r3, r2
 800bc88:	d011      	beq.n	800bcae <HAL_UART_IRQHandler+0x102>
 800bc8a:	239c      	movs	r3, #156	; 0x9c
 800bc8c:	18fb      	adds	r3, r7, r3
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2201      	movs	r2, #1
 800bc92:	4013      	ands	r3, r2
 800bc94:	d00b      	beq.n	800bcae <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2202      	movs	r2, #2
 800bc9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2290      	movs	r2, #144	; 0x90
 800bca2:	589b      	ldr	r3, [r3, r2]
 800bca4:	2204      	movs	r2, #4
 800bca6:	431a      	orrs	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2190      	movs	r1, #144	; 0x90
 800bcac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcae:	23a4      	movs	r3, #164	; 0xa4
 800bcb0:	18fb      	adds	r3, r7, r3
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2204      	movs	r2, #4
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	d011      	beq.n	800bcde <HAL_UART_IRQHandler+0x132>
 800bcba:	239c      	movs	r3, #156	; 0x9c
 800bcbc:	18fb      	adds	r3, r7, r3
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	4013      	ands	r3, r2
 800bcc4:	d00b      	beq.n	800bcde <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2204      	movs	r2, #4
 800bccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2290      	movs	r2, #144	; 0x90
 800bcd2:	589b      	ldr	r3, [r3, r2]
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2190      	movs	r1, #144	; 0x90
 800bcdc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bcde:	23a4      	movs	r3, #164	; 0xa4
 800bce0:	18fb      	adds	r3, r7, r3
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2208      	movs	r2, #8
 800bce6:	4013      	ands	r3, r2
 800bce8:	d017      	beq.n	800bd1a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bcea:	23a0      	movs	r3, #160	; 0xa0
 800bcec:	18fb      	adds	r3, r7, r3
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	d105      	bne.n	800bd02 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bcf6:	239c      	movs	r3, #156	; 0x9c
 800bcf8:	18fb      	adds	r3, r7, r3
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a5b      	ldr	r2, [pc, #364]	; (800be6c <HAL_UART_IRQHandler+0x2c0>)
 800bcfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd00:	d00b      	beq.n	800bd1a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2208      	movs	r2, #8
 800bd08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2290      	movs	r2, #144	; 0x90
 800bd0e:	589b      	ldr	r3, [r3, r2]
 800bd10:	2208      	movs	r2, #8
 800bd12:	431a      	orrs	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2190      	movs	r1, #144	; 0x90
 800bd18:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd1a:	23a4      	movs	r3, #164	; 0xa4
 800bd1c:	18fb      	adds	r3, r7, r3
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	2380      	movs	r3, #128	; 0x80
 800bd22:	011b      	lsls	r3, r3, #4
 800bd24:	4013      	ands	r3, r2
 800bd26:	d013      	beq.n	800bd50 <HAL_UART_IRQHandler+0x1a4>
 800bd28:	23a0      	movs	r3, #160	; 0xa0
 800bd2a:	18fb      	adds	r3, r7, r3
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	2380      	movs	r3, #128	; 0x80
 800bd30:	04db      	lsls	r3, r3, #19
 800bd32:	4013      	ands	r3, r2
 800bd34:	d00c      	beq.n	800bd50 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2280      	movs	r2, #128	; 0x80
 800bd3c:	0112      	lsls	r2, r2, #4
 800bd3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2290      	movs	r2, #144	; 0x90
 800bd44:	589b      	ldr	r3, [r3, r2]
 800bd46:	2220      	movs	r2, #32
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2190      	movs	r1, #144	; 0x90
 800bd4e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2290      	movs	r2, #144	; 0x90
 800bd54:	589b      	ldr	r3, [r3, r2]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d100      	bne.n	800bd5c <HAL_UART_IRQHandler+0x1b0>
 800bd5a:	e23d      	b.n	800c1d8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd5c:	23a4      	movs	r3, #164	; 0xa4
 800bd5e:	18fb      	adds	r3, r7, r3
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2220      	movs	r2, #32
 800bd64:	4013      	ands	r3, r2
 800bd66:	d015      	beq.n	800bd94 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd68:	23a0      	movs	r3, #160	; 0xa0
 800bd6a:	18fb      	adds	r3, r7, r3
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2220      	movs	r2, #32
 800bd70:	4013      	ands	r3, r2
 800bd72:	d106      	bne.n	800bd82 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd74:	239c      	movs	r3, #156	; 0x9c
 800bd76:	18fb      	adds	r3, r7, r3
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	2380      	movs	r3, #128	; 0x80
 800bd7c:	055b      	lsls	r3, r3, #21
 800bd7e:	4013      	ands	r3, r2
 800bd80:	d008      	beq.n	800bd94 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d004      	beq.n	800bd94 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	0010      	movs	r0, r2
 800bd92:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2290      	movs	r2, #144	; 0x90
 800bd98:	589b      	ldr	r3, [r3, r2]
 800bd9a:	2194      	movs	r1, #148	; 0x94
 800bd9c:	187a      	adds	r2, r7, r1
 800bd9e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	2240      	movs	r2, #64	; 0x40
 800bda8:	4013      	ands	r3, r2
 800bdaa:	2b40      	cmp	r3, #64	; 0x40
 800bdac:	d004      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bdae:	187b      	adds	r3, r7, r1
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2228      	movs	r2, #40	; 0x28
 800bdb4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdb6:	d04c      	beq.n	800be52 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	0018      	movs	r0, r3
 800bdbc:	f000 fd9e 	bl	800c8fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	2240      	movs	r2, #64	; 0x40
 800bdc8:	4013      	ands	r3, r2
 800bdca:	2b40      	cmp	r3, #64	; 0x40
 800bdcc:	d13c      	bne.n	800be48 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdce:	f3ef 8310 	mrs	r3, PRIMASK
 800bdd2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800bdd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdd6:	2090      	movs	r0, #144	; 0x90
 800bdd8:	183a      	adds	r2, r7, r0
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	2301      	movs	r3, #1
 800bdde:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bde0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bde2:	f383 8810 	msr	PRIMASK, r3
}
 800bde6:	46c0      	nop			; (mov r8, r8)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689a      	ldr	r2, [r3, #8]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2140      	movs	r1, #64	; 0x40
 800bdf4:	438a      	bics	r2, r1
 800bdf6:	609a      	str	r2, [r3, #8]
 800bdf8:	183b      	adds	r3, r7, r0
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be00:	f383 8810 	msr	PRIMASK, r3
}
 800be04:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2280      	movs	r2, #128	; 0x80
 800be0a:	589b      	ldr	r3, [r3, r2]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d016      	beq.n	800be3e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2280      	movs	r2, #128	; 0x80
 800be14:	589b      	ldr	r3, [r3, r2]
 800be16:	4a17      	ldr	r2, [pc, #92]	; (800be74 <HAL_UART_IRQHandler+0x2c8>)
 800be18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2280      	movs	r2, #128	; 0x80
 800be1e:	589b      	ldr	r3, [r3, r2]
 800be20:	0018      	movs	r0, r3
 800be22:	f7fc fab9 	bl	8008398 <HAL_DMA_Abort_IT>
 800be26:	1e03      	subs	r3, r0, #0
 800be28:	d01c      	beq.n	800be64 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2280      	movs	r2, #128	; 0x80
 800be2e:	589b      	ldr	r3, [r3, r2]
 800be30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	2180      	movs	r1, #128	; 0x80
 800be36:	5852      	ldr	r2, [r2, r1]
 800be38:	0010      	movs	r0, r2
 800be3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be3c:	e012      	b.n	800be64 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	0018      	movs	r0, r3
 800be42:	f000 f9d9 	bl	800c1f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be46:	e00d      	b.n	800be64 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	0018      	movs	r0, r3
 800be4c:	f000 f9d4 	bl	800c1f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be50:	e008      	b.n	800be64 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	0018      	movs	r0, r3
 800be56:	f000 f9cf 	bl	800c1f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2290      	movs	r2, #144	; 0x90
 800be5e:	2100      	movs	r1, #0
 800be60:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800be62:	e1b9      	b.n	800c1d8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be64:	46c0      	nop			; (mov r8, r8)
    return;
 800be66:	e1b7      	b.n	800c1d8 <HAL_UART_IRQHandler+0x62c>
 800be68:	0000080f 	.word	0x0000080f
 800be6c:	10000001 	.word	0x10000001
 800be70:	04000120 	.word	0x04000120
 800be74:	0800c9c9 	.word	0x0800c9c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d000      	beq.n	800be82 <HAL_UART_IRQHandler+0x2d6>
 800be80:	e13e      	b.n	800c100 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be82:	23a4      	movs	r3, #164	; 0xa4
 800be84:	18fb      	adds	r3, r7, r3
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2210      	movs	r2, #16
 800be8a:	4013      	ands	r3, r2
 800be8c:	d100      	bne.n	800be90 <HAL_UART_IRQHandler+0x2e4>
 800be8e:	e137      	b.n	800c100 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be90:	23a0      	movs	r3, #160	; 0xa0
 800be92:	18fb      	adds	r3, r7, r3
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2210      	movs	r2, #16
 800be98:	4013      	ands	r3, r2
 800be9a:	d100      	bne.n	800be9e <HAL_UART_IRQHandler+0x2f2>
 800be9c:	e130      	b.n	800c100 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2210      	movs	r2, #16
 800bea4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	2240      	movs	r2, #64	; 0x40
 800beae:	4013      	ands	r3, r2
 800beb0:	2b40      	cmp	r3, #64	; 0x40
 800beb2:	d000      	beq.n	800beb6 <HAL_UART_IRQHandler+0x30a>
 800beb4:	e0a4      	b.n	800c000 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2280      	movs	r2, #128	; 0x80
 800beba:	589b      	ldr	r3, [r3, r2]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685a      	ldr	r2, [r3, #4]
 800bec0:	217e      	movs	r1, #126	; 0x7e
 800bec2:	187b      	adds	r3, r7, r1
 800bec4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800bec6:	187b      	adds	r3, r7, r1
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d100      	bne.n	800bed0 <HAL_UART_IRQHandler+0x324>
 800bece:	e185      	b.n	800c1dc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	225c      	movs	r2, #92	; 0x5c
 800bed4:	5a9b      	ldrh	r3, [r3, r2]
 800bed6:	187a      	adds	r2, r7, r1
 800bed8:	8812      	ldrh	r2, [r2, #0]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d300      	bcc.n	800bee0 <HAL_UART_IRQHandler+0x334>
 800bede:	e17d      	b.n	800c1dc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	187a      	adds	r2, r7, r1
 800bee4:	215e      	movs	r1, #94	; 0x5e
 800bee6:	8812      	ldrh	r2, [r2, #0]
 800bee8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2280      	movs	r2, #128	; 0x80
 800beee:	589b      	ldr	r3, [r3, r2]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2220      	movs	r2, #32
 800bef6:	4013      	ands	r3, r2
 800bef8:	d170      	bne.n	800bfdc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800befa:	f3ef 8310 	mrs	r3, PRIMASK
 800befe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf02:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf04:	2301      	movs	r3, #1
 800bf06:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0a:	f383 8810 	msr	PRIMASK, r3
}
 800bf0e:	46c0      	nop			; (mov r8, r8)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	49b4      	ldr	r1, [pc, #720]	; (800c1ec <HAL_UART_IRQHandler+0x640>)
 800bf1c:	400a      	ands	r2, r1
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	f383 8810 	msr	PRIMASK, r3
}
 800bf2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf2c:	f3ef 8310 	mrs	r3, PRIMASK
 800bf30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800bf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf34:	677b      	str	r3, [r7, #116]	; 0x74
 800bf36:	2301      	movs	r3, #1
 800bf38:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf3c:	f383 8810 	msr	PRIMASK, r3
}
 800bf40:	46c0      	nop			; (mov r8, r8)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	438a      	bics	r2, r1
 800bf50:	609a      	str	r2, [r3, #8]
 800bf52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf54:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf58:	f383 8810 	msr	PRIMASK, r3
}
 800bf5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf5e:	f3ef 8310 	mrs	r3, PRIMASK
 800bf62:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800bf64:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf66:	673b      	str	r3, [r7, #112]	; 0x70
 800bf68:	2301      	movs	r3, #1
 800bf6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf6e:	f383 8810 	msr	PRIMASK, r3
}
 800bf72:	46c0      	nop			; (mov r8, r8)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	689a      	ldr	r2, [r3, #8]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2140      	movs	r1, #64	; 0x40
 800bf80:	438a      	bics	r2, r1
 800bf82:	609a      	str	r2, [r3, #8]
 800bf84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf86:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf8a:	f383 8810 	msr	PRIMASK, r3
}
 800bf8e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	228c      	movs	r2, #140	; 0x8c
 800bf94:	2120      	movs	r1, #32
 800bf96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf9e:	f3ef 8310 	mrs	r3, PRIMASK
 800bfa2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800bfa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfae:	f383 8810 	msr	PRIMASK, r3
}
 800bfb2:	46c0      	nop			; (mov r8, r8)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2110      	movs	r1, #16
 800bfc0:	438a      	bics	r2, r1
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfca:	f383 8810 	msr	PRIMASK, r3
}
 800bfce:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2280      	movs	r2, #128	; 0x80
 800bfd4:	589b      	ldr	r3, [r3, r2]
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	f7fc f97c 	bl	80082d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2202      	movs	r2, #2
 800bfe0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	225c      	movs	r2, #92	; 0x5c
 800bfe6:	5a9a      	ldrh	r2, [r3, r2]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	215e      	movs	r1, #94	; 0x5e
 800bfec:	5a5b      	ldrh	r3, [r3, r1]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	0011      	movs	r1, r2
 800bff8:	0018      	movs	r0, r3
 800bffa:	f000 f905 	bl	800c208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bffe:	e0ed      	b.n	800c1dc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	225c      	movs	r2, #92	; 0x5c
 800c004:	5a99      	ldrh	r1, [r3, r2]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	225e      	movs	r2, #94	; 0x5e
 800c00a:	5a9b      	ldrh	r3, [r3, r2]
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	208e      	movs	r0, #142	; 0x8e
 800c010:	183b      	adds	r3, r7, r0
 800c012:	1a8a      	subs	r2, r1, r2
 800c014:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	225e      	movs	r2, #94	; 0x5e
 800c01a:	5a9b      	ldrh	r3, [r3, r2]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d100      	bne.n	800c024 <HAL_UART_IRQHandler+0x478>
 800c022:	e0dd      	b.n	800c1e0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800c024:	183b      	adds	r3, r7, r0
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d100      	bne.n	800c02e <HAL_UART_IRQHandler+0x482>
 800c02c:	e0d8      	b.n	800c1e0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c02e:	f3ef 8310 	mrs	r3, PRIMASK
 800c032:	60fb      	str	r3, [r7, #12]
  return(result);
 800c034:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c036:	2488      	movs	r4, #136	; 0x88
 800c038:	193a      	adds	r2, r7, r4
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	2301      	movs	r3, #1
 800c03e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	f383 8810 	msr	PRIMASK, r3
}
 800c046:	46c0      	nop			; (mov r8, r8)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4967      	ldr	r1, [pc, #412]	; (800c1f0 <HAL_UART_IRQHandler+0x644>)
 800c054:	400a      	ands	r2, r1
 800c056:	601a      	str	r2, [r3, #0]
 800c058:	193b      	adds	r3, r7, r4
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	f383 8810 	msr	PRIMASK, r3
}
 800c064:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c066:	f3ef 8310 	mrs	r3, PRIMASK
 800c06a:	61bb      	str	r3, [r7, #24]
  return(result);
 800c06c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c06e:	2484      	movs	r4, #132	; 0x84
 800c070:	193a      	adds	r2, r7, r4
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	2301      	movs	r3, #1
 800c076:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	f383 8810 	msr	PRIMASK, r3
}
 800c07e:	46c0      	nop			; (mov r8, r8)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	689a      	ldr	r2, [r3, #8]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	495a      	ldr	r1, [pc, #360]	; (800c1f4 <HAL_UART_IRQHandler+0x648>)
 800c08c:	400a      	ands	r2, r1
 800c08e:	609a      	str	r2, [r3, #8]
 800c090:	193b      	adds	r3, r7, r4
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	f383 8810 	msr	PRIMASK, r3
}
 800c09c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	228c      	movs	r2, #140	; 0x8c
 800c0a2:	2120      	movs	r1, #32
 800c0a4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800c0b6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ba:	2480      	movs	r4, #128	; 0x80
 800c0bc:	193a      	adds	r2, r7, r4
 800c0be:	6013      	str	r3, [r2, #0]
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	f383 8810 	msr	PRIMASK, r3
}
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2110      	movs	r1, #16
 800c0d8:	438a      	bics	r2, r1
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	193b      	adds	r3, r7, r4
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	f383 8810 	msr	PRIMASK, r3
}
 800c0e8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0f0:	183b      	adds	r3, r7, r0
 800c0f2:	881a      	ldrh	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	0011      	movs	r1, r2
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	f000 f885 	bl	800c208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0fe:	e06f      	b.n	800c1e0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c100:	23a4      	movs	r3, #164	; 0xa4
 800c102:	18fb      	adds	r3, r7, r3
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	2380      	movs	r3, #128	; 0x80
 800c108:	035b      	lsls	r3, r3, #13
 800c10a:	4013      	ands	r3, r2
 800c10c:	d010      	beq.n	800c130 <HAL_UART_IRQHandler+0x584>
 800c10e:	239c      	movs	r3, #156	; 0x9c
 800c110:	18fb      	adds	r3, r7, r3
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	2380      	movs	r3, #128	; 0x80
 800c116:	03db      	lsls	r3, r3, #15
 800c118:	4013      	ands	r3, r2
 800c11a:	d009      	beq.n	800c130 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2280      	movs	r2, #128	; 0x80
 800c122:	0352      	lsls	r2, r2, #13
 800c124:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	0018      	movs	r0, r3
 800c12a:	f000 fc90 	bl	800ca4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c12e:	e05a      	b.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c130:	23a4      	movs	r3, #164	; 0xa4
 800c132:	18fb      	adds	r3, r7, r3
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2280      	movs	r2, #128	; 0x80
 800c138:	4013      	ands	r3, r2
 800c13a:	d016      	beq.n	800c16a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c13c:	23a0      	movs	r3, #160	; 0xa0
 800c13e:	18fb      	adds	r3, r7, r3
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2280      	movs	r2, #128	; 0x80
 800c144:	4013      	ands	r3, r2
 800c146:	d106      	bne.n	800c156 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c148:	239c      	movs	r3, #156	; 0x9c
 800c14a:	18fb      	adds	r3, r7, r3
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	2380      	movs	r3, #128	; 0x80
 800c150:	041b      	lsls	r3, r3, #16
 800c152:	4013      	ands	r3, r2
 800c154:	d009      	beq.n	800c16a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d042      	beq.n	800c1e4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	0010      	movs	r0, r2
 800c166:	4798      	blx	r3
    }
    return;
 800c168:	e03c      	b.n	800c1e4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c16a:	23a4      	movs	r3, #164	; 0xa4
 800c16c:	18fb      	adds	r3, r7, r3
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2240      	movs	r2, #64	; 0x40
 800c172:	4013      	ands	r3, r2
 800c174:	d00a      	beq.n	800c18c <HAL_UART_IRQHandler+0x5e0>
 800c176:	23a0      	movs	r3, #160	; 0xa0
 800c178:	18fb      	adds	r3, r7, r3
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2240      	movs	r2, #64	; 0x40
 800c17e:	4013      	ands	r3, r2
 800c180:	d004      	beq.n	800c18c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	0018      	movs	r0, r3
 800c186:	f000 fc36 	bl	800c9f6 <UART_EndTransmit_IT>
    return;
 800c18a:	e02c      	b.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c18c:	23a4      	movs	r3, #164	; 0xa4
 800c18e:	18fb      	adds	r3, r7, r3
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	2380      	movs	r3, #128	; 0x80
 800c194:	041b      	lsls	r3, r3, #16
 800c196:	4013      	ands	r3, r2
 800c198:	d00b      	beq.n	800c1b2 <HAL_UART_IRQHandler+0x606>
 800c19a:	23a0      	movs	r3, #160	; 0xa0
 800c19c:	18fb      	adds	r3, r7, r3
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	2380      	movs	r3, #128	; 0x80
 800c1a2:	05db      	lsls	r3, r3, #23
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	d004      	beq.n	800c1b2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	0018      	movs	r0, r3
 800c1ac:	f000 fc5f 	bl	800ca6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1b0:	e019      	b.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c1b2:	23a4      	movs	r3, #164	; 0xa4
 800c1b4:	18fb      	adds	r3, r7, r3
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	2380      	movs	r3, #128	; 0x80
 800c1ba:	045b      	lsls	r3, r3, #17
 800c1bc:	4013      	ands	r3, r2
 800c1be:	d012      	beq.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
 800c1c0:	23a0      	movs	r3, #160	; 0xa0
 800c1c2:	18fb      	adds	r3, r7, r3
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	da0d      	bge.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	0018      	movs	r0, r3
 800c1ce:	f000 fc46 	bl	800ca5e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1d2:	e008      	b.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
      return;
 800c1d4:	46c0      	nop			; (mov r8, r8)
 800c1d6:	e006      	b.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
    return;
 800c1d8:	46c0      	nop			; (mov r8, r8)
 800c1da:	e004      	b.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
      return;
 800c1dc:	46c0      	nop			; (mov r8, r8)
 800c1de:	e002      	b.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
      return;
 800c1e0:	46c0      	nop			; (mov r8, r8)
 800c1e2:	e000      	b.n	800c1e6 <HAL_UART_IRQHandler+0x63a>
    return;
 800c1e4:	46c0      	nop			; (mov r8, r8)
  }
}
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	b02a      	add	sp, #168	; 0xa8
 800c1ea:	bdb0      	pop	{r4, r5, r7, pc}
 800c1ec:	fffffeff 	.word	0xfffffeff
 800c1f0:	fffffedf 	.word	0xfffffedf
 800c1f4:	effffffe 	.word	0xeffffffe

0800c1f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c200:	46c0      	nop			; (mov r8, r8)
 800c202:	46bd      	mov	sp, r7
 800c204:	b002      	add	sp, #8
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	000a      	movs	r2, r1
 800c212:	1cbb      	adds	r3, r7, #2
 800c214:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c216:	46c0      	nop			; (mov r8, r8)
 800c218:	46bd      	mov	sp, r7
 800c21a:	b002      	add	sp, #8
 800c21c:	bd80      	pop	{r7, pc}
	...

0800c220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b088      	sub	sp, #32
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c228:	231a      	movs	r3, #26
 800c22a:	18fb      	adds	r3, r7, r3
 800c22c:	2200      	movs	r2, #0
 800c22e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	689a      	ldr	r2, [r3, #8]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	431a      	orrs	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	431a      	orrs	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	69db      	ldr	r3, [r3, #28]
 800c244:	4313      	orrs	r3, r2
 800c246:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4abc      	ldr	r2, [pc, #752]	; (800c540 <UART_SetConfig+0x320>)
 800c250:	4013      	ands	r3, r2
 800c252:	0019      	movs	r1, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	69fa      	ldr	r2, [r7, #28]
 800c25a:	430a      	orrs	r2, r1
 800c25c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	4ab7      	ldr	r2, [pc, #732]	; (800c544 <UART_SetConfig+0x324>)
 800c266:	4013      	ands	r3, r2
 800c268:	0019      	movs	r1, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	68da      	ldr	r2, [r3, #12]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	430a      	orrs	r2, r1
 800c274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	69fa      	ldr	r2, [r7, #28]
 800c282:	4313      	orrs	r3, r2
 800c284:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	4aae      	ldr	r2, [pc, #696]	; (800c548 <UART_SetConfig+0x328>)
 800c28e:	4013      	ands	r3, r2
 800c290:	0019      	movs	r1, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	69fa      	ldr	r2, [r7, #28]
 800c298:	430a      	orrs	r2, r1
 800c29a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a2:	220f      	movs	r2, #15
 800c2a4:	4393      	bics	r3, r2
 800c2a6:	0019      	movs	r1, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	430a      	orrs	r2, r1
 800c2b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4aa4      	ldr	r2, [pc, #656]	; (800c54c <UART_SetConfig+0x32c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d127      	bne.n	800c30e <UART_SetConfig+0xee>
 800c2be:	4ba4      	ldr	r3, [pc, #656]	; (800c550 <UART_SetConfig+0x330>)
 800c2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c2:	2203      	movs	r2, #3
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d017      	beq.n	800c2fa <UART_SetConfig+0xda>
 800c2ca:	d81b      	bhi.n	800c304 <UART_SetConfig+0xe4>
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d00a      	beq.n	800c2e6 <UART_SetConfig+0xc6>
 800c2d0:	d818      	bhi.n	800c304 <UART_SetConfig+0xe4>
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <UART_SetConfig+0xbc>
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d00a      	beq.n	800c2f0 <UART_SetConfig+0xd0>
 800c2da:	e013      	b.n	800c304 <UART_SetConfig+0xe4>
 800c2dc:	231b      	movs	r3, #27
 800c2de:	18fb      	adds	r3, r7, r3
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	e058      	b.n	800c398 <UART_SetConfig+0x178>
 800c2e6:	231b      	movs	r3, #27
 800c2e8:	18fb      	adds	r3, r7, r3
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	701a      	strb	r2, [r3, #0]
 800c2ee:	e053      	b.n	800c398 <UART_SetConfig+0x178>
 800c2f0:	231b      	movs	r3, #27
 800c2f2:	18fb      	adds	r3, r7, r3
 800c2f4:	2204      	movs	r2, #4
 800c2f6:	701a      	strb	r2, [r3, #0]
 800c2f8:	e04e      	b.n	800c398 <UART_SetConfig+0x178>
 800c2fa:	231b      	movs	r3, #27
 800c2fc:	18fb      	adds	r3, r7, r3
 800c2fe:	2208      	movs	r2, #8
 800c300:	701a      	strb	r2, [r3, #0]
 800c302:	e049      	b.n	800c398 <UART_SetConfig+0x178>
 800c304:	231b      	movs	r3, #27
 800c306:	18fb      	adds	r3, r7, r3
 800c308:	2210      	movs	r2, #16
 800c30a:	701a      	strb	r2, [r3, #0]
 800c30c:	e044      	b.n	800c398 <UART_SetConfig+0x178>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a90      	ldr	r2, [pc, #576]	; (800c554 <UART_SetConfig+0x334>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d127      	bne.n	800c368 <UART_SetConfig+0x148>
 800c318:	4b8d      	ldr	r3, [pc, #564]	; (800c550 <UART_SetConfig+0x330>)
 800c31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c31c:	220c      	movs	r2, #12
 800c31e:	4013      	ands	r3, r2
 800c320:	2b0c      	cmp	r3, #12
 800c322:	d017      	beq.n	800c354 <UART_SetConfig+0x134>
 800c324:	d81b      	bhi.n	800c35e <UART_SetConfig+0x13e>
 800c326:	2b08      	cmp	r3, #8
 800c328:	d00a      	beq.n	800c340 <UART_SetConfig+0x120>
 800c32a:	d818      	bhi.n	800c35e <UART_SetConfig+0x13e>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <UART_SetConfig+0x116>
 800c330:	2b04      	cmp	r3, #4
 800c332:	d00a      	beq.n	800c34a <UART_SetConfig+0x12a>
 800c334:	e013      	b.n	800c35e <UART_SetConfig+0x13e>
 800c336:	231b      	movs	r3, #27
 800c338:	18fb      	adds	r3, r7, r3
 800c33a:	2200      	movs	r2, #0
 800c33c:	701a      	strb	r2, [r3, #0]
 800c33e:	e02b      	b.n	800c398 <UART_SetConfig+0x178>
 800c340:	231b      	movs	r3, #27
 800c342:	18fb      	adds	r3, r7, r3
 800c344:	2202      	movs	r2, #2
 800c346:	701a      	strb	r2, [r3, #0]
 800c348:	e026      	b.n	800c398 <UART_SetConfig+0x178>
 800c34a:	231b      	movs	r3, #27
 800c34c:	18fb      	adds	r3, r7, r3
 800c34e:	2204      	movs	r2, #4
 800c350:	701a      	strb	r2, [r3, #0]
 800c352:	e021      	b.n	800c398 <UART_SetConfig+0x178>
 800c354:	231b      	movs	r3, #27
 800c356:	18fb      	adds	r3, r7, r3
 800c358:	2208      	movs	r2, #8
 800c35a:	701a      	strb	r2, [r3, #0]
 800c35c:	e01c      	b.n	800c398 <UART_SetConfig+0x178>
 800c35e:	231b      	movs	r3, #27
 800c360:	18fb      	adds	r3, r7, r3
 800c362:	2210      	movs	r2, #16
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	e017      	b.n	800c398 <UART_SetConfig+0x178>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a7a      	ldr	r2, [pc, #488]	; (800c558 <UART_SetConfig+0x338>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d104      	bne.n	800c37c <UART_SetConfig+0x15c>
 800c372:	231b      	movs	r3, #27
 800c374:	18fb      	adds	r3, r7, r3
 800c376:	2200      	movs	r2, #0
 800c378:	701a      	strb	r2, [r3, #0]
 800c37a:	e00d      	b.n	800c398 <UART_SetConfig+0x178>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a76      	ldr	r2, [pc, #472]	; (800c55c <UART_SetConfig+0x33c>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d104      	bne.n	800c390 <UART_SetConfig+0x170>
 800c386:	231b      	movs	r3, #27
 800c388:	18fb      	adds	r3, r7, r3
 800c38a:	2200      	movs	r2, #0
 800c38c:	701a      	strb	r2, [r3, #0]
 800c38e:	e003      	b.n	800c398 <UART_SetConfig+0x178>
 800c390:	231b      	movs	r3, #27
 800c392:	18fb      	adds	r3, r7, r3
 800c394:	2210      	movs	r2, #16
 800c396:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	69da      	ldr	r2, [r3, #28]
 800c39c:	2380      	movs	r3, #128	; 0x80
 800c39e:	021b      	lsls	r3, r3, #8
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d000      	beq.n	800c3a6 <UART_SetConfig+0x186>
 800c3a4:	e065      	b.n	800c472 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800c3a6:	231b      	movs	r3, #27
 800c3a8:	18fb      	adds	r3, r7, r3
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b08      	cmp	r3, #8
 800c3ae:	d015      	beq.n	800c3dc <UART_SetConfig+0x1bc>
 800c3b0:	dc18      	bgt.n	800c3e4 <UART_SetConfig+0x1c4>
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d00d      	beq.n	800c3d2 <UART_SetConfig+0x1b2>
 800c3b6:	dc15      	bgt.n	800c3e4 <UART_SetConfig+0x1c4>
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d002      	beq.n	800c3c2 <UART_SetConfig+0x1a2>
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d005      	beq.n	800c3cc <UART_SetConfig+0x1ac>
 800c3c0:	e010      	b.n	800c3e4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3c2:	f7fe f999 	bl	800a6f8 <HAL_RCC_GetPCLK1Freq>
 800c3c6:	0003      	movs	r3, r0
 800c3c8:	617b      	str	r3, [r7, #20]
        break;
 800c3ca:	e012      	b.n	800c3f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c3cc:	4b64      	ldr	r3, [pc, #400]	; (800c560 <UART_SetConfig+0x340>)
 800c3ce:	617b      	str	r3, [r7, #20]
        break;
 800c3d0:	e00f      	b.n	800c3f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3d2:	f7fe f905 	bl	800a5e0 <HAL_RCC_GetSysClockFreq>
 800c3d6:	0003      	movs	r3, r0
 800c3d8:	617b      	str	r3, [r7, #20]
        break;
 800c3da:	e00a      	b.n	800c3f2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3dc:	2380      	movs	r3, #128	; 0x80
 800c3de:	021b      	lsls	r3, r3, #8
 800c3e0:	617b      	str	r3, [r7, #20]
        break;
 800c3e2:	e006      	b.n	800c3f2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c3e8:	231a      	movs	r3, #26
 800c3ea:	18fb      	adds	r3, r7, r3
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	701a      	strb	r2, [r3, #0]
        break;
 800c3f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d100      	bne.n	800c3fa <UART_SetConfig+0x1da>
 800c3f8:	e08d      	b.n	800c516 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3fe:	4b59      	ldr	r3, [pc, #356]	; (800c564 <UART_SetConfig+0x344>)
 800c400:	0052      	lsls	r2, r2, #1
 800c402:	5ad3      	ldrh	r3, [r2, r3]
 800c404:	0019      	movs	r1, r3
 800c406:	6978      	ldr	r0, [r7, #20]
 800c408:	f7f3 fe96 	bl	8000138 <__udivsi3>
 800c40c:	0003      	movs	r3, r0
 800c40e:	005a      	lsls	r2, r3, #1
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	085b      	lsrs	r3, r3, #1
 800c416:	18d2      	adds	r2, r2, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	0019      	movs	r1, r3
 800c41e:	0010      	movs	r0, r2
 800c420:	f7f3 fe8a 	bl	8000138 <__udivsi3>
 800c424:	0003      	movs	r3, r0
 800c426:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	2b0f      	cmp	r3, #15
 800c42c:	d91c      	bls.n	800c468 <UART_SetConfig+0x248>
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	2380      	movs	r3, #128	; 0x80
 800c432:	025b      	lsls	r3, r3, #9
 800c434:	429a      	cmp	r2, r3
 800c436:	d217      	bcs.n	800c468 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	b29a      	uxth	r2, r3
 800c43c:	200e      	movs	r0, #14
 800c43e:	183b      	adds	r3, r7, r0
 800c440:	210f      	movs	r1, #15
 800c442:	438a      	bics	r2, r1
 800c444:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	085b      	lsrs	r3, r3, #1
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	2207      	movs	r2, #7
 800c44e:	4013      	ands	r3, r2
 800c450:	b299      	uxth	r1, r3
 800c452:	183b      	adds	r3, r7, r0
 800c454:	183a      	adds	r2, r7, r0
 800c456:	8812      	ldrh	r2, [r2, #0]
 800c458:	430a      	orrs	r2, r1
 800c45a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	183a      	adds	r2, r7, r0
 800c462:	8812      	ldrh	r2, [r2, #0]
 800c464:	60da      	str	r2, [r3, #12]
 800c466:	e056      	b.n	800c516 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800c468:	231a      	movs	r3, #26
 800c46a:	18fb      	adds	r3, r7, r3
 800c46c:	2201      	movs	r2, #1
 800c46e:	701a      	strb	r2, [r3, #0]
 800c470:	e051      	b.n	800c516 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c472:	231b      	movs	r3, #27
 800c474:	18fb      	adds	r3, r7, r3
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	2b08      	cmp	r3, #8
 800c47a:	d015      	beq.n	800c4a8 <UART_SetConfig+0x288>
 800c47c:	dc18      	bgt.n	800c4b0 <UART_SetConfig+0x290>
 800c47e:	2b04      	cmp	r3, #4
 800c480:	d00d      	beq.n	800c49e <UART_SetConfig+0x27e>
 800c482:	dc15      	bgt.n	800c4b0 <UART_SetConfig+0x290>
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <UART_SetConfig+0x26e>
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d005      	beq.n	800c498 <UART_SetConfig+0x278>
 800c48c:	e010      	b.n	800c4b0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c48e:	f7fe f933 	bl	800a6f8 <HAL_RCC_GetPCLK1Freq>
 800c492:	0003      	movs	r3, r0
 800c494:	617b      	str	r3, [r7, #20]
        break;
 800c496:	e012      	b.n	800c4be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c498:	4b31      	ldr	r3, [pc, #196]	; (800c560 <UART_SetConfig+0x340>)
 800c49a:	617b      	str	r3, [r7, #20]
        break;
 800c49c:	e00f      	b.n	800c4be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c49e:	f7fe f89f 	bl	800a5e0 <HAL_RCC_GetSysClockFreq>
 800c4a2:	0003      	movs	r3, r0
 800c4a4:	617b      	str	r3, [r7, #20]
        break;
 800c4a6:	e00a      	b.n	800c4be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4a8:	2380      	movs	r3, #128	; 0x80
 800c4aa:	021b      	lsls	r3, r3, #8
 800c4ac:	617b      	str	r3, [r7, #20]
        break;
 800c4ae:	e006      	b.n	800c4be <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c4b4:	231a      	movs	r3, #26
 800c4b6:	18fb      	adds	r3, r7, r3
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	701a      	strb	r2, [r3, #0]
        break;
 800c4bc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d028      	beq.n	800c516 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4c8:	4b26      	ldr	r3, [pc, #152]	; (800c564 <UART_SetConfig+0x344>)
 800c4ca:	0052      	lsls	r2, r2, #1
 800c4cc:	5ad3      	ldrh	r3, [r2, r3]
 800c4ce:	0019      	movs	r1, r3
 800c4d0:	6978      	ldr	r0, [r7, #20]
 800c4d2:	f7f3 fe31 	bl	8000138 <__udivsi3>
 800c4d6:	0003      	movs	r3, r0
 800c4d8:	001a      	movs	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	085b      	lsrs	r3, r3, #1
 800c4e0:	18d2      	adds	r2, r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	0019      	movs	r1, r3
 800c4e8:	0010      	movs	r0, r2
 800c4ea:	f7f3 fe25 	bl	8000138 <__udivsi3>
 800c4ee:	0003      	movs	r3, r0
 800c4f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	2b0f      	cmp	r3, #15
 800c4f6:	d90a      	bls.n	800c50e <UART_SetConfig+0x2ee>
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	2380      	movs	r3, #128	; 0x80
 800c4fc:	025b      	lsls	r3, r3, #9
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d205      	bcs.n	800c50e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	b29a      	uxth	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	60da      	str	r2, [r3, #12]
 800c50c:	e003      	b.n	800c516 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800c50e:	231a      	movs	r3, #26
 800c510:	18fb      	adds	r3, r7, r3
 800c512:	2201      	movs	r2, #1
 800c514:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	226a      	movs	r2, #106	; 0x6a
 800c51a:	2101      	movs	r1, #1
 800c51c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2268      	movs	r2, #104	; 0x68
 800c522:	2101      	movs	r1, #1
 800c524:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c532:	231a      	movs	r3, #26
 800c534:	18fb      	adds	r3, r7, r3
 800c536:	781b      	ldrb	r3, [r3, #0]
}
 800c538:	0018      	movs	r0, r3
 800c53a:	46bd      	mov	sp, r7
 800c53c:	b008      	add	sp, #32
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	cfff69f3 	.word	0xcfff69f3
 800c544:	ffffcfff 	.word	0xffffcfff
 800c548:	11fff4ff 	.word	0x11fff4ff
 800c54c:	40013800 	.word	0x40013800
 800c550:	40021000 	.word	0x40021000
 800c554:	40004400 	.word	0x40004400
 800c558:	40004800 	.word	0x40004800
 800c55c:	40004c00 	.word	0x40004c00
 800c560:	00f42400 	.word	0x00f42400
 800c564:	08010140 	.word	0x08010140

0800c568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c574:	2201      	movs	r2, #1
 800c576:	4013      	ands	r3, r2
 800c578:	d00b      	beq.n	800c592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	4a4a      	ldr	r2, [pc, #296]	; (800c6ac <UART_AdvFeatureConfig+0x144>)
 800c582:	4013      	ands	r3, r2
 800c584:	0019      	movs	r1, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	430a      	orrs	r2, r1
 800c590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c596:	2202      	movs	r2, #2
 800c598:	4013      	ands	r3, r2
 800c59a:	d00b      	beq.n	800c5b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	4a43      	ldr	r2, [pc, #268]	; (800c6b0 <UART_AdvFeatureConfig+0x148>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	0019      	movs	r1, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	430a      	orrs	r2, r1
 800c5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b8:	2204      	movs	r2, #4
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	d00b      	beq.n	800c5d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4a3b      	ldr	r2, [pc, #236]	; (800c6b4 <UART_AdvFeatureConfig+0x14c>)
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	0019      	movs	r1, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5da:	2208      	movs	r2, #8
 800c5dc:	4013      	ands	r3, r2
 800c5de:	d00b      	beq.n	800c5f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	4a34      	ldr	r2, [pc, #208]	; (800c6b8 <UART_AdvFeatureConfig+0x150>)
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	0019      	movs	r1, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	430a      	orrs	r2, r1
 800c5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fc:	2210      	movs	r2, #16
 800c5fe:	4013      	ands	r3, r2
 800c600:	d00b      	beq.n	800c61a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	4a2c      	ldr	r2, [pc, #176]	; (800c6bc <UART_AdvFeatureConfig+0x154>)
 800c60a:	4013      	ands	r3, r2
 800c60c:	0019      	movs	r1, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	430a      	orrs	r2, r1
 800c618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61e:	2220      	movs	r2, #32
 800c620:	4013      	ands	r3, r2
 800c622:	d00b      	beq.n	800c63c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	4a25      	ldr	r2, [pc, #148]	; (800c6c0 <UART_AdvFeatureConfig+0x158>)
 800c62c:	4013      	ands	r3, r2
 800c62e:	0019      	movs	r1, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	430a      	orrs	r2, r1
 800c63a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c640:	2240      	movs	r2, #64	; 0x40
 800c642:	4013      	ands	r3, r2
 800c644:	d01d      	beq.n	800c682 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	4a1d      	ldr	r2, [pc, #116]	; (800c6c4 <UART_AdvFeatureConfig+0x15c>)
 800c64e:	4013      	ands	r3, r2
 800c650:	0019      	movs	r1, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c662:	2380      	movs	r3, #128	; 0x80
 800c664:	035b      	lsls	r3, r3, #13
 800c666:	429a      	cmp	r2, r3
 800c668:	d10b      	bne.n	800c682 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	4a15      	ldr	r2, [pc, #84]	; (800c6c8 <UART_AdvFeatureConfig+0x160>)
 800c672:	4013      	ands	r3, r2
 800c674:	0019      	movs	r1, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c686:	2280      	movs	r2, #128	; 0x80
 800c688:	4013      	ands	r3, r2
 800c68a:	d00b      	beq.n	800c6a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	4a0e      	ldr	r2, [pc, #56]	; (800c6cc <UART_AdvFeatureConfig+0x164>)
 800c694:	4013      	ands	r3, r2
 800c696:	0019      	movs	r1, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	605a      	str	r2, [r3, #4]
  }
}
 800c6a4:	46c0      	nop			; (mov r8, r8)
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	b002      	add	sp, #8
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	fffdffff 	.word	0xfffdffff
 800c6b0:	fffeffff 	.word	0xfffeffff
 800c6b4:	fffbffff 	.word	0xfffbffff
 800c6b8:	ffff7fff 	.word	0xffff7fff
 800c6bc:	ffffefff 	.word	0xffffefff
 800c6c0:	ffffdfff 	.word	0xffffdfff
 800c6c4:	ffefffff 	.word	0xffefffff
 800c6c8:	ff9fffff 	.word	0xff9fffff
 800c6cc:	fff7ffff 	.word	0xfff7ffff

0800c6d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af02      	add	r7, sp, #8
 800c6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2290      	movs	r2, #144	; 0x90
 800c6dc:	2100      	movs	r1, #0
 800c6de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c6e0:	f7fa fa34 	bl	8006b4c <HAL_GetTick>
 800c6e4:	0003      	movs	r3, r0
 800c6e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2208      	movs	r2, #8
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	2b08      	cmp	r3, #8
 800c6f4:	d10c      	bne.n	800c710 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2280      	movs	r2, #128	; 0x80
 800c6fa:	0391      	lsls	r1, r2, #14
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	4a1a      	ldr	r2, [pc, #104]	; (800c768 <UART_CheckIdleState+0x98>)
 800c700:	9200      	str	r2, [sp, #0]
 800c702:	2200      	movs	r2, #0
 800c704:	f000 f832 	bl	800c76c <UART_WaitOnFlagUntilTimeout>
 800c708:	1e03      	subs	r3, r0, #0
 800c70a:	d001      	beq.n	800c710 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e026      	b.n	800c75e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2204      	movs	r2, #4
 800c718:	4013      	ands	r3, r2
 800c71a:	2b04      	cmp	r3, #4
 800c71c:	d10c      	bne.n	800c738 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2280      	movs	r2, #128	; 0x80
 800c722:	03d1      	lsls	r1, r2, #15
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	4a10      	ldr	r2, [pc, #64]	; (800c768 <UART_CheckIdleState+0x98>)
 800c728:	9200      	str	r2, [sp, #0]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f000 f81e 	bl	800c76c <UART_WaitOnFlagUntilTimeout>
 800c730:	1e03      	subs	r3, r0, #0
 800c732:	d001      	beq.n	800c738 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c734:	2303      	movs	r3, #3
 800c736:	e012      	b.n	800c75e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2288      	movs	r2, #136	; 0x88
 800c73c:	2120      	movs	r1, #32
 800c73e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	228c      	movs	r2, #140	; 0x8c
 800c744:	2120      	movs	r1, #32
 800c746:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2284      	movs	r2, #132	; 0x84
 800c758:	2100      	movs	r1, #0
 800c75a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	0018      	movs	r0, r3
 800c760:	46bd      	mov	sp, r7
 800c762:	b004      	add	sp, #16
 800c764:	bd80      	pop	{r7, pc}
 800c766:	46c0      	nop			; (mov r8, r8)
 800c768:	01ffffff 	.word	0x01ffffff

0800c76c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b094      	sub	sp, #80	; 0x50
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	603b      	str	r3, [r7, #0]
 800c778:	1dfb      	adds	r3, r7, #7
 800c77a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c77c:	e0a7      	b.n	800c8ce <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c77e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c780:	3301      	adds	r3, #1
 800c782:	d100      	bne.n	800c786 <UART_WaitOnFlagUntilTimeout+0x1a>
 800c784:	e0a3      	b.n	800c8ce <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c786:	f7fa f9e1 	bl	8006b4c <HAL_GetTick>
 800c78a:	0002      	movs	r2, r0
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c792:	429a      	cmp	r2, r3
 800c794:	d302      	bcc.n	800c79c <UART_WaitOnFlagUntilTimeout+0x30>
 800c796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d13f      	bne.n	800c81c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c79c:	f3ef 8310 	mrs	r3, PRIMASK
 800c7a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800c7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c7a4:	647b      	str	r3, [r7, #68]	; 0x44
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ac:	f383 8810 	msr	PRIMASK, r3
}
 800c7b0:	46c0      	nop			; (mov r8, r8)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	494e      	ldr	r1, [pc, #312]	; (800c8f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c7be:	400a      	ands	r2, r1
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	f383 8810 	msr	PRIMASK, r3
}
 800c7cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7ce:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800c7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d6:	643b      	str	r3, [r7, #64]	; 0x40
 800c7d8:	2301      	movs	r3, #1
 800c7da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	f383 8810 	msr	PRIMASK, r3
}
 800c7e2:	46c0      	nop			; (mov r8, r8)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	689a      	ldr	r2, [r3, #8]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2101      	movs	r1, #1
 800c7f0:	438a      	bics	r2, r1
 800c7f2:	609a      	str	r2, [r3, #8]
 800c7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fa:	f383 8810 	msr	PRIMASK, r3
}
 800c7fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2288      	movs	r2, #136	; 0x88
 800c804:	2120      	movs	r1, #32
 800c806:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	228c      	movs	r2, #140	; 0x8c
 800c80c:	2120      	movs	r1, #32
 800c80e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2284      	movs	r2, #132	; 0x84
 800c814:	2100      	movs	r1, #0
 800c816:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e069      	b.n	800c8f0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2204      	movs	r2, #4
 800c824:	4013      	ands	r3, r2
 800c826:	d052      	beq.n	800c8ce <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	69da      	ldr	r2, [r3, #28]
 800c82e:	2380      	movs	r3, #128	; 0x80
 800c830:	011b      	lsls	r3, r3, #4
 800c832:	401a      	ands	r2, r3
 800c834:	2380      	movs	r3, #128	; 0x80
 800c836:	011b      	lsls	r3, r3, #4
 800c838:	429a      	cmp	r2, r3
 800c83a:	d148      	bne.n	800c8ce <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2280      	movs	r2, #128	; 0x80
 800c842:	0112      	lsls	r2, r2, #4
 800c844:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c846:	f3ef 8310 	mrs	r3, PRIMASK
 800c84a:	613b      	str	r3, [r7, #16]
  return(result);
 800c84c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c84e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c850:	2301      	movs	r3, #1
 800c852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f383 8810 	msr	PRIMASK, r3
}
 800c85a:	46c0      	nop			; (mov r8, r8)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4924      	ldr	r1, [pc, #144]	; (800c8f8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c868:	400a      	ands	r2, r1
 800c86a:	601a      	str	r2, [r3, #0]
 800c86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c86e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	f383 8810 	msr	PRIMASK, r3
}
 800c876:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c878:	f3ef 8310 	mrs	r3, PRIMASK
 800c87c:	61fb      	str	r3, [r7, #28]
  return(result);
 800c87e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c880:	64bb      	str	r3, [r7, #72]	; 0x48
 800c882:	2301      	movs	r3, #1
 800c884:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c886:	6a3b      	ldr	r3, [r7, #32]
 800c888:	f383 8810 	msr	PRIMASK, r3
}
 800c88c:	46c0      	nop			; (mov r8, r8)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	689a      	ldr	r2, [r3, #8]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2101      	movs	r1, #1
 800c89a:	438a      	bics	r2, r1
 800c89c:	609a      	str	r2, [r3, #8]
 800c89e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	f383 8810 	msr	PRIMASK, r3
}
 800c8a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2288      	movs	r2, #136	; 0x88
 800c8ae:	2120      	movs	r1, #32
 800c8b0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	228c      	movs	r2, #140	; 0x8c
 800c8b6:	2120      	movs	r1, #32
 800c8b8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2290      	movs	r2, #144	; 0x90
 800c8be:	2120      	movs	r1, #32
 800c8c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2284      	movs	r2, #132	; 0x84
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e010      	b.n	800c8f0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	69db      	ldr	r3, [r3, #28]
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	425a      	negs	r2, r3
 800c8de:	4153      	adcs	r3, r2
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	001a      	movs	r2, r3
 800c8e4:	1dfb      	adds	r3, r7, #7
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d100      	bne.n	800c8ee <UART_WaitOnFlagUntilTimeout+0x182>
 800c8ec:	e747      	b.n	800c77e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	b014      	add	sp, #80	; 0x50
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	fffffe5f 	.word	0xfffffe5f

0800c8fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b08e      	sub	sp, #56	; 0x38
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c904:	f3ef 8310 	mrs	r3, PRIMASK
 800c908:	617b      	str	r3, [r7, #20]
  return(result);
 800c90a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c90c:	637b      	str	r3, [r7, #52]	; 0x34
 800c90e:	2301      	movs	r3, #1
 800c910:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	f383 8810 	msr	PRIMASK, r3
}
 800c918:	46c0      	nop			; (mov r8, r8)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4926      	ldr	r1, [pc, #152]	; (800c9c0 <UART_EndRxTransfer+0xc4>)
 800c926:	400a      	ands	r2, r1
 800c928:	601a      	str	r2, [r3, #0]
 800c92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	f383 8810 	msr	PRIMASK, r3
}
 800c934:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c936:	f3ef 8310 	mrs	r3, PRIMASK
 800c93a:	623b      	str	r3, [r7, #32]
  return(result);
 800c93c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c93e:	633b      	str	r3, [r7, #48]	; 0x30
 800c940:	2301      	movs	r3, #1
 800c942:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	f383 8810 	msr	PRIMASK, r3
}
 800c94a:	46c0      	nop			; (mov r8, r8)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	689a      	ldr	r2, [r3, #8]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	491b      	ldr	r1, [pc, #108]	; (800c9c4 <UART_EndRxTransfer+0xc8>)
 800c958:	400a      	ands	r2, r1
 800c95a:	609a      	str	r2, [r3, #8]
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c962:	f383 8810 	msr	PRIMASK, r3
}
 800c966:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d118      	bne.n	800c9a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c970:	f3ef 8310 	mrs	r3, PRIMASK
 800c974:	60bb      	str	r3, [r7, #8]
  return(result);
 800c976:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c97a:	2301      	movs	r3, #1
 800c97c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f383 8810 	msr	PRIMASK, r3
}
 800c984:	46c0      	nop			; (mov r8, r8)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2110      	movs	r1, #16
 800c992:	438a      	bics	r2, r1
 800c994:	601a      	str	r2, [r3, #0]
 800c996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	f383 8810 	msr	PRIMASK, r3
}
 800c9a0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	228c      	movs	r2, #140	; 0x8c
 800c9a6:	2120      	movs	r1, #32
 800c9a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c9b6:	46c0      	nop			; (mov r8, r8)
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	b00e      	add	sp, #56	; 0x38
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	46c0      	nop			; (mov r8, r8)
 800c9c0:	fffffedf 	.word	0xfffffedf
 800c9c4:	effffffe 	.word	0xeffffffe

0800c9c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	225e      	movs	r2, #94	; 0x5e
 800c9da:	2100      	movs	r1, #0
 800c9dc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2256      	movs	r2, #86	; 0x56
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	0018      	movs	r0, r3
 800c9ea:	f7ff fc05 	bl	800c1f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9ee:	46c0      	nop			; (mov r8, r8)
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	b004      	add	sp, #16
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b086      	sub	sp, #24
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9fe:	f3ef 8310 	mrs	r3, PRIMASK
 800ca02:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca04:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca06:	617b      	str	r3, [r7, #20]
 800ca08:	2301      	movs	r3, #1
 800ca0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f383 8810 	msr	PRIMASK, r3
}
 800ca12:	46c0      	nop			; (mov r8, r8)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2140      	movs	r1, #64	; 0x40
 800ca20:	438a      	bics	r2, r1
 800ca22:	601a      	str	r2, [r3, #0]
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	f383 8810 	msr	PRIMASK, r3
}
 800ca2e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2288      	movs	r2, #136	; 0x88
 800ca34:	2120      	movs	r1, #32
 800ca36:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	0018      	movs	r0, r3
 800ca42:	f7f7 f93d 	bl	8003cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca46:	46c0      	nop			; (mov r8, r8)
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	b006      	add	sp, #24
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b082      	sub	sp, #8
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca56:	46c0      	nop			; (mov r8, r8)
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	b002      	add	sp, #8
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b082      	sub	sp, #8
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca66:	46c0      	nop			; (mov r8, r8)
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	b002      	add	sp, #8
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca76:	46c0      	nop			; (mov r8, r8)
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	b002      	add	sp, #8
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2284      	movs	r2, #132	; 0x84
 800ca8c:	5c9b      	ldrb	r3, [r3, r2]
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d101      	bne.n	800ca96 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca92:	2302      	movs	r3, #2
 800ca94:	e027      	b.n	800cae6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2284      	movs	r2, #132	; 0x84
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2288      	movs	r2, #136	; 0x88
 800caa2:	2124      	movs	r1, #36	; 0x24
 800caa4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2101      	movs	r1, #1
 800caba:	438a      	bics	r2, r1
 800cabc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	4a0b      	ldr	r2, [pc, #44]	; (800caf0 <HAL_UARTEx_DisableFifoMode+0x70>)
 800cac2:	4013      	ands	r3, r2
 800cac4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2288      	movs	r2, #136	; 0x88
 800cad8:	2120      	movs	r1, #32
 800cada:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2284      	movs	r2, #132	; 0x84
 800cae0:	2100      	movs	r1, #0
 800cae2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	0018      	movs	r0, r3
 800cae8:	46bd      	mov	sp, r7
 800caea:	b004      	add	sp, #16
 800caec:	bd80      	pop	{r7, pc}
 800caee:	46c0      	nop			; (mov r8, r8)
 800caf0:	dfffffff 	.word	0xdfffffff

0800caf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2284      	movs	r2, #132	; 0x84
 800cb02:	5c9b      	ldrb	r3, [r3, r2]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d101      	bne.n	800cb0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb08:	2302      	movs	r3, #2
 800cb0a:	e02e      	b.n	800cb6a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2284      	movs	r2, #132	; 0x84
 800cb10:	2101      	movs	r1, #1
 800cb12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2288      	movs	r2, #136	; 0x88
 800cb18:	2124      	movs	r1, #36	; 0x24
 800cb1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2101      	movs	r1, #1
 800cb30:	438a      	bics	r2, r1
 800cb32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	08d9      	lsrs	r1, r3, #3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	430a      	orrs	r2, r1
 800cb46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	0018      	movs	r0, r3
 800cb4c:	f000 f854 	bl	800cbf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2288      	movs	r2, #136	; 0x88
 800cb5c:	2120      	movs	r1, #32
 800cb5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2284      	movs	r2, #132	; 0x84
 800cb64:	2100      	movs	r1, #0
 800cb66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	b004      	add	sp, #16
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2284      	movs	r2, #132	; 0x84
 800cb82:	5c9b      	ldrb	r3, [r3, r2]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d101      	bne.n	800cb8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb88:	2302      	movs	r3, #2
 800cb8a:	e02f      	b.n	800cbec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2284      	movs	r2, #132	; 0x84
 800cb90:	2101      	movs	r1, #1
 800cb92:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2288      	movs	r2, #136	; 0x88
 800cb98:	2124      	movs	r1, #36	; 0x24
 800cb9a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2101      	movs	r1, #1
 800cbb0:	438a      	bics	r2, r1
 800cbb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	4a0e      	ldr	r2, [pc, #56]	; (800cbf4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800cbbc:	4013      	ands	r3, r2
 800cbbe:	0019      	movs	r1, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	683a      	ldr	r2, [r7, #0]
 800cbc6:	430a      	orrs	r2, r1
 800cbc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	0018      	movs	r0, r3
 800cbce:	f000 f813 	bl	800cbf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2288      	movs	r2, #136	; 0x88
 800cbde:	2120      	movs	r1, #32
 800cbe0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2284      	movs	r2, #132	; 0x84
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	0018      	movs	r0, r3
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	b004      	add	sp, #16
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	f1ffffff 	.word	0xf1ffffff

0800cbf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d108      	bne.n	800cc1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	226a      	movs	r2, #106	; 0x6a
 800cc0c:	2101      	movs	r1, #1
 800cc0e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2268      	movs	r2, #104	; 0x68
 800cc14:	2101      	movs	r1, #1
 800cc16:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc18:	e043      	b.n	800cca2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc1a:	260f      	movs	r6, #15
 800cc1c:	19bb      	adds	r3, r7, r6
 800cc1e:	2208      	movs	r2, #8
 800cc20:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc22:	200e      	movs	r0, #14
 800cc24:	183b      	adds	r3, r7, r0
 800cc26:	2208      	movs	r2, #8
 800cc28:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	0e5b      	lsrs	r3, r3, #25
 800cc32:	b2da      	uxtb	r2, r3
 800cc34:	240d      	movs	r4, #13
 800cc36:	193b      	adds	r3, r7, r4
 800cc38:	2107      	movs	r1, #7
 800cc3a:	400a      	ands	r2, r1
 800cc3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	0f5b      	lsrs	r3, r3, #29
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	250c      	movs	r5, #12
 800cc4a:	197b      	adds	r3, r7, r5
 800cc4c:	2107      	movs	r1, #7
 800cc4e:	400a      	ands	r2, r1
 800cc50:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc52:	183b      	adds	r3, r7, r0
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	197a      	adds	r2, r7, r5
 800cc58:	7812      	ldrb	r2, [r2, #0]
 800cc5a:	4914      	ldr	r1, [pc, #80]	; (800ccac <UARTEx_SetNbDataToProcess+0xb4>)
 800cc5c:	5c8a      	ldrb	r2, [r1, r2]
 800cc5e:	435a      	muls	r2, r3
 800cc60:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc62:	197b      	adds	r3, r7, r5
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	4a12      	ldr	r2, [pc, #72]	; (800ccb0 <UARTEx_SetNbDataToProcess+0xb8>)
 800cc68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc6a:	0019      	movs	r1, r3
 800cc6c:	f7f3 faee 	bl	800024c <__divsi3>
 800cc70:	0003      	movs	r3, r0
 800cc72:	b299      	uxth	r1, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	226a      	movs	r2, #106	; 0x6a
 800cc78:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc7a:	19bb      	adds	r3, r7, r6
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	193a      	adds	r2, r7, r4
 800cc80:	7812      	ldrb	r2, [r2, #0]
 800cc82:	490a      	ldr	r1, [pc, #40]	; (800ccac <UARTEx_SetNbDataToProcess+0xb4>)
 800cc84:	5c8a      	ldrb	r2, [r1, r2]
 800cc86:	435a      	muls	r2, r3
 800cc88:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc8a:	193b      	adds	r3, r7, r4
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	4a08      	ldr	r2, [pc, #32]	; (800ccb0 <UARTEx_SetNbDataToProcess+0xb8>)
 800cc90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc92:	0019      	movs	r1, r3
 800cc94:	f7f3 fada 	bl	800024c <__divsi3>
 800cc98:	0003      	movs	r3, r0
 800cc9a:	b299      	uxth	r1, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2268      	movs	r2, #104	; 0x68
 800cca0:	5299      	strh	r1, [r3, r2]
}
 800cca2:	46c0      	nop			; (mov r8, r8)
 800cca4:	46bd      	mov	sp, r7
 800cca6:	b005      	add	sp, #20
 800cca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccaa:	46c0      	nop			; (mov r8, r8)
 800ccac:	08010158 	.word	0x08010158
 800ccb0:	08010160 	.word	0x08010160

0800ccb4 <__errno>:
 800ccb4:	4b01      	ldr	r3, [pc, #4]	; (800ccbc <__errno+0x8>)
 800ccb6:	6818      	ldr	r0, [r3, #0]
 800ccb8:	4770      	bx	lr
 800ccba:	46c0      	nop			; (mov r8, r8)
 800ccbc:	20000018 	.word	0x20000018

0800ccc0 <__libc_init_array>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	2600      	movs	r6, #0
 800ccc4:	4d0c      	ldr	r5, [pc, #48]	; (800ccf8 <__libc_init_array+0x38>)
 800ccc6:	4c0d      	ldr	r4, [pc, #52]	; (800ccfc <__libc_init_array+0x3c>)
 800ccc8:	1b64      	subs	r4, r4, r5
 800ccca:	10a4      	asrs	r4, r4, #2
 800cccc:	42a6      	cmp	r6, r4
 800ccce:	d109      	bne.n	800cce4 <__libc_init_array+0x24>
 800ccd0:	2600      	movs	r6, #0
 800ccd2:	f002 ffc9 	bl	800fc68 <_init>
 800ccd6:	4d0a      	ldr	r5, [pc, #40]	; (800cd00 <__libc_init_array+0x40>)
 800ccd8:	4c0a      	ldr	r4, [pc, #40]	; (800cd04 <__libc_init_array+0x44>)
 800ccda:	1b64      	subs	r4, r4, r5
 800ccdc:	10a4      	asrs	r4, r4, #2
 800ccde:	42a6      	cmp	r6, r4
 800cce0:	d105      	bne.n	800ccee <__libc_init_array+0x2e>
 800cce2:	bd70      	pop	{r4, r5, r6, pc}
 800cce4:	00b3      	lsls	r3, r6, #2
 800cce6:	58eb      	ldr	r3, [r5, r3]
 800cce8:	4798      	blx	r3
 800ccea:	3601      	adds	r6, #1
 800ccec:	e7ee      	b.n	800cccc <__libc_init_array+0xc>
 800ccee:	00b3      	lsls	r3, r6, #2
 800ccf0:	58eb      	ldr	r3, [r5, r3]
 800ccf2:	4798      	blx	r3
 800ccf4:	3601      	adds	r6, #1
 800ccf6:	e7f2      	b.n	800ccde <__libc_init_array+0x1e>
 800ccf8:	08010544 	.word	0x08010544
 800ccfc:	08010544 	.word	0x08010544
 800cd00:	08010544 	.word	0x08010544
 800cd04:	08010548 	.word	0x08010548

0800cd08 <malloc>:
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	4b03      	ldr	r3, [pc, #12]	; (800cd18 <malloc+0x10>)
 800cd0c:	0001      	movs	r1, r0
 800cd0e:	6818      	ldr	r0, [r3, #0]
 800cd10:	f000 f890 	bl	800ce34 <_malloc_r>
 800cd14:	bd10      	pop	{r4, pc}
 800cd16:	46c0      	nop			; (mov r8, r8)
 800cd18:	20000018 	.word	0x20000018

0800cd1c <memcmp>:
 800cd1c:	b530      	push	{r4, r5, lr}
 800cd1e:	2400      	movs	r4, #0
 800cd20:	3901      	subs	r1, #1
 800cd22:	42a2      	cmp	r2, r4
 800cd24:	d101      	bne.n	800cd2a <memcmp+0xe>
 800cd26:	2000      	movs	r0, #0
 800cd28:	e005      	b.n	800cd36 <memcmp+0x1a>
 800cd2a:	5d03      	ldrb	r3, [r0, r4]
 800cd2c:	3401      	adds	r4, #1
 800cd2e:	5d0d      	ldrb	r5, [r1, r4]
 800cd30:	42ab      	cmp	r3, r5
 800cd32:	d0f6      	beq.n	800cd22 <memcmp+0x6>
 800cd34:	1b58      	subs	r0, r3, r5
 800cd36:	bd30      	pop	{r4, r5, pc}

0800cd38 <memcpy>:
 800cd38:	2300      	movs	r3, #0
 800cd3a:	b510      	push	{r4, lr}
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d100      	bne.n	800cd42 <memcpy+0xa>
 800cd40:	bd10      	pop	{r4, pc}
 800cd42:	5ccc      	ldrb	r4, [r1, r3]
 800cd44:	54c4      	strb	r4, [r0, r3]
 800cd46:	3301      	adds	r3, #1
 800cd48:	e7f8      	b.n	800cd3c <memcpy+0x4>

0800cd4a <memset>:
 800cd4a:	0003      	movs	r3, r0
 800cd4c:	1882      	adds	r2, r0, r2
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d100      	bne.n	800cd54 <memset+0xa>
 800cd52:	4770      	bx	lr
 800cd54:	7019      	strb	r1, [r3, #0]
 800cd56:	3301      	adds	r3, #1
 800cd58:	e7f9      	b.n	800cd4e <memset+0x4>
	...

0800cd5c <_free_r>:
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	0005      	movs	r5, r0
 800cd60:	2900      	cmp	r1, #0
 800cd62:	d010      	beq.n	800cd86 <_free_r+0x2a>
 800cd64:	1f0c      	subs	r4, r1, #4
 800cd66:	6823      	ldr	r3, [r4, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	da00      	bge.n	800cd6e <_free_r+0x12>
 800cd6c:	18e4      	adds	r4, r4, r3
 800cd6e:	0028      	movs	r0, r5
 800cd70:	f001 fc2c 	bl	800e5cc <__malloc_lock>
 800cd74:	4a1d      	ldr	r2, [pc, #116]	; (800cdec <_free_r+0x90>)
 800cd76:	6813      	ldr	r3, [r2, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d105      	bne.n	800cd88 <_free_r+0x2c>
 800cd7c:	6063      	str	r3, [r4, #4]
 800cd7e:	6014      	str	r4, [r2, #0]
 800cd80:	0028      	movs	r0, r5
 800cd82:	f001 fc2b 	bl	800e5dc <__malloc_unlock>
 800cd86:	bd70      	pop	{r4, r5, r6, pc}
 800cd88:	42a3      	cmp	r3, r4
 800cd8a:	d908      	bls.n	800cd9e <_free_r+0x42>
 800cd8c:	6821      	ldr	r1, [r4, #0]
 800cd8e:	1860      	adds	r0, r4, r1
 800cd90:	4283      	cmp	r3, r0
 800cd92:	d1f3      	bne.n	800cd7c <_free_r+0x20>
 800cd94:	6818      	ldr	r0, [r3, #0]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	1841      	adds	r1, r0, r1
 800cd9a:	6021      	str	r1, [r4, #0]
 800cd9c:	e7ee      	b.n	800cd7c <_free_r+0x20>
 800cd9e:	001a      	movs	r2, r3
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d001      	beq.n	800cdaa <_free_r+0x4e>
 800cda6:	42a3      	cmp	r3, r4
 800cda8:	d9f9      	bls.n	800cd9e <_free_r+0x42>
 800cdaa:	6811      	ldr	r1, [r2, #0]
 800cdac:	1850      	adds	r0, r2, r1
 800cdae:	42a0      	cmp	r0, r4
 800cdb0:	d10b      	bne.n	800cdca <_free_r+0x6e>
 800cdb2:	6820      	ldr	r0, [r4, #0]
 800cdb4:	1809      	adds	r1, r1, r0
 800cdb6:	1850      	adds	r0, r2, r1
 800cdb8:	6011      	str	r1, [r2, #0]
 800cdba:	4283      	cmp	r3, r0
 800cdbc:	d1e0      	bne.n	800cd80 <_free_r+0x24>
 800cdbe:	6818      	ldr	r0, [r3, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	1841      	adds	r1, r0, r1
 800cdc4:	6011      	str	r1, [r2, #0]
 800cdc6:	6053      	str	r3, [r2, #4]
 800cdc8:	e7da      	b.n	800cd80 <_free_r+0x24>
 800cdca:	42a0      	cmp	r0, r4
 800cdcc:	d902      	bls.n	800cdd4 <_free_r+0x78>
 800cdce:	230c      	movs	r3, #12
 800cdd0:	602b      	str	r3, [r5, #0]
 800cdd2:	e7d5      	b.n	800cd80 <_free_r+0x24>
 800cdd4:	6821      	ldr	r1, [r4, #0]
 800cdd6:	1860      	adds	r0, r4, r1
 800cdd8:	4283      	cmp	r3, r0
 800cdda:	d103      	bne.n	800cde4 <_free_r+0x88>
 800cddc:	6818      	ldr	r0, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	1841      	adds	r1, r0, r1
 800cde2:	6021      	str	r1, [r4, #0]
 800cde4:	6063      	str	r3, [r4, #4]
 800cde6:	6054      	str	r4, [r2, #4]
 800cde8:	e7ca      	b.n	800cd80 <_free_r+0x24>
 800cdea:	46c0      	nop			; (mov r8, r8)
 800cdec:	200009c8 	.word	0x200009c8

0800cdf0 <sbrk_aligned>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	4e0f      	ldr	r6, [pc, #60]	; (800ce30 <sbrk_aligned+0x40>)
 800cdf4:	000d      	movs	r5, r1
 800cdf6:	6831      	ldr	r1, [r6, #0]
 800cdf8:	0004      	movs	r4, r0
 800cdfa:	2900      	cmp	r1, #0
 800cdfc:	d102      	bne.n	800ce04 <sbrk_aligned+0x14>
 800cdfe:	f000 fcfd 	bl	800d7fc <_sbrk_r>
 800ce02:	6030      	str	r0, [r6, #0]
 800ce04:	0029      	movs	r1, r5
 800ce06:	0020      	movs	r0, r4
 800ce08:	f000 fcf8 	bl	800d7fc <_sbrk_r>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d00a      	beq.n	800ce26 <sbrk_aligned+0x36>
 800ce10:	2303      	movs	r3, #3
 800ce12:	1cc5      	adds	r5, r0, #3
 800ce14:	439d      	bics	r5, r3
 800ce16:	42a8      	cmp	r0, r5
 800ce18:	d007      	beq.n	800ce2a <sbrk_aligned+0x3a>
 800ce1a:	1a29      	subs	r1, r5, r0
 800ce1c:	0020      	movs	r0, r4
 800ce1e:	f000 fced 	bl	800d7fc <_sbrk_r>
 800ce22:	1c43      	adds	r3, r0, #1
 800ce24:	d101      	bne.n	800ce2a <sbrk_aligned+0x3a>
 800ce26:	2501      	movs	r5, #1
 800ce28:	426d      	negs	r5, r5
 800ce2a:	0028      	movs	r0, r5
 800ce2c:	bd70      	pop	{r4, r5, r6, pc}
 800ce2e:	46c0      	nop			; (mov r8, r8)
 800ce30:	200009cc 	.word	0x200009cc

0800ce34 <_malloc_r>:
 800ce34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce36:	2203      	movs	r2, #3
 800ce38:	1ccb      	adds	r3, r1, #3
 800ce3a:	4393      	bics	r3, r2
 800ce3c:	3308      	adds	r3, #8
 800ce3e:	0006      	movs	r6, r0
 800ce40:	001f      	movs	r7, r3
 800ce42:	2b0c      	cmp	r3, #12
 800ce44:	d232      	bcs.n	800ceac <_malloc_r+0x78>
 800ce46:	270c      	movs	r7, #12
 800ce48:	42b9      	cmp	r1, r7
 800ce4a:	d831      	bhi.n	800ceb0 <_malloc_r+0x7c>
 800ce4c:	0030      	movs	r0, r6
 800ce4e:	f001 fbbd 	bl	800e5cc <__malloc_lock>
 800ce52:	4d32      	ldr	r5, [pc, #200]	; (800cf1c <_malloc_r+0xe8>)
 800ce54:	682b      	ldr	r3, [r5, #0]
 800ce56:	001c      	movs	r4, r3
 800ce58:	2c00      	cmp	r4, #0
 800ce5a:	d12e      	bne.n	800ceba <_malloc_r+0x86>
 800ce5c:	0039      	movs	r1, r7
 800ce5e:	0030      	movs	r0, r6
 800ce60:	f7ff ffc6 	bl	800cdf0 <sbrk_aligned>
 800ce64:	0004      	movs	r4, r0
 800ce66:	1c43      	adds	r3, r0, #1
 800ce68:	d11e      	bne.n	800cea8 <_malloc_r+0x74>
 800ce6a:	682c      	ldr	r4, [r5, #0]
 800ce6c:	0025      	movs	r5, r4
 800ce6e:	2d00      	cmp	r5, #0
 800ce70:	d14a      	bne.n	800cf08 <_malloc_r+0xd4>
 800ce72:	6823      	ldr	r3, [r4, #0]
 800ce74:	0029      	movs	r1, r5
 800ce76:	18e3      	adds	r3, r4, r3
 800ce78:	0030      	movs	r0, r6
 800ce7a:	9301      	str	r3, [sp, #4]
 800ce7c:	f000 fcbe 	bl	800d7fc <_sbrk_r>
 800ce80:	9b01      	ldr	r3, [sp, #4]
 800ce82:	4283      	cmp	r3, r0
 800ce84:	d143      	bne.n	800cf0e <_malloc_r+0xda>
 800ce86:	6823      	ldr	r3, [r4, #0]
 800ce88:	3703      	adds	r7, #3
 800ce8a:	1aff      	subs	r7, r7, r3
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	439f      	bics	r7, r3
 800ce90:	3708      	adds	r7, #8
 800ce92:	2f0c      	cmp	r7, #12
 800ce94:	d200      	bcs.n	800ce98 <_malloc_r+0x64>
 800ce96:	270c      	movs	r7, #12
 800ce98:	0039      	movs	r1, r7
 800ce9a:	0030      	movs	r0, r6
 800ce9c:	f7ff ffa8 	bl	800cdf0 <sbrk_aligned>
 800cea0:	1c43      	adds	r3, r0, #1
 800cea2:	d034      	beq.n	800cf0e <_malloc_r+0xda>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	19df      	adds	r7, r3, r7
 800cea8:	6027      	str	r7, [r4, #0]
 800ceaa:	e013      	b.n	800ced4 <_malloc_r+0xa0>
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	dacb      	bge.n	800ce48 <_malloc_r+0x14>
 800ceb0:	230c      	movs	r3, #12
 800ceb2:	2500      	movs	r5, #0
 800ceb4:	6033      	str	r3, [r6, #0]
 800ceb6:	0028      	movs	r0, r5
 800ceb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ceba:	6822      	ldr	r2, [r4, #0]
 800cebc:	1bd1      	subs	r1, r2, r7
 800cebe:	d420      	bmi.n	800cf02 <_malloc_r+0xce>
 800cec0:	290b      	cmp	r1, #11
 800cec2:	d917      	bls.n	800cef4 <_malloc_r+0xc0>
 800cec4:	19e2      	adds	r2, r4, r7
 800cec6:	6027      	str	r7, [r4, #0]
 800cec8:	42a3      	cmp	r3, r4
 800ceca:	d111      	bne.n	800cef0 <_malloc_r+0xbc>
 800cecc:	602a      	str	r2, [r5, #0]
 800cece:	6863      	ldr	r3, [r4, #4]
 800ced0:	6011      	str	r1, [r2, #0]
 800ced2:	6053      	str	r3, [r2, #4]
 800ced4:	0030      	movs	r0, r6
 800ced6:	0025      	movs	r5, r4
 800ced8:	f001 fb80 	bl	800e5dc <__malloc_unlock>
 800cedc:	2207      	movs	r2, #7
 800cede:	350b      	adds	r5, #11
 800cee0:	1d23      	adds	r3, r4, #4
 800cee2:	4395      	bics	r5, r2
 800cee4:	1aea      	subs	r2, r5, r3
 800cee6:	429d      	cmp	r5, r3
 800cee8:	d0e5      	beq.n	800ceb6 <_malloc_r+0x82>
 800ceea:	1b5b      	subs	r3, r3, r5
 800ceec:	50a3      	str	r3, [r4, r2]
 800ceee:	e7e2      	b.n	800ceb6 <_malloc_r+0x82>
 800cef0:	605a      	str	r2, [r3, #4]
 800cef2:	e7ec      	b.n	800cece <_malloc_r+0x9a>
 800cef4:	6862      	ldr	r2, [r4, #4]
 800cef6:	42a3      	cmp	r3, r4
 800cef8:	d101      	bne.n	800cefe <_malloc_r+0xca>
 800cefa:	602a      	str	r2, [r5, #0]
 800cefc:	e7ea      	b.n	800ced4 <_malloc_r+0xa0>
 800cefe:	605a      	str	r2, [r3, #4]
 800cf00:	e7e8      	b.n	800ced4 <_malloc_r+0xa0>
 800cf02:	0023      	movs	r3, r4
 800cf04:	6864      	ldr	r4, [r4, #4]
 800cf06:	e7a7      	b.n	800ce58 <_malloc_r+0x24>
 800cf08:	002c      	movs	r4, r5
 800cf0a:	686d      	ldr	r5, [r5, #4]
 800cf0c:	e7af      	b.n	800ce6e <_malloc_r+0x3a>
 800cf0e:	230c      	movs	r3, #12
 800cf10:	0030      	movs	r0, r6
 800cf12:	6033      	str	r3, [r6, #0]
 800cf14:	f001 fb62 	bl	800e5dc <__malloc_unlock>
 800cf18:	e7cd      	b.n	800ceb6 <_malloc_r+0x82>
 800cf1a:	46c0      	nop			; (mov r8, r8)
 800cf1c:	200009c8 	.word	0x200009c8

0800cf20 <__cvt>:
 800cf20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf22:	001e      	movs	r6, r3
 800cf24:	2300      	movs	r3, #0
 800cf26:	0014      	movs	r4, r2
 800cf28:	b08b      	sub	sp, #44	; 0x2c
 800cf2a:	429e      	cmp	r6, r3
 800cf2c:	da04      	bge.n	800cf38 <__cvt+0x18>
 800cf2e:	2180      	movs	r1, #128	; 0x80
 800cf30:	0609      	lsls	r1, r1, #24
 800cf32:	1873      	adds	r3, r6, r1
 800cf34:	001e      	movs	r6, r3
 800cf36:	232d      	movs	r3, #45	; 0x2d
 800cf38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800cf3c:	7013      	strb	r3, [r2, #0]
 800cf3e:	2320      	movs	r3, #32
 800cf40:	2203      	movs	r2, #3
 800cf42:	439f      	bics	r7, r3
 800cf44:	2f46      	cmp	r7, #70	; 0x46
 800cf46:	d007      	beq.n	800cf58 <__cvt+0x38>
 800cf48:	003b      	movs	r3, r7
 800cf4a:	3b45      	subs	r3, #69	; 0x45
 800cf4c:	4259      	negs	r1, r3
 800cf4e:	414b      	adcs	r3, r1
 800cf50:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cf52:	3a01      	subs	r2, #1
 800cf54:	18cb      	adds	r3, r1, r3
 800cf56:	9310      	str	r3, [sp, #64]	; 0x40
 800cf58:	ab09      	add	r3, sp, #36	; 0x24
 800cf5a:	9304      	str	r3, [sp, #16]
 800cf5c:	ab08      	add	r3, sp, #32
 800cf5e:	9303      	str	r3, [sp, #12]
 800cf60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf62:	9200      	str	r2, [sp, #0]
 800cf64:	9302      	str	r3, [sp, #8]
 800cf66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf68:	0022      	movs	r2, r4
 800cf6a:	9301      	str	r3, [sp, #4]
 800cf6c:	0033      	movs	r3, r6
 800cf6e:	f000 fd03 	bl	800d978 <_dtoa_r>
 800cf72:	0005      	movs	r5, r0
 800cf74:	2f47      	cmp	r7, #71	; 0x47
 800cf76:	d102      	bne.n	800cf7e <__cvt+0x5e>
 800cf78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf7a:	07db      	lsls	r3, r3, #31
 800cf7c:	d528      	bpl.n	800cfd0 <__cvt+0xb0>
 800cf7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf80:	18eb      	adds	r3, r5, r3
 800cf82:	9307      	str	r3, [sp, #28]
 800cf84:	2f46      	cmp	r7, #70	; 0x46
 800cf86:	d114      	bne.n	800cfb2 <__cvt+0x92>
 800cf88:	782b      	ldrb	r3, [r5, #0]
 800cf8a:	2b30      	cmp	r3, #48	; 0x30
 800cf8c:	d10c      	bne.n	800cfa8 <__cvt+0x88>
 800cf8e:	2200      	movs	r2, #0
 800cf90:	2300      	movs	r3, #0
 800cf92:	0020      	movs	r0, r4
 800cf94:	0031      	movs	r1, r6
 800cf96:	f7f3 fa55 	bl	8000444 <__aeabi_dcmpeq>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d104      	bne.n	800cfa8 <__cvt+0x88>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cfa6:	6013      	str	r3, [r2, #0]
 800cfa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfaa:	9a07      	ldr	r2, [sp, #28]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	18d3      	adds	r3, r2, r3
 800cfb0:	9307      	str	r3, [sp, #28]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	0020      	movs	r0, r4
 800cfb8:	0031      	movs	r1, r6
 800cfba:	f7f3 fa43 	bl	8000444 <__aeabi_dcmpeq>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d001      	beq.n	800cfc6 <__cvt+0xa6>
 800cfc2:	9b07      	ldr	r3, [sp, #28]
 800cfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc6:	2230      	movs	r2, #48	; 0x30
 800cfc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfca:	9907      	ldr	r1, [sp, #28]
 800cfcc:	428b      	cmp	r3, r1
 800cfce:	d306      	bcc.n	800cfde <__cvt+0xbe>
 800cfd0:	0028      	movs	r0, r5
 800cfd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cfd6:	1b5b      	subs	r3, r3, r5
 800cfd8:	6013      	str	r3, [r2, #0]
 800cfda:	b00b      	add	sp, #44	; 0x2c
 800cfdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfde:	1c59      	adds	r1, r3, #1
 800cfe0:	9109      	str	r1, [sp, #36]	; 0x24
 800cfe2:	701a      	strb	r2, [r3, #0]
 800cfe4:	e7f0      	b.n	800cfc8 <__cvt+0xa8>

0800cfe6 <__exponent>:
 800cfe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfe8:	1c83      	adds	r3, r0, #2
 800cfea:	b087      	sub	sp, #28
 800cfec:	9303      	str	r3, [sp, #12]
 800cfee:	0005      	movs	r5, r0
 800cff0:	000c      	movs	r4, r1
 800cff2:	232b      	movs	r3, #43	; 0x2b
 800cff4:	7002      	strb	r2, [r0, #0]
 800cff6:	2900      	cmp	r1, #0
 800cff8:	da01      	bge.n	800cffe <__exponent+0x18>
 800cffa:	424c      	negs	r4, r1
 800cffc:	3302      	adds	r3, #2
 800cffe:	706b      	strb	r3, [r5, #1]
 800d000:	2c09      	cmp	r4, #9
 800d002:	dd31      	ble.n	800d068 <__exponent+0x82>
 800d004:	270a      	movs	r7, #10
 800d006:	ab04      	add	r3, sp, #16
 800d008:	1dde      	adds	r6, r3, #7
 800d00a:	0020      	movs	r0, r4
 800d00c:	0039      	movs	r1, r7
 800d00e:	9601      	str	r6, [sp, #4]
 800d010:	f7f3 fa02 	bl	8000418 <__aeabi_idivmod>
 800d014:	3e01      	subs	r6, #1
 800d016:	3130      	adds	r1, #48	; 0x30
 800d018:	0020      	movs	r0, r4
 800d01a:	7031      	strb	r1, [r6, #0]
 800d01c:	0039      	movs	r1, r7
 800d01e:	9402      	str	r4, [sp, #8]
 800d020:	f7f3 f914 	bl	800024c <__divsi3>
 800d024:	9b02      	ldr	r3, [sp, #8]
 800d026:	0004      	movs	r4, r0
 800d028:	2b63      	cmp	r3, #99	; 0x63
 800d02a:	dcee      	bgt.n	800d00a <__exponent+0x24>
 800d02c:	9b01      	ldr	r3, [sp, #4]
 800d02e:	3430      	adds	r4, #48	; 0x30
 800d030:	1e9a      	subs	r2, r3, #2
 800d032:	0013      	movs	r3, r2
 800d034:	9903      	ldr	r1, [sp, #12]
 800d036:	7014      	strb	r4, [r2, #0]
 800d038:	a804      	add	r0, sp, #16
 800d03a:	3007      	adds	r0, #7
 800d03c:	4298      	cmp	r0, r3
 800d03e:	d80e      	bhi.n	800d05e <__exponent+0x78>
 800d040:	ab04      	add	r3, sp, #16
 800d042:	3307      	adds	r3, #7
 800d044:	2000      	movs	r0, #0
 800d046:	429a      	cmp	r2, r3
 800d048:	d804      	bhi.n	800d054 <__exponent+0x6e>
 800d04a:	ab04      	add	r3, sp, #16
 800d04c:	3009      	adds	r0, #9
 800d04e:	18c0      	adds	r0, r0, r3
 800d050:	9b01      	ldr	r3, [sp, #4]
 800d052:	1ac0      	subs	r0, r0, r3
 800d054:	9b03      	ldr	r3, [sp, #12]
 800d056:	1818      	adds	r0, r3, r0
 800d058:	1b40      	subs	r0, r0, r5
 800d05a:	b007      	add	sp, #28
 800d05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d05e:	7818      	ldrb	r0, [r3, #0]
 800d060:	3301      	adds	r3, #1
 800d062:	7008      	strb	r0, [r1, #0]
 800d064:	3101      	adds	r1, #1
 800d066:	e7e7      	b.n	800d038 <__exponent+0x52>
 800d068:	2330      	movs	r3, #48	; 0x30
 800d06a:	18e4      	adds	r4, r4, r3
 800d06c:	70ab      	strb	r3, [r5, #2]
 800d06e:	1d28      	adds	r0, r5, #4
 800d070:	70ec      	strb	r4, [r5, #3]
 800d072:	e7f1      	b.n	800d058 <__exponent+0x72>

0800d074 <_printf_float>:
 800d074:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d076:	b095      	sub	sp, #84	; 0x54
 800d078:	000c      	movs	r4, r1
 800d07a:	9209      	str	r2, [sp, #36]	; 0x24
 800d07c:	001e      	movs	r6, r3
 800d07e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d080:	0007      	movs	r7, r0
 800d082:	f001 fa93 	bl	800e5ac <_localeconv_r>
 800d086:	6803      	ldr	r3, [r0, #0]
 800d088:	0018      	movs	r0, r3
 800d08a:	930c      	str	r3, [sp, #48]	; 0x30
 800d08c:	f7f3 f838 	bl	8000100 <strlen>
 800d090:	2300      	movs	r3, #0
 800d092:	9312      	str	r3, [sp, #72]	; 0x48
 800d094:	7e23      	ldrb	r3, [r4, #24]
 800d096:	2207      	movs	r2, #7
 800d098:	930a      	str	r3, [sp, #40]	; 0x28
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	900e      	str	r0, [sp, #56]	; 0x38
 800d09e:	930d      	str	r3, [sp, #52]	; 0x34
 800d0a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d0a2:	682b      	ldr	r3, [r5, #0]
 800d0a4:	05c9      	lsls	r1, r1, #23
 800d0a6:	d547      	bpl.n	800d138 <_printf_float+0xc4>
 800d0a8:	189b      	adds	r3, r3, r2
 800d0aa:	4393      	bics	r3, r2
 800d0ac:	001a      	movs	r2, r3
 800d0ae:	3208      	adds	r2, #8
 800d0b0:	602a      	str	r2, [r5, #0]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	64a2      	str	r2, [r4, #72]	; 0x48
 800d0b8:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d0be:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d0c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0c2:	006b      	lsls	r3, r5, #1
 800d0c4:	085b      	lsrs	r3, r3, #1
 800d0c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d0ca:	4ba7      	ldr	r3, [pc, #668]	; (800d368 <_printf_float+0x2f4>)
 800d0cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d0ce:	4252      	negs	r2, r2
 800d0d0:	f7f5 fada 	bl	8002688 <__aeabi_dcmpun>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d131      	bne.n	800d13c <_printf_float+0xc8>
 800d0d8:	2201      	movs	r2, #1
 800d0da:	4ba3      	ldr	r3, [pc, #652]	; (800d368 <_printf_float+0x2f4>)
 800d0dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d0de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d0e0:	4252      	negs	r2, r2
 800d0e2:	f7f3 f9bf 	bl	8000464 <__aeabi_dcmple>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d128      	bne.n	800d13c <_printf_float+0xc8>
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	0029      	movs	r1, r5
 800d0f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d0f2:	f7f3 f9ad 	bl	8000450 <__aeabi_dcmplt>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d003      	beq.n	800d102 <_printf_float+0x8e>
 800d0fa:	0023      	movs	r3, r4
 800d0fc:	222d      	movs	r2, #45	; 0x2d
 800d0fe:	3343      	adds	r3, #67	; 0x43
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d104:	4d99      	ldr	r5, [pc, #612]	; (800d36c <_printf_float+0x2f8>)
 800d106:	2b47      	cmp	r3, #71	; 0x47
 800d108:	d900      	bls.n	800d10c <_printf_float+0x98>
 800d10a:	4d99      	ldr	r5, [pc, #612]	; (800d370 <_printf_float+0x2fc>)
 800d10c:	2303      	movs	r3, #3
 800d10e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d110:	6123      	str	r3, [r4, #16]
 800d112:	3301      	adds	r3, #1
 800d114:	439a      	bics	r2, r3
 800d116:	2300      	movs	r3, #0
 800d118:	6022      	str	r2, [r4, #0]
 800d11a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d11e:	0021      	movs	r1, r4
 800d120:	0038      	movs	r0, r7
 800d122:	9600      	str	r6, [sp, #0]
 800d124:	aa13      	add	r2, sp, #76	; 0x4c
 800d126:	f000 f9e7 	bl	800d4f8 <_printf_common>
 800d12a:	1c43      	adds	r3, r0, #1
 800d12c:	d000      	beq.n	800d130 <_printf_float+0xbc>
 800d12e:	e0a2      	b.n	800d276 <_printf_float+0x202>
 800d130:	2001      	movs	r0, #1
 800d132:	4240      	negs	r0, r0
 800d134:	b015      	add	sp, #84	; 0x54
 800d136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d138:	3307      	adds	r3, #7
 800d13a:	e7b6      	b.n	800d0aa <_printf_float+0x36>
 800d13c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d13e:	002b      	movs	r3, r5
 800d140:	0010      	movs	r0, r2
 800d142:	0029      	movs	r1, r5
 800d144:	f7f5 faa0 	bl	8002688 <__aeabi_dcmpun>
 800d148:	2800      	cmp	r0, #0
 800d14a:	d00b      	beq.n	800d164 <_printf_float+0xf0>
 800d14c:	2d00      	cmp	r5, #0
 800d14e:	da03      	bge.n	800d158 <_printf_float+0xe4>
 800d150:	0023      	movs	r3, r4
 800d152:	222d      	movs	r2, #45	; 0x2d
 800d154:	3343      	adds	r3, #67	; 0x43
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d15a:	4d86      	ldr	r5, [pc, #536]	; (800d374 <_printf_float+0x300>)
 800d15c:	2b47      	cmp	r3, #71	; 0x47
 800d15e:	d9d5      	bls.n	800d10c <_printf_float+0x98>
 800d160:	4d85      	ldr	r5, [pc, #532]	; (800d378 <_printf_float+0x304>)
 800d162:	e7d3      	b.n	800d10c <_printf_float+0x98>
 800d164:	2220      	movs	r2, #32
 800d166:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d168:	6863      	ldr	r3, [r4, #4]
 800d16a:	4391      	bics	r1, r2
 800d16c:	910f      	str	r1, [sp, #60]	; 0x3c
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	d149      	bne.n	800d206 <_printf_float+0x192>
 800d172:	3307      	adds	r3, #7
 800d174:	6063      	str	r3, [r4, #4]
 800d176:	2380      	movs	r3, #128	; 0x80
 800d178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d17a:	00db      	lsls	r3, r3, #3
 800d17c:	4313      	orrs	r3, r2
 800d17e:	2200      	movs	r2, #0
 800d180:	9206      	str	r2, [sp, #24]
 800d182:	aa12      	add	r2, sp, #72	; 0x48
 800d184:	9205      	str	r2, [sp, #20]
 800d186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d188:	a908      	add	r1, sp, #32
 800d18a:	9204      	str	r2, [sp, #16]
 800d18c:	aa11      	add	r2, sp, #68	; 0x44
 800d18e:	9203      	str	r2, [sp, #12]
 800d190:	2223      	movs	r2, #35	; 0x23
 800d192:	6023      	str	r3, [r4, #0]
 800d194:	9301      	str	r3, [sp, #4]
 800d196:	6863      	ldr	r3, [r4, #4]
 800d198:	1852      	adds	r2, r2, r1
 800d19a:	9202      	str	r2, [sp, #8]
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	0038      	movs	r0, r7
 800d1a0:	002b      	movs	r3, r5
 800d1a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1a4:	f7ff febc 	bl	800cf20 <__cvt>
 800d1a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1aa:	0005      	movs	r5, r0
 800d1ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d1ae:	2b47      	cmp	r3, #71	; 0x47
 800d1b0:	d108      	bne.n	800d1c4 <_printf_float+0x150>
 800d1b2:	1ccb      	adds	r3, r1, #3
 800d1b4:	db02      	blt.n	800d1bc <_printf_float+0x148>
 800d1b6:	6863      	ldr	r3, [r4, #4]
 800d1b8:	4299      	cmp	r1, r3
 800d1ba:	dd48      	ble.n	800d24e <_printf_float+0x1da>
 800d1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1be:	3b02      	subs	r3, #2
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	930a      	str	r3, [sp, #40]	; 0x28
 800d1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c6:	2b65      	cmp	r3, #101	; 0x65
 800d1c8:	d824      	bhi.n	800d214 <_printf_float+0x1a0>
 800d1ca:	0020      	movs	r0, r4
 800d1cc:	001a      	movs	r2, r3
 800d1ce:	3901      	subs	r1, #1
 800d1d0:	3050      	adds	r0, #80	; 0x50
 800d1d2:	9111      	str	r1, [sp, #68]	; 0x44
 800d1d4:	f7ff ff07 	bl	800cfe6 <__exponent>
 800d1d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d1da:	900b      	str	r0, [sp, #44]	; 0x2c
 800d1dc:	1813      	adds	r3, r2, r0
 800d1de:	6123      	str	r3, [r4, #16]
 800d1e0:	2a01      	cmp	r2, #1
 800d1e2:	dc02      	bgt.n	800d1ea <_printf_float+0x176>
 800d1e4:	6822      	ldr	r2, [r4, #0]
 800d1e6:	07d2      	lsls	r2, r2, #31
 800d1e8:	d501      	bpl.n	800d1ee <_printf_float+0x17a>
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	6123      	str	r3, [r4, #16]
 800d1ee:	2323      	movs	r3, #35	; 0x23
 800d1f0:	aa08      	add	r2, sp, #32
 800d1f2:	189b      	adds	r3, r3, r2
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d100      	bne.n	800d1fc <_printf_float+0x188>
 800d1fa:	e78f      	b.n	800d11c <_printf_float+0xa8>
 800d1fc:	0023      	movs	r3, r4
 800d1fe:	222d      	movs	r2, #45	; 0x2d
 800d200:	3343      	adds	r3, #67	; 0x43
 800d202:	701a      	strb	r2, [r3, #0]
 800d204:	e78a      	b.n	800d11c <_printf_float+0xa8>
 800d206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d208:	2a47      	cmp	r2, #71	; 0x47
 800d20a:	d1b4      	bne.n	800d176 <_printf_float+0x102>
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1b2      	bne.n	800d176 <_printf_float+0x102>
 800d210:	3301      	adds	r3, #1
 800d212:	e7af      	b.n	800d174 <_printf_float+0x100>
 800d214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d216:	2b66      	cmp	r3, #102	; 0x66
 800d218:	d11b      	bne.n	800d252 <_printf_float+0x1de>
 800d21a:	6863      	ldr	r3, [r4, #4]
 800d21c:	2900      	cmp	r1, #0
 800d21e:	dd0d      	ble.n	800d23c <_printf_float+0x1c8>
 800d220:	6121      	str	r1, [r4, #16]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d102      	bne.n	800d22c <_printf_float+0x1b8>
 800d226:	6822      	ldr	r2, [r4, #0]
 800d228:	07d2      	lsls	r2, r2, #31
 800d22a:	d502      	bpl.n	800d232 <_printf_float+0x1be>
 800d22c:	3301      	adds	r3, #1
 800d22e:	1859      	adds	r1, r3, r1
 800d230:	6121      	str	r1, [r4, #16]
 800d232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d234:	65a3      	str	r3, [r4, #88]	; 0x58
 800d236:	2300      	movs	r3, #0
 800d238:	930b      	str	r3, [sp, #44]	; 0x2c
 800d23a:	e7d8      	b.n	800d1ee <_printf_float+0x17a>
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d103      	bne.n	800d248 <_printf_float+0x1d4>
 800d240:	2201      	movs	r2, #1
 800d242:	6821      	ldr	r1, [r4, #0]
 800d244:	4211      	tst	r1, r2
 800d246:	d000      	beq.n	800d24a <_printf_float+0x1d6>
 800d248:	1c9a      	adds	r2, r3, #2
 800d24a:	6122      	str	r2, [r4, #16]
 800d24c:	e7f1      	b.n	800d232 <_printf_float+0x1be>
 800d24e:	2367      	movs	r3, #103	; 0x67
 800d250:	930a      	str	r3, [sp, #40]	; 0x28
 800d252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d256:	4293      	cmp	r3, r2
 800d258:	db06      	blt.n	800d268 <_printf_float+0x1f4>
 800d25a:	6822      	ldr	r2, [r4, #0]
 800d25c:	6123      	str	r3, [r4, #16]
 800d25e:	07d2      	lsls	r2, r2, #31
 800d260:	d5e7      	bpl.n	800d232 <_printf_float+0x1be>
 800d262:	3301      	adds	r3, #1
 800d264:	6123      	str	r3, [r4, #16]
 800d266:	e7e4      	b.n	800d232 <_printf_float+0x1be>
 800d268:	2101      	movs	r1, #1
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	dc01      	bgt.n	800d272 <_printf_float+0x1fe>
 800d26e:	1849      	adds	r1, r1, r1
 800d270:	1ac9      	subs	r1, r1, r3
 800d272:	1852      	adds	r2, r2, r1
 800d274:	e7e9      	b.n	800d24a <_printf_float+0x1d6>
 800d276:	6822      	ldr	r2, [r4, #0]
 800d278:	0553      	lsls	r3, r2, #21
 800d27a:	d407      	bmi.n	800d28c <_printf_float+0x218>
 800d27c:	6923      	ldr	r3, [r4, #16]
 800d27e:	002a      	movs	r2, r5
 800d280:	0038      	movs	r0, r7
 800d282:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d284:	47b0      	blx	r6
 800d286:	1c43      	adds	r3, r0, #1
 800d288:	d128      	bne.n	800d2dc <_printf_float+0x268>
 800d28a:	e751      	b.n	800d130 <_printf_float+0xbc>
 800d28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d28e:	2b65      	cmp	r3, #101	; 0x65
 800d290:	d800      	bhi.n	800d294 <_printf_float+0x220>
 800d292:	e0e1      	b.n	800d458 <_printf_float+0x3e4>
 800d294:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d296:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d298:	2200      	movs	r2, #0
 800d29a:	2300      	movs	r3, #0
 800d29c:	f7f3 f8d2 	bl	8000444 <__aeabi_dcmpeq>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d031      	beq.n	800d308 <_printf_float+0x294>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	0038      	movs	r0, r7
 800d2a8:	4a34      	ldr	r2, [pc, #208]	; (800d37c <_printf_float+0x308>)
 800d2aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2ac:	47b0      	blx	r6
 800d2ae:	1c43      	adds	r3, r0, #1
 800d2b0:	d100      	bne.n	800d2b4 <_printf_float+0x240>
 800d2b2:	e73d      	b.n	800d130 <_printf_float+0xbc>
 800d2b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	db02      	blt.n	800d2c2 <_printf_float+0x24e>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	07db      	lsls	r3, r3, #31
 800d2c0:	d50c      	bpl.n	800d2dc <_printf_float+0x268>
 800d2c2:	0038      	movs	r0, r7
 800d2c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2ca:	47b0      	blx	r6
 800d2cc:	2500      	movs	r5, #0
 800d2ce:	1c43      	adds	r3, r0, #1
 800d2d0:	d100      	bne.n	800d2d4 <_printf_float+0x260>
 800d2d2:	e72d      	b.n	800d130 <_printf_float+0xbc>
 800d2d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	42ab      	cmp	r3, r5
 800d2da:	dc0a      	bgt.n	800d2f2 <_printf_float+0x27e>
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	079b      	lsls	r3, r3, #30
 800d2e0:	d500      	bpl.n	800d2e4 <_printf_float+0x270>
 800d2e2:	e106      	b.n	800d4f2 <_printf_float+0x47e>
 800d2e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d2e6:	68e0      	ldr	r0, [r4, #12]
 800d2e8:	4298      	cmp	r0, r3
 800d2ea:	db00      	blt.n	800d2ee <_printf_float+0x27a>
 800d2ec:	e722      	b.n	800d134 <_printf_float+0xc0>
 800d2ee:	0018      	movs	r0, r3
 800d2f0:	e720      	b.n	800d134 <_printf_float+0xc0>
 800d2f2:	0022      	movs	r2, r4
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	0038      	movs	r0, r7
 800d2f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2fa:	321a      	adds	r2, #26
 800d2fc:	47b0      	blx	r6
 800d2fe:	1c43      	adds	r3, r0, #1
 800d300:	d100      	bne.n	800d304 <_printf_float+0x290>
 800d302:	e715      	b.n	800d130 <_printf_float+0xbc>
 800d304:	3501      	adds	r5, #1
 800d306:	e7e5      	b.n	800d2d4 <_printf_float+0x260>
 800d308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	dc38      	bgt.n	800d380 <_printf_float+0x30c>
 800d30e:	2301      	movs	r3, #1
 800d310:	0038      	movs	r0, r7
 800d312:	4a1a      	ldr	r2, [pc, #104]	; (800d37c <_printf_float+0x308>)
 800d314:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d316:	47b0      	blx	r6
 800d318:	1c43      	adds	r3, r0, #1
 800d31a:	d100      	bne.n	800d31e <_printf_float+0x2aa>
 800d31c:	e708      	b.n	800d130 <_printf_float+0xbc>
 800d31e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d320:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d322:	4313      	orrs	r3, r2
 800d324:	d102      	bne.n	800d32c <_printf_float+0x2b8>
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	07db      	lsls	r3, r3, #31
 800d32a:	d5d7      	bpl.n	800d2dc <_printf_float+0x268>
 800d32c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d32e:	0038      	movs	r0, r7
 800d330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d332:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d334:	47b0      	blx	r6
 800d336:	1c43      	adds	r3, r0, #1
 800d338:	d100      	bne.n	800d33c <_printf_float+0x2c8>
 800d33a:	e6f9      	b.n	800d130 <_printf_float+0xbc>
 800d33c:	2300      	movs	r3, #0
 800d33e:	930a      	str	r3, [sp, #40]	; 0x28
 800d340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d344:	425b      	negs	r3, r3
 800d346:	4293      	cmp	r3, r2
 800d348:	dc01      	bgt.n	800d34e <_printf_float+0x2da>
 800d34a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d34c:	e797      	b.n	800d27e <_printf_float+0x20a>
 800d34e:	0022      	movs	r2, r4
 800d350:	2301      	movs	r3, #1
 800d352:	0038      	movs	r0, r7
 800d354:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d356:	321a      	adds	r2, #26
 800d358:	47b0      	blx	r6
 800d35a:	1c43      	adds	r3, r0, #1
 800d35c:	d100      	bne.n	800d360 <_printf_float+0x2ec>
 800d35e:	e6e7      	b.n	800d130 <_printf_float+0xbc>
 800d360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d362:	3301      	adds	r3, #1
 800d364:	e7eb      	b.n	800d33e <_printf_float+0x2ca>
 800d366:	46c0      	nop			; (mov r8, r8)
 800d368:	7fefffff 	.word	0x7fefffff
 800d36c:	0801016c 	.word	0x0801016c
 800d370:	08010170 	.word	0x08010170
 800d374:	08010174 	.word	0x08010174
 800d378:	08010178 	.word	0x08010178
 800d37c:	0801017c 	.word	0x0801017c
 800d380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d384:	920a      	str	r2, [sp, #40]	; 0x28
 800d386:	429a      	cmp	r2, r3
 800d388:	dd00      	ble.n	800d38c <_printf_float+0x318>
 800d38a:	930a      	str	r3, [sp, #40]	; 0x28
 800d38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d38e:	2b00      	cmp	r3, #0
 800d390:	dc3c      	bgt.n	800d40c <_printf_float+0x398>
 800d392:	2300      	movs	r3, #0
 800d394:	930d      	str	r3, [sp, #52]	; 0x34
 800d396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d398:	43db      	mvns	r3, r3
 800d39a:	17db      	asrs	r3, r3, #31
 800d39c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d39e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d3a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	dc34      	bgt.n	800d41c <_printf_float+0x3a8>
 800d3b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	db3d      	blt.n	800d436 <_printf_float+0x3c2>
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	07db      	lsls	r3, r3, #31
 800d3be:	d43a      	bmi.n	800d436 <_printf_float+0x3c2>
 800d3c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	1a52      	subs	r2, r2, r1
 800d3ca:	920a      	str	r2, [sp, #40]	; 0x28
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	dd00      	ble.n	800d3d2 <_printf_float+0x35e>
 800d3d0:	930a      	str	r3, [sp, #40]	; 0x28
 800d3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	dc36      	bgt.n	800d446 <_printf_float+0x3d2>
 800d3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3da:	2500      	movs	r5, #0
 800d3dc:	43db      	mvns	r3, r3
 800d3de:	17db      	asrs	r3, r3, #31
 800d3e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d3e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3e8:	1a9b      	subs	r3, r3, r2
 800d3ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3ec:	400a      	ands	r2, r1
 800d3ee:	1a9b      	subs	r3, r3, r2
 800d3f0:	42ab      	cmp	r3, r5
 800d3f2:	dc00      	bgt.n	800d3f6 <_printf_float+0x382>
 800d3f4:	e772      	b.n	800d2dc <_printf_float+0x268>
 800d3f6:	0022      	movs	r2, r4
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	0038      	movs	r0, r7
 800d3fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3fe:	321a      	adds	r2, #26
 800d400:	47b0      	blx	r6
 800d402:	1c43      	adds	r3, r0, #1
 800d404:	d100      	bne.n	800d408 <_printf_float+0x394>
 800d406:	e693      	b.n	800d130 <_printf_float+0xbc>
 800d408:	3501      	adds	r5, #1
 800d40a:	e7ea      	b.n	800d3e2 <_printf_float+0x36e>
 800d40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d40e:	002a      	movs	r2, r5
 800d410:	0038      	movs	r0, r7
 800d412:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d414:	47b0      	blx	r6
 800d416:	1c43      	adds	r3, r0, #1
 800d418:	d1bb      	bne.n	800d392 <_printf_float+0x31e>
 800d41a:	e689      	b.n	800d130 <_printf_float+0xbc>
 800d41c:	0022      	movs	r2, r4
 800d41e:	2301      	movs	r3, #1
 800d420:	0038      	movs	r0, r7
 800d422:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d424:	321a      	adds	r2, #26
 800d426:	47b0      	blx	r6
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	d100      	bne.n	800d42e <_printf_float+0x3ba>
 800d42c:	e680      	b.n	800d130 <_printf_float+0xbc>
 800d42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d430:	3301      	adds	r3, #1
 800d432:	930d      	str	r3, [sp, #52]	; 0x34
 800d434:	e7b3      	b.n	800d39e <_printf_float+0x32a>
 800d436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d438:	0038      	movs	r0, r7
 800d43a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d43c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d43e:	47b0      	blx	r6
 800d440:	1c43      	adds	r3, r0, #1
 800d442:	d1bd      	bne.n	800d3c0 <_printf_float+0x34c>
 800d444:	e674      	b.n	800d130 <_printf_float+0xbc>
 800d446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d448:	0038      	movs	r0, r7
 800d44a:	18ea      	adds	r2, r5, r3
 800d44c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d450:	47b0      	blx	r6
 800d452:	1c43      	adds	r3, r0, #1
 800d454:	d1c0      	bne.n	800d3d8 <_printf_float+0x364>
 800d456:	e66b      	b.n	800d130 <_printf_float+0xbc>
 800d458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	dc02      	bgt.n	800d464 <_printf_float+0x3f0>
 800d45e:	2301      	movs	r3, #1
 800d460:	421a      	tst	r2, r3
 800d462:	d034      	beq.n	800d4ce <_printf_float+0x45a>
 800d464:	2301      	movs	r3, #1
 800d466:	002a      	movs	r2, r5
 800d468:	0038      	movs	r0, r7
 800d46a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d46c:	47b0      	blx	r6
 800d46e:	1c43      	adds	r3, r0, #1
 800d470:	d100      	bne.n	800d474 <_printf_float+0x400>
 800d472:	e65d      	b.n	800d130 <_printf_float+0xbc>
 800d474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d476:	0038      	movs	r0, r7
 800d478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d47a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d47c:	47b0      	blx	r6
 800d47e:	1c43      	adds	r3, r0, #1
 800d480:	d100      	bne.n	800d484 <_printf_float+0x410>
 800d482:	e655      	b.n	800d130 <_printf_float+0xbc>
 800d484:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d486:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d488:	2200      	movs	r2, #0
 800d48a:	2300      	movs	r3, #0
 800d48c:	f7f2 ffda 	bl	8000444 <__aeabi_dcmpeq>
 800d490:	2800      	cmp	r0, #0
 800d492:	d11a      	bne.n	800d4ca <_printf_float+0x456>
 800d494:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d496:	1c6a      	adds	r2, r5, #1
 800d498:	3b01      	subs	r3, #1
 800d49a:	0038      	movs	r0, r7
 800d49c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d49e:	47b0      	blx	r6
 800d4a0:	1c43      	adds	r3, r0, #1
 800d4a2:	d10e      	bne.n	800d4c2 <_printf_float+0x44e>
 800d4a4:	e644      	b.n	800d130 <_printf_float+0xbc>
 800d4a6:	0022      	movs	r2, r4
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	0038      	movs	r0, r7
 800d4ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4ae:	321a      	adds	r2, #26
 800d4b0:	47b0      	blx	r6
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	d100      	bne.n	800d4b8 <_printf_float+0x444>
 800d4b6:	e63b      	b.n	800d130 <_printf_float+0xbc>
 800d4b8:	3501      	adds	r5, #1
 800d4ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	42ab      	cmp	r3, r5
 800d4c0:	dcf1      	bgt.n	800d4a6 <_printf_float+0x432>
 800d4c2:	0022      	movs	r2, r4
 800d4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4c6:	3250      	adds	r2, #80	; 0x50
 800d4c8:	e6da      	b.n	800d280 <_printf_float+0x20c>
 800d4ca:	2500      	movs	r5, #0
 800d4cc:	e7f5      	b.n	800d4ba <_printf_float+0x446>
 800d4ce:	002a      	movs	r2, r5
 800d4d0:	e7e3      	b.n	800d49a <_printf_float+0x426>
 800d4d2:	0022      	movs	r2, r4
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	0038      	movs	r0, r7
 800d4d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4da:	3219      	adds	r2, #25
 800d4dc:	47b0      	blx	r6
 800d4de:	1c43      	adds	r3, r0, #1
 800d4e0:	d100      	bne.n	800d4e4 <_printf_float+0x470>
 800d4e2:	e625      	b.n	800d130 <_printf_float+0xbc>
 800d4e4:	3501      	adds	r5, #1
 800d4e6:	68e3      	ldr	r3, [r4, #12]
 800d4e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d4ea:	1a9b      	subs	r3, r3, r2
 800d4ec:	42ab      	cmp	r3, r5
 800d4ee:	dcf0      	bgt.n	800d4d2 <_printf_float+0x45e>
 800d4f0:	e6f8      	b.n	800d2e4 <_printf_float+0x270>
 800d4f2:	2500      	movs	r5, #0
 800d4f4:	e7f7      	b.n	800d4e6 <_printf_float+0x472>
 800d4f6:	46c0      	nop			; (mov r8, r8)

0800d4f8 <_printf_common>:
 800d4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4fa:	0015      	movs	r5, r2
 800d4fc:	9301      	str	r3, [sp, #4]
 800d4fe:	688a      	ldr	r2, [r1, #8]
 800d500:	690b      	ldr	r3, [r1, #16]
 800d502:	000c      	movs	r4, r1
 800d504:	9000      	str	r0, [sp, #0]
 800d506:	4293      	cmp	r3, r2
 800d508:	da00      	bge.n	800d50c <_printf_common+0x14>
 800d50a:	0013      	movs	r3, r2
 800d50c:	0022      	movs	r2, r4
 800d50e:	602b      	str	r3, [r5, #0]
 800d510:	3243      	adds	r2, #67	; 0x43
 800d512:	7812      	ldrb	r2, [r2, #0]
 800d514:	2a00      	cmp	r2, #0
 800d516:	d001      	beq.n	800d51c <_printf_common+0x24>
 800d518:	3301      	adds	r3, #1
 800d51a:	602b      	str	r3, [r5, #0]
 800d51c:	6823      	ldr	r3, [r4, #0]
 800d51e:	069b      	lsls	r3, r3, #26
 800d520:	d502      	bpl.n	800d528 <_printf_common+0x30>
 800d522:	682b      	ldr	r3, [r5, #0]
 800d524:	3302      	adds	r3, #2
 800d526:	602b      	str	r3, [r5, #0]
 800d528:	6822      	ldr	r2, [r4, #0]
 800d52a:	2306      	movs	r3, #6
 800d52c:	0017      	movs	r7, r2
 800d52e:	401f      	ands	r7, r3
 800d530:	421a      	tst	r2, r3
 800d532:	d027      	beq.n	800d584 <_printf_common+0x8c>
 800d534:	0023      	movs	r3, r4
 800d536:	3343      	adds	r3, #67	; 0x43
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	1e5a      	subs	r2, r3, #1
 800d53c:	4193      	sbcs	r3, r2
 800d53e:	6822      	ldr	r2, [r4, #0]
 800d540:	0692      	lsls	r2, r2, #26
 800d542:	d430      	bmi.n	800d5a6 <_printf_common+0xae>
 800d544:	0022      	movs	r2, r4
 800d546:	9901      	ldr	r1, [sp, #4]
 800d548:	9800      	ldr	r0, [sp, #0]
 800d54a:	9e08      	ldr	r6, [sp, #32]
 800d54c:	3243      	adds	r2, #67	; 0x43
 800d54e:	47b0      	blx	r6
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d025      	beq.n	800d5a0 <_printf_common+0xa8>
 800d554:	2306      	movs	r3, #6
 800d556:	6820      	ldr	r0, [r4, #0]
 800d558:	682a      	ldr	r2, [r5, #0]
 800d55a:	68e1      	ldr	r1, [r4, #12]
 800d55c:	2500      	movs	r5, #0
 800d55e:	4003      	ands	r3, r0
 800d560:	2b04      	cmp	r3, #4
 800d562:	d103      	bne.n	800d56c <_printf_common+0x74>
 800d564:	1a8d      	subs	r5, r1, r2
 800d566:	43eb      	mvns	r3, r5
 800d568:	17db      	asrs	r3, r3, #31
 800d56a:	401d      	ands	r5, r3
 800d56c:	68a3      	ldr	r3, [r4, #8]
 800d56e:	6922      	ldr	r2, [r4, #16]
 800d570:	4293      	cmp	r3, r2
 800d572:	dd01      	ble.n	800d578 <_printf_common+0x80>
 800d574:	1a9b      	subs	r3, r3, r2
 800d576:	18ed      	adds	r5, r5, r3
 800d578:	2700      	movs	r7, #0
 800d57a:	42bd      	cmp	r5, r7
 800d57c:	d120      	bne.n	800d5c0 <_printf_common+0xc8>
 800d57e:	2000      	movs	r0, #0
 800d580:	e010      	b.n	800d5a4 <_printf_common+0xac>
 800d582:	3701      	adds	r7, #1
 800d584:	68e3      	ldr	r3, [r4, #12]
 800d586:	682a      	ldr	r2, [r5, #0]
 800d588:	1a9b      	subs	r3, r3, r2
 800d58a:	42bb      	cmp	r3, r7
 800d58c:	ddd2      	ble.n	800d534 <_printf_common+0x3c>
 800d58e:	0022      	movs	r2, r4
 800d590:	2301      	movs	r3, #1
 800d592:	9901      	ldr	r1, [sp, #4]
 800d594:	9800      	ldr	r0, [sp, #0]
 800d596:	9e08      	ldr	r6, [sp, #32]
 800d598:	3219      	adds	r2, #25
 800d59a:	47b0      	blx	r6
 800d59c:	1c43      	adds	r3, r0, #1
 800d59e:	d1f0      	bne.n	800d582 <_printf_common+0x8a>
 800d5a0:	2001      	movs	r0, #1
 800d5a2:	4240      	negs	r0, r0
 800d5a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5a6:	2030      	movs	r0, #48	; 0x30
 800d5a8:	18e1      	adds	r1, r4, r3
 800d5aa:	3143      	adds	r1, #67	; 0x43
 800d5ac:	7008      	strb	r0, [r1, #0]
 800d5ae:	0021      	movs	r1, r4
 800d5b0:	1c5a      	adds	r2, r3, #1
 800d5b2:	3145      	adds	r1, #69	; 0x45
 800d5b4:	7809      	ldrb	r1, [r1, #0]
 800d5b6:	18a2      	adds	r2, r4, r2
 800d5b8:	3243      	adds	r2, #67	; 0x43
 800d5ba:	3302      	adds	r3, #2
 800d5bc:	7011      	strb	r1, [r2, #0]
 800d5be:	e7c1      	b.n	800d544 <_printf_common+0x4c>
 800d5c0:	0022      	movs	r2, r4
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	9901      	ldr	r1, [sp, #4]
 800d5c6:	9800      	ldr	r0, [sp, #0]
 800d5c8:	9e08      	ldr	r6, [sp, #32]
 800d5ca:	321a      	adds	r2, #26
 800d5cc:	47b0      	blx	r6
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	d0e6      	beq.n	800d5a0 <_printf_common+0xa8>
 800d5d2:	3701      	adds	r7, #1
 800d5d4:	e7d1      	b.n	800d57a <_printf_common+0x82>
	...

0800d5d8 <_printf_i>:
 800d5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5da:	b08b      	sub	sp, #44	; 0x2c
 800d5dc:	9206      	str	r2, [sp, #24]
 800d5de:	000a      	movs	r2, r1
 800d5e0:	3243      	adds	r2, #67	; 0x43
 800d5e2:	9307      	str	r3, [sp, #28]
 800d5e4:	9005      	str	r0, [sp, #20]
 800d5e6:	9204      	str	r2, [sp, #16]
 800d5e8:	7e0a      	ldrb	r2, [r1, #24]
 800d5ea:	000c      	movs	r4, r1
 800d5ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5ee:	2a78      	cmp	r2, #120	; 0x78
 800d5f0:	d807      	bhi.n	800d602 <_printf_i+0x2a>
 800d5f2:	2a62      	cmp	r2, #98	; 0x62
 800d5f4:	d809      	bhi.n	800d60a <_printf_i+0x32>
 800d5f6:	2a00      	cmp	r2, #0
 800d5f8:	d100      	bne.n	800d5fc <_printf_i+0x24>
 800d5fa:	e0c1      	b.n	800d780 <_printf_i+0x1a8>
 800d5fc:	2a58      	cmp	r2, #88	; 0x58
 800d5fe:	d100      	bne.n	800d602 <_printf_i+0x2a>
 800d600:	e08c      	b.n	800d71c <_printf_i+0x144>
 800d602:	0026      	movs	r6, r4
 800d604:	3642      	adds	r6, #66	; 0x42
 800d606:	7032      	strb	r2, [r6, #0]
 800d608:	e022      	b.n	800d650 <_printf_i+0x78>
 800d60a:	0010      	movs	r0, r2
 800d60c:	3863      	subs	r0, #99	; 0x63
 800d60e:	2815      	cmp	r0, #21
 800d610:	d8f7      	bhi.n	800d602 <_printf_i+0x2a>
 800d612:	f7f2 fd87 	bl	8000124 <__gnu_thumb1_case_shi>
 800d616:	0016      	.short	0x0016
 800d618:	fff6001f 	.word	0xfff6001f
 800d61c:	fff6fff6 	.word	0xfff6fff6
 800d620:	001ffff6 	.word	0x001ffff6
 800d624:	fff6fff6 	.word	0xfff6fff6
 800d628:	fff6fff6 	.word	0xfff6fff6
 800d62c:	003600a8 	.word	0x003600a8
 800d630:	fff6009a 	.word	0xfff6009a
 800d634:	00b9fff6 	.word	0x00b9fff6
 800d638:	0036fff6 	.word	0x0036fff6
 800d63c:	fff6fff6 	.word	0xfff6fff6
 800d640:	009e      	.short	0x009e
 800d642:	0026      	movs	r6, r4
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	3642      	adds	r6, #66	; 0x42
 800d648:	1d11      	adds	r1, r2, #4
 800d64a:	6019      	str	r1, [r3, #0]
 800d64c:	6813      	ldr	r3, [r2, #0]
 800d64e:	7033      	strb	r3, [r6, #0]
 800d650:	2301      	movs	r3, #1
 800d652:	e0a7      	b.n	800d7a4 <_printf_i+0x1cc>
 800d654:	6808      	ldr	r0, [r1, #0]
 800d656:	6819      	ldr	r1, [r3, #0]
 800d658:	1d0a      	adds	r2, r1, #4
 800d65a:	0605      	lsls	r5, r0, #24
 800d65c:	d50b      	bpl.n	800d676 <_printf_i+0x9e>
 800d65e:	680d      	ldr	r5, [r1, #0]
 800d660:	601a      	str	r2, [r3, #0]
 800d662:	2d00      	cmp	r5, #0
 800d664:	da03      	bge.n	800d66e <_printf_i+0x96>
 800d666:	232d      	movs	r3, #45	; 0x2d
 800d668:	9a04      	ldr	r2, [sp, #16]
 800d66a:	426d      	negs	r5, r5
 800d66c:	7013      	strb	r3, [r2, #0]
 800d66e:	4b61      	ldr	r3, [pc, #388]	; (800d7f4 <_printf_i+0x21c>)
 800d670:	270a      	movs	r7, #10
 800d672:	9303      	str	r3, [sp, #12]
 800d674:	e01b      	b.n	800d6ae <_printf_i+0xd6>
 800d676:	680d      	ldr	r5, [r1, #0]
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	0641      	lsls	r1, r0, #25
 800d67c:	d5f1      	bpl.n	800d662 <_printf_i+0x8a>
 800d67e:	b22d      	sxth	r5, r5
 800d680:	e7ef      	b.n	800d662 <_printf_i+0x8a>
 800d682:	680d      	ldr	r5, [r1, #0]
 800d684:	6819      	ldr	r1, [r3, #0]
 800d686:	1d08      	adds	r0, r1, #4
 800d688:	6018      	str	r0, [r3, #0]
 800d68a:	062e      	lsls	r6, r5, #24
 800d68c:	d501      	bpl.n	800d692 <_printf_i+0xba>
 800d68e:	680d      	ldr	r5, [r1, #0]
 800d690:	e003      	b.n	800d69a <_printf_i+0xc2>
 800d692:	066d      	lsls	r5, r5, #25
 800d694:	d5fb      	bpl.n	800d68e <_printf_i+0xb6>
 800d696:	680d      	ldr	r5, [r1, #0]
 800d698:	b2ad      	uxth	r5, r5
 800d69a:	4b56      	ldr	r3, [pc, #344]	; (800d7f4 <_printf_i+0x21c>)
 800d69c:	2708      	movs	r7, #8
 800d69e:	9303      	str	r3, [sp, #12]
 800d6a0:	2a6f      	cmp	r2, #111	; 0x6f
 800d6a2:	d000      	beq.n	800d6a6 <_printf_i+0xce>
 800d6a4:	3702      	adds	r7, #2
 800d6a6:	0023      	movs	r3, r4
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	3343      	adds	r3, #67	; 0x43
 800d6ac:	701a      	strb	r2, [r3, #0]
 800d6ae:	6863      	ldr	r3, [r4, #4]
 800d6b0:	60a3      	str	r3, [r4, #8]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	db03      	blt.n	800d6be <_printf_i+0xe6>
 800d6b6:	2204      	movs	r2, #4
 800d6b8:	6821      	ldr	r1, [r4, #0]
 800d6ba:	4391      	bics	r1, r2
 800d6bc:	6021      	str	r1, [r4, #0]
 800d6be:	2d00      	cmp	r5, #0
 800d6c0:	d102      	bne.n	800d6c8 <_printf_i+0xf0>
 800d6c2:	9e04      	ldr	r6, [sp, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00c      	beq.n	800d6e2 <_printf_i+0x10a>
 800d6c8:	9e04      	ldr	r6, [sp, #16]
 800d6ca:	0028      	movs	r0, r5
 800d6cc:	0039      	movs	r1, r7
 800d6ce:	f7f2 fdb9 	bl	8000244 <__aeabi_uidivmod>
 800d6d2:	9b03      	ldr	r3, [sp, #12]
 800d6d4:	3e01      	subs	r6, #1
 800d6d6:	5c5b      	ldrb	r3, [r3, r1]
 800d6d8:	7033      	strb	r3, [r6, #0]
 800d6da:	002b      	movs	r3, r5
 800d6dc:	0005      	movs	r5, r0
 800d6de:	429f      	cmp	r7, r3
 800d6e0:	d9f3      	bls.n	800d6ca <_printf_i+0xf2>
 800d6e2:	2f08      	cmp	r7, #8
 800d6e4:	d109      	bne.n	800d6fa <_printf_i+0x122>
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	07db      	lsls	r3, r3, #31
 800d6ea:	d506      	bpl.n	800d6fa <_printf_i+0x122>
 800d6ec:	6863      	ldr	r3, [r4, #4]
 800d6ee:	6922      	ldr	r2, [r4, #16]
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	dc02      	bgt.n	800d6fa <_printf_i+0x122>
 800d6f4:	2330      	movs	r3, #48	; 0x30
 800d6f6:	3e01      	subs	r6, #1
 800d6f8:	7033      	strb	r3, [r6, #0]
 800d6fa:	9b04      	ldr	r3, [sp, #16]
 800d6fc:	1b9b      	subs	r3, r3, r6
 800d6fe:	6123      	str	r3, [r4, #16]
 800d700:	9b07      	ldr	r3, [sp, #28]
 800d702:	0021      	movs	r1, r4
 800d704:	9300      	str	r3, [sp, #0]
 800d706:	9805      	ldr	r0, [sp, #20]
 800d708:	9b06      	ldr	r3, [sp, #24]
 800d70a:	aa09      	add	r2, sp, #36	; 0x24
 800d70c:	f7ff fef4 	bl	800d4f8 <_printf_common>
 800d710:	1c43      	adds	r3, r0, #1
 800d712:	d14c      	bne.n	800d7ae <_printf_i+0x1d6>
 800d714:	2001      	movs	r0, #1
 800d716:	4240      	negs	r0, r0
 800d718:	b00b      	add	sp, #44	; 0x2c
 800d71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d71c:	3145      	adds	r1, #69	; 0x45
 800d71e:	700a      	strb	r2, [r1, #0]
 800d720:	4a34      	ldr	r2, [pc, #208]	; (800d7f4 <_printf_i+0x21c>)
 800d722:	9203      	str	r2, [sp, #12]
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	6821      	ldr	r1, [r4, #0]
 800d728:	ca20      	ldmia	r2!, {r5}
 800d72a:	601a      	str	r2, [r3, #0]
 800d72c:	0608      	lsls	r0, r1, #24
 800d72e:	d516      	bpl.n	800d75e <_printf_i+0x186>
 800d730:	07cb      	lsls	r3, r1, #31
 800d732:	d502      	bpl.n	800d73a <_printf_i+0x162>
 800d734:	2320      	movs	r3, #32
 800d736:	4319      	orrs	r1, r3
 800d738:	6021      	str	r1, [r4, #0]
 800d73a:	2710      	movs	r7, #16
 800d73c:	2d00      	cmp	r5, #0
 800d73e:	d1b2      	bne.n	800d6a6 <_printf_i+0xce>
 800d740:	2320      	movs	r3, #32
 800d742:	6822      	ldr	r2, [r4, #0]
 800d744:	439a      	bics	r2, r3
 800d746:	6022      	str	r2, [r4, #0]
 800d748:	e7ad      	b.n	800d6a6 <_printf_i+0xce>
 800d74a:	2220      	movs	r2, #32
 800d74c:	6809      	ldr	r1, [r1, #0]
 800d74e:	430a      	orrs	r2, r1
 800d750:	6022      	str	r2, [r4, #0]
 800d752:	0022      	movs	r2, r4
 800d754:	2178      	movs	r1, #120	; 0x78
 800d756:	3245      	adds	r2, #69	; 0x45
 800d758:	7011      	strb	r1, [r2, #0]
 800d75a:	4a27      	ldr	r2, [pc, #156]	; (800d7f8 <_printf_i+0x220>)
 800d75c:	e7e1      	b.n	800d722 <_printf_i+0x14a>
 800d75e:	0648      	lsls	r0, r1, #25
 800d760:	d5e6      	bpl.n	800d730 <_printf_i+0x158>
 800d762:	b2ad      	uxth	r5, r5
 800d764:	e7e4      	b.n	800d730 <_printf_i+0x158>
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	680d      	ldr	r5, [r1, #0]
 800d76a:	1d10      	adds	r0, r2, #4
 800d76c:	6949      	ldr	r1, [r1, #20]
 800d76e:	6018      	str	r0, [r3, #0]
 800d770:	6813      	ldr	r3, [r2, #0]
 800d772:	062e      	lsls	r6, r5, #24
 800d774:	d501      	bpl.n	800d77a <_printf_i+0x1a2>
 800d776:	6019      	str	r1, [r3, #0]
 800d778:	e002      	b.n	800d780 <_printf_i+0x1a8>
 800d77a:	066d      	lsls	r5, r5, #25
 800d77c:	d5fb      	bpl.n	800d776 <_printf_i+0x19e>
 800d77e:	8019      	strh	r1, [r3, #0]
 800d780:	2300      	movs	r3, #0
 800d782:	9e04      	ldr	r6, [sp, #16]
 800d784:	6123      	str	r3, [r4, #16]
 800d786:	e7bb      	b.n	800d700 <_printf_i+0x128>
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	1d11      	adds	r1, r2, #4
 800d78c:	6019      	str	r1, [r3, #0]
 800d78e:	6816      	ldr	r6, [r2, #0]
 800d790:	2100      	movs	r1, #0
 800d792:	0030      	movs	r0, r6
 800d794:	6862      	ldr	r2, [r4, #4]
 800d796:	f000 ff0d 	bl	800e5b4 <memchr>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d001      	beq.n	800d7a2 <_printf_i+0x1ca>
 800d79e:	1b80      	subs	r0, r0, r6
 800d7a0:	6060      	str	r0, [r4, #4]
 800d7a2:	6863      	ldr	r3, [r4, #4]
 800d7a4:	6123      	str	r3, [r4, #16]
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	9a04      	ldr	r2, [sp, #16]
 800d7aa:	7013      	strb	r3, [r2, #0]
 800d7ac:	e7a8      	b.n	800d700 <_printf_i+0x128>
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	0032      	movs	r2, r6
 800d7b2:	9906      	ldr	r1, [sp, #24]
 800d7b4:	9805      	ldr	r0, [sp, #20]
 800d7b6:	9d07      	ldr	r5, [sp, #28]
 800d7b8:	47a8      	blx	r5
 800d7ba:	1c43      	adds	r3, r0, #1
 800d7bc:	d0aa      	beq.n	800d714 <_printf_i+0x13c>
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	079b      	lsls	r3, r3, #30
 800d7c2:	d415      	bmi.n	800d7f0 <_printf_i+0x218>
 800d7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c6:	68e0      	ldr	r0, [r4, #12]
 800d7c8:	4298      	cmp	r0, r3
 800d7ca:	daa5      	bge.n	800d718 <_printf_i+0x140>
 800d7cc:	0018      	movs	r0, r3
 800d7ce:	e7a3      	b.n	800d718 <_printf_i+0x140>
 800d7d0:	0022      	movs	r2, r4
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	9906      	ldr	r1, [sp, #24]
 800d7d6:	9805      	ldr	r0, [sp, #20]
 800d7d8:	9e07      	ldr	r6, [sp, #28]
 800d7da:	3219      	adds	r2, #25
 800d7dc:	47b0      	blx	r6
 800d7de:	1c43      	adds	r3, r0, #1
 800d7e0:	d098      	beq.n	800d714 <_printf_i+0x13c>
 800d7e2:	3501      	adds	r5, #1
 800d7e4:	68e3      	ldr	r3, [r4, #12]
 800d7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7e8:	1a9b      	subs	r3, r3, r2
 800d7ea:	42ab      	cmp	r3, r5
 800d7ec:	dcf0      	bgt.n	800d7d0 <_printf_i+0x1f8>
 800d7ee:	e7e9      	b.n	800d7c4 <_printf_i+0x1ec>
 800d7f0:	2500      	movs	r5, #0
 800d7f2:	e7f7      	b.n	800d7e4 <_printf_i+0x20c>
 800d7f4:	0801017e 	.word	0x0801017e
 800d7f8:	0801018f 	.word	0x0801018f

0800d7fc <_sbrk_r>:
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	b570      	push	{r4, r5, r6, lr}
 800d800:	4d06      	ldr	r5, [pc, #24]	; (800d81c <_sbrk_r+0x20>)
 800d802:	0004      	movs	r4, r0
 800d804:	0008      	movs	r0, r1
 800d806:	602b      	str	r3, [r5, #0]
 800d808:	f7f8 fe62 	bl	80064d0 <_sbrk>
 800d80c:	1c43      	adds	r3, r0, #1
 800d80e:	d103      	bne.n	800d818 <_sbrk_r+0x1c>
 800d810:	682b      	ldr	r3, [r5, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d000      	beq.n	800d818 <_sbrk_r+0x1c>
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	bd70      	pop	{r4, r5, r6, pc}
 800d81a:	46c0      	nop			; (mov r8, r8)
 800d81c:	200009d0 	.word	0x200009d0

0800d820 <siprintf>:
 800d820:	b40e      	push	{r1, r2, r3}
 800d822:	b500      	push	{lr}
 800d824:	490b      	ldr	r1, [pc, #44]	; (800d854 <siprintf+0x34>)
 800d826:	b09c      	sub	sp, #112	; 0x70
 800d828:	ab1d      	add	r3, sp, #116	; 0x74
 800d82a:	9002      	str	r0, [sp, #8]
 800d82c:	9006      	str	r0, [sp, #24]
 800d82e:	9107      	str	r1, [sp, #28]
 800d830:	9104      	str	r1, [sp, #16]
 800d832:	4809      	ldr	r0, [pc, #36]	; (800d858 <siprintf+0x38>)
 800d834:	4909      	ldr	r1, [pc, #36]	; (800d85c <siprintf+0x3c>)
 800d836:	cb04      	ldmia	r3!, {r2}
 800d838:	9105      	str	r1, [sp, #20]
 800d83a:	6800      	ldr	r0, [r0, #0]
 800d83c:	a902      	add	r1, sp, #8
 800d83e:	9301      	str	r3, [sp, #4]
 800d840:	f001 fafe 	bl	800ee40 <_svfiprintf_r>
 800d844:	2300      	movs	r3, #0
 800d846:	9a02      	ldr	r2, [sp, #8]
 800d848:	7013      	strb	r3, [r2, #0]
 800d84a:	b01c      	add	sp, #112	; 0x70
 800d84c:	bc08      	pop	{r3}
 800d84e:	b003      	add	sp, #12
 800d850:	4718      	bx	r3
 800d852:	46c0      	nop			; (mov r8, r8)
 800d854:	7fffffff 	.word	0x7fffffff
 800d858:	20000018 	.word	0x20000018
 800d85c:	ffff0208 	.word	0xffff0208

0800d860 <quorem>:
 800d860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d862:	0006      	movs	r6, r0
 800d864:	690b      	ldr	r3, [r1, #16]
 800d866:	6932      	ldr	r2, [r6, #16]
 800d868:	b087      	sub	sp, #28
 800d86a:	2000      	movs	r0, #0
 800d86c:	9103      	str	r1, [sp, #12]
 800d86e:	429a      	cmp	r2, r3
 800d870:	db65      	blt.n	800d93e <quorem+0xde>
 800d872:	3b01      	subs	r3, #1
 800d874:	009c      	lsls	r4, r3, #2
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	000b      	movs	r3, r1
 800d87a:	3314      	adds	r3, #20
 800d87c:	9305      	str	r3, [sp, #20]
 800d87e:	191b      	adds	r3, r3, r4
 800d880:	9304      	str	r3, [sp, #16]
 800d882:	0033      	movs	r3, r6
 800d884:	3314      	adds	r3, #20
 800d886:	9302      	str	r3, [sp, #8]
 800d888:	191c      	adds	r4, r3, r4
 800d88a:	9b04      	ldr	r3, [sp, #16]
 800d88c:	6827      	ldr	r7, [r4, #0]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	0038      	movs	r0, r7
 800d892:	1c5d      	adds	r5, r3, #1
 800d894:	0029      	movs	r1, r5
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	f7f2 fc4e 	bl	8000138 <__udivsi3>
 800d89c:	9001      	str	r0, [sp, #4]
 800d89e:	42af      	cmp	r7, r5
 800d8a0:	d324      	bcc.n	800d8ec <quorem+0x8c>
 800d8a2:	2500      	movs	r5, #0
 800d8a4:	46ac      	mov	ip, r5
 800d8a6:	9802      	ldr	r0, [sp, #8]
 800d8a8:	9f05      	ldr	r7, [sp, #20]
 800d8aa:	cf08      	ldmia	r7!, {r3}
 800d8ac:	9a01      	ldr	r2, [sp, #4]
 800d8ae:	b299      	uxth	r1, r3
 800d8b0:	4351      	muls	r1, r2
 800d8b2:	0c1b      	lsrs	r3, r3, #16
 800d8b4:	4353      	muls	r3, r2
 800d8b6:	1949      	adds	r1, r1, r5
 800d8b8:	0c0a      	lsrs	r2, r1, #16
 800d8ba:	189b      	adds	r3, r3, r2
 800d8bc:	6802      	ldr	r2, [r0, #0]
 800d8be:	b289      	uxth	r1, r1
 800d8c0:	b292      	uxth	r2, r2
 800d8c2:	4462      	add	r2, ip
 800d8c4:	1a52      	subs	r2, r2, r1
 800d8c6:	6801      	ldr	r1, [r0, #0]
 800d8c8:	0c1d      	lsrs	r5, r3, #16
 800d8ca:	0c09      	lsrs	r1, r1, #16
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	1acb      	subs	r3, r1, r3
 800d8d0:	1411      	asrs	r1, r2, #16
 800d8d2:	185b      	adds	r3, r3, r1
 800d8d4:	1419      	asrs	r1, r3, #16
 800d8d6:	b292      	uxth	r2, r2
 800d8d8:	041b      	lsls	r3, r3, #16
 800d8da:	431a      	orrs	r2, r3
 800d8dc:	9b04      	ldr	r3, [sp, #16]
 800d8de:	468c      	mov	ip, r1
 800d8e0:	c004      	stmia	r0!, {r2}
 800d8e2:	42bb      	cmp	r3, r7
 800d8e4:	d2e1      	bcs.n	800d8aa <quorem+0x4a>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d030      	beq.n	800d94e <quorem+0xee>
 800d8ec:	0030      	movs	r0, r6
 800d8ee:	9903      	ldr	r1, [sp, #12]
 800d8f0:	f001 f900 	bl	800eaf4 <__mcmp>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	db21      	blt.n	800d93c <quorem+0xdc>
 800d8f8:	0030      	movs	r0, r6
 800d8fa:	2400      	movs	r4, #0
 800d8fc:	9b01      	ldr	r3, [sp, #4]
 800d8fe:	9903      	ldr	r1, [sp, #12]
 800d900:	3301      	adds	r3, #1
 800d902:	9301      	str	r3, [sp, #4]
 800d904:	3014      	adds	r0, #20
 800d906:	3114      	adds	r1, #20
 800d908:	6803      	ldr	r3, [r0, #0]
 800d90a:	c920      	ldmia	r1!, {r5}
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	1914      	adds	r4, r2, r4
 800d910:	b2aa      	uxth	r2, r5
 800d912:	1aa2      	subs	r2, r4, r2
 800d914:	0c1b      	lsrs	r3, r3, #16
 800d916:	0c2d      	lsrs	r5, r5, #16
 800d918:	1414      	asrs	r4, r2, #16
 800d91a:	1b5b      	subs	r3, r3, r5
 800d91c:	191b      	adds	r3, r3, r4
 800d91e:	141c      	asrs	r4, r3, #16
 800d920:	b292      	uxth	r2, r2
 800d922:	041b      	lsls	r3, r3, #16
 800d924:	4313      	orrs	r3, r2
 800d926:	c008      	stmia	r0!, {r3}
 800d928:	9b04      	ldr	r3, [sp, #16]
 800d92a:	428b      	cmp	r3, r1
 800d92c:	d2ec      	bcs.n	800d908 <quorem+0xa8>
 800d92e:	9b00      	ldr	r3, [sp, #0]
 800d930:	9a02      	ldr	r2, [sp, #8]
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	18d3      	adds	r3, r2, r3
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	2a00      	cmp	r2, #0
 800d93a:	d015      	beq.n	800d968 <quorem+0x108>
 800d93c:	9801      	ldr	r0, [sp, #4]
 800d93e:	b007      	add	sp, #28
 800d940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d106      	bne.n	800d956 <quorem+0xf6>
 800d948:	9b00      	ldr	r3, [sp, #0]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	9300      	str	r3, [sp, #0]
 800d94e:	9b02      	ldr	r3, [sp, #8]
 800d950:	3c04      	subs	r4, #4
 800d952:	42a3      	cmp	r3, r4
 800d954:	d3f5      	bcc.n	800d942 <quorem+0xe2>
 800d956:	9b00      	ldr	r3, [sp, #0]
 800d958:	6133      	str	r3, [r6, #16]
 800d95a:	e7c7      	b.n	800d8ec <quorem+0x8c>
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	2a00      	cmp	r2, #0
 800d960:	d106      	bne.n	800d970 <quorem+0x110>
 800d962:	9a00      	ldr	r2, [sp, #0]
 800d964:	3a01      	subs	r2, #1
 800d966:	9200      	str	r2, [sp, #0]
 800d968:	9a02      	ldr	r2, [sp, #8]
 800d96a:	3b04      	subs	r3, #4
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d3f5      	bcc.n	800d95c <quorem+0xfc>
 800d970:	9b00      	ldr	r3, [sp, #0]
 800d972:	6133      	str	r3, [r6, #16]
 800d974:	e7e2      	b.n	800d93c <quorem+0xdc>
	...

0800d978 <_dtoa_r>:
 800d978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d97a:	b09d      	sub	sp, #116	; 0x74
 800d97c:	9202      	str	r2, [sp, #8]
 800d97e:	9303      	str	r3, [sp, #12]
 800d980:	9b02      	ldr	r3, [sp, #8]
 800d982:	9c03      	ldr	r4, [sp, #12]
 800d984:	9308      	str	r3, [sp, #32]
 800d986:	9409      	str	r4, [sp, #36]	; 0x24
 800d988:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d98a:	0007      	movs	r7, r0
 800d98c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800d98e:	2c00      	cmp	r4, #0
 800d990:	d10e      	bne.n	800d9b0 <_dtoa_r+0x38>
 800d992:	2010      	movs	r0, #16
 800d994:	f7ff f9b8 	bl	800cd08 <malloc>
 800d998:	1e02      	subs	r2, r0, #0
 800d99a:	6278      	str	r0, [r7, #36]	; 0x24
 800d99c:	d104      	bne.n	800d9a8 <_dtoa_r+0x30>
 800d99e:	21ea      	movs	r1, #234	; 0xea
 800d9a0:	4bc7      	ldr	r3, [pc, #796]	; (800dcc0 <_dtoa_r+0x348>)
 800d9a2:	48c8      	ldr	r0, [pc, #800]	; (800dcc4 <_dtoa_r+0x34c>)
 800d9a4:	f001 fb4c 	bl	800f040 <__assert_func>
 800d9a8:	6044      	str	r4, [r0, #4]
 800d9aa:	6084      	str	r4, [r0, #8]
 800d9ac:	6004      	str	r4, [r0, #0]
 800d9ae:	60c4      	str	r4, [r0, #12]
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	6819      	ldr	r1, [r3, #0]
 800d9b4:	2900      	cmp	r1, #0
 800d9b6:	d00a      	beq.n	800d9ce <_dtoa_r+0x56>
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	4093      	lsls	r3, r2
 800d9be:	604a      	str	r2, [r1, #4]
 800d9c0:	608b      	str	r3, [r1, #8]
 800d9c2:	0038      	movs	r0, r7
 800d9c4:	f000 fe56 	bl	800e674 <_Bfree>
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	601a      	str	r2, [r3, #0]
 800d9ce:	9b03      	ldr	r3, [sp, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	da20      	bge.n	800da16 <_dtoa_r+0x9e>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	602b      	str	r3, [r5, #0]
 800d9d8:	9b03      	ldr	r3, [sp, #12]
 800d9da:	005b      	lsls	r3, r3, #1
 800d9dc:	085b      	lsrs	r3, r3, #1
 800d9de:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d9e2:	4bb9      	ldr	r3, [pc, #740]	; (800dcc8 <_dtoa_r+0x350>)
 800d9e4:	4ab8      	ldr	r2, [pc, #736]	; (800dcc8 <_dtoa_r+0x350>)
 800d9e6:	402b      	ands	r3, r5
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d117      	bne.n	800da1c <_dtoa_r+0xa4>
 800d9ec:	4bb7      	ldr	r3, [pc, #732]	; (800dccc <_dtoa_r+0x354>)
 800d9ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d9f0:	0328      	lsls	r0, r5, #12
 800d9f2:	6013      	str	r3, [r2, #0]
 800d9f4:	9b02      	ldr	r3, [sp, #8]
 800d9f6:	0b00      	lsrs	r0, r0, #12
 800d9f8:	4318      	orrs	r0, r3
 800d9fa:	d101      	bne.n	800da00 <_dtoa_r+0x88>
 800d9fc:	f000 fdbf 	bl	800e57e <_dtoa_r+0xc06>
 800da00:	48b3      	ldr	r0, [pc, #716]	; (800dcd0 <_dtoa_r+0x358>)
 800da02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da04:	9006      	str	r0, [sp, #24]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d002      	beq.n	800da10 <_dtoa_r+0x98>
 800da0a:	4bb2      	ldr	r3, [pc, #712]	; (800dcd4 <_dtoa_r+0x35c>)
 800da0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800da0e:	6013      	str	r3, [r2, #0]
 800da10:	9806      	ldr	r0, [sp, #24]
 800da12:	b01d      	add	sp, #116	; 0x74
 800da14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da16:	2300      	movs	r3, #0
 800da18:	602b      	str	r3, [r5, #0]
 800da1a:	e7e1      	b.n	800d9e0 <_dtoa_r+0x68>
 800da1c:	9b08      	ldr	r3, [sp, #32]
 800da1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800da20:	9312      	str	r3, [sp, #72]	; 0x48
 800da22:	9413      	str	r4, [sp, #76]	; 0x4c
 800da24:	9812      	ldr	r0, [sp, #72]	; 0x48
 800da26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800da28:	2200      	movs	r2, #0
 800da2a:	2300      	movs	r3, #0
 800da2c:	f7f2 fd0a 	bl	8000444 <__aeabi_dcmpeq>
 800da30:	1e04      	subs	r4, r0, #0
 800da32:	d009      	beq.n	800da48 <_dtoa_r+0xd0>
 800da34:	2301      	movs	r3, #1
 800da36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800da38:	6013      	str	r3, [r2, #0]
 800da3a:	4ba7      	ldr	r3, [pc, #668]	; (800dcd8 <_dtoa_r+0x360>)
 800da3c:	9306      	str	r3, [sp, #24]
 800da3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da40:	2b00      	cmp	r3, #0
 800da42:	d0e5      	beq.n	800da10 <_dtoa_r+0x98>
 800da44:	4ba5      	ldr	r3, [pc, #660]	; (800dcdc <_dtoa_r+0x364>)
 800da46:	e7e1      	b.n	800da0c <_dtoa_r+0x94>
 800da48:	ab1a      	add	r3, sp, #104	; 0x68
 800da4a:	9301      	str	r3, [sp, #4]
 800da4c:	ab1b      	add	r3, sp, #108	; 0x6c
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	0038      	movs	r0, r7
 800da52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da56:	f001 f901 	bl	800ec5c <__d2b>
 800da5a:	006e      	lsls	r6, r5, #1
 800da5c:	9005      	str	r0, [sp, #20]
 800da5e:	0d76      	lsrs	r6, r6, #21
 800da60:	d100      	bne.n	800da64 <_dtoa_r+0xec>
 800da62:	e07c      	b.n	800db5e <_dtoa_r+0x1e6>
 800da64:	9812      	ldr	r0, [sp, #72]	; 0x48
 800da66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800da68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da6a:	4a9d      	ldr	r2, [pc, #628]	; (800dce0 <_dtoa_r+0x368>)
 800da6c:	031b      	lsls	r3, r3, #12
 800da6e:	0b1b      	lsrs	r3, r3, #12
 800da70:	431a      	orrs	r2, r3
 800da72:	0011      	movs	r1, r2
 800da74:	4b9b      	ldr	r3, [pc, #620]	; (800dce4 <_dtoa_r+0x36c>)
 800da76:	9418      	str	r4, [sp, #96]	; 0x60
 800da78:	18f6      	adds	r6, r6, r3
 800da7a:	2200      	movs	r2, #0
 800da7c:	4b9a      	ldr	r3, [pc, #616]	; (800dce8 <_dtoa_r+0x370>)
 800da7e:	f7f4 fa71 	bl	8001f64 <__aeabi_dsub>
 800da82:	4a9a      	ldr	r2, [pc, #616]	; (800dcec <_dtoa_r+0x374>)
 800da84:	4b9a      	ldr	r3, [pc, #616]	; (800dcf0 <_dtoa_r+0x378>)
 800da86:	f7f4 f801 	bl	8001a8c <__aeabi_dmul>
 800da8a:	4a9a      	ldr	r2, [pc, #616]	; (800dcf4 <_dtoa_r+0x37c>)
 800da8c:	4b9a      	ldr	r3, [pc, #616]	; (800dcf8 <_dtoa_r+0x380>)
 800da8e:	f7f3 f8bf 	bl	8000c10 <__aeabi_dadd>
 800da92:	0004      	movs	r4, r0
 800da94:	0030      	movs	r0, r6
 800da96:	000d      	movs	r5, r1
 800da98:	f7f4 fe4a 	bl	8002730 <__aeabi_i2d>
 800da9c:	4a97      	ldr	r2, [pc, #604]	; (800dcfc <_dtoa_r+0x384>)
 800da9e:	4b98      	ldr	r3, [pc, #608]	; (800dd00 <_dtoa_r+0x388>)
 800daa0:	f7f3 fff4 	bl	8001a8c <__aeabi_dmul>
 800daa4:	0002      	movs	r2, r0
 800daa6:	000b      	movs	r3, r1
 800daa8:	0020      	movs	r0, r4
 800daaa:	0029      	movs	r1, r5
 800daac:	f7f3 f8b0 	bl	8000c10 <__aeabi_dadd>
 800dab0:	0004      	movs	r4, r0
 800dab2:	000d      	movs	r5, r1
 800dab4:	f7f4 fe06 	bl	80026c4 <__aeabi_d2iz>
 800dab8:	2200      	movs	r2, #0
 800daba:	9002      	str	r0, [sp, #8]
 800dabc:	2300      	movs	r3, #0
 800dabe:	0020      	movs	r0, r4
 800dac0:	0029      	movs	r1, r5
 800dac2:	f7f2 fcc5 	bl	8000450 <__aeabi_dcmplt>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d00b      	beq.n	800dae2 <_dtoa_r+0x16a>
 800daca:	9802      	ldr	r0, [sp, #8]
 800dacc:	f7f4 fe30 	bl	8002730 <__aeabi_i2d>
 800dad0:	002b      	movs	r3, r5
 800dad2:	0022      	movs	r2, r4
 800dad4:	f7f2 fcb6 	bl	8000444 <__aeabi_dcmpeq>
 800dad8:	4243      	negs	r3, r0
 800dada:	4158      	adcs	r0, r3
 800dadc:	9b02      	ldr	r3, [sp, #8]
 800dade:	1a1b      	subs	r3, r3, r0
 800dae0:	9302      	str	r3, [sp, #8]
 800dae2:	2301      	movs	r3, #1
 800dae4:	9316      	str	r3, [sp, #88]	; 0x58
 800dae6:	9b02      	ldr	r3, [sp, #8]
 800dae8:	2b16      	cmp	r3, #22
 800daea:	d80f      	bhi.n	800db0c <_dtoa_r+0x194>
 800daec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800daee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800daf0:	00da      	lsls	r2, r3, #3
 800daf2:	4b84      	ldr	r3, [pc, #528]	; (800dd04 <_dtoa_r+0x38c>)
 800daf4:	189b      	adds	r3, r3, r2
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	f7f2 fca9 	bl	8000450 <__aeabi_dcmplt>
 800dafe:	2800      	cmp	r0, #0
 800db00:	d049      	beq.n	800db96 <_dtoa_r+0x21e>
 800db02:	9b02      	ldr	r3, [sp, #8]
 800db04:	3b01      	subs	r3, #1
 800db06:	9302      	str	r3, [sp, #8]
 800db08:	2300      	movs	r3, #0
 800db0a:	9316      	str	r3, [sp, #88]	; 0x58
 800db0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800db0e:	1b9e      	subs	r6, r3, r6
 800db10:	2300      	movs	r3, #0
 800db12:	930a      	str	r3, [sp, #40]	; 0x28
 800db14:	0033      	movs	r3, r6
 800db16:	3b01      	subs	r3, #1
 800db18:	930d      	str	r3, [sp, #52]	; 0x34
 800db1a:	d504      	bpl.n	800db26 <_dtoa_r+0x1ae>
 800db1c:	2301      	movs	r3, #1
 800db1e:	1b9b      	subs	r3, r3, r6
 800db20:	930a      	str	r3, [sp, #40]	; 0x28
 800db22:	2300      	movs	r3, #0
 800db24:	930d      	str	r3, [sp, #52]	; 0x34
 800db26:	9b02      	ldr	r3, [sp, #8]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	db36      	blt.n	800db9a <_dtoa_r+0x222>
 800db2c:	9a02      	ldr	r2, [sp, #8]
 800db2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db30:	4694      	mov	ip, r2
 800db32:	4463      	add	r3, ip
 800db34:	930d      	str	r3, [sp, #52]	; 0x34
 800db36:	2300      	movs	r3, #0
 800db38:	9215      	str	r2, [sp, #84]	; 0x54
 800db3a:	930e      	str	r3, [sp, #56]	; 0x38
 800db3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db3e:	2401      	movs	r4, #1
 800db40:	2b09      	cmp	r3, #9
 800db42:	d864      	bhi.n	800dc0e <_dtoa_r+0x296>
 800db44:	2b05      	cmp	r3, #5
 800db46:	dd02      	ble.n	800db4e <_dtoa_r+0x1d6>
 800db48:	2400      	movs	r4, #0
 800db4a:	3b04      	subs	r3, #4
 800db4c:	9322      	str	r3, [sp, #136]	; 0x88
 800db4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db50:	1e98      	subs	r0, r3, #2
 800db52:	2803      	cmp	r0, #3
 800db54:	d864      	bhi.n	800dc20 <_dtoa_r+0x2a8>
 800db56:	f7f2 fadb 	bl	8000110 <__gnu_thumb1_case_uqi>
 800db5a:	3829      	.short	0x3829
 800db5c:	5836      	.short	0x5836
 800db5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800db60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800db62:	189e      	adds	r6, r3, r2
 800db64:	4b68      	ldr	r3, [pc, #416]	; (800dd08 <_dtoa_r+0x390>)
 800db66:	18f2      	adds	r2, r6, r3
 800db68:	2a20      	cmp	r2, #32
 800db6a:	dd0f      	ble.n	800db8c <_dtoa_r+0x214>
 800db6c:	2340      	movs	r3, #64	; 0x40
 800db6e:	1a9b      	subs	r3, r3, r2
 800db70:	409d      	lsls	r5, r3
 800db72:	4b66      	ldr	r3, [pc, #408]	; (800dd0c <_dtoa_r+0x394>)
 800db74:	9802      	ldr	r0, [sp, #8]
 800db76:	18f3      	adds	r3, r6, r3
 800db78:	40d8      	lsrs	r0, r3
 800db7a:	4328      	orrs	r0, r5
 800db7c:	f7f4 fe08 	bl	8002790 <__aeabi_ui2d>
 800db80:	2301      	movs	r3, #1
 800db82:	4c63      	ldr	r4, [pc, #396]	; (800dd10 <_dtoa_r+0x398>)
 800db84:	3e01      	subs	r6, #1
 800db86:	1909      	adds	r1, r1, r4
 800db88:	9318      	str	r3, [sp, #96]	; 0x60
 800db8a:	e776      	b.n	800da7a <_dtoa_r+0x102>
 800db8c:	2320      	movs	r3, #32
 800db8e:	9802      	ldr	r0, [sp, #8]
 800db90:	1a9b      	subs	r3, r3, r2
 800db92:	4098      	lsls	r0, r3
 800db94:	e7f2      	b.n	800db7c <_dtoa_r+0x204>
 800db96:	9016      	str	r0, [sp, #88]	; 0x58
 800db98:	e7b8      	b.n	800db0c <_dtoa_r+0x194>
 800db9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db9c:	9a02      	ldr	r2, [sp, #8]
 800db9e:	1a9b      	subs	r3, r3, r2
 800dba0:	930a      	str	r3, [sp, #40]	; 0x28
 800dba2:	4253      	negs	r3, r2
 800dba4:	930e      	str	r3, [sp, #56]	; 0x38
 800dba6:	2300      	movs	r3, #0
 800dba8:	9315      	str	r3, [sp, #84]	; 0x54
 800dbaa:	e7c7      	b.n	800db3c <_dtoa_r+0x1c4>
 800dbac:	2300      	movs	r3, #0
 800dbae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dbb2:	930c      	str	r3, [sp, #48]	; 0x30
 800dbb4:	9307      	str	r3, [sp, #28]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	dc13      	bgt.n	800dbe2 <_dtoa_r+0x26a>
 800dbba:	2301      	movs	r3, #1
 800dbbc:	001a      	movs	r2, r3
 800dbbe:	930c      	str	r3, [sp, #48]	; 0x30
 800dbc0:	9307      	str	r3, [sp, #28]
 800dbc2:	9223      	str	r2, [sp, #140]	; 0x8c
 800dbc4:	e00d      	b.n	800dbe2 <_dtoa_r+0x26a>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e7f1      	b.n	800dbae <_dtoa_r+0x236>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800dbce:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbd0:	4694      	mov	ip, r2
 800dbd2:	9b02      	ldr	r3, [sp, #8]
 800dbd4:	4463      	add	r3, ip
 800dbd6:	930c      	str	r3, [sp, #48]	; 0x30
 800dbd8:	3301      	adds	r3, #1
 800dbda:	9307      	str	r3, [sp, #28]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	dc00      	bgt.n	800dbe2 <_dtoa_r+0x26a>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbe6:	6042      	str	r2, [r0, #4]
 800dbe8:	3204      	adds	r2, #4
 800dbea:	0015      	movs	r5, r2
 800dbec:	3514      	adds	r5, #20
 800dbee:	6841      	ldr	r1, [r0, #4]
 800dbf0:	429d      	cmp	r5, r3
 800dbf2:	d919      	bls.n	800dc28 <_dtoa_r+0x2b0>
 800dbf4:	0038      	movs	r0, r7
 800dbf6:	f000 fcf9 	bl	800e5ec <_Balloc>
 800dbfa:	9006      	str	r0, [sp, #24]
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	d117      	bne.n	800dc30 <_dtoa_r+0x2b8>
 800dc00:	21d5      	movs	r1, #213	; 0xd5
 800dc02:	0002      	movs	r2, r0
 800dc04:	4b43      	ldr	r3, [pc, #268]	; (800dd14 <_dtoa_r+0x39c>)
 800dc06:	0049      	lsls	r1, r1, #1
 800dc08:	e6cb      	b.n	800d9a2 <_dtoa_r+0x2a>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e7de      	b.n	800dbcc <_dtoa_r+0x254>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	940f      	str	r4, [sp, #60]	; 0x3c
 800dc12:	9322      	str	r3, [sp, #136]	; 0x88
 800dc14:	3b01      	subs	r3, #1
 800dc16:	930c      	str	r3, [sp, #48]	; 0x30
 800dc18:	9307      	str	r3, [sp, #28]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	3313      	adds	r3, #19
 800dc1e:	e7d0      	b.n	800dbc2 <_dtoa_r+0x24a>
 800dc20:	2301      	movs	r3, #1
 800dc22:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc24:	3b02      	subs	r3, #2
 800dc26:	e7f6      	b.n	800dc16 <_dtoa_r+0x29e>
 800dc28:	3101      	adds	r1, #1
 800dc2a:	6041      	str	r1, [r0, #4]
 800dc2c:	0052      	lsls	r2, r2, #1
 800dc2e:	e7dc      	b.n	800dbea <_dtoa_r+0x272>
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	9a06      	ldr	r2, [sp, #24]
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	9b07      	ldr	r3, [sp, #28]
 800dc38:	2b0e      	cmp	r3, #14
 800dc3a:	d900      	bls.n	800dc3e <_dtoa_r+0x2c6>
 800dc3c:	e0eb      	b.n	800de16 <_dtoa_r+0x49e>
 800dc3e:	2c00      	cmp	r4, #0
 800dc40:	d100      	bne.n	800dc44 <_dtoa_r+0x2cc>
 800dc42:	e0e8      	b.n	800de16 <_dtoa_r+0x49e>
 800dc44:	9b02      	ldr	r3, [sp, #8]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	dd68      	ble.n	800dd1c <_dtoa_r+0x3a4>
 800dc4a:	001a      	movs	r2, r3
 800dc4c:	210f      	movs	r1, #15
 800dc4e:	4b2d      	ldr	r3, [pc, #180]	; (800dd04 <_dtoa_r+0x38c>)
 800dc50:	400a      	ands	r2, r1
 800dc52:	00d2      	lsls	r2, r2, #3
 800dc54:	189b      	adds	r3, r3, r2
 800dc56:	681d      	ldr	r5, [r3, #0]
 800dc58:	685e      	ldr	r6, [r3, #4]
 800dc5a:	9b02      	ldr	r3, [sp, #8]
 800dc5c:	111c      	asrs	r4, r3, #4
 800dc5e:	2302      	movs	r3, #2
 800dc60:	9310      	str	r3, [sp, #64]	; 0x40
 800dc62:	9b02      	ldr	r3, [sp, #8]
 800dc64:	05db      	lsls	r3, r3, #23
 800dc66:	d50b      	bpl.n	800dc80 <_dtoa_r+0x308>
 800dc68:	4b2b      	ldr	r3, [pc, #172]	; (800dd18 <_dtoa_r+0x3a0>)
 800dc6a:	400c      	ands	r4, r1
 800dc6c:	6a1a      	ldr	r2, [r3, #32]
 800dc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc70:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dc72:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dc74:	f7f3 fb08 	bl	8001288 <__aeabi_ddiv>
 800dc78:	2303      	movs	r3, #3
 800dc7a:	9008      	str	r0, [sp, #32]
 800dc7c:	9109      	str	r1, [sp, #36]	; 0x24
 800dc7e:	9310      	str	r3, [sp, #64]	; 0x40
 800dc80:	4b25      	ldr	r3, [pc, #148]	; (800dd18 <_dtoa_r+0x3a0>)
 800dc82:	9314      	str	r3, [sp, #80]	; 0x50
 800dc84:	2c00      	cmp	r4, #0
 800dc86:	d108      	bne.n	800dc9a <_dtoa_r+0x322>
 800dc88:	9808      	ldr	r0, [sp, #32]
 800dc8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc8c:	002a      	movs	r2, r5
 800dc8e:	0033      	movs	r3, r6
 800dc90:	f7f3 fafa 	bl	8001288 <__aeabi_ddiv>
 800dc94:	9008      	str	r0, [sp, #32]
 800dc96:	9109      	str	r1, [sp, #36]	; 0x24
 800dc98:	e05c      	b.n	800dd54 <_dtoa_r+0x3dc>
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	421c      	tst	r4, r3
 800dc9e:	d00b      	beq.n	800dcb8 <_dtoa_r+0x340>
 800dca0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dca2:	0028      	movs	r0, r5
 800dca4:	3301      	adds	r3, #1
 800dca6:	9310      	str	r3, [sp, #64]	; 0x40
 800dca8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcaa:	0031      	movs	r1, r6
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	f7f3 feec 	bl	8001a8c <__aeabi_dmul>
 800dcb4:	0005      	movs	r5, r0
 800dcb6:	000e      	movs	r6, r1
 800dcb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dcba:	1064      	asrs	r4, r4, #1
 800dcbc:	3308      	adds	r3, #8
 800dcbe:	e7e0      	b.n	800dc82 <_dtoa_r+0x30a>
 800dcc0:	080101ad 	.word	0x080101ad
 800dcc4:	080101c4 	.word	0x080101c4
 800dcc8:	7ff00000 	.word	0x7ff00000
 800dccc:	0000270f 	.word	0x0000270f
 800dcd0:	080101a9 	.word	0x080101a9
 800dcd4:	080101ac 	.word	0x080101ac
 800dcd8:	0801017c 	.word	0x0801017c
 800dcdc:	0801017d 	.word	0x0801017d
 800dce0:	3ff00000 	.word	0x3ff00000
 800dce4:	fffffc01 	.word	0xfffffc01
 800dce8:	3ff80000 	.word	0x3ff80000
 800dcec:	636f4361 	.word	0x636f4361
 800dcf0:	3fd287a7 	.word	0x3fd287a7
 800dcf4:	8b60c8b3 	.word	0x8b60c8b3
 800dcf8:	3fc68a28 	.word	0x3fc68a28
 800dcfc:	509f79fb 	.word	0x509f79fb
 800dd00:	3fd34413 	.word	0x3fd34413
 800dd04:	080102b8 	.word	0x080102b8
 800dd08:	00000432 	.word	0x00000432
 800dd0c:	00000412 	.word	0x00000412
 800dd10:	fe100000 	.word	0xfe100000
 800dd14:	0801021f 	.word	0x0801021f
 800dd18:	08010290 	.word	0x08010290
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	9310      	str	r3, [sp, #64]	; 0x40
 800dd20:	9b02      	ldr	r3, [sp, #8]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d016      	beq.n	800dd54 <_dtoa_r+0x3dc>
 800dd26:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dd28:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dd2a:	425c      	negs	r4, r3
 800dd2c:	230f      	movs	r3, #15
 800dd2e:	4ab6      	ldr	r2, [pc, #728]	; (800e008 <_dtoa_r+0x690>)
 800dd30:	4023      	ands	r3, r4
 800dd32:	00db      	lsls	r3, r3, #3
 800dd34:	18d3      	adds	r3, r2, r3
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f7f3 fea7 	bl	8001a8c <__aeabi_dmul>
 800dd3e:	2601      	movs	r6, #1
 800dd40:	2300      	movs	r3, #0
 800dd42:	9008      	str	r0, [sp, #32]
 800dd44:	9109      	str	r1, [sp, #36]	; 0x24
 800dd46:	4db1      	ldr	r5, [pc, #708]	; (800e00c <_dtoa_r+0x694>)
 800dd48:	1124      	asrs	r4, r4, #4
 800dd4a:	2c00      	cmp	r4, #0
 800dd4c:	d000      	beq.n	800dd50 <_dtoa_r+0x3d8>
 800dd4e:	e094      	b.n	800de7a <_dtoa_r+0x502>
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d19f      	bne.n	800dc94 <_dtoa_r+0x31c>
 800dd54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d100      	bne.n	800dd5c <_dtoa_r+0x3e4>
 800dd5a:	e09b      	b.n	800de94 <_dtoa_r+0x51c>
 800dd5c:	9c08      	ldr	r4, [sp, #32]
 800dd5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd60:	2200      	movs	r2, #0
 800dd62:	0020      	movs	r0, r4
 800dd64:	0029      	movs	r1, r5
 800dd66:	4baa      	ldr	r3, [pc, #680]	; (800e010 <_dtoa_r+0x698>)
 800dd68:	f7f2 fb72 	bl	8000450 <__aeabi_dcmplt>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d100      	bne.n	800dd72 <_dtoa_r+0x3fa>
 800dd70:	e090      	b.n	800de94 <_dtoa_r+0x51c>
 800dd72:	9b07      	ldr	r3, [sp, #28]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d100      	bne.n	800dd7a <_dtoa_r+0x402>
 800dd78:	e08c      	b.n	800de94 <_dtoa_r+0x51c>
 800dd7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	dd46      	ble.n	800de0e <_dtoa_r+0x496>
 800dd80:	9b02      	ldr	r3, [sp, #8]
 800dd82:	2200      	movs	r2, #0
 800dd84:	0020      	movs	r0, r4
 800dd86:	0029      	movs	r1, r5
 800dd88:	1e5e      	subs	r6, r3, #1
 800dd8a:	4ba2      	ldr	r3, [pc, #648]	; (800e014 <_dtoa_r+0x69c>)
 800dd8c:	f7f3 fe7e 	bl	8001a8c <__aeabi_dmul>
 800dd90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd92:	9008      	str	r0, [sp, #32]
 800dd94:	9109      	str	r1, [sp, #36]	; 0x24
 800dd96:	3301      	adds	r3, #1
 800dd98:	9310      	str	r3, [sp, #64]	; 0x40
 800dd9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dd9e:	9c08      	ldr	r4, [sp, #32]
 800dda0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dda2:	9314      	str	r3, [sp, #80]	; 0x50
 800dda4:	f7f4 fcc4 	bl	8002730 <__aeabi_i2d>
 800dda8:	0022      	movs	r2, r4
 800ddaa:	002b      	movs	r3, r5
 800ddac:	f7f3 fe6e 	bl	8001a8c <__aeabi_dmul>
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4b99      	ldr	r3, [pc, #612]	; (800e018 <_dtoa_r+0x6a0>)
 800ddb4:	f7f2 ff2c 	bl	8000c10 <__aeabi_dadd>
 800ddb8:	9010      	str	r0, [sp, #64]	; 0x40
 800ddba:	9111      	str	r1, [sp, #68]	; 0x44
 800ddbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ddbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddc0:	9208      	str	r2, [sp, #32]
 800ddc2:	9309      	str	r3, [sp, #36]	; 0x24
 800ddc4:	4a95      	ldr	r2, [pc, #596]	; (800e01c <_dtoa_r+0x6a4>)
 800ddc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddc8:	4694      	mov	ip, r2
 800ddca:	4463      	add	r3, ip
 800ddcc:	9317      	str	r3, [sp, #92]	; 0x5c
 800ddce:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d161      	bne.n	800de9a <_dtoa_r+0x522>
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	0020      	movs	r0, r4
 800ddda:	0029      	movs	r1, r5
 800dddc:	4b90      	ldr	r3, [pc, #576]	; (800e020 <_dtoa_r+0x6a8>)
 800ddde:	f7f4 f8c1 	bl	8001f64 <__aeabi_dsub>
 800dde2:	9a08      	ldr	r2, [sp, #32]
 800dde4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dde6:	0004      	movs	r4, r0
 800dde8:	000d      	movs	r5, r1
 800ddea:	f7f2 fb45 	bl	8000478 <__aeabi_dcmpgt>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d000      	beq.n	800ddf4 <_dtoa_r+0x47c>
 800ddf2:	e2af      	b.n	800e354 <_dtoa_r+0x9dc>
 800ddf4:	488b      	ldr	r0, [pc, #556]	; (800e024 <_dtoa_r+0x6ac>)
 800ddf6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ddf8:	4684      	mov	ip, r0
 800ddfa:	4461      	add	r1, ip
 800ddfc:	000b      	movs	r3, r1
 800ddfe:	0020      	movs	r0, r4
 800de00:	0029      	movs	r1, r5
 800de02:	9a08      	ldr	r2, [sp, #32]
 800de04:	f7f2 fb24 	bl	8000450 <__aeabi_dcmplt>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d000      	beq.n	800de0e <_dtoa_r+0x496>
 800de0c:	e29f      	b.n	800e34e <_dtoa_r+0x9d6>
 800de0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de10:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800de12:	9308      	str	r3, [sp, #32]
 800de14:	9409      	str	r4, [sp, #36]	; 0x24
 800de16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800de18:	2b00      	cmp	r3, #0
 800de1a:	da00      	bge.n	800de1e <_dtoa_r+0x4a6>
 800de1c:	e172      	b.n	800e104 <_dtoa_r+0x78c>
 800de1e:	9a02      	ldr	r2, [sp, #8]
 800de20:	2a0e      	cmp	r2, #14
 800de22:	dd00      	ble.n	800de26 <_dtoa_r+0x4ae>
 800de24:	e16e      	b.n	800e104 <_dtoa_r+0x78c>
 800de26:	4b78      	ldr	r3, [pc, #480]	; (800e008 <_dtoa_r+0x690>)
 800de28:	00d2      	lsls	r2, r2, #3
 800de2a:	189b      	adds	r3, r3, r2
 800de2c:	685c      	ldr	r4, [r3, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	930a      	str	r3, [sp, #40]	; 0x28
 800de32:	940b      	str	r4, [sp, #44]	; 0x2c
 800de34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800de36:	2b00      	cmp	r3, #0
 800de38:	db00      	blt.n	800de3c <_dtoa_r+0x4c4>
 800de3a:	e0f7      	b.n	800e02c <_dtoa_r+0x6b4>
 800de3c:	9b07      	ldr	r3, [sp, #28]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	dd00      	ble.n	800de44 <_dtoa_r+0x4cc>
 800de42:	e0f3      	b.n	800e02c <_dtoa_r+0x6b4>
 800de44:	d000      	beq.n	800de48 <_dtoa_r+0x4d0>
 800de46:	e282      	b.n	800e34e <_dtoa_r+0x9d6>
 800de48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de4c:	2200      	movs	r2, #0
 800de4e:	4b74      	ldr	r3, [pc, #464]	; (800e020 <_dtoa_r+0x6a8>)
 800de50:	f7f3 fe1c 	bl	8001a8c <__aeabi_dmul>
 800de54:	9a08      	ldr	r2, [sp, #32]
 800de56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de58:	f7f2 fb18 	bl	800048c <__aeabi_dcmpge>
 800de5c:	9e07      	ldr	r6, [sp, #28]
 800de5e:	0035      	movs	r5, r6
 800de60:	2800      	cmp	r0, #0
 800de62:	d000      	beq.n	800de66 <_dtoa_r+0x4ee>
 800de64:	e259      	b.n	800e31a <_dtoa_r+0x9a2>
 800de66:	9b06      	ldr	r3, [sp, #24]
 800de68:	9a06      	ldr	r2, [sp, #24]
 800de6a:	3301      	adds	r3, #1
 800de6c:	9308      	str	r3, [sp, #32]
 800de6e:	2331      	movs	r3, #49	; 0x31
 800de70:	7013      	strb	r3, [r2, #0]
 800de72:	9b02      	ldr	r3, [sp, #8]
 800de74:	3301      	adds	r3, #1
 800de76:	9302      	str	r3, [sp, #8]
 800de78:	e254      	b.n	800e324 <_dtoa_r+0x9ac>
 800de7a:	4234      	tst	r4, r6
 800de7c:	d007      	beq.n	800de8e <_dtoa_r+0x516>
 800de7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de80:	3301      	adds	r3, #1
 800de82:	9310      	str	r3, [sp, #64]	; 0x40
 800de84:	682a      	ldr	r2, [r5, #0]
 800de86:	686b      	ldr	r3, [r5, #4]
 800de88:	f7f3 fe00 	bl	8001a8c <__aeabi_dmul>
 800de8c:	0033      	movs	r3, r6
 800de8e:	1064      	asrs	r4, r4, #1
 800de90:	3508      	adds	r5, #8
 800de92:	e75a      	b.n	800dd4a <_dtoa_r+0x3d2>
 800de94:	9e02      	ldr	r6, [sp, #8]
 800de96:	9b07      	ldr	r3, [sp, #28]
 800de98:	e780      	b.n	800dd9c <_dtoa_r+0x424>
 800de9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800de9e:	1e5a      	subs	r2, r3, #1
 800dea0:	4b59      	ldr	r3, [pc, #356]	; (800e008 <_dtoa_r+0x690>)
 800dea2:	00d2      	lsls	r2, r2, #3
 800dea4:	189b      	adds	r3, r3, r2
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	2900      	cmp	r1, #0
 800deac:	d051      	beq.n	800df52 <_dtoa_r+0x5da>
 800deae:	2000      	movs	r0, #0
 800deb0:	495d      	ldr	r1, [pc, #372]	; (800e028 <_dtoa_r+0x6b0>)
 800deb2:	f7f3 f9e9 	bl	8001288 <__aeabi_ddiv>
 800deb6:	9a08      	ldr	r2, [sp, #32]
 800deb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deba:	f7f4 f853 	bl	8001f64 <__aeabi_dsub>
 800debe:	9a06      	ldr	r2, [sp, #24]
 800dec0:	9b06      	ldr	r3, [sp, #24]
 800dec2:	4694      	mov	ip, r2
 800dec4:	9317      	str	r3, [sp, #92]	; 0x5c
 800dec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dec8:	9010      	str	r0, [sp, #64]	; 0x40
 800deca:	9111      	str	r1, [sp, #68]	; 0x44
 800decc:	4463      	add	r3, ip
 800dece:	9319      	str	r3, [sp, #100]	; 0x64
 800ded0:	0029      	movs	r1, r5
 800ded2:	0020      	movs	r0, r4
 800ded4:	f7f4 fbf6 	bl	80026c4 <__aeabi_d2iz>
 800ded8:	9014      	str	r0, [sp, #80]	; 0x50
 800deda:	f7f4 fc29 	bl	8002730 <__aeabi_i2d>
 800dede:	0002      	movs	r2, r0
 800dee0:	000b      	movs	r3, r1
 800dee2:	0020      	movs	r0, r4
 800dee4:	0029      	movs	r1, r5
 800dee6:	f7f4 f83d 	bl	8001f64 <__aeabi_dsub>
 800deea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800deec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800deee:	3301      	adds	r3, #1
 800def0:	9308      	str	r3, [sp, #32]
 800def2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800def4:	0004      	movs	r4, r0
 800def6:	3330      	adds	r3, #48	; 0x30
 800def8:	7013      	strb	r3, [r2, #0]
 800defa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800defc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800defe:	000d      	movs	r5, r1
 800df00:	f7f2 faa6 	bl	8000450 <__aeabi_dcmplt>
 800df04:	2800      	cmp	r0, #0
 800df06:	d175      	bne.n	800dff4 <_dtoa_r+0x67c>
 800df08:	0022      	movs	r2, r4
 800df0a:	002b      	movs	r3, r5
 800df0c:	2000      	movs	r0, #0
 800df0e:	4940      	ldr	r1, [pc, #256]	; (800e010 <_dtoa_r+0x698>)
 800df10:	f7f4 f828 	bl	8001f64 <__aeabi_dsub>
 800df14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df18:	f7f2 fa9a 	bl	8000450 <__aeabi_dcmplt>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d000      	beq.n	800df22 <_dtoa_r+0x5aa>
 800df20:	e0d2      	b.n	800e0c8 <_dtoa_r+0x750>
 800df22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df24:	9a08      	ldr	r2, [sp, #32]
 800df26:	4293      	cmp	r3, r2
 800df28:	d100      	bne.n	800df2c <_dtoa_r+0x5b4>
 800df2a:	e770      	b.n	800de0e <_dtoa_r+0x496>
 800df2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800df2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800df30:	2200      	movs	r2, #0
 800df32:	4b38      	ldr	r3, [pc, #224]	; (800e014 <_dtoa_r+0x69c>)
 800df34:	f7f3 fdaa 	bl	8001a8c <__aeabi_dmul>
 800df38:	4b36      	ldr	r3, [pc, #216]	; (800e014 <_dtoa_r+0x69c>)
 800df3a:	9010      	str	r0, [sp, #64]	; 0x40
 800df3c:	9111      	str	r1, [sp, #68]	; 0x44
 800df3e:	2200      	movs	r2, #0
 800df40:	0020      	movs	r0, r4
 800df42:	0029      	movs	r1, r5
 800df44:	f7f3 fda2 	bl	8001a8c <__aeabi_dmul>
 800df48:	9b08      	ldr	r3, [sp, #32]
 800df4a:	0004      	movs	r4, r0
 800df4c:	000d      	movs	r5, r1
 800df4e:	9317      	str	r3, [sp, #92]	; 0x5c
 800df50:	e7be      	b.n	800ded0 <_dtoa_r+0x558>
 800df52:	9808      	ldr	r0, [sp, #32]
 800df54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df56:	f7f3 fd99 	bl	8001a8c <__aeabi_dmul>
 800df5a:	9a06      	ldr	r2, [sp, #24]
 800df5c:	9b06      	ldr	r3, [sp, #24]
 800df5e:	4694      	mov	ip, r2
 800df60:	9308      	str	r3, [sp, #32]
 800df62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df64:	9010      	str	r0, [sp, #64]	; 0x40
 800df66:	9111      	str	r1, [sp, #68]	; 0x44
 800df68:	4463      	add	r3, ip
 800df6a:	9319      	str	r3, [sp, #100]	; 0x64
 800df6c:	0029      	movs	r1, r5
 800df6e:	0020      	movs	r0, r4
 800df70:	f7f4 fba8 	bl	80026c4 <__aeabi_d2iz>
 800df74:	9017      	str	r0, [sp, #92]	; 0x5c
 800df76:	f7f4 fbdb 	bl	8002730 <__aeabi_i2d>
 800df7a:	0002      	movs	r2, r0
 800df7c:	000b      	movs	r3, r1
 800df7e:	0020      	movs	r0, r4
 800df80:	0029      	movs	r1, r5
 800df82:	f7f3 ffef 	bl	8001f64 <__aeabi_dsub>
 800df86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df88:	9a08      	ldr	r2, [sp, #32]
 800df8a:	3330      	adds	r3, #48	; 0x30
 800df8c:	7013      	strb	r3, [r2, #0]
 800df8e:	0013      	movs	r3, r2
 800df90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800df92:	3301      	adds	r3, #1
 800df94:	0004      	movs	r4, r0
 800df96:	000d      	movs	r5, r1
 800df98:	9308      	str	r3, [sp, #32]
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d12c      	bne.n	800dff8 <_dtoa_r+0x680>
 800df9e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dfa0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dfa2:	9a06      	ldr	r2, [sp, #24]
 800dfa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfa6:	4694      	mov	ip, r2
 800dfa8:	4463      	add	r3, ip
 800dfaa:	2200      	movs	r2, #0
 800dfac:	9308      	str	r3, [sp, #32]
 800dfae:	4b1e      	ldr	r3, [pc, #120]	; (800e028 <_dtoa_r+0x6b0>)
 800dfb0:	f7f2 fe2e 	bl	8000c10 <__aeabi_dadd>
 800dfb4:	0002      	movs	r2, r0
 800dfb6:	000b      	movs	r3, r1
 800dfb8:	0020      	movs	r0, r4
 800dfba:	0029      	movs	r1, r5
 800dfbc:	f7f2 fa5c 	bl	8000478 <__aeabi_dcmpgt>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d000      	beq.n	800dfc6 <_dtoa_r+0x64e>
 800dfc4:	e080      	b.n	800e0c8 <_dtoa_r+0x750>
 800dfc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dfc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfca:	2000      	movs	r0, #0
 800dfcc:	4916      	ldr	r1, [pc, #88]	; (800e028 <_dtoa_r+0x6b0>)
 800dfce:	f7f3 ffc9 	bl	8001f64 <__aeabi_dsub>
 800dfd2:	0002      	movs	r2, r0
 800dfd4:	000b      	movs	r3, r1
 800dfd6:	0020      	movs	r0, r4
 800dfd8:	0029      	movs	r1, r5
 800dfda:	f7f2 fa39 	bl	8000450 <__aeabi_dcmplt>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d100      	bne.n	800dfe4 <_dtoa_r+0x66c>
 800dfe2:	e714      	b.n	800de0e <_dtoa_r+0x496>
 800dfe4:	9b08      	ldr	r3, [sp, #32]
 800dfe6:	001a      	movs	r2, r3
 800dfe8:	3a01      	subs	r2, #1
 800dfea:	9208      	str	r2, [sp, #32]
 800dfec:	7812      	ldrb	r2, [r2, #0]
 800dfee:	2a30      	cmp	r2, #48	; 0x30
 800dff0:	d0f8      	beq.n	800dfe4 <_dtoa_r+0x66c>
 800dff2:	9308      	str	r3, [sp, #32]
 800dff4:	9602      	str	r6, [sp, #8]
 800dff6:	e055      	b.n	800e0a4 <_dtoa_r+0x72c>
 800dff8:	2200      	movs	r2, #0
 800dffa:	4b06      	ldr	r3, [pc, #24]	; (800e014 <_dtoa_r+0x69c>)
 800dffc:	f7f3 fd46 	bl	8001a8c <__aeabi_dmul>
 800e000:	0004      	movs	r4, r0
 800e002:	000d      	movs	r5, r1
 800e004:	e7b2      	b.n	800df6c <_dtoa_r+0x5f4>
 800e006:	46c0      	nop			; (mov r8, r8)
 800e008:	080102b8 	.word	0x080102b8
 800e00c:	08010290 	.word	0x08010290
 800e010:	3ff00000 	.word	0x3ff00000
 800e014:	40240000 	.word	0x40240000
 800e018:	401c0000 	.word	0x401c0000
 800e01c:	fcc00000 	.word	0xfcc00000
 800e020:	40140000 	.word	0x40140000
 800e024:	7cc00000 	.word	0x7cc00000
 800e028:	3fe00000 	.word	0x3fe00000
 800e02c:	9b07      	ldr	r3, [sp, #28]
 800e02e:	9e06      	ldr	r6, [sp, #24]
 800e030:	3b01      	subs	r3, #1
 800e032:	199b      	adds	r3, r3, r6
 800e034:	930c      	str	r3, [sp, #48]	; 0x30
 800e036:	9c08      	ldr	r4, [sp, #32]
 800e038:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e03a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e03c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e03e:	0020      	movs	r0, r4
 800e040:	0029      	movs	r1, r5
 800e042:	f7f3 f921 	bl	8001288 <__aeabi_ddiv>
 800e046:	f7f4 fb3d 	bl	80026c4 <__aeabi_d2iz>
 800e04a:	9007      	str	r0, [sp, #28]
 800e04c:	f7f4 fb70 	bl	8002730 <__aeabi_i2d>
 800e050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e054:	f7f3 fd1a 	bl	8001a8c <__aeabi_dmul>
 800e058:	0002      	movs	r2, r0
 800e05a:	000b      	movs	r3, r1
 800e05c:	0020      	movs	r0, r4
 800e05e:	0029      	movs	r1, r5
 800e060:	f7f3 ff80 	bl	8001f64 <__aeabi_dsub>
 800e064:	0033      	movs	r3, r6
 800e066:	9a07      	ldr	r2, [sp, #28]
 800e068:	3601      	adds	r6, #1
 800e06a:	3230      	adds	r2, #48	; 0x30
 800e06c:	701a      	strb	r2, [r3, #0]
 800e06e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e070:	9608      	str	r6, [sp, #32]
 800e072:	429a      	cmp	r2, r3
 800e074:	d139      	bne.n	800e0ea <_dtoa_r+0x772>
 800e076:	0002      	movs	r2, r0
 800e078:	000b      	movs	r3, r1
 800e07a:	f7f2 fdc9 	bl	8000c10 <__aeabi_dadd>
 800e07e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e082:	0004      	movs	r4, r0
 800e084:	000d      	movs	r5, r1
 800e086:	f7f2 f9f7 	bl	8000478 <__aeabi_dcmpgt>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d11b      	bne.n	800e0c6 <_dtoa_r+0x74e>
 800e08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e092:	0020      	movs	r0, r4
 800e094:	0029      	movs	r1, r5
 800e096:	f7f2 f9d5 	bl	8000444 <__aeabi_dcmpeq>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	d002      	beq.n	800e0a4 <_dtoa_r+0x72c>
 800e09e:	9b07      	ldr	r3, [sp, #28]
 800e0a0:	07db      	lsls	r3, r3, #31
 800e0a2:	d410      	bmi.n	800e0c6 <_dtoa_r+0x74e>
 800e0a4:	0038      	movs	r0, r7
 800e0a6:	9905      	ldr	r1, [sp, #20]
 800e0a8:	f000 fae4 	bl	800e674 <_Bfree>
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	9a08      	ldr	r2, [sp, #32]
 800e0b0:	9802      	ldr	r0, [sp, #8]
 800e0b2:	7013      	strb	r3, [r2, #0]
 800e0b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e0b6:	3001      	adds	r0, #1
 800e0b8:	6018      	str	r0, [r3, #0]
 800e0ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d100      	bne.n	800e0c2 <_dtoa_r+0x74a>
 800e0c0:	e4a6      	b.n	800da10 <_dtoa_r+0x98>
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	e4a4      	b.n	800da10 <_dtoa_r+0x98>
 800e0c6:	9e02      	ldr	r6, [sp, #8]
 800e0c8:	9b08      	ldr	r3, [sp, #32]
 800e0ca:	9308      	str	r3, [sp, #32]
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	781a      	ldrb	r2, [r3, #0]
 800e0d0:	2a39      	cmp	r2, #57	; 0x39
 800e0d2:	d106      	bne.n	800e0e2 <_dtoa_r+0x76a>
 800e0d4:	9a06      	ldr	r2, [sp, #24]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d1f7      	bne.n	800e0ca <_dtoa_r+0x752>
 800e0da:	2230      	movs	r2, #48	; 0x30
 800e0dc:	9906      	ldr	r1, [sp, #24]
 800e0de:	3601      	adds	r6, #1
 800e0e0:	700a      	strb	r2, [r1, #0]
 800e0e2:	781a      	ldrb	r2, [r3, #0]
 800e0e4:	3201      	adds	r2, #1
 800e0e6:	701a      	strb	r2, [r3, #0]
 800e0e8:	e784      	b.n	800dff4 <_dtoa_r+0x67c>
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	4baa      	ldr	r3, [pc, #680]	; (800e398 <_dtoa_r+0xa20>)
 800e0ee:	f7f3 fccd 	bl	8001a8c <__aeabi_dmul>
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	0004      	movs	r4, r0
 800e0f8:	000d      	movs	r5, r1
 800e0fa:	f7f2 f9a3 	bl	8000444 <__aeabi_dcmpeq>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d09b      	beq.n	800e03a <_dtoa_r+0x6c2>
 800e102:	e7cf      	b.n	800e0a4 <_dtoa_r+0x72c>
 800e104:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e106:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e108:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e10a:	2d00      	cmp	r5, #0
 800e10c:	d012      	beq.n	800e134 <_dtoa_r+0x7bc>
 800e10e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e110:	2a01      	cmp	r2, #1
 800e112:	dc66      	bgt.n	800e1e2 <_dtoa_r+0x86a>
 800e114:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e116:	2a00      	cmp	r2, #0
 800e118:	d05d      	beq.n	800e1d6 <_dtoa_r+0x85e>
 800e11a:	4aa0      	ldr	r2, [pc, #640]	; (800e39c <_dtoa_r+0xa24>)
 800e11c:	189b      	adds	r3, r3, r2
 800e11e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e120:	2101      	movs	r1, #1
 800e122:	18d2      	adds	r2, r2, r3
 800e124:	920a      	str	r2, [sp, #40]	; 0x28
 800e126:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e128:	0038      	movs	r0, r7
 800e12a:	18d3      	adds	r3, r2, r3
 800e12c:	930d      	str	r3, [sp, #52]	; 0x34
 800e12e:	f000 fb51 	bl	800e7d4 <__i2b>
 800e132:	0005      	movs	r5, r0
 800e134:	2c00      	cmp	r4, #0
 800e136:	dd0e      	ble.n	800e156 <_dtoa_r+0x7de>
 800e138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	dd0b      	ble.n	800e156 <_dtoa_r+0x7de>
 800e13e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e140:	0023      	movs	r3, r4
 800e142:	4294      	cmp	r4, r2
 800e144:	dd00      	ble.n	800e148 <_dtoa_r+0x7d0>
 800e146:	0013      	movs	r3, r2
 800e148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e14a:	1ae4      	subs	r4, r4, r3
 800e14c:	1ad2      	subs	r2, r2, r3
 800e14e:	920a      	str	r2, [sp, #40]	; 0x28
 800e150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e152:	1ad3      	subs	r3, r2, r3
 800e154:	930d      	str	r3, [sp, #52]	; 0x34
 800e156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d01f      	beq.n	800e19c <_dtoa_r+0x824>
 800e15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d054      	beq.n	800e20c <_dtoa_r+0x894>
 800e162:	2e00      	cmp	r6, #0
 800e164:	dd11      	ble.n	800e18a <_dtoa_r+0x812>
 800e166:	0029      	movs	r1, r5
 800e168:	0032      	movs	r2, r6
 800e16a:	0038      	movs	r0, r7
 800e16c:	f000 fbf8 	bl	800e960 <__pow5mult>
 800e170:	9a05      	ldr	r2, [sp, #20]
 800e172:	0001      	movs	r1, r0
 800e174:	0005      	movs	r5, r0
 800e176:	0038      	movs	r0, r7
 800e178:	f000 fb42 	bl	800e800 <__multiply>
 800e17c:	9905      	ldr	r1, [sp, #20]
 800e17e:	9014      	str	r0, [sp, #80]	; 0x50
 800e180:	0038      	movs	r0, r7
 800e182:	f000 fa77 	bl	800e674 <_Bfree>
 800e186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e188:	9305      	str	r3, [sp, #20]
 800e18a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e18c:	1b9a      	subs	r2, r3, r6
 800e18e:	42b3      	cmp	r3, r6
 800e190:	d004      	beq.n	800e19c <_dtoa_r+0x824>
 800e192:	0038      	movs	r0, r7
 800e194:	9905      	ldr	r1, [sp, #20]
 800e196:	f000 fbe3 	bl	800e960 <__pow5mult>
 800e19a:	9005      	str	r0, [sp, #20]
 800e19c:	2101      	movs	r1, #1
 800e19e:	0038      	movs	r0, r7
 800e1a0:	f000 fb18 	bl	800e7d4 <__i2b>
 800e1a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1a6:	0006      	movs	r6, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	dd31      	ble.n	800e210 <_dtoa_r+0x898>
 800e1ac:	001a      	movs	r2, r3
 800e1ae:	0001      	movs	r1, r0
 800e1b0:	0038      	movs	r0, r7
 800e1b2:	f000 fbd5 	bl	800e960 <__pow5mult>
 800e1b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e1b8:	0006      	movs	r6, r0
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	dd2d      	ble.n	800e21a <_dtoa_r+0x8a2>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	930e      	str	r3, [sp, #56]	; 0x38
 800e1c2:	6933      	ldr	r3, [r6, #16]
 800e1c4:	3303      	adds	r3, #3
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	18f3      	adds	r3, r6, r3
 800e1ca:	6858      	ldr	r0, [r3, #4]
 800e1cc:	f000 faba 	bl	800e744 <__hi0bits>
 800e1d0:	2320      	movs	r3, #32
 800e1d2:	1a18      	subs	r0, r3, r0
 800e1d4:	e039      	b.n	800e24a <_dtoa_r+0x8d2>
 800e1d6:	2336      	movs	r3, #54	; 0x36
 800e1d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e1da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e1dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e1de:	1a9b      	subs	r3, r3, r2
 800e1e0:	e79d      	b.n	800e11e <_dtoa_r+0x7a6>
 800e1e2:	9b07      	ldr	r3, [sp, #28]
 800e1e4:	1e5e      	subs	r6, r3, #1
 800e1e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1e8:	42b3      	cmp	r3, r6
 800e1ea:	db07      	blt.n	800e1fc <_dtoa_r+0x884>
 800e1ec:	1b9e      	subs	r6, r3, r6
 800e1ee:	9b07      	ldr	r3, [sp, #28]
 800e1f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	da93      	bge.n	800e11e <_dtoa_r+0x7a6>
 800e1f6:	1ae4      	subs	r4, r4, r3
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	e790      	b.n	800e11e <_dtoa_r+0x7a6>
 800e1fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e200:	1af3      	subs	r3, r6, r3
 800e202:	18d3      	adds	r3, r2, r3
 800e204:	960e      	str	r6, [sp, #56]	; 0x38
 800e206:	9315      	str	r3, [sp, #84]	; 0x54
 800e208:	2600      	movs	r6, #0
 800e20a:	e7f0      	b.n	800e1ee <_dtoa_r+0x876>
 800e20c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e20e:	e7c0      	b.n	800e192 <_dtoa_r+0x81a>
 800e210:	2300      	movs	r3, #0
 800e212:	930e      	str	r3, [sp, #56]	; 0x38
 800e214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e216:	2b01      	cmp	r3, #1
 800e218:	dc13      	bgt.n	800e242 <_dtoa_r+0x8ca>
 800e21a:	2300      	movs	r3, #0
 800e21c:	930e      	str	r3, [sp, #56]	; 0x38
 800e21e:	9b08      	ldr	r3, [sp, #32]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d10e      	bne.n	800e242 <_dtoa_r+0x8ca>
 800e224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e226:	031b      	lsls	r3, r3, #12
 800e228:	d10b      	bne.n	800e242 <_dtoa_r+0x8ca>
 800e22a:	4b5d      	ldr	r3, [pc, #372]	; (800e3a0 <_dtoa_r+0xa28>)
 800e22c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e22e:	4213      	tst	r3, r2
 800e230:	d007      	beq.n	800e242 <_dtoa_r+0x8ca>
 800e232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e234:	3301      	adds	r3, #1
 800e236:	930a      	str	r3, [sp, #40]	; 0x28
 800e238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e23a:	3301      	adds	r3, #1
 800e23c:	930d      	str	r3, [sp, #52]	; 0x34
 800e23e:	2301      	movs	r3, #1
 800e240:	930e      	str	r3, [sp, #56]	; 0x38
 800e242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e244:	2001      	movs	r0, #1
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1bb      	bne.n	800e1c2 <_dtoa_r+0x84a>
 800e24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e24c:	221f      	movs	r2, #31
 800e24e:	1818      	adds	r0, r3, r0
 800e250:	0003      	movs	r3, r0
 800e252:	4013      	ands	r3, r2
 800e254:	4210      	tst	r0, r2
 800e256:	d046      	beq.n	800e2e6 <_dtoa_r+0x96e>
 800e258:	3201      	adds	r2, #1
 800e25a:	1ad2      	subs	r2, r2, r3
 800e25c:	2a04      	cmp	r2, #4
 800e25e:	dd3f      	ble.n	800e2e0 <_dtoa_r+0x968>
 800e260:	221c      	movs	r2, #28
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e266:	18e4      	adds	r4, r4, r3
 800e268:	18d2      	adds	r2, r2, r3
 800e26a:	920a      	str	r2, [sp, #40]	; 0x28
 800e26c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e26e:	18d3      	adds	r3, r2, r3
 800e270:	930d      	str	r3, [sp, #52]	; 0x34
 800e272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e274:	2b00      	cmp	r3, #0
 800e276:	dd05      	ble.n	800e284 <_dtoa_r+0x90c>
 800e278:	001a      	movs	r2, r3
 800e27a:	0038      	movs	r0, r7
 800e27c:	9905      	ldr	r1, [sp, #20]
 800e27e:	f000 fbcb 	bl	800ea18 <__lshift>
 800e282:	9005      	str	r0, [sp, #20]
 800e284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e286:	2b00      	cmp	r3, #0
 800e288:	dd05      	ble.n	800e296 <_dtoa_r+0x91e>
 800e28a:	0031      	movs	r1, r6
 800e28c:	001a      	movs	r2, r3
 800e28e:	0038      	movs	r0, r7
 800e290:	f000 fbc2 	bl	800ea18 <__lshift>
 800e294:	0006      	movs	r6, r0
 800e296:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d026      	beq.n	800e2ea <_dtoa_r+0x972>
 800e29c:	0031      	movs	r1, r6
 800e29e:	9805      	ldr	r0, [sp, #20]
 800e2a0:	f000 fc28 	bl	800eaf4 <__mcmp>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	da20      	bge.n	800e2ea <_dtoa_r+0x972>
 800e2a8:	9b02      	ldr	r3, [sp, #8]
 800e2aa:	220a      	movs	r2, #10
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	9302      	str	r3, [sp, #8]
 800e2b0:	0038      	movs	r0, r7
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	9905      	ldr	r1, [sp, #20]
 800e2b6:	f000 fa01 	bl	800e6bc <__multadd>
 800e2ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2bc:	9005      	str	r0, [sp, #20]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d100      	bne.n	800e2c4 <_dtoa_r+0x94c>
 800e2c2:	e166      	b.n	800e592 <_dtoa_r+0xc1a>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	0029      	movs	r1, r5
 800e2c8:	220a      	movs	r2, #10
 800e2ca:	0038      	movs	r0, r7
 800e2cc:	f000 f9f6 	bl	800e6bc <__multadd>
 800e2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2d2:	0005      	movs	r5, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	dc47      	bgt.n	800e368 <_dtoa_r+0x9f0>
 800e2d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	dc0d      	bgt.n	800e2fa <_dtoa_r+0x982>
 800e2de:	e043      	b.n	800e368 <_dtoa_r+0x9f0>
 800e2e0:	2a04      	cmp	r2, #4
 800e2e2:	d0c6      	beq.n	800e272 <_dtoa_r+0x8fa>
 800e2e4:	0013      	movs	r3, r2
 800e2e6:	331c      	adds	r3, #28
 800e2e8:	e7bc      	b.n	800e264 <_dtoa_r+0x8ec>
 800e2ea:	9b07      	ldr	r3, [sp, #28]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dc35      	bgt.n	800e35c <_dtoa_r+0x9e4>
 800e2f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	dd32      	ble.n	800e35c <_dtoa_r+0x9e4>
 800e2f6:	9b07      	ldr	r3, [sp, #28]
 800e2f8:	930c      	str	r3, [sp, #48]	; 0x30
 800e2fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10c      	bne.n	800e31a <_dtoa_r+0x9a2>
 800e300:	0031      	movs	r1, r6
 800e302:	2205      	movs	r2, #5
 800e304:	0038      	movs	r0, r7
 800e306:	f000 f9d9 	bl	800e6bc <__multadd>
 800e30a:	0006      	movs	r6, r0
 800e30c:	0001      	movs	r1, r0
 800e30e:	9805      	ldr	r0, [sp, #20]
 800e310:	f000 fbf0 	bl	800eaf4 <__mcmp>
 800e314:	2800      	cmp	r0, #0
 800e316:	dd00      	ble.n	800e31a <_dtoa_r+0x9a2>
 800e318:	e5a5      	b.n	800de66 <_dtoa_r+0x4ee>
 800e31a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e31c:	43db      	mvns	r3, r3
 800e31e:	9302      	str	r3, [sp, #8]
 800e320:	9b06      	ldr	r3, [sp, #24]
 800e322:	9308      	str	r3, [sp, #32]
 800e324:	2400      	movs	r4, #0
 800e326:	0031      	movs	r1, r6
 800e328:	0038      	movs	r0, r7
 800e32a:	f000 f9a3 	bl	800e674 <_Bfree>
 800e32e:	2d00      	cmp	r5, #0
 800e330:	d100      	bne.n	800e334 <_dtoa_r+0x9bc>
 800e332:	e6b7      	b.n	800e0a4 <_dtoa_r+0x72c>
 800e334:	2c00      	cmp	r4, #0
 800e336:	d005      	beq.n	800e344 <_dtoa_r+0x9cc>
 800e338:	42ac      	cmp	r4, r5
 800e33a:	d003      	beq.n	800e344 <_dtoa_r+0x9cc>
 800e33c:	0021      	movs	r1, r4
 800e33e:	0038      	movs	r0, r7
 800e340:	f000 f998 	bl	800e674 <_Bfree>
 800e344:	0029      	movs	r1, r5
 800e346:	0038      	movs	r0, r7
 800e348:	f000 f994 	bl	800e674 <_Bfree>
 800e34c:	e6aa      	b.n	800e0a4 <_dtoa_r+0x72c>
 800e34e:	2600      	movs	r6, #0
 800e350:	0035      	movs	r5, r6
 800e352:	e7e2      	b.n	800e31a <_dtoa_r+0x9a2>
 800e354:	9602      	str	r6, [sp, #8]
 800e356:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800e358:	0035      	movs	r5, r6
 800e35a:	e584      	b.n	800de66 <_dtoa_r+0x4ee>
 800e35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d100      	bne.n	800e364 <_dtoa_r+0x9ec>
 800e362:	e0ce      	b.n	800e502 <_dtoa_r+0xb8a>
 800e364:	9b07      	ldr	r3, [sp, #28]
 800e366:	930c      	str	r3, [sp, #48]	; 0x30
 800e368:	2c00      	cmp	r4, #0
 800e36a:	dd05      	ble.n	800e378 <_dtoa_r+0xa00>
 800e36c:	0029      	movs	r1, r5
 800e36e:	0022      	movs	r2, r4
 800e370:	0038      	movs	r0, r7
 800e372:	f000 fb51 	bl	800ea18 <__lshift>
 800e376:	0005      	movs	r5, r0
 800e378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e37a:	0028      	movs	r0, r5
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d022      	beq.n	800e3c6 <_dtoa_r+0xa4e>
 800e380:	0038      	movs	r0, r7
 800e382:	6869      	ldr	r1, [r5, #4]
 800e384:	f000 f932 	bl	800e5ec <_Balloc>
 800e388:	1e04      	subs	r4, r0, #0
 800e38a:	d10f      	bne.n	800e3ac <_dtoa_r+0xa34>
 800e38c:	0002      	movs	r2, r0
 800e38e:	4b05      	ldr	r3, [pc, #20]	; (800e3a4 <_dtoa_r+0xa2c>)
 800e390:	4905      	ldr	r1, [pc, #20]	; (800e3a8 <_dtoa_r+0xa30>)
 800e392:	f7ff fb06 	bl	800d9a2 <_dtoa_r+0x2a>
 800e396:	46c0      	nop			; (mov r8, r8)
 800e398:	40240000 	.word	0x40240000
 800e39c:	00000433 	.word	0x00000433
 800e3a0:	7ff00000 	.word	0x7ff00000
 800e3a4:	0801021f 	.word	0x0801021f
 800e3a8:	000002ea 	.word	0x000002ea
 800e3ac:	0029      	movs	r1, r5
 800e3ae:	692b      	ldr	r3, [r5, #16]
 800e3b0:	310c      	adds	r1, #12
 800e3b2:	1c9a      	adds	r2, r3, #2
 800e3b4:	0092      	lsls	r2, r2, #2
 800e3b6:	300c      	adds	r0, #12
 800e3b8:	f7fe fcbe 	bl	800cd38 <memcpy>
 800e3bc:	2201      	movs	r2, #1
 800e3be:	0021      	movs	r1, r4
 800e3c0:	0038      	movs	r0, r7
 800e3c2:	f000 fb29 	bl	800ea18 <__lshift>
 800e3c6:	9b06      	ldr	r3, [sp, #24]
 800e3c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3ca:	930a      	str	r3, [sp, #40]	; 0x28
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	189b      	adds	r3, r3, r2
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	002c      	movs	r4, r5
 800e3d4:	0005      	movs	r5, r0
 800e3d6:	9314      	str	r3, [sp, #80]	; 0x50
 800e3d8:	9b08      	ldr	r3, [sp, #32]
 800e3da:	4013      	ands	r3, r2
 800e3dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3de:	0031      	movs	r1, r6
 800e3e0:	9805      	ldr	r0, [sp, #20]
 800e3e2:	f7ff fa3d 	bl	800d860 <quorem>
 800e3e6:	0003      	movs	r3, r0
 800e3e8:	0021      	movs	r1, r4
 800e3ea:	3330      	adds	r3, #48	; 0x30
 800e3ec:	900d      	str	r0, [sp, #52]	; 0x34
 800e3ee:	9805      	ldr	r0, [sp, #20]
 800e3f0:	9307      	str	r3, [sp, #28]
 800e3f2:	f000 fb7f 	bl	800eaf4 <__mcmp>
 800e3f6:	002a      	movs	r2, r5
 800e3f8:	900e      	str	r0, [sp, #56]	; 0x38
 800e3fa:	0031      	movs	r1, r6
 800e3fc:	0038      	movs	r0, r7
 800e3fe:	f000 fb95 	bl	800eb2c <__mdiff>
 800e402:	68c3      	ldr	r3, [r0, #12]
 800e404:	9008      	str	r0, [sp, #32]
 800e406:	9310      	str	r3, [sp, #64]	; 0x40
 800e408:	2301      	movs	r3, #1
 800e40a:	930c      	str	r3, [sp, #48]	; 0x30
 800e40c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d104      	bne.n	800e41c <_dtoa_r+0xaa4>
 800e412:	0001      	movs	r1, r0
 800e414:	9805      	ldr	r0, [sp, #20]
 800e416:	f000 fb6d 	bl	800eaf4 <__mcmp>
 800e41a:	900c      	str	r0, [sp, #48]	; 0x30
 800e41c:	0038      	movs	r0, r7
 800e41e:	9908      	ldr	r1, [sp, #32]
 800e420:	f000 f928 	bl	800e674 <_Bfree>
 800e424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e428:	3301      	adds	r3, #1
 800e42a:	9308      	str	r3, [sp, #32]
 800e42c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e42e:	4313      	orrs	r3, r2
 800e430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e432:	4313      	orrs	r3, r2
 800e434:	d10c      	bne.n	800e450 <_dtoa_r+0xad8>
 800e436:	9b07      	ldr	r3, [sp, #28]
 800e438:	2b39      	cmp	r3, #57	; 0x39
 800e43a:	d026      	beq.n	800e48a <_dtoa_r+0xb12>
 800e43c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e43e:	2b00      	cmp	r3, #0
 800e440:	dd02      	ble.n	800e448 <_dtoa_r+0xad0>
 800e442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e444:	3331      	adds	r3, #49	; 0x31
 800e446:	9307      	str	r3, [sp, #28]
 800e448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e44a:	9a07      	ldr	r2, [sp, #28]
 800e44c:	701a      	strb	r2, [r3, #0]
 800e44e:	e76a      	b.n	800e326 <_dtoa_r+0x9ae>
 800e450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e452:	2b00      	cmp	r3, #0
 800e454:	db04      	blt.n	800e460 <_dtoa_r+0xae8>
 800e456:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e458:	4313      	orrs	r3, r2
 800e45a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e45c:	4313      	orrs	r3, r2
 800e45e:	d11f      	bne.n	800e4a0 <_dtoa_r+0xb28>
 800e460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e462:	2b00      	cmp	r3, #0
 800e464:	ddf0      	ble.n	800e448 <_dtoa_r+0xad0>
 800e466:	9905      	ldr	r1, [sp, #20]
 800e468:	2201      	movs	r2, #1
 800e46a:	0038      	movs	r0, r7
 800e46c:	f000 fad4 	bl	800ea18 <__lshift>
 800e470:	0031      	movs	r1, r6
 800e472:	9005      	str	r0, [sp, #20]
 800e474:	f000 fb3e 	bl	800eaf4 <__mcmp>
 800e478:	2800      	cmp	r0, #0
 800e47a:	dc03      	bgt.n	800e484 <_dtoa_r+0xb0c>
 800e47c:	d1e4      	bne.n	800e448 <_dtoa_r+0xad0>
 800e47e:	9b07      	ldr	r3, [sp, #28]
 800e480:	07db      	lsls	r3, r3, #31
 800e482:	d5e1      	bpl.n	800e448 <_dtoa_r+0xad0>
 800e484:	9b07      	ldr	r3, [sp, #28]
 800e486:	2b39      	cmp	r3, #57	; 0x39
 800e488:	d1db      	bne.n	800e442 <_dtoa_r+0xaca>
 800e48a:	2339      	movs	r3, #57	; 0x39
 800e48c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e48e:	7013      	strb	r3, [r2, #0]
 800e490:	9b08      	ldr	r3, [sp, #32]
 800e492:	9308      	str	r3, [sp, #32]
 800e494:	3b01      	subs	r3, #1
 800e496:	781a      	ldrb	r2, [r3, #0]
 800e498:	2a39      	cmp	r2, #57	; 0x39
 800e49a:	d068      	beq.n	800e56e <_dtoa_r+0xbf6>
 800e49c:	3201      	adds	r2, #1
 800e49e:	e7d5      	b.n	800e44c <_dtoa_r+0xad4>
 800e4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	dd07      	ble.n	800e4b6 <_dtoa_r+0xb3e>
 800e4a6:	9b07      	ldr	r3, [sp, #28]
 800e4a8:	2b39      	cmp	r3, #57	; 0x39
 800e4aa:	d0ee      	beq.n	800e48a <_dtoa_r+0xb12>
 800e4ac:	9b07      	ldr	r3, [sp, #28]
 800e4ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	7013      	strb	r3, [r2, #0]
 800e4b4:	e737      	b.n	800e326 <_dtoa_r+0x9ae>
 800e4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4b8:	9a07      	ldr	r2, [sp, #28]
 800e4ba:	701a      	strb	r2, [r3, #0]
 800e4bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d03e      	beq.n	800e542 <_dtoa_r+0xbca>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	220a      	movs	r2, #10
 800e4c8:	9905      	ldr	r1, [sp, #20]
 800e4ca:	0038      	movs	r0, r7
 800e4cc:	f000 f8f6 	bl	800e6bc <__multadd>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	9005      	str	r0, [sp, #20]
 800e4d4:	220a      	movs	r2, #10
 800e4d6:	0021      	movs	r1, r4
 800e4d8:	0038      	movs	r0, r7
 800e4da:	42ac      	cmp	r4, r5
 800e4dc:	d106      	bne.n	800e4ec <_dtoa_r+0xb74>
 800e4de:	f000 f8ed 	bl	800e6bc <__multadd>
 800e4e2:	0004      	movs	r4, r0
 800e4e4:	0005      	movs	r5, r0
 800e4e6:	9b08      	ldr	r3, [sp, #32]
 800e4e8:	930a      	str	r3, [sp, #40]	; 0x28
 800e4ea:	e778      	b.n	800e3de <_dtoa_r+0xa66>
 800e4ec:	f000 f8e6 	bl	800e6bc <__multadd>
 800e4f0:	0029      	movs	r1, r5
 800e4f2:	0004      	movs	r4, r0
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	220a      	movs	r2, #10
 800e4f8:	0038      	movs	r0, r7
 800e4fa:	f000 f8df 	bl	800e6bc <__multadd>
 800e4fe:	0005      	movs	r5, r0
 800e500:	e7f1      	b.n	800e4e6 <_dtoa_r+0xb6e>
 800e502:	9b07      	ldr	r3, [sp, #28]
 800e504:	930c      	str	r3, [sp, #48]	; 0x30
 800e506:	2400      	movs	r4, #0
 800e508:	0031      	movs	r1, r6
 800e50a:	9805      	ldr	r0, [sp, #20]
 800e50c:	f7ff f9a8 	bl	800d860 <quorem>
 800e510:	9b06      	ldr	r3, [sp, #24]
 800e512:	3030      	adds	r0, #48	; 0x30
 800e514:	5518      	strb	r0, [r3, r4]
 800e516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e518:	3401      	adds	r4, #1
 800e51a:	9007      	str	r0, [sp, #28]
 800e51c:	42a3      	cmp	r3, r4
 800e51e:	dd07      	ble.n	800e530 <_dtoa_r+0xbb8>
 800e520:	2300      	movs	r3, #0
 800e522:	220a      	movs	r2, #10
 800e524:	0038      	movs	r0, r7
 800e526:	9905      	ldr	r1, [sp, #20]
 800e528:	f000 f8c8 	bl	800e6bc <__multadd>
 800e52c:	9005      	str	r0, [sp, #20]
 800e52e:	e7eb      	b.n	800e508 <_dtoa_r+0xb90>
 800e530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e532:	2001      	movs	r0, #1
 800e534:	2b00      	cmp	r3, #0
 800e536:	dd00      	ble.n	800e53a <_dtoa_r+0xbc2>
 800e538:	0018      	movs	r0, r3
 800e53a:	2400      	movs	r4, #0
 800e53c:	9b06      	ldr	r3, [sp, #24]
 800e53e:	181b      	adds	r3, r3, r0
 800e540:	9308      	str	r3, [sp, #32]
 800e542:	9905      	ldr	r1, [sp, #20]
 800e544:	2201      	movs	r2, #1
 800e546:	0038      	movs	r0, r7
 800e548:	f000 fa66 	bl	800ea18 <__lshift>
 800e54c:	0031      	movs	r1, r6
 800e54e:	9005      	str	r0, [sp, #20]
 800e550:	f000 fad0 	bl	800eaf4 <__mcmp>
 800e554:	2800      	cmp	r0, #0
 800e556:	dc9b      	bgt.n	800e490 <_dtoa_r+0xb18>
 800e558:	d102      	bne.n	800e560 <_dtoa_r+0xbe8>
 800e55a:	9b07      	ldr	r3, [sp, #28]
 800e55c:	07db      	lsls	r3, r3, #31
 800e55e:	d497      	bmi.n	800e490 <_dtoa_r+0xb18>
 800e560:	9b08      	ldr	r3, [sp, #32]
 800e562:	9308      	str	r3, [sp, #32]
 800e564:	3b01      	subs	r3, #1
 800e566:	781a      	ldrb	r2, [r3, #0]
 800e568:	2a30      	cmp	r2, #48	; 0x30
 800e56a:	d0fa      	beq.n	800e562 <_dtoa_r+0xbea>
 800e56c:	e6db      	b.n	800e326 <_dtoa_r+0x9ae>
 800e56e:	9a06      	ldr	r2, [sp, #24]
 800e570:	429a      	cmp	r2, r3
 800e572:	d18e      	bne.n	800e492 <_dtoa_r+0xb1a>
 800e574:	9b02      	ldr	r3, [sp, #8]
 800e576:	3301      	adds	r3, #1
 800e578:	9302      	str	r3, [sp, #8]
 800e57a:	2331      	movs	r3, #49	; 0x31
 800e57c:	e799      	b.n	800e4b2 <_dtoa_r+0xb3a>
 800e57e:	4b09      	ldr	r3, [pc, #36]	; (800e5a4 <_dtoa_r+0xc2c>)
 800e580:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e582:	9306      	str	r3, [sp, #24]
 800e584:	4b08      	ldr	r3, [pc, #32]	; (800e5a8 <_dtoa_r+0xc30>)
 800e586:	2a00      	cmp	r2, #0
 800e588:	d001      	beq.n	800e58e <_dtoa_r+0xc16>
 800e58a:	f7ff fa3f 	bl	800da0c <_dtoa_r+0x94>
 800e58e:	f7ff fa3f 	bl	800da10 <_dtoa_r+0x98>
 800e592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e594:	2b00      	cmp	r3, #0
 800e596:	dcb6      	bgt.n	800e506 <_dtoa_r+0xb8e>
 800e598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	dd00      	ble.n	800e5a0 <_dtoa_r+0xc28>
 800e59e:	e6ac      	b.n	800e2fa <_dtoa_r+0x982>
 800e5a0:	e7b1      	b.n	800e506 <_dtoa_r+0xb8e>
 800e5a2:	46c0      	nop			; (mov r8, r8)
 800e5a4:	080101a0 	.word	0x080101a0
 800e5a8:	080101a8 	.word	0x080101a8

0800e5ac <_localeconv_r>:
 800e5ac:	4800      	ldr	r0, [pc, #0]	; (800e5b0 <_localeconv_r+0x4>)
 800e5ae:	4770      	bx	lr
 800e5b0:	2000016c 	.word	0x2000016c

0800e5b4 <memchr>:
 800e5b4:	b2c9      	uxtb	r1, r1
 800e5b6:	1882      	adds	r2, r0, r2
 800e5b8:	4290      	cmp	r0, r2
 800e5ba:	d101      	bne.n	800e5c0 <memchr+0xc>
 800e5bc:	2000      	movs	r0, #0
 800e5be:	4770      	bx	lr
 800e5c0:	7803      	ldrb	r3, [r0, #0]
 800e5c2:	428b      	cmp	r3, r1
 800e5c4:	d0fb      	beq.n	800e5be <memchr+0xa>
 800e5c6:	3001      	adds	r0, #1
 800e5c8:	e7f6      	b.n	800e5b8 <memchr+0x4>
	...

0800e5cc <__malloc_lock>:
 800e5cc:	b510      	push	{r4, lr}
 800e5ce:	4802      	ldr	r0, [pc, #8]	; (800e5d8 <__malloc_lock+0xc>)
 800e5d0:	f000 fd65 	bl	800f09e <__retarget_lock_acquire_recursive>
 800e5d4:	bd10      	pop	{r4, pc}
 800e5d6:	46c0      	nop			; (mov r8, r8)
 800e5d8:	200009d4 	.word	0x200009d4

0800e5dc <__malloc_unlock>:
 800e5dc:	b510      	push	{r4, lr}
 800e5de:	4802      	ldr	r0, [pc, #8]	; (800e5e8 <__malloc_unlock+0xc>)
 800e5e0:	f000 fd5e 	bl	800f0a0 <__retarget_lock_release_recursive>
 800e5e4:	bd10      	pop	{r4, pc}
 800e5e6:	46c0      	nop			; (mov r8, r8)
 800e5e8:	200009d4 	.word	0x200009d4

0800e5ec <_Balloc>:
 800e5ec:	b570      	push	{r4, r5, r6, lr}
 800e5ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e5f0:	0006      	movs	r6, r0
 800e5f2:	000c      	movs	r4, r1
 800e5f4:	2d00      	cmp	r5, #0
 800e5f6:	d10e      	bne.n	800e616 <_Balloc+0x2a>
 800e5f8:	2010      	movs	r0, #16
 800e5fa:	f7fe fb85 	bl	800cd08 <malloc>
 800e5fe:	1e02      	subs	r2, r0, #0
 800e600:	6270      	str	r0, [r6, #36]	; 0x24
 800e602:	d104      	bne.n	800e60e <_Balloc+0x22>
 800e604:	2166      	movs	r1, #102	; 0x66
 800e606:	4b19      	ldr	r3, [pc, #100]	; (800e66c <_Balloc+0x80>)
 800e608:	4819      	ldr	r0, [pc, #100]	; (800e670 <_Balloc+0x84>)
 800e60a:	f000 fd19 	bl	800f040 <__assert_func>
 800e60e:	6045      	str	r5, [r0, #4]
 800e610:	6085      	str	r5, [r0, #8]
 800e612:	6005      	str	r5, [r0, #0]
 800e614:	60c5      	str	r5, [r0, #12]
 800e616:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800e618:	68eb      	ldr	r3, [r5, #12]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d013      	beq.n	800e646 <_Balloc+0x5a>
 800e61e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e620:	00a2      	lsls	r2, r4, #2
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	189b      	adds	r3, r3, r2
 800e626:	6818      	ldr	r0, [r3, #0]
 800e628:	2800      	cmp	r0, #0
 800e62a:	d118      	bne.n	800e65e <_Balloc+0x72>
 800e62c:	2101      	movs	r1, #1
 800e62e:	000d      	movs	r5, r1
 800e630:	40a5      	lsls	r5, r4
 800e632:	1d6a      	adds	r2, r5, #5
 800e634:	0030      	movs	r0, r6
 800e636:	0092      	lsls	r2, r2, #2
 800e638:	f000 fb74 	bl	800ed24 <_calloc_r>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d00c      	beq.n	800e65a <_Balloc+0x6e>
 800e640:	6044      	str	r4, [r0, #4]
 800e642:	6085      	str	r5, [r0, #8]
 800e644:	e00d      	b.n	800e662 <_Balloc+0x76>
 800e646:	2221      	movs	r2, #33	; 0x21
 800e648:	2104      	movs	r1, #4
 800e64a:	0030      	movs	r0, r6
 800e64c:	f000 fb6a 	bl	800ed24 <_calloc_r>
 800e650:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e652:	60e8      	str	r0, [r5, #12]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1e1      	bne.n	800e61e <_Balloc+0x32>
 800e65a:	2000      	movs	r0, #0
 800e65c:	bd70      	pop	{r4, r5, r6, pc}
 800e65e:	6802      	ldr	r2, [r0, #0]
 800e660:	601a      	str	r2, [r3, #0]
 800e662:	2300      	movs	r3, #0
 800e664:	6103      	str	r3, [r0, #16]
 800e666:	60c3      	str	r3, [r0, #12]
 800e668:	e7f8      	b.n	800e65c <_Balloc+0x70>
 800e66a:	46c0      	nop			; (mov r8, r8)
 800e66c:	080101ad 	.word	0x080101ad
 800e670:	08010230 	.word	0x08010230

0800e674 <_Bfree>:
 800e674:	b570      	push	{r4, r5, r6, lr}
 800e676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e678:	0005      	movs	r5, r0
 800e67a:	000c      	movs	r4, r1
 800e67c:	2e00      	cmp	r6, #0
 800e67e:	d10e      	bne.n	800e69e <_Bfree+0x2a>
 800e680:	2010      	movs	r0, #16
 800e682:	f7fe fb41 	bl	800cd08 <malloc>
 800e686:	1e02      	subs	r2, r0, #0
 800e688:	6268      	str	r0, [r5, #36]	; 0x24
 800e68a:	d104      	bne.n	800e696 <_Bfree+0x22>
 800e68c:	218a      	movs	r1, #138	; 0x8a
 800e68e:	4b09      	ldr	r3, [pc, #36]	; (800e6b4 <_Bfree+0x40>)
 800e690:	4809      	ldr	r0, [pc, #36]	; (800e6b8 <_Bfree+0x44>)
 800e692:	f000 fcd5 	bl	800f040 <__assert_func>
 800e696:	6046      	str	r6, [r0, #4]
 800e698:	6086      	str	r6, [r0, #8]
 800e69a:	6006      	str	r6, [r0, #0]
 800e69c:	60c6      	str	r6, [r0, #12]
 800e69e:	2c00      	cmp	r4, #0
 800e6a0:	d007      	beq.n	800e6b2 <_Bfree+0x3e>
 800e6a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e6a4:	6862      	ldr	r2, [r4, #4]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	0092      	lsls	r2, r2, #2
 800e6aa:	189b      	adds	r3, r3, r2
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	6022      	str	r2, [r4, #0]
 800e6b0:	601c      	str	r4, [r3, #0]
 800e6b2:	bd70      	pop	{r4, r5, r6, pc}
 800e6b4:	080101ad 	.word	0x080101ad
 800e6b8:	08010230 	.word	0x08010230

0800e6bc <__multadd>:
 800e6bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6be:	000e      	movs	r6, r1
 800e6c0:	9001      	str	r0, [sp, #4]
 800e6c2:	000c      	movs	r4, r1
 800e6c4:	001d      	movs	r5, r3
 800e6c6:	2000      	movs	r0, #0
 800e6c8:	690f      	ldr	r7, [r1, #16]
 800e6ca:	3614      	adds	r6, #20
 800e6cc:	6833      	ldr	r3, [r6, #0]
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	b299      	uxth	r1, r3
 800e6d2:	4351      	muls	r1, r2
 800e6d4:	0c1b      	lsrs	r3, r3, #16
 800e6d6:	4353      	muls	r3, r2
 800e6d8:	1949      	adds	r1, r1, r5
 800e6da:	0c0d      	lsrs	r5, r1, #16
 800e6dc:	195b      	adds	r3, r3, r5
 800e6de:	0c1d      	lsrs	r5, r3, #16
 800e6e0:	b289      	uxth	r1, r1
 800e6e2:	041b      	lsls	r3, r3, #16
 800e6e4:	185b      	adds	r3, r3, r1
 800e6e6:	c608      	stmia	r6!, {r3}
 800e6e8:	4287      	cmp	r7, r0
 800e6ea:	dcef      	bgt.n	800e6cc <__multadd+0x10>
 800e6ec:	2d00      	cmp	r5, #0
 800e6ee:	d022      	beq.n	800e736 <__multadd+0x7a>
 800e6f0:	68a3      	ldr	r3, [r4, #8]
 800e6f2:	42bb      	cmp	r3, r7
 800e6f4:	dc19      	bgt.n	800e72a <__multadd+0x6e>
 800e6f6:	6863      	ldr	r3, [r4, #4]
 800e6f8:	9801      	ldr	r0, [sp, #4]
 800e6fa:	1c59      	adds	r1, r3, #1
 800e6fc:	f7ff ff76 	bl	800e5ec <_Balloc>
 800e700:	1e06      	subs	r6, r0, #0
 800e702:	d105      	bne.n	800e710 <__multadd+0x54>
 800e704:	0002      	movs	r2, r0
 800e706:	21b5      	movs	r1, #181	; 0xb5
 800e708:	4b0c      	ldr	r3, [pc, #48]	; (800e73c <__multadd+0x80>)
 800e70a:	480d      	ldr	r0, [pc, #52]	; (800e740 <__multadd+0x84>)
 800e70c:	f000 fc98 	bl	800f040 <__assert_func>
 800e710:	0021      	movs	r1, r4
 800e712:	6923      	ldr	r3, [r4, #16]
 800e714:	310c      	adds	r1, #12
 800e716:	1c9a      	adds	r2, r3, #2
 800e718:	0092      	lsls	r2, r2, #2
 800e71a:	300c      	adds	r0, #12
 800e71c:	f7fe fb0c 	bl	800cd38 <memcpy>
 800e720:	0021      	movs	r1, r4
 800e722:	9801      	ldr	r0, [sp, #4]
 800e724:	f7ff ffa6 	bl	800e674 <_Bfree>
 800e728:	0034      	movs	r4, r6
 800e72a:	1d3b      	adds	r3, r7, #4
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	18e3      	adds	r3, r4, r3
 800e730:	605d      	str	r5, [r3, #4]
 800e732:	1c7b      	adds	r3, r7, #1
 800e734:	6123      	str	r3, [r4, #16]
 800e736:	0020      	movs	r0, r4
 800e738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e73a:	46c0      	nop			; (mov r8, r8)
 800e73c:	0801021f 	.word	0x0801021f
 800e740:	08010230 	.word	0x08010230

0800e744 <__hi0bits>:
 800e744:	0003      	movs	r3, r0
 800e746:	0c02      	lsrs	r2, r0, #16
 800e748:	2000      	movs	r0, #0
 800e74a:	4282      	cmp	r2, r0
 800e74c:	d101      	bne.n	800e752 <__hi0bits+0xe>
 800e74e:	041b      	lsls	r3, r3, #16
 800e750:	3010      	adds	r0, #16
 800e752:	0e1a      	lsrs	r2, r3, #24
 800e754:	d101      	bne.n	800e75a <__hi0bits+0x16>
 800e756:	3008      	adds	r0, #8
 800e758:	021b      	lsls	r3, r3, #8
 800e75a:	0f1a      	lsrs	r2, r3, #28
 800e75c:	d101      	bne.n	800e762 <__hi0bits+0x1e>
 800e75e:	3004      	adds	r0, #4
 800e760:	011b      	lsls	r3, r3, #4
 800e762:	0f9a      	lsrs	r2, r3, #30
 800e764:	d101      	bne.n	800e76a <__hi0bits+0x26>
 800e766:	3002      	adds	r0, #2
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	db03      	blt.n	800e776 <__hi0bits+0x32>
 800e76e:	3001      	adds	r0, #1
 800e770:	005b      	lsls	r3, r3, #1
 800e772:	d400      	bmi.n	800e776 <__hi0bits+0x32>
 800e774:	2020      	movs	r0, #32
 800e776:	4770      	bx	lr

0800e778 <__lo0bits>:
 800e778:	6803      	ldr	r3, [r0, #0]
 800e77a:	0002      	movs	r2, r0
 800e77c:	2107      	movs	r1, #7
 800e77e:	0018      	movs	r0, r3
 800e780:	4008      	ands	r0, r1
 800e782:	420b      	tst	r3, r1
 800e784:	d00d      	beq.n	800e7a2 <__lo0bits+0x2a>
 800e786:	3906      	subs	r1, #6
 800e788:	2000      	movs	r0, #0
 800e78a:	420b      	tst	r3, r1
 800e78c:	d105      	bne.n	800e79a <__lo0bits+0x22>
 800e78e:	3002      	adds	r0, #2
 800e790:	4203      	tst	r3, r0
 800e792:	d003      	beq.n	800e79c <__lo0bits+0x24>
 800e794:	40cb      	lsrs	r3, r1
 800e796:	0008      	movs	r0, r1
 800e798:	6013      	str	r3, [r2, #0]
 800e79a:	4770      	bx	lr
 800e79c:	089b      	lsrs	r3, r3, #2
 800e79e:	6013      	str	r3, [r2, #0]
 800e7a0:	e7fb      	b.n	800e79a <__lo0bits+0x22>
 800e7a2:	b299      	uxth	r1, r3
 800e7a4:	2900      	cmp	r1, #0
 800e7a6:	d101      	bne.n	800e7ac <__lo0bits+0x34>
 800e7a8:	2010      	movs	r0, #16
 800e7aa:	0c1b      	lsrs	r3, r3, #16
 800e7ac:	b2d9      	uxtb	r1, r3
 800e7ae:	2900      	cmp	r1, #0
 800e7b0:	d101      	bne.n	800e7b6 <__lo0bits+0x3e>
 800e7b2:	3008      	adds	r0, #8
 800e7b4:	0a1b      	lsrs	r3, r3, #8
 800e7b6:	0719      	lsls	r1, r3, #28
 800e7b8:	d101      	bne.n	800e7be <__lo0bits+0x46>
 800e7ba:	3004      	adds	r0, #4
 800e7bc:	091b      	lsrs	r3, r3, #4
 800e7be:	0799      	lsls	r1, r3, #30
 800e7c0:	d101      	bne.n	800e7c6 <__lo0bits+0x4e>
 800e7c2:	3002      	adds	r0, #2
 800e7c4:	089b      	lsrs	r3, r3, #2
 800e7c6:	07d9      	lsls	r1, r3, #31
 800e7c8:	d4e9      	bmi.n	800e79e <__lo0bits+0x26>
 800e7ca:	3001      	adds	r0, #1
 800e7cc:	085b      	lsrs	r3, r3, #1
 800e7ce:	d1e6      	bne.n	800e79e <__lo0bits+0x26>
 800e7d0:	2020      	movs	r0, #32
 800e7d2:	e7e2      	b.n	800e79a <__lo0bits+0x22>

0800e7d4 <__i2b>:
 800e7d4:	b510      	push	{r4, lr}
 800e7d6:	000c      	movs	r4, r1
 800e7d8:	2101      	movs	r1, #1
 800e7da:	f7ff ff07 	bl	800e5ec <_Balloc>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d106      	bne.n	800e7f0 <__i2b+0x1c>
 800e7e2:	21a0      	movs	r1, #160	; 0xa0
 800e7e4:	0002      	movs	r2, r0
 800e7e6:	4b04      	ldr	r3, [pc, #16]	; (800e7f8 <__i2b+0x24>)
 800e7e8:	4804      	ldr	r0, [pc, #16]	; (800e7fc <__i2b+0x28>)
 800e7ea:	0049      	lsls	r1, r1, #1
 800e7ec:	f000 fc28 	bl	800f040 <__assert_func>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	6144      	str	r4, [r0, #20]
 800e7f4:	6103      	str	r3, [r0, #16]
 800e7f6:	bd10      	pop	{r4, pc}
 800e7f8:	0801021f 	.word	0x0801021f
 800e7fc:	08010230 	.word	0x08010230

0800e800 <__multiply>:
 800e800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e802:	690b      	ldr	r3, [r1, #16]
 800e804:	0014      	movs	r4, r2
 800e806:	6912      	ldr	r2, [r2, #16]
 800e808:	000d      	movs	r5, r1
 800e80a:	b089      	sub	sp, #36	; 0x24
 800e80c:	4293      	cmp	r3, r2
 800e80e:	da01      	bge.n	800e814 <__multiply+0x14>
 800e810:	0025      	movs	r5, r4
 800e812:	000c      	movs	r4, r1
 800e814:	692f      	ldr	r7, [r5, #16]
 800e816:	6926      	ldr	r6, [r4, #16]
 800e818:	6869      	ldr	r1, [r5, #4]
 800e81a:	19bb      	adds	r3, r7, r6
 800e81c:	9302      	str	r3, [sp, #8]
 800e81e:	68ab      	ldr	r3, [r5, #8]
 800e820:	19ba      	adds	r2, r7, r6
 800e822:	4293      	cmp	r3, r2
 800e824:	da00      	bge.n	800e828 <__multiply+0x28>
 800e826:	3101      	adds	r1, #1
 800e828:	f7ff fee0 	bl	800e5ec <_Balloc>
 800e82c:	9001      	str	r0, [sp, #4]
 800e82e:	2800      	cmp	r0, #0
 800e830:	d106      	bne.n	800e840 <__multiply+0x40>
 800e832:	215e      	movs	r1, #94	; 0x5e
 800e834:	0002      	movs	r2, r0
 800e836:	4b48      	ldr	r3, [pc, #288]	; (800e958 <__multiply+0x158>)
 800e838:	4848      	ldr	r0, [pc, #288]	; (800e95c <__multiply+0x15c>)
 800e83a:	31ff      	adds	r1, #255	; 0xff
 800e83c:	f000 fc00 	bl	800f040 <__assert_func>
 800e840:	9b01      	ldr	r3, [sp, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	3314      	adds	r3, #20
 800e846:	469c      	mov	ip, r3
 800e848:	19bb      	adds	r3, r7, r6
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	4463      	add	r3, ip
 800e84e:	9303      	str	r3, [sp, #12]
 800e850:	4663      	mov	r3, ip
 800e852:	9903      	ldr	r1, [sp, #12]
 800e854:	428b      	cmp	r3, r1
 800e856:	d32c      	bcc.n	800e8b2 <__multiply+0xb2>
 800e858:	002b      	movs	r3, r5
 800e85a:	0022      	movs	r2, r4
 800e85c:	3314      	adds	r3, #20
 800e85e:	00bf      	lsls	r7, r7, #2
 800e860:	3214      	adds	r2, #20
 800e862:	9306      	str	r3, [sp, #24]
 800e864:	00b6      	lsls	r6, r6, #2
 800e866:	19db      	adds	r3, r3, r7
 800e868:	9304      	str	r3, [sp, #16]
 800e86a:	1993      	adds	r3, r2, r6
 800e86c:	9307      	str	r3, [sp, #28]
 800e86e:	2304      	movs	r3, #4
 800e870:	9305      	str	r3, [sp, #20]
 800e872:	002b      	movs	r3, r5
 800e874:	9904      	ldr	r1, [sp, #16]
 800e876:	3315      	adds	r3, #21
 800e878:	9200      	str	r2, [sp, #0]
 800e87a:	4299      	cmp	r1, r3
 800e87c:	d305      	bcc.n	800e88a <__multiply+0x8a>
 800e87e:	1b4b      	subs	r3, r1, r5
 800e880:	3b15      	subs	r3, #21
 800e882:	089b      	lsrs	r3, r3, #2
 800e884:	3301      	adds	r3, #1
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	9305      	str	r3, [sp, #20]
 800e88a:	9b07      	ldr	r3, [sp, #28]
 800e88c:	9a00      	ldr	r2, [sp, #0]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d311      	bcc.n	800e8b6 <__multiply+0xb6>
 800e892:	9b02      	ldr	r3, [sp, #8]
 800e894:	2b00      	cmp	r3, #0
 800e896:	dd06      	ble.n	800e8a6 <__multiply+0xa6>
 800e898:	9b03      	ldr	r3, [sp, #12]
 800e89a:	3b04      	subs	r3, #4
 800e89c:	9303      	str	r3, [sp, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d053      	beq.n	800e94e <__multiply+0x14e>
 800e8a6:	9b01      	ldr	r3, [sp, #4]
 800e8a8:	9a02      	ldr	r2, [sp, #8]
 800e8aa:	0018      	movs	r0, r3
 800e8ac:	611a      	str	r2, [r3, #16]
 800e8ae:	b009      	add	sp, #36	; 0x24
 800e8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8b2:	c304      	stmia	r3!, {r2}
 800e8b4:	e7cd      	b.n	800e852 <__multiply+0x52>
 800e8b6:	9b00      	ldr	r3, [sp, #0]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	b298      	uxth	r0, r3
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d01b      	beq.n	800e8f8 <__multiply+0xf8>
 800e8c0:	4667      	mov	r7, ip
 800e8c2:	2400      	movs	r4, #0
 800e8c4:	9e06      	ldr	r6, [sp, #24]
 800e8c6:	ce02      	ldmia	r6!, {r1}
 800e8c8:	683a      	ldr	r2, [r7, #0]
 800e8ca:	b28b      	uxth	r3, r1
 800e8cc:	4343      	muls	r3, r0
 800e8ce:	b292      	uxth	r2, r2
 800e8d0:	189b      	adds	r3, r3, r2
 800e8d2:	191b      	adds	r3, r3, r4
 800e8d4:	0c0c      	lsrs	r4, r1, #16
 800e8d6:	4344      	muls	r4, r0
 800e8d8:	683a      	ldr	r2, [r7, #0]
 800e8da:	0c11      	lsrs	r1, r2, #16
 800e8dc:	1861      	adds	r1, r4, r1
 800e8de:	0c1c      	lsrs	r4, r3, #16
 800e8e0:	1909      	adds	r1, r1, r4
 800e8e2:	0c0c      	lsrs	r4, r1, #16
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	0409      	lsls	r1, r1, #16
 800e8e8:	430b      	orrs	r3, r1
 800e8ea:	c708      	stmia	r7!, {r3}
 800e8ec:	9b04      	ldr	r3, [sp, #16]
 800e8ee:	42b3      	cmp	r3, r6
 800e8f0:	d8e9      	bhi.n	800e8c6 <__multiply+0xc6>
 800e8f2:	4663      	mov	r3, ip
 800e8f4:	9a05      	ldr	r2, [sp, #20]
 800e8f6:	509c      	str	r4, [r3, r2]
 800e8f8:	9b00      	ldr	r3, [sp, #0]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	0c1e      	lsrs	r6, r3, #16
 800e8fe:	d020      	beq.n	800e942 <__multiply+0x142>
 800e900:	4663      	mov	r3, ip
 800e902:	002c      	movs	r4, r5
 800e904:	4660      	mov	r0, ip
 800e906:	2700      	movs	r7, #0
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3414      	adds	r4, #20
 800e90c:	6822      	ldr	r2, [r4, #0]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	b291      	uxth	r1, r2
 800e912:	4371      	muls	r1, r6
 800e914:	6802      	ldr	r2, [r0, #0]
 800e916:	0c12      	lsrs	r2, r2, #16
 800e918:	1889      	adds	r1, r1, r2
 800e91a:	19cf      	adds	r7, r1, r7
 800e91c:	0439      	lsls	r1, r7, #16
 800e91e:	430b      	orrs	r3, r1
 800e920:	6003      	str	r3, [r0, #0]
 800e922:	cc02      	ldmia	r4!, {r1}
 800e924:	6843      	ldr	r3, [r0, #4]
 800e926:	0c09      	lsrs	r1, r1, #16
 800e928:	4371      	muls	r1, r6
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	0c3f      	lsrs	r7, r7, #16
 800e92e:	18cb      	adds	r3, r1, r3
 800e930:	9a04      	ldr	r2, [sp, #16]
 800e932:	19db      	adds	r3, r3, r7
 800e934:	0c1f      	lsrs	r7, r3, #16
 800e936:	3004      	adds	r0, #4
 800e938:	42a2      	cmp	r2, r4
 800e93a:	d8e7      	bhi.n	800e90c <__multiply+0x10c>
 800e93c:	4662      	mov	r2, ip
 800e93e:	9905      	ldr	r1, [sp, #20]
 800e940:	5053      	str	r3, [r2, r1]
 800e942:	9b00      	ldr	r3, [sp, #0]
 800e944:	3304      	adds	r3, #4
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	2304      	movs	r3, #4
 800e94a:	449c      	add	ip, r3
 800e94c:	e79d      	b.n	800e88a <__multiply+0x8a>
 800e94e:	9b02      	ldr	r3, [sp, #8]
 800e950:	3b01      	subs	r3, #1
 800e952:	9302      	str	r3, [sp, #8]
 800e954:	e79d      	b.n	800e892 <__multiply+0x92>
 800e956:	46c0      	nop			; (mov r8, r8)
 800e958:	0801021f 	.word	0x0801021f
 800e95c:	08010230 	.word	0x08010230

0800e960 <__pow5mult>:
 800e960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e962:	2303      	movs	r3, #3
 800e964:	0015      	movs	r5, r2
 800e966:	0007      	movs	r7, r0
 800e968:	000e      	movs	r6, r1
 800e96a:	401a      	ands	r2, r3
 800e96c:	421d      	tst	r5, r3
 800e96e:	d008      	beq.n	800e982 <__pow5mult+0x22>
 800e970:	4925      	ldr	r1, [pc, #148]	; (800ea08 <__pow5mult+0xa8>)
 800e972:	3a01      	subs	r2, #1
 800e974:	0092      	lsls	r2, r2, #2
 800e976:	5852      	ldr	r2, [r2, r1]
 800e978:	2300      	movs	r3, #0
 800e97a:	0031      	movs	r1, r6
 800e97c:	f7ff fe9e 	bl	800e6bc <__multadd>
 800e980:	0006      	movs	r6, r0
 800e982:	10ad      	asrs	r5, r5, #2
 800e984:	d03d      	beq.n	800ea02 <__pow5mult+0xa2>
 800e986:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e988:	2c00      	cmp	r4, #0
 800e98a:	d10f      	bne.n	800e9ac <__pow5mult+0x4c>
 800e98c:	2010      	movs	r0, #16
 800e98e:	f7fe f9bb 	bl	800cd08 <malloc>
 800e992:	1e02      	subs	r2, r0, #0
 800e994:	6278      	str	r0, [r7, #36]	; 0x24
 800e996:	d105      	bne.n	800e9a4 <__pow5mult+0x44>
 800e998:	21d7      	movs	r1, #215	; 0xd7
 800e99a:	4b1c      	ldr	r3, [pc, #112]	; (800ea0c <__pow5mult+0xac>)
 800e99c:	481c      	ldr	r0, [pc, #112]	; (800ea10 <__pow5mult+0xb0>)
 800e99e:	0049      	lsls	r1, r1, #1
 800e9a0:	f000 fb4e 	bl	800f040 <__assert_func>
 800e9a4:	6044      	str	r4, [r0, #4]
 800e9a6:	6084      	str	r4, [r0, #8]
 800e9a8:	6004      	str	r4, [r0, #0]
 800e9aa:	60c4      	str	r4, [r0, #12]
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ae:	689c      	ldr	r4, [r3, #8]
 800e9b0:	9301      	str	r3, [sp, #4]
 800e9b2:	2c00      	cmp	r4, #0
 800e9b4:	d108      	bne.n	800e9c8 <__pow5mult+0x68>
 800e9b6:	0038      	movs	r0, r7
 800e9b8:	4916      	ldr	r1, [pc, #88]	; (800ea14 <__pow5mult+0xb4>)
 800e9ba:	f7ff ff0b 	bl	800e7d4 <__i2b>
 800e9be:	9b01      	ldr	r3, [sp, #4]
 800e9c0:	0004      	movs	r4, r0
 800e9c2:	6098      	str	r0, [r3, #8]
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	6003      	str	r3, [r0, #0]
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	421d      	tst	r5, r3
 800e9cc:	d00a      	beq.n	800e9e4 <__pow5mult+0x84>
 800e9ce:	0031      	movs	r1, r6
 800e9d0:	0022      	movs	r2, r4
 800e9d2:	0038      	movs	r0, r7
 800e9d4:	f7ff ff14 	bl	800e800 <__multiply>
 800e9d8:	0031      	movs	r1, r6
 800e9da:	9001      	str	r0, [sp, #4]
 800e9dc:	0038      	movs	r0, r7
 800e9de:	f7ff fe49 	bl	800e674 <_Bfree>
 800e9e2:	9e01      	ldr	r6, [sp, #4]
 800e9e4:	106d      	asrs	r5, r5, #1
 800e9e6:	d00c      	beq.n	800ea02 <__pow5mult+0xa2>
 800e9e8:	6820      	ldr	r0, [r4, #0]
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d107      	bne.n	800e9fe <__pow5mult+0x9e>
 800e9ee:	0022      	movs	r2, r4
 800e9f0:	0021      	movs	r1, r4
 800e9f2:	0038      	movs	r0, r7
 800e9f4:	f7ff ff04 	bl	800e800 <__multiply>
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	6020      	str	r0, [r4, #0]
 800e9fc:	6003      	str	r3, [r0, #0]
 800e9fe:	0004      	movs	r4, r0
 800ea00:	e7e2      	b.n	800e9c8 <__pow5mult+0x68>
 800ea02:	0030      	movs	r0, r6
 800ea04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ea06:	46c0      	nop			; (mov r8, r8)
 800ea08:	08010380 	.word	0x08010380
 800ea0c:	080101ad 	.word	0x080101ad
 800ea10:	08010230 	.word	0x08010230
 800ea14:	00000271 	.word	0x00000271

0800ea18 <__lshift>:
 800ea18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea1a:	000c      	movs	r4, r1
 800ea1c:	0017      	movs	r7, r2
 800ea1e:	6923      	ldr	r3, [r4, #16]
 800ea20:	1155      	asrs	r5, r2, #5
 800ea22:	b087      	sub	sp, #28
 800ea24:	18eb      	adds	r3, r5, r3
 800ea26:	9302      	str	r3, [sp, #8]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	9301      	str	r3, [sp, #4]
 800ea2c:	6849      	ldr	r1, [r1, #4]
 800ea2e:	68a3      	ldr	r3, [r4, #8]
 800ea30:	9004      	str	r0, [sp, #16]
 800ea32:	9a01      	ldr	r2, [sp, #4]
 800ea34:	4293      	cmp	r3, r2
 800ea36:	db10      	blt.n	800ea5a <__lshift+0x42>
 800ea38:	9804      	ldr	r0, [sp, #16]
 800ea3a:	f7ff fdd7 	bl	800e5ec <_Balloc>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	0002      	movs	r2, r0
 800ea42:	0006      	movs	r6, r0
 800ea44:	0019      	movs	r1, r3
 800ea46:	3214      	adds	r2, #20
 800ea48:	4298      	cmp	r0, r3
 800ea4a:	d10c      	bne.n	800ea66 <__lshift+0x4e>
 800ea4c:	21da      	movs	r1, #218	; 0xda
 800ea4e:	0002      	movs	r2, r0
 800ea50:	4b26      	ldr	r3, [pc, #152]	; (800eaec <__lshift+0xd4>)
 800ea52:	4827      	ldr	r0, [pc, #156]	; (800eaf0 <__lshift+0xd8>)
 800ea54:	31ff      	adds	r1, #255	; 0xff
 800ea56:	f000 faf3 	bl	800f040 <__assert_func>
 800ea5a:	3101      	adds	r1, #1
 800ea5c:	005b      	lsls	r3, r3, #1
 800ea5e:	e7e8      	b.n	800ea32 <__lshift+0x1a>
 800ea60:	0098      	lsls	r0, r3, #2
 800ea62:	5011      	str	r1, [r2, r0]
 800ea64:	3301      	adds	r3, #1
 800ea66:	42ab      	cmp	r3, r5
 800ea68:	dbfa      	blt.n	800ea60 <__lshift+0x48>
 800ea6a:	43eb      	mvns	r3, r5
 800ea6c:	17db      	asrs	r3, r3, #31
 800ea6e:	401d      	ands	r5, r3
 800ea70:	211f      	movs	r1, #31
 800ea72:	0023      	movs	r3, r4
 800ea74:	0038      	movs	r0, r7
 800ea76:	00ad      	lsls	r5, r5, #2
 800ea78:	1955      	adds	r5, r2, r5
 800ea7a:	6922      	ldr	r2, [r4, #16]
 800ea7c:	3314      	adds	r3, #20
 800ea7e:	0092      	lsls	r2, r2, #2
 800ea80:	4008      	ands	r0, r1
 800ea82:	4684      	mov	ip, r0
 800ea84:	189a      	adds	r2, r3, r2
 800ea86:	420f      	tst	r7, r1
 800ea88:	d02a      	beq.n	800eae0 <__lshift+0xc8>
 800ea8a:	3101      	adds	r1, #1
 800ea8c:	1a09      	subs	r1, r1, r0
 800ea8e:	9105      	str	r1, [sp, #20]
 800ea90:	2100      	movs	r1, #0
 800ea92:	9503      	str	r5, [sp, #12]
 800ea94:	4667      	mov	r7, ip
 800ea96:	6818      	ldr	r0, [r3, #0]
 800ea98:	40b8      	lsls	r0, r7
 800ea9a:	4301      	orrs	r1, r0
 800ea9c:	9803      	ldr	r0, [sp, #12]
 800ea9e:	c002      	stmia	r0!, {r1}
 800eaa0:	cb02      	ldmia	r3!, {r1}
 800eaa2:	9003      	str	r0, [sp, #12]
 800eaa4:	9805      	ldr	r0, [sp, #20]
 800eaa6:	40c1      	lsrs	r1, r0
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d8f3      	bhi.n	800ea94 <__lshift+0x7c>
 800eaac:	0020      	movs	r0, r4
 800eaae:	3015      	adds	r0, #21
 800eab0:	2304      	movs	r3, #4
 800eab2:	4282      	cmp	r2, r0
 800eab4:	d304      	bcc.n	800eac0 <__lshift+0xa8>
 800eab6:	1b13      	subs	r3, r2, r4
 800eab8:	3b15      	subs	r3, #21
 800eaba:	089b      	lsrs	r3, r3, #2
 800eabc:	3301      	adds	r3, #1
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	50e9      	str	r1, [r5, r3]
 800eac2:	2900      	cmp	r1, #0
 800eac4:	d002      	beq.n	800eacc <__lshift+0xb4>
 800eac6:	9b02      	ldr	r3, [sp, #8]
 800eac8:	3302      	adds	r3, #2
 800eaca:	9301      	str	r3, [sp, #4]
 800eacc:	9b01      	ldr	r3, [sp, #4]
 800eace:	9804      	ldr	r0, [sp, #16]
 800ead0:	3b01      	subs	r3, #1
 800ead2:	0021      	movs	r1, r4
 800ead4:	6133      	str	r3, [r6, #16]
 800ead6:	f7ff fdcd 	bl	800e674 <_Bfree>
 800eada:	0030      	movs	r0, r6
 800eadc:	b007      	add	sp, #28
 800eade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eae0:	cb02      	ldmia	r3!, {r1}
 800eae2:	c502      	stmia	r5!, {r1}
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d8fb      	bhi.n	800eae0 <__lshift+0xc8>
 800eae8:	e7f0      	b.n	800eacc <__lshift+0xb4>
 800eaea:	46c0      	nop			; (mov r8, r8)
 800eaec:	0801021f 	.word	0x0801021f
 800eaf0:	08010230 	.word	0x08010230

0800eaf4 <__mcmp>:
 800eaf4:	6902      	ldr	r2, [r0, #16]
 800eaf6:	690b      	ldr	r3, [r1, #16]
 800eaf8:	b530      	push	{r4, r5, lr}
 800eafa:	0004      	movs	r4, r0
 800eafc:	1ad0      	subs	r0, r2, r3
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d10d      	bne.n	800eb1e <__mcmp+0x2a>
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	3414      	adds	r4, #20
 800eb06:	3114      	adds	r1, #20
 800eb08:	18e2      	adds	r2, r4, r3
 800eb0a:	18c9      	adds	r1, r1, r3
 800eb0c:	3a04      	subs	r2, #4
 800eb0e:	3904      	subs	r1, #4
 800eb10:	6815      	ldr	r5, [r2, #0]
 800eb12:	680b      	ldr	r3, [r1, #0]
 800eb14:	429d      	cmp	r5, r3
 800eb16:	d003      	beq.n	800eb20 <__mcmp+0x2c>
 800eb18:	2001      	movs	r0, #1
 800eb1a:	429d      	cmp	r5, r3
 800eb1c:	d303      	bcc.n	800eb26 <__mcmp+0x32>
 800eb1e:	bd30      	pop	{r4, r5, pc}
 800eb20:	4294      	cmp	r4, r2
 800eb22:	d3f3      	bcc.n	800eb0c <__mcmp+0x18>
 800eb24:	e7fb      	b.n	800eb1e <__mcmp+0x2a>
 800eb26:	4240      	negs	r0, r0
 800eb28:	e7f9      	b.n	800eb1e <__mcmp+0x2a>
	...

0800eb2c <__mdiff>:
 800eb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb2e:	000e      	movs	r6, r1
 800eb30:	0007      	movs	r7, r0
 800eb32:	0011      	movs	r1, r2
 800eb34:	0030      	movs	r0, r6
 800eb36:	b087      	sub	sp, #28
 800eb38:	0014      	movs	r4, r2
 800eb3a:	f7ff ffdb 	bl	800eaf4 <__mcmp>
 800eb3e:	1e05      	subs	r5, r0, #0
 800eb40:	d110      	bne.n	800eb64 <__mdiff+0x38>
 800eb42:	0001      	movs	r1, r0
 800eb44:	0038      	movs	r0, r7
 800eb46:	f7ff fd51 	bl	800e5ec <_Balloc>
 800eb4a:	1e02      	subs	r2, r0, #0
 800eb4c:	d104      	bne.n	800eb58 <__mdiff+0x2c>
 800eb4e:	4b40      	ldr	r3, [pc, #256]	; (800ec50 <__mdiff+0x124>)
 800eb50:	4940      	ldr	r1, [pc, #256]	; (800ec54 <__mdiff+0x128>)
 800eb52:	4841      	ldr	r0, [pc, #260]	; (800ec58 <__mdiff+0x12c>)
 800eb54:	f000 fa74 	bl	800f040 <__assert_func>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	6145      	str	r5, [r0, #20]
 800eb5c:	6103      	str	r3, [r0, #16]
 800eb5e:	0010      	movs	r0, r2
 800eb60:	b007      	add	sp, #28
 800eb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb64:	2301      	movs	r3, #1
 800eb66:	9301      	str	r3, [sp, #4]
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	db04      	blt.n	800eb76 <__mdiff+0x4a>
 800eb6c:	0023      	movs	r3, r4
 800eb6e:	0034      	movs	r4, r6
 800eb70:	001e      	movs	r6, r3
 800eb72:	2300      	movs	r3, #0
 800eb74:	9301      	str	r3, [sp, #4]
 800eb76:	0038      	movs	r0, r7
 800eb78:	6861      	ldr	r1, [r4, #4]
 800eb7a:	f7ff fd37 	bl	800e5ec <_Balloc>
 800eb7e:	1e02      	subs	r2, r0, #0
 800eb80:	d103      	bne.n	800eb8a <__mdiff+0x5e>
 800eb82:	2190      	movs	r1, #144	; 0x90
 800eb84:	4b32      	ldr	r3, [pc, #200]	; (800ec50 <__mdiff+0x124>)
 800eb86:	0089      	lsls	r1, r1, #2
 800eb88:	e7e3      	b.n	800eb52 <__mdiff+0x26>
 800eb8a:	9b01      	ldr	r3, [sp, #4]
 800eb8c:	2700      	movs	r7, #0
 800eb8e:	60c3      	str	r3, [r0, #12]
 800eb90:	6920      	ldr	r0, [r4, #16]
 800eb92:	3414      	adds	r4, #20
 800eb94:	9401      	str	r4, [sp, #4]
 800eb96:	9b01      	ldr	r3, [sp, #4]
 800eb98:	0084      	lsls	r4, r0, #2
 800eb9a:	191b      	adds	r3, r3, r4
 800eb9c:	0034      	movs	r4, r6
 800eb9e:	9302      	str	r3, [sp, #8]
 800eba0:	6933      	ldr	r3, [r6, #16]
 800eba2:	3414      	adds	r4, #20
 800eba4:	0099      	lsls	r1, r3, #2
 800eba6:	1863      	adds	r3, r4, r1
 800eba8:	9303      	str	r3, [sp, #12]
 800ebaa:	0013      	movs	r3, r2
 800ebac:	3314      	adds	r3, #20
 800ebae:	469c      	mov	ip, r3
 800ebb0:	9305      	str	r3, [sp, #20]
 800ebb2:	9b01      	ldr	r3, [sp, #4]
 800ebb4:	9304      	str	r3, [sp, #16]
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	cc02      	ldmia	r4!, {r1}
 800ebba:	cb20      	ldmia	r3!, {r5}
 800ebbc:	9304      	str	r3, [sp, #16]
 800ebbe:	b2ab      	uxth	r3, r5
 800ebc0:	19df      	adds	r7, r3, r7
 800ebc2:	b28b      	uxth	r3, r1
 800ebc4:	1afb      	subs	r3, r7, r3
 800ebc6:	0c09      	lsrs	r1, r1, #16
 800ebc8:	0c2d      	lsrs	r5, r5, #16
 800ebca:	1a6d      	subs	r5, r5, r1
 800ebcc:	1419      	asrs	r1, r3, #16
 800ebce:	186d      	adds	r5, r5, r1
 800ebd0:	4661      	mov	r1, ip
 800ebd2:	142f      	asrs	r7, r5, #16
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	042d      	lsls	r5, r5, #16
 800ebd8:	432b      	orrs	r3, r5
 800ebda:	c108      	stmia	r1!, {r3}
 800ebdc:	9b03      	ldr	r3, [sp, #12]
 800ebde:	468c      	mov	ip, r1
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	d8e8      	bhi.n	800ebb6 <__mdiff+0x8a>
 800ebe4:	0031      	movs	r1, r6
 800ebe6:	9c03      	ldr	r4, [sp, #12]
 800ebe8:	3115      	adds	r1, #21
 800ebea:	2304      	movs	r3, #4
 800ebec:	428c      	cmp	r4, r1
 800ebee:	d304      	bcc.n	800ebfa <__mdiff+0xce>
 800ebf0:	1ba3      	subs	r3, r4, r6
 800ebf2:	3b15      	subs	r3, #21
 800ebf4:	089b      	lsrs	r3, r3, #2
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	9901      	ldr	r1, [sp, #4]
 800ebfc:	18cc      	adds	r4, r1, r3
 800ebfe:	9905      	ldr	r1, [sp, #20]
 800ec00:	0026      	movs	r6, r4
 800ec02:	18cb      	adds	r3, r1, r3
 800ec04:	469c      	mov	ip, r3
 800ec06:	9902      	ldr	r1, [sp, #8]
 800ec08:	428e      	cmp	r6, r1
 800ec0a:	d310      	bcc.n	800ec2e <__mdiff+0x102>
 800ec0c:	9e02      	ldr	r6, [sp, #8]
 800ec0e:	1ee1      	subs	r1, r4, #3
 800ec10:	2500      	movs	r5, #0
 800ec12:	428e      	cmp	r6, r1
 800ec14:	d304      	bcc.n	800ec20 <__mdiff+0xf4>
 800ec16:	0031      	movs	r1, r6
 800ec18:	3103      	adds	r1, #3
 800ec1a:	1b0c      	subs	r4, r1, r4
 800ec1c:	08a4      	lsrs	r4, r4, #2
 800ec1e:	00a5      	lsls	r5, r4, #2
 800ec20:	195b      	adds	r3, r3, r5
 800ec22:	3b04      	subs	r3, #4
 800ec24:	6819      	ldr	r1, [r3, #0]
 800ec26:	2900      	cmp	r1, #0
 800ec28:	d00f      	beq.n	800ec4a <__mdiff+0x11e>
 800ec2a:	6110      	str	r0, [r2, #16]
 800ec2c:	e797      	b.n	800eb5e <__mdiff+0x32>
 800ec2e:	ce02      	ldmia	r6!, {r1}
 800ec30:	b28d      	uxth	r5, r1
 800ec32:	19ed      	adds	r5, r5, r7
 800ec34:	0c0f      	lsrs	r7, r1, #16
 800ec36:	1429      	asrs	r1, r5, #16
 800ec38:	1879      	adds	r1, r7, r1
 800ec3a:	140f      	asrs	r7, r1, #16
 800ec3c:	b2ad      	uxth	r5, r5
 800ec3e:	0409      	lsls	r1, r1, #16
 800ec40:	430d      	orrs	r5, r1
 800ec42:	4661      	mov	r1, ip
 800ec44:	c120      	stmia	r1!, {r5}
 800ec46:	468c      	mov	ip, r1
 800ec48:	e7dd      	b.n	800ec06 <__mdiff+0xda>
 800ec4a:	3801      	subs	r0, #1
 800ec4c:	e7e9      	b.n	800ec22 <__mdiff+0xf6>
 800ec4e:	46c0      	nop			; (mov r8, r8)
 800ec50:	0801021f 	.word	0x0801021f
 800ec54:	00000232 	.word	0x00000232
 800ec58:	08010230 	.word	0x08010230

0800ec5c <__d2b>:
 800ec5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec5e:	2101      	movs	r1, #1
 800ec60:	0014      	movs	r4, r2
 800ec62:	001e      	movs	r6, r3
 800ec64:	9f08      	ldr	r7, [sp, #32]
 800ec66:	f7ff fcc1 	bl	800e5ec <_Balloc>
 800ec6a:	1e05      	subs	r5, r0, #0
 800ec6c:	d105      	bne.n	800ec7a <__d2b+0x1e>
 800ec6e:	0002      	movs	r2, r0
 800ec70:	4b26      	ldr	r3, [pc, #152]	; (800ed0c <__d2b+0xb0>)
 800ec72:	4927      	ldr	r1, [pc, #156]	; (800ed10 <__d2b+0xb4>)
 800ec74:	4827      	ldr	r0, [pc, #156]	; (800ed14 <__d2b+0xb8>)
 800ec76:	f000 f9e3 	bl	800f040 <__assert_func>
 800ec7a:	0333      	lsls	r3, r6, #12
 800ec7c:	0076      	lsls	r6, r6, #1
 800ec7e:	0b1b      	lsrs	r3, r3, #12
 800ec80:	0d76      	lsrs	r6, r6, #21
 800ec82:	d124      	bne.n	800ecce <__d2b+0x72>
 800ec84:	9301      	str	r3, [sp, #4]
 800ec86:	2c00      	cmp	r4, #0
 800ec88:	d027      	beq.n	800ecda <__d2b+0x7e>
 800ec8a:	4668      	mov	r0, sp
 800ec8c:	9400      	str	r4, [sp, #0]
 800ec8e:	f7ff fd73 	bl	800e778 <__lo0bits>
 800ec92:	9c00      	ldr	r4, [sp, #0]
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d01e      	beq.n	800ecd6 <__d2b+0x7a>
 800ec98:	9b01      	ldr	r3, [sp, #4]
 800ec9a:	2120      	movs	r1, #32
 800ec9c:	001a      	movs	r2, r3
 800ec9e:	1a09      	subs	r1, r1, r0
 800eca0:	408a      	lsls	r2, r1
 800eca2:	40c3      	lsrs	r3, r0
 800eca4:	4322      	orrs	r2, r4
 800eca6:	616a      	str	r2, [r5, #20]
 800eca8:	9301      	str	r3, [sp, #4]
 800ecaa:	9c01      	ldr	r4, [sp, #4]
 800ecac:	61ac      	str	r4, [r5, #24]
 800ecae:	1e63      	subs	r3, r4, #1
 800ecb0:	419c      	sbcs	r4, r3
 800ecb2:	3401      	adds	r4, #1
 800ecb4:	612c      	str	r4, [r5, #16]
 800ecb6:	2e00      	cmp	r6, #0
 800ecb8:	d018      	beq.n	800ecec <__d2b+0x90>
 800ecba:	4b17      	ldr	r3, [pc, #92]	; (800ed18 <__d2b+0xbc>)
 800ecbc:	18f6      	adds	r6, r6, r3
 800ecbe:	2335      	movs	r3, #53	; 0x35
 800ecc0:	1836      	adds	r6, r6, r0
 800ecc2:	1a18      	subs	r0, r3, r0
 800ecc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecc6:	603e      	str	r6, [r7, #0]
 800ecc8:	6018      	str	r0, [r3, #0]
 800ecca:	0028      	movs	r0, r5
 800eccc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ecce:	2280      	movs	r2, #128	; 0x80
 800ecd0:	0352      	lsls	r2, r2, #13
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	e7d6      	b.n	800ec84 <__d2b+0x28>
 800ecd6:	616c      	str	r4, [r5, #20]
 800ecd8:	e7e7      	b.n	800ecaa <__d2b+0x4e>
 800ecda:	a801      	add	r0, sp, #4
 800ecdc:	f7ff fd4c 	bl	800e778 <__lo0bits>
 800ece0:	2401      	movs	r4, #1
 800ece2:	9b01      	ldr	r3, [sp, #4]
 800ece4:	612c      	str	r4, [r5, #16]
 800ece6:	616b      	str	r3, [r5, #20]
 800ece8:	3020      	adds	r0, #32
 800ecea:	e7e4      	b.n	800ecb6 <__d2b+0x5a>
 800ecec:	4b0b      	ldr	r3, [pc, #44]	; (800ed1c <__d2b+0xc0>)
 800ecee:	18c0      	adds	r0, r0, r3
 800ecf0:	4b0b      	ldr	r3, [pc, #44]	; (800ed20 <__d2b+0xc4>)
 800ecf2:	6038      	str	r0, [r7, #0]
 800ecf4:	18e3      	adds	r3, r4, r3
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	18eb      	adds	r3, r5, r3
 800ecfa:	6958      	ldr	r0, [r3, #20]
 800ecfc:	f7ff fd22 	bl	800e744 <__hi0bits>
 800ed00:	0164      	lsls	r4, r4, #5
 800ed02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed04:	1a24      	subs	r4, r4, r0
 800ed06:	601c      	str	r4, [r3, #0]
 800ed08:	e7df      	b.n	800ecca <__d2b+0x6e>
 800ed0a:	46c0      	nop			; (mov r8, r8)
 800ed0c:	0801021f 	.word	0x0801021f
 800ed10:	0000030a 	.word	0x0000030a
 800ed14:	08010230 	.word	0x08010230
 800ed18:	fffffbcd 	.word	0xfffffbcd
 800ed1c:	fffffbce 	.word	0xfffffbce
 800ed20:	3fffffff 	.word	0x3fffffff

0800ed24 <_calloc_r>:
 800ed24:	b570      	push	{r4, r5, r6, lr}
 800ed26:	0c13      	lsrs	r3, r2, #16
 800ed28:	0c0d      	lsrs	r5, r1, #16
 800ed2a:	d11e      	bne.n	800ed6a <_calloc_r+0x46>
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10c      	bne.n	800ed4a <_calloc_r+0x26>
 800ed30:	b289      	uxth	r1, r1
 800ed32:	b294      	uxth	r4, r2
 800ed34:	434c      	muls	r4, r1
 800ed36:	0021      	movs	r1, r4
 800ed38:	f7fe f87c 	bl	800ce34 <_malloc_r>
 800ed3c:	1e05      	subs	r5, r0, #0
 800ed3e:	d01b      	beq.n	800ed78 <_calloc_r+0x54>
 800ed40:	0022      	movs	r2, r4
 800ed42:	2100      	movs	r1, #0
 800ed44:	f7fe f801 	bl	800cd4a <memset>
 800ed48:	e016      	b.n	800ed78 <_calloc_r+0x54>
 800ed4a:	1c1d      	adds	r5, r3, #0
 800ed4c:	1c0b      	adds	r3, r1, #0
 800ed4e:	b292      	uxth	r2, r2
 800ed50:	b289      	uxth	r1, r1
 800ed52:	b29c      	uxth	r4, r3
 800ed54:	4351      	muls	r1, r2
 800ed56:	b2ab      	uxth	r3, r5
 800ed58:	4363      	muls	r3, r4
 800ed5a:	0c0c      	lsrs	r4, r1, #16
 800ed5c:	191c      	adds	r4, r3, r4
 800ed5e:	0c22      	lsrs	r2, r4, #16
 800ed60:	d107      	bne.n	800ed72 <_calloc_r+0x4e>
 800ed62:	0424      	lsls	r4, r4, #16
 800ed64:	b289      	uxth	r1, r1
 800ed66:	430c      	orrs	r4, r1
 800ed68:	e7e5      	b.n	800ed36 <_calloc_r+0x12>
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d101      	bne.n	800ed72 <_calloc_r+0x4e>
 800ed6e:	1c13      	adds	r3, r2, #0
 800ed70:	e7ed      	b.n	800ed4e <_calloc_r+0x2a>
 800ed72:	230c      	movs	r3, #12
 800ed74:	2500      	movs	r5, #0
 800ed76:	6003      	str	r3, [r0, #0]
 800ed78:	0028      	movs	r0, r5
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}

0800ed7c <__ssputs_r>:
 800ed7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed7e:	688e      	ldr	r6, [r1, #8]
 800ed80:	b085      	sub	sp, #20
 800ed82:	0007      	movs	r7, r0
 800ed84:	000c      	movs	r4, r1
 800ed86:	9203      	str	r2, [sp, #12]
 800ed88:	9301      	str	r3, [sp, #4]
 800ed8a:	429e      	cmp	r6, r3
 800ed8c:	d83c      	bhi.n	800ee08 <__ssputs_r+0x8c>
 800ed8e:	2390      	movs	r3, #144	; 0x90
 800ed90:	898a      	ldrh	r2, [r1, #12]
 800ed92:	00db      	lsls	r3, r3, #3
 800ed94:	421a      	tst	r2, r3
 800ed96:	d034      	beq.n	800ee02 <__ssputs_r+0x86>
 800ed98:	6909      	ldr	r1, [r1, #16]
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	6960      	ldr	r0, [r4, #20]
 800ed9e:	1a5b      	subs	r3, r3, r1
 800eda0:	9302      	str	r3, [sp, #8]
 800eda2:	2303      	movs	r3, #3
 800eda4:	4343      	muls	r3, r0
 800eda6:	0fdd      	lsrs	r5, r3, #31
 800eda8:	18ed      	adds	r5, r5, r3
 800edaa:	9b01      	ldr	r3, [sp, #4]
 800edac:	9802      	ldr	r0, [sp, #8]
 800edae:	3301      	adds	r3, #1
 800edb0:	181b      	adds	r3, r3, r0
 800edb2:	106d      	asrs	r5, r5, #1
 800edb4:	42ab      	cmp	r3, r5
 800edb6:	d900      	bls.n	800edba <__ssputs_r+0x3e>
 800edb8:	001d      	movs	r5, r3
 800edba:	0553      	lsls	r3, r2, #21
 800edbc:	d532      	bpl.n	800ee24 <__ssputs_r+0xa8>
 800edbe:	0029      	movs	r1, r5
 800edc0:	0038      	movs	r0, r7
 800edc2:	f7fe f837 	bl	800ce34 <_malloc_r>
 800edc6:	1e06      	subs	r6, r0, #0
 800edc8:	d109      	bne.n	800edde <__ssputs_r+0x62>
 800edca:	230c      	movs	r3, #12
 800edcc:	603b      	str	r3, [r7, #0]
 800edce:	2340      	movs	r3, #64	; 0x40
 800edd0:	2001      	movs	r0, #1
 800edd2:	89a2      	ldrh	r2, [r4, #12]
 800edd4:	4240      	negs	r0, r0
 800edd6:	4313      	orrs	r3, r2
 800edd8:	81a3      	strh	r3, [r4, #12]
 800edda:	b005      	add	sp, #20
 800eddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edde:	9a02      	ldr	r2, [sp, #8]
 800ede0:	6921      	ldr	r1, [r4, #16]
 800ede2:	f7fd ffa9 	bl	800cd38 <memcpy>
 800ede6:	89a3      	ldrh	r3, [r4, #12]
 800ede8:	4a14      	ldr	r2, [pc, #80]	; (800ee3c <__ssputs_r+0xc0>)
 800edea:	401a      	ands	r2, r3
 800edec:	2380      	movs	r3, #128	; 0x80
 800edee:	4313      	orrs	r3, r2
 800edf0:	81a3      	strh	r3, [r4, #12]
 800edf2:	9b02      	ldr	r3, [sp, #8]
 800edf4:	6126      	str	r6, [r4, #16]
 800edf6:	18f6      	adds	r6, r6, r3
 800edf8:	6026      	str	r6, [r4, #0]
 800edfa:	6165      	str	r5, [r4, #20]
 800edfc:	9e01      	ldr	r6, [sp, #4]
 800edfe:	1aed      	subs	r5, r5, r3
 800ee00:	60a5      	str	r5, [r4, #8]
 800ee02:	9b01      	ldr	r3, [sp, #4]
 800ee04:	429e      	cmp	r6, r3
 800ee06:	d900      	bls.n	800ee0a <__ssputs_r+0x8e>
 800ee08:	9e01      	ldr	r6, [sp, #4]
 800ee0a:	0032      	movs	r2, r6
 800ee0c:	9903      	ldr	r1, [sp, #12]
 800ee0e:	6820      	ldr	r0, [r4, #0]
 800ee10:	f000 f959 	bl	800f0c6 <memmove>
 800ee14:	68a3      	ldr	r3, [r4, #8]
 800ee16:	2000      	movs	r0, #0
 800ee18:	1b9b      	subs	r3, r3, r6
 800ee1a:	60a3      	str	r3, [r4, #8]
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	199e      	adds	r6, r3, r6
 800ee20:	6026      	str	r6, [r4, #0]
 800ee22:	e7da      	b.n	800edda <__ssputs_r+0x5e>
 800ee24:	002a      	movs	r2, r5
 800ee26:	0038      	movs	r0, r7
 800ee28:	f000 f960 	bl	800f0ec <_realloc_r>
 800ee2c:	1e06      	subs	r6, r0, #0
 800ee2e:	d1e0      	bne.n	800edf2 <__ssputs_r+0x76>
 800ee30:	0038      	movs	r0, r7
 800ee32:	6921      	ldr	r1, [r4, #16]
 800ee34:	f7fd ff92 	bl	800cd5c <_free_r>
 800ee38:	e7c7      	b.n	800edca <__ssputs_r+0x4e>
 800ee3a:	46c0      	nop			; (mov r8, r8)
 800ee3c:	fffffb7f 	.word	0xfffffb7f

0800ee40 <_svfiprintf_r>:
 800ee40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee42:	b0a1      	sub	sp, #132	; 0x84
 800ee44:	9003      	str	r0, [sp, #12]
 800ee46:	001d      	movs	r5, r3
 800ee48:	898b      	ldrh	r3, [r1, #12]
 800ee4a:	000f      	movs	r7, r1
 800ee4c:	0016      	movs	r6, r2
 800ee4e:	061b      	lsls	r3, r3, #24
 800ee50:	d511      	bpl.n	800ee76 <_svfiprintf_r+0x36>
 800ee52:	690b      	ldr	r3, [r1, #16]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d10e      	bne.n	800ee76 <_svfiprintf_r+0x36>
 800ee58:	2140      	movs	r1, #64	; 0x40
 800ee5a:	f7fd ffeb 	bl	800ce34 <_malloc_r>
 800ee5e:	6038      	str	r0, [r7, #0]
 800ee60:	6138      	str	r0, [r7, #16]
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d105      	bne.n	800ee72 <_svfiprintf_r+0x32>
 800ee66:	230c      	movs	r3, #12
 800ee68:	9a03      	ldr	r2, [sp, #12]
 800ee6a:	3801      	subs	r0, #1
 800ee6c:	6013      	str	r3, [r2, #0]
 800ee6e:	b021      	add	sp, #132	; 0x84
 800ee70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee72:	2340      	movs	r3, #64	; 0x40
 800ee74:	617b      	str	r3, [r7, #20]
 800ee76:	2300      	movs	r3, #0
 800ee78:	ac08      	add	r4, sp, #32
 800ee7a:	6163      	str	r3, [r4, #20]
 800ee7c:	3320      	adds	r3, #32
 800ee7e:	7663      	strb	r3, [r4, #25]
 800ee80:	3310      	adds	r3, #16
 800ee82:	76a3      	strb	r3, [r4, #26]
 800ee84:	9507      	str	r5, [sp, #28]
 800ee86:	0035      	movs	r5, r6
 800ee88:	782b      	ldrb	r3, [r5, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d001      	beq.n	800ee92 <_svfiprintf_r+0x52>
 800ee8e:	2b25      	cmp	r3, #37	; 0x25
 800ee90:	d147      	bne.n	800ef22 <_svfiprintf_r+0xe2>
 800ee92:	1bab      	subs	r3, r5, r6
 800ee94:	9305      	str	r3, [sp, #20]
 800ee96:	42b5      	cmp	r5, r6
 800ee98:	d00c      	beq.n	800eeb4 <_svfiprintf_r+0x74>
 800ee9a:	0032      	movs	r2, r6
 800ee9c:	0039      	movs	r1, r7
 800ee9e:	9803      	ldr	r0, [sp, #12]
 800eea0:	f7ff ff6c 	bl	800ed7c <__ssputs_r>
 800eea4:	1c43      	adds	r3, r0, #1
 800eea6:	d100      	bne.n	800eeaa <_svfiprintf_r+0x6a>
 800eea8:	e0ae      	b.n	800f008 <_svfiprintf_r+0x1c8>
 800eeaa:	6962      	ldr	r2, [r4, #20]
 800eeac:	9b05      	ldr	r3, [sp, #20]
 800eeae:	4694      	mov	ip, r2
 800eeb0:	4463      	add	r3, ip
 800eeb2:	6163      	str	r3, [r4, #20]
 800eeb4:	782b      	ldrb	r3, [r5, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d100      	bne.n	800eebc <_svfiprintf_r+0x7c>
 800eeba:	e0a5      	b.n	800f008 <_svfiprintf_r+0x1c8>
 800eebc:	2201      	movs	r2, #1
 800eebe:	2300      	movs	r3, #0
 800eec0:	4252      	negs	r2, r2
 800eec2:	6062      	str	r2, [r4, #4]
 800eec4:	a904      	add	r1, sp, #16
 800eec6:	3254      	adds	r2, #84	; 0x54
 800eec8:	1852      	adds	r2, r2, r1
 800eeca:	1c6e      	adds	r6, r5, #1
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	60e3      	str	r3, [r4, #12]
 800eed0:	60a3      	str	r3, [r4, #8]
 800eed2:	7013      	strb	r3, [r2, #0]
 800eed4:	65a3      	str	r3, [r4, #88]	; 0x58
 800eed6:	2205      	movs	r2, #5
 800eed8:	7831      	ldrb	r1, [r6, #0]
 800eeda:	4854      	ldr	r0, [pc, #336]	; (800f02c <_svfiprintf_r+0x1ec>)
 800eedc:	f7ff fb6a 	bl	800e5b4 <memchr>
 800eee0:	1c75      	adds	r5, r6, #1
 800eee2:	2800      	cmp	r0, #0
 800eee4:	d11f      	bne.n	800ef26 <_svfiprintf_r+0xe6>
 800eee6:	6822      	ldr	r2, [r4, #0]
 800eee8:	06d3      	lsls	r3, r2, #27
 800eeea:	d504      	bpl.n	800eef6 <_svfiprintf_r+0xb6>
 800eeec:	2353      	movs	r3, #83	; 0x53
 800eeee:	a904      	add	r1, sp, #16
 800eef0:	185b      	adds	r3, r3, r1
 800eef2:	2120      	movs	r1, #32
 800eef4:	7019      	strb	r1, [r3, #0]
 800eef6:	0713      	lsls	r3, r2, #28
 800eef8:	d504      	bpl.n	800ef04 <_svfiprintf_r+0xc4>
 800eefa:	2353      	movs	r3, #83	; 0x53
 800eefc:	a904      	add	r1, sp, #16
 800eefe:	185b      	adds	r3, r3, r1
 800ef00:	212b      	movs	r1, #43	; 0x2b
 800ef02:	7019      	strb	r1, [r3, #0]
 800ef04:	7833      	ldrb	r3, [r6, #0]
 800ef06:	2b2a      	cmp	r3, #42	; 0x2a
 800ef08:	d016      	beq.n	800ef38 <_svfiprintf_r+0xf8>
 800ef0a:	0035      	movs	r5, r6
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	200a      	movs	r0, #10
 800ef10:	68e3      	ldr	r3, [r4, #12]
 800ef12:	782a      	ldrb	r2, [r5, #0]
 800ef14:	1c6e      	adds	r6, r5, #1
 800ef16:	3a30      	subs	r2, #48	; 0x30
 800ef18:	2a09      	cmp	r2, #9
 800ef1a:	d94e      	bls.n	800efba <_svfiprintf_r+0x17a>
 800ef1c:	2900      	cmp	r1, #0
 800ef1e:	d111      	bne.n	800ef44 <_svfiprintf_r+0x104>
 800ef20:	e017      	b.n	800ef52 <_svfiprintf_r+0x112>
 800ef22:	3501      	adds	r5, #1
 800ef24:	e7b0      	b.n	800ee88 <_svfiprintf_r+0x48>
 800ef26:	4b41      	ldr	r3, [pc, #260]	; (800f02c <_svfiprintf_r+0x1ec>)
 800ef28:	6822      	ldr	r2, [r4, #0]
 800ef2a:	1ac0      	subs	r0, r0, r3
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	4083      	lsls	r3, r0
 800ef30:	4313      	orrs	r3, r2
 800ef32:	002e      	movs	r6, r5
 800ef34:	6023      	str	r3, [r4, #0]
 800ef36:	e7ce      	b.n	800eed6 <_svfiprintf_r+0x96>
 800ef38:	9b07      	ldr	r3, [sp, #28]
 800ef3a:	1d19      	adds	r1, r3, #4
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	9107      	str	r1, [sp, #28]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	db01      	blt.n	800ef48 <_svfiprintf_r+0x108>
 800ef44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef46:	e004      	b.n	800ef52 <_svfiprintf_r+0x112>
 800ef48:	425b      	negs	r3, r3
 800ef4a:	60e3      	str	r3, [r4, #12]
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	782b      	ldrb	r3, [r5, #0]
 800ef54:	2b2e      	cmp	r3, #46	; 0x2e
 800ef56:	d10a      	bne.n	800ef6e <_svfiprintf_r+0x12e>
 800ef58:	786b      	ldrb	r3, [r5, #1]
 800ef5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef5c:	d135      	bne.n	800efca <_svfiprintf_r+0x18a>
 800ef5e:	9b07      	ldr	r3, [sp, #28]
 800ef60:	3502      	adds	r5, #2
 800ef62:	1d1a      	adds	r2, r3, #4
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	9207      	str	r2, [sp, #28]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	db2b      	blt.n	800efc4 <_svfiprintf_r+0x184>
 800ef6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef6e:	4e30      	ldr	r6, [pc, #192]	; (800f030 <_svfiprintf_r+0x1f0>)
 800ef70:	2203      	movs	r2, #3
 800ef72:	0030      	movs	r0, r6
 800ef74:	7829      	ldrb	r1, [r5, #0]
 800ef76:	f7ff fb1d 	bl	800e5b4 <memchr>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d006      	beq.n	800ef8c <_svfiprintf_r+0x14c>
 800ef7e:	2340      	movs	r3, #64	; 0x40
 800ef80:	1b80      	subs	r0, r0, r6
 800ef82:	4083      	lsls	r3, r0
 800ef84:	6822      	ldr	r2, [r4, #0]
 800ef86:	3501      	adds	r5, #1
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	6023      	str	r3, [r4, #0]
 800ef8c:	7829      	ldrb	r1, [r5, #0]
 800ef8e:	2206      	movs	r2, #6
 800ef90:	4828      	ldr	r0, [pc, #160]	; (800f034 <_svfiprintf_r+0x1f4>)
 800ef92:	1c6e      	adds	r6, r5, #1
 800ef94:	7621      	strb	r1, [r4, #24]
 800ef96:	f7ff fb0d 	bl	800e5b4 <memchr>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d03c      	beq.n	800f018 <_svfiprintf_r+0x1d8>
 800ef9e:	4b26      	ldr	r3, [pc, #152]	; (800f038 <_svfiprintf_r+0x1f8>)
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d125      	bne.n	800eff0 <_svfiprintf_r+0x1b0>
 800efa4:	2207      	movs	r2, #7
 800efa6:	9b07      	ldr	r3, [sp, #28]
 800efa8:	3307      	adds	r3, #7
 800efaa:	4393      	bics	r3, r2
 800efac:	3308      	adds	r3, #8
 800efae:	9307      	str	r3, [sp, #28]
 800efb0:	6963      	ldr	r3, [r4, #20]
 800efb2:	9a04      	ldr	r2, [sp, #16]
 800efb4:	189b      	adds	r3, r3, r2
 800efb6:	6163      	str	r3, [r4, #20]
 800efb8:	e765      	b.n	800ee86 <_svfiprintf_r+0x46>
 800efba:	4343      	muls	r3, r0
 800efbc:	0035      	movs	r5, r6
 800efbe:	2101      	movs	r1, #1
 800efc0:	189b      	adds	r3, r3, r2
 800efc2:	e7a6      	b.n	800ef12 <_svfiprintf_r+0xd2>
 800efc4:	2301      	movs	r3, #1
 800efc6:	425b      	negs	r3, r3
 800efc8:	e7d0      	b.n	800ef6c <_svfiprintf_r+0x12c>
 800efca:	2300      	movs	r3, #0
 800efcc:	200a      	movs	r0, #10
 800efce:	001a      	movs	r2, r3
 800efd0:	3501      	adds	r5, #1
 800efd2:	6063      	str	r3, [r4, #4]
 800efd4:	7829      	ldrb	r1, [r5, #0]
 800efd6:	1c6e      	adds	r6, r5, #1
 800efd8:	3930      	subs	r1, #48	; 0x30
 800efda:	2909      	cmp	r1, #9
 800efdc:	d903      	bls.n	800efe6 <_svfiprintf_r+0x1a6>
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d0c5      	beq.n	800ef6e <_svfiprintf_r+0x12e>
 800efe2:	9209      	str	r2, [sp, #36]	; 0x24
 800efe4:	e7c3      	b.n	800ef6e <_svfiprintf_r+0x12e>
 800efe6:	4342      	muls	r2, r0
 800efe8:	0035      	movs	r5, r6
 800efea:	2301      	movs	r3, #1
 800efec:	1852      	adds	r2, r2, r1
 800efee:	e7f1      	b.n	800efd4 <_svfiprintf_r+0x194>
 800eff0:	ab07      	add	r3, sp, #28
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	003a      	movs	r2, r7
 800eff6:	0021      	movs	r1, r4
 800eff8:	4b10      	ldr	r3, [pc, #64]	; (800f03c <_svfiprintf_r+0x1fc>)
 800effa:	9803      	ldr	r0, [sp, #12]
 800effc:	f7fe f83a 	bl	800d074 <_printf_float>
 800f000:	9004      	str	r0, [sp, #16]
 800f002:	9b04      	ldr	r3, [sp, #16]
 800f004:	3301      	adds	r3, #1
 800f006:	d1d3      	bne.n	800efb0 <_svfiprintf_r+0x170>
 800f008:	89bb      	ldrh	r3, [r7, #12]
 800f00a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f00c:	065b      	lsls	r3, r3, #25
 800f00e:	d400      	bmi.n	800f012 <_svfiprintf_r+0x1d2>
 800f010:	e72d      	b.n	800ee6e <_svfiprintf_r+0x2e>
 800f012:	2001      	movs	r0, #1
 800f014:	4240      	negs	r0, r0
 800f016:	e72a      	b.n	800ee6e <_svfiprintf_r+0x2e>
 800f018:	ab07      	add	r3, sp, #28
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	003a      	movs	r2, r7
 800f01e:	0021      	movs	r1, r4
 800f020:	4b06      	ldr	r3, [pc, #24]	; (800f03c <_svfiprintf_r+0x1fc>)
 800f022:	9803      	ldr	r0, [sp, #12]
 800f024:	f7fe fad8 	bl	800d5d8 <_printf_i>
 800f028:	e7ea      	b.n	800f000 <_svfiprintf_r+0x1c0>
 800f02a:	46c0      	nop			; (mov r8, r8)
 800f02c:	0801038c 	.word	0x0801038c
 800f030:	08010392 	.word	0x08010392
 800f034:	08010396 	.word	0x08010396
 800f038:	0800d075 	.word	0x0800d075
 800f03c:	0800ed7d 	.word	0x0800ed7d

0800f040 <__assert_func>:
 800f040:	b530      	push	{r4, r5, lr}
 800f042:	0014      	movs	r4, r2
 800f044:	001a      	movs	r2, r3
 800f046:	4b09      	ldr	r3, [pc, #36]	; (800f06c <__assert_func+0x2c>)
 800f048:	0005      	movs	r5, r0
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	b085      	sub	sp, #20
 800f04e:	68d8      	ldr	r0, [r3, #12]
 800f050:	4b07      	ldr	r3, [pc, #28]	; (800f070 <__assert_func+0x30>)
 800f052:	2c00      	cmp	r4, #0
 800f054:	d101      	bne.n	800f05a <__assert_func+0x1a>
 800f056:	4b07      	ldr	r3, [pc, #28]	; (800f074 <__assert_func+0x34>)
 800f058:	001c      	movs	r4, r3
 800f05a:	9301      	str	r3, [sp, #4]
 800f05c:	9100      	str	r1, [sp, #0]
 800f05e:	002b      	movs	r3, r5
 800f060:	4905      	ldr	r1, [pc, #20]	; (800f078 <__assert_func+0x38>)
 800f062:	9402      	str	r4, [sp, #8]
 800f064:	f000 f80a 	bl	800f07c <fiprintf>
 800f068:	f000 faac 	bl	800f5c4 <abort>
 800f06c:	20000018 	.word	0x20000018
 800f070:	0801039d 	.word	0x0801039d
 800f074:	080103d8 	.word	0x080103d8
 800f078:	080103aa 	.word	0x080103aa

0800f07c <fiprintf>:
 800f07c:	b40e      	push	{r1, r2, r3}
 800f07e:	b503      	push	{r0, r1, lr}
 800f080:	0001      	movs	r1, r0
 800f082:	ab03      	add	r3, sp, #12
 800f084:	4804      	ldr	r0, [pc, #16]	; (800f098 <fiprintf+0x1c>)
 800f086:	cb04      	ldmia	r3!, {r2}
 800f088:	6800      	ldr	r0, [r0, #0]
 800f08a:	9301      	str	r3, [sp, #4]
 800f08c:	f000 f884 	bl	800f198 <_vfiprintf_r>
 800f090:	b002      	add	sp, #8
 800f092:	bc08      	pop	{r3}
 800f094:	b003      	add	sp, #12
 800f096:	4718      	bx	r3
 800f098:	20000018 	.word	0x20000018

0800f09c <__retarget_lock_init_recursive>:
 800f09c:	4770      	bx	lr

0800f09e <__retarget_lock_acquire_recursive>:
 800f09e:	4770      	bx	lr

0800f0a0 <__retarget_lock_release_recursive>:
 800f0a0:	4770      	bx	lr

0800f0a2 <__ascii_mbtowc>:
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	2900      	cmp	r1, #0
 800f0a6:	d100      	bne.n	800f0aa <__ascii_mbtowc+0x8>
 800f0a8:	a901      	add	r1, sp, #4
 800f0aa:	1e10      	subs	r0, r2, #0
 800f0ac:	d006      	beq.n	800f0bc <__ascii_mbtowc+0x1a>
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d006      	beq.n	800f0c0 <__ascii_mbtowc+0x1e>
 800f0b2:	7813      	ldrb	r3, [r2, #0]
 800f0b4:	600b      	str	r3, [r1, #0]
 800f0b6:	7810      	ldrb	r0, [r2, #0]
 800f0b8:	1e43      	subs	r3, r0, #1
 800f0ba:	4198      	sbcs	r0, r3
 800f0bc:	b002      	add	sp, #8
 800f0be:	4770      	bx	lr
 800f0c0:	2002      	movs	r0, #2
 800f0c2:	4240      	negs	r0, r0
 800f0c4:	e7fa      	b.n	800f0bc <__ascii_mbtowc+0x1a>

0800f0c6 <memmove>:
 800f0c6:	b510      	push	{r4, lr}
 800f0c8:	4288      	cmp	r0, r1
 800f0ca:	d902      	bls.n	800f0d2 <memmove+0xc>
 800f0cc:	188b      	adds	r3, r1, r2
 800f0ce:	4298      	cmp	r0, r3
 800f0d0:	d303      	bcc.n	800f0da <memmove+0x14>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	e007      	b.n	800f0e6 <memmove+0x20>
 800f0d6:	5c8b      	ldrb	r3, [r1, r2]
 800f0d8:	5483      	strb	r3, [r0, r2]
 800f0da:	3a01      	subs	r2, #1
 800f0dc:	d2fb      	bcs.n	800f0d6 <memmove+0x10>
 800f0de:	bd10      	pop	{r4, pc}
 800f0e0:	5ccc      	ldrb	r4, [r1, r3]
 800f0e2:	54c4      	strb	r4, [r0, r3]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d1fa      	bne.n	800f0e0 <memmove+0x1a>
 800f0ea:	e7f8      	b.n	800f0de <memmove+0x18>

0800f0ec <_realloc_r>:
 800f0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0ee:	0007      	movs	r7, r0
 800f0f0:	000e      	movs	r6, r1
 800f0f2:	0014      	movs	r4, r2
 800f0f4:	2900      	cmp	r1, #0
 800f0f6:	d105      	bne.n	800f104 <_realloc_r+0x18>
 800f0f8:	0011      	movs	r1, r2
 800f0fa:	f7fd fe9b 	bl	800ce34 <_malloc_r>
 800f0fe:	0005      	movs	r5, r0
 800f100:	0028      	movs	r0, r5
 800f102:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f104:	2a00      	cmp	r2, #0
 800f106:	d103      	bne.n	800f110 <_realloc_r+0x24>
 800f108:	f7fd fe28 	bl	800cd5c <_free_r>
 800f10c:	0025      	movs	r5, r4
 800f10e:	e7f7      	b.n	800f100 <_realloc_r+0x14>
 800f110:	f000 fc9a 	bl	800fa48 <_malloc_usable_size_r>
 800f114:	9001      	str	r0, [sp, #4]
 800f116:	4284      	cmp	r4, r0
 800f118:	d803      	bhi.n	800f122 <_realloc_r+0x36>
 800f11a:	0035      	movs	r5, r6
 800f11c:	0843      	lsrs	r3, r0, #1
 800f11e:	42a3      	cmp	r3, r4
 800f120:	d3ee      	bcc.n	800f100 <_realloc_r+0x14>
 800f122:	0021      	movs	r1, r4
 800f124:	0038      	movs	r0, r7
 800f126:	f7fd fe85 	bl	800ce34 <_malloc_r>
 800f12a:	1e05      	subs	r5, r0, #0
 800f12c:	d0e8      	beq.n	800f100 <_realloc_r+0x14>
 800f12e:	9b01      	ldr	r3, [sp, #4]
 800f130:	0022      	movs	r2, r4
 800f132:	429c      	cmp	r4, r3
 800f134:	d900      	bls.n	800f138 <_realloc_r+0x4c>
 800f136:	001a      	movs	r2, r3
 800f138:	0031      	movs	r1, r6
 800f13a:	0028      	movs	r0, r5
 800f13c:	f7fd fdfc 	bl	800cd38 <memcpy>
 800f140:	0031      	movs	r1, r6
 800f142:	0038      	movs	r0, r7
 800f144:	f7fd fe0a 	bl	800cd5c <_free_r>
 800f148:	e7da      	b.n	800f100 <_realloc_r+0x14>

0800f14a <__sfputc_r>:
 800f14a:	6893      	ldr	r3, [r2, #8]
 800f14c:	b510      	push	{r4, lr}
 800f14e:	3b01      	subs	r3, #1
 800f150:	6093      	str	r3, [r2, #8]
 800f152:	2b00      	cmp	r3, #0
 800f154:	da04      	bge.n	800f160 <__sfputc_r+0x16>
 800f156:	6994      	ldr	r4, [r2, #24]
 800f158:	42a3      	cmp	r3, r4
 800f15a:	db07      	blt.n	800f16c <__sfputc_r+0x22>
 800f15c:	290a      	cmp	r1, #10
 800f15e:	d005      	beq.n	800f16c <__sfputc_r+0x22>
 800f160:	6813      	ldr	r3, [r2, #0]
 800f162:	1c58      	adds	r0, r3, #1
 800f164:	6010      	str	r0, [r2, #0]
 800f166:	7019      	strb	r1, [r3, #0]
 800f168:	0008      	movs	r0, r1
 800f16a:	bd10      	pop	{r4, pc}
 800f16c:	f000 f94e 	bl	800f40c <__swbuf_r>
 800f170:	0001      	movs	r1, r0
 800f172:	e7f9      	b.n	800f168 <__sfputc_r+0x1e>

0800f174 <__sfputs_r>:
 800f174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f176:	0006      	movs	r6, r0
 800f178:	000f      	movs	r7, r1
 800f17a:	0014      	movs	r4, r2
 800f17c:	18d5      	adds	r5, r2, r3
 800f17e:	42ac      	cmp	r4, r5
 800f180:	d101      	bne.n	800f186 <__sfputs_r+0x12>
 800f182:	2000      	movs	r0, #0
 800f184:	e007      	b.n	800f196 <__sfputs_r+0x22>
 800f186:	7821      	ldrb	r1, [r4, #0]
 800f188:	003a      	movs	r2, r7
 800f18a:	0030      	movs	r0, r6
 800f18c:	f7ff ffdd 	bl	800f14a <__sfputc_r>
 800f190:	3401      	adds	r4, #1
 800f192:	1c43      	adds	r3, r0, #1
 800f194:	d1f3      	bne.n	800f17e <__sfputs_r+0xa>
 800f196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f198 <_vfiprintf_r>:
 800f198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f19a:	b0a1      	sub	sp, #132	; 0x84
 800f19c:	0006      	movs	r6, r0
 800f19e:	000c      	movs	r4, r1
 800f1a0:	001f      	movs	r7, r3
 800f1a2:	9203      	str	r2, [sp, #12]
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d004      	beq.n	800f1b2 <_vfiprintf_r+0x1a>
 800f1a8:	6983      	ldr	r3, [r0, #24]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d101      	bne.n	800f1b2 <_vfiprintf_r+0x1a>
 800f1ae:	f000 fb3f 	bl	800f830 <__sinit>
 800f1b2:	4b8e      	ldr	r3, [pc, #568]	; (800f3ec <_vfiprintf_r+0x254>)
 800f1b4:	429c      	cmp	r4, r3
 800f1b6:	d11c      	bne.n	800f1f2 <_vfiprintf_r+0x5a>
 800f1b8:	6874      	ldr	r4, [r6, #4]
 800f1ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1bc:	07db      	lsls	r3, r3, #31
 800f1be:	d405      	bmi.n	800f1cc <_vfiprintf_r+0x34>
 800f1c0:	89a3      	ldrh	r3, [r4, #12]
 800f1c2:	059b      	lsls	r3, r3, #22
 800f1c4:	d402      	bmi.n	800f1cc <_vfiprintf_r+0x34>
 800f1c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1c8:	f7ff ff69 	bl	800f09e <__retarget_lock_acquire_recursive>
 800f1cc:	89a3      	ldrh	r3, [r4, #12]
 800f1ce:	071b      	lsls	r3, r3, #28
 800f1d0:	d502      	bpl.n	800f1d8 <_vfiprintf_r+0x40>
 800f1d2:	6923      	ldr	r3, [r4, #16]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d11d      	bne.n	800f214 <_vfiprintf_r+0x7c>
 800f1d8:	0021      	movs	r1, r4
 800f1da:	0030      	movs	r0, r6
 800f1dc:	f000 f97a 	bl	800f4d4 <__swsetup_r>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d017      	beq.n	800f214 <_vfiprintf_r+0x7c>
 800f1e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1e6:	07db      	lsls	r3, r3, #31
 800f1e8:	d50d      	bpl.n	800f206 <_vfiprintf_r+0x6e>
 800f1ea:	2001      	movs	r0, #1
 800f1ec:	4240      	negs	r0, r0
 800f1ee:	b021      	add	sp, #132	; 0x84
 800f1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1f2:	4b7f      	ldr	r3, [pc, #508]	; (800f3f0 <_vfiprintf_r+0x258>)
 800f1f4:	429c      	cmp	r4, r3
 800f1f6:	d101      	bne.n	800f1fc <_vfiprintf_r+0x64>
 800f1f8:	68b4      	ldr	r4, [r6, #8]
 800f1fa:	e7de      	b.n	800f1ba <_vfiprintf_r+0x22>
 800f1fc:	4b7d      	ldr	r3, [pc, #500]	; (800f3f4 <_vfiprintf_r+0x25c>)
 800f1fe:	429c      	cmp	r4, r3
 800f200:	d1db      	bne.n	800f1ba <_vfiprintf_r+0x22>
 800f202:	68f4      	ldr	r4, [r6, #12]
 800f204:	e7d9      	b.n	800f1ba <_vfiprintf_r+0x22>
 800f206:	89a3      	ldrh	r3, [r4, #12]
 800f208:	059b      	lsls	r3, r3, #22
 800f20a:	d4ee      	bmi.n	800f1ea <_vfiprintf_r+0x52>
 800f20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f20e:	f7ff ff47 	bl	800f0a0 <__retarget_lock_release_recursive>
 800f212:	e7ea      	b.n	800f1ea <_vfiprintf_r+0x52>
 800f214:	2300      	movs	r3, #0
 800f216:	ad08      	add	r5, sp, #32
 800f218:	616b      	str	r3, [r5, #20]
 800f21a:	3320      	adds	r3, #32
 800f21c:	766b      	strb	r3, [r5, #25]
 800f21e:	3310      	adds	r3, #16
 800f220:	76ab      	strb	r3, [r5, #26]
 800f222:	9707      	str	r7, [sp, #28]
 800f224:	9f03      	ldr	r7, [sp, #12]
 800f226:	783b      	ldrb	r3, [r7, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d001      	beq.n	800f230 <_vfiprintf_r+0x98>
 800f22c:	2b25      	cmp	r3, #37	; 0x25
 800f22e:	d14e      	bne.n	800f2ce <_vfiprintf_r+0x136>
 800f230:	9b03      	ldr	r3, [sp, #12]
 800f232:	1afb      	subs	r3, r7, r3
 800f234:	9305      	str	r3, [sp, #20]
 800f236:	9b03      	ldr	r3, [sp, #12]
 800f238:	429f      	cmp	r7, r3
 800f23a:	d00d      	beq.n	800f258 <_vfiprintf_r+0xc0>
 800f23c:	9b05      	ldr	r3, [sp, #20]
 800f23e:	0021      	movs	r1, r4
 800f240:	0030      	movs	r0, r6
 800f242:	9a03      	ldr	r2, [sp, #12]
 800f244:	f7ff ff96 	bl	800f174 <__sfputs_r>
 800f248:	1c43      	adds	r3, r0, #1
 800f24a:	d100      	bne.n	800f24e <_vfiprintf_r+0xb6>
 800f24c:	e0b5      	b.n	800f3ba <_vfiprintf_r+0x222>
 800f24e:	696a      	ldr	r2, [r5, #20]
 800f250:	9b05      	ldr	r3, [sp, #20]
 800f252:	4694      	mov	ip, r2
 800f254:	4463      	add	r3, ip
 800f256:	616b      	str	r3, [r5, #20]
 800f258:	783b      	ldrb	r3, [r7, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d100      	bne.n	800f260 <_vfiprintf_r+0xc8>
 800f25e:	e0ac      	b.n	800f3ba <_vfiprintf_r+0x222>
 800f260:	2201      	movs	r2, #1
 800f262:	1c7b      	adds	r3, r7, #1
 800f264:	9303      	str	r3, [sp, #12]
 800f266:	2300      	movs	r3, #0
 800f268:	4252      	negs	r2, r2
 800f26a:	606a      	str	r2, [r5, #4]
 800f26c:	a904      	add	r1, sp, #16
 800f26e:	3254      	adds	r2, #84	; 0x54
 800f270:	1852      	adds	r2, r2, r1
 800f272:	602b      	str	r3, [r5, #0]
 800f274:	60eb      	str	r3, [r5, #12]
 800f276:	60ab      	str	r3, [r5, #8]
 800f278:	7013      	strb	r3, [r2, #0]
 800f27a:	65ab      	str	r3, [r5, #88]	; 0x58
 800f27c:	9b03      	ldr	r3, [sp, #12]
 800f27e:	2205      	movs	r2, #5
 800f280:	7819      	ldrb	r1, [r3, #0]
 800f282:	485d      	ldr	r0, [pc, #372]	; (800f3f8 <_vfiprintf_r+0x260>)
 800f284:	f7ff f996 	bl	800e5b4 <memchr>
 800f288:	9b03      	ldr	r3, [sp, #12]
 800f28a:	1c5f      	adds	r7, r3, #1
 800f28c:	2800      	cmp	r0, #0
 800f28e:	d120      	bne.n	800f2d2 <_vfiprintf_r+0x13a>
 800f290:	682a      	ldr	r2, [r5, #0]
 800f292:	06d3      	lsls	r3, r2, #27
 800f294:	d504      	bpl.n	800f2a0 <_vfiprintf_r+0x108>
 800f296:	2353      	movs	r3, #83	; 0x53
 800f298:	a904      	add	r1, sp, #16
 800f29a:	185b      	adds	r3, r3, r1
 800f29c:	2120      	movs	r1, #32
 800f29e:	7019      	strb	r1, [r3, #0]
 800f2a0:	0713      	lsls	r3, r2, #28
 800f2a2:	d504      	bpl.n	800f2ae <_vfiprintf_r+0x116>
 800f2a4:	2353      	movs	r3, #83	; 0x53
 800f2a6:	a904      	add	r1, sp, #16
 800f2a8:	185b      	adds	r3, r3, r1
 800f2aa:	212b      	movs	r1, #43	; 0x2b
 800f2ac:	7019      	strb	r1, [r3, #0]
 800f2ae:	9b03      	ldr	r3, [sp, #12]
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f2b4:	d016      	beq.n	800f2e4 <_vfiprintf_r+0x14c>
 800f2b6:	2100      	movs	r1, #0
 800f2b8:	68eb      	ldr	r3, [r5, #12]
 800f2ba:	9f03      	ldr	r7, [sp, #12]
 800f2bc:	783a      	ldrb	r2, [r7, #0]
 800f2be:	1c78      	adds	r0, r7, #1
 800f2c0:	3a30      	subs	r2, #48	; 0x30
 800f2c2:	4684      	mov	ip, r0
 800f2c4:	2a09      	cmp	r2, #9
 800f2c6:	d94f      	bls.n	800f368 <_vfiprintf_r+0x1d0>
 800f2c8:	2900      	cmp	r1, #0
 800f2ca:	d111      	bne.n	800f2f0 <_vfiprintf_r+0x158>
 800f2cc:	e017      	b.n	800f2fe <_vfiprintf_r+0x166>
 800f2ce:	3701      	adds	r7, #1
 800f2d0:	e7a9      	b.n	800f226 <_vfiprintf_r+0x8e>
 800f2d2:	4b49      	ldr	r3, [pc, #292]	; (800f3f8 <_vfiprintf_r+0x260>)
 800f2d4:	682a      	ldr	r2, [r5, #0]
 800f2d6:	1ac0      	subs	r0, r0, r3
 800f2d8:	2301      	movs	r3, #1
 800f2da:	4083      	lsls	r3, r0
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	602b      	str	r3, [r5, #0]
 800f2e0:	9703      	str	r7, [sp, #12]
 800f2e2:	e7cb      	b.n	800f27c <_vfiprintf_r+0xe4>
 800f2e4:	9b07      	ldr	r3, [sp, #28]
 800f2e6:	1d19      	adds	r1, r3, #4
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	9107      	str	r1, [sp, #28]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	db01      	blt.n	800f2f4 <_vfiprintf_r+0x15c>
 800f2f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2f2:	e004      	b.n	800f2fe <_vfiprintf_r+0x166>
 800f2f4:	425b      	negs	r3, r3
 800f2f6:	60eb      	str	r3, [r5, #12]
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	602b      	str	r3, [r5, #0]
 800f2fe:	783b      	ldrb	r3, [r7, #0]
 800f300:	2b2e      	cmp	r3, #46	; 0x2e
 800f302:	d10a      	bne.n	800f31a <_vfiprintf_r+0x182>
 800f304:	787b      	ldrb	r3, [r7, #1]
 800f306:	2b2a      	cmp	r3, #42	; 0x2a
 800f308:	d137      	bne.n	800f37a <_vfiprintf_r+0x1e2>
 800f30a:	9b07      	ldr	r3, [sp, #28]
 800f30c:	3702      	adds	r7, #2
 800f30e:	1d1a      	adds	r2, r3, #4
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	9207      	str	r2, [sp, #28]
 800f314:	2b00      	cmp	r3, #0
 800f316:	db2d      	blt.n	800f374 <_vfiprintf_r+0x1dc>
 800f318:	9309      	str	r3, [sp, #36]	; 0x24
 800f31a:	2203      	movs	r2, #3
 800f31c:	7839      	ldrb	r1, [r7, #0]
 800f31e:	4837      	ldr	r0, [pc, #220]	; (800f3fc <_vfiprintf_r+0x264>)
 800f320:	f7ff f948 	bl	800e5b4 <memchr>
 800f324:	2800      	cmp	r0, #0
 800f326:	d007      	beq.n	800f338 <_vfiprintf_r+0x1a0>
 800f328:	4b34      	ldr	r3, [pc, #208]	; (800f3fc <_vfiprintf_r+0x264>)
 800f32a:	682a      	ldr	r2, [r5, #0]
 800f32c:	1ac0      	subs	r0, r0, r3
 800f32e:	2340      	movs	r3, #64	; 0x40
 800f330:	4083      	lsls	r3, r0
 800f332:	4313      	orrs	r3, r2
 800f334:	3701      	adds	r7, #1
 800f336:	602b      	str	r3, [r5, #0]
 800f338:	7839      	ldrb	r1, [r7, #0]
 800f33a:	1c7b      	adds	r3, r7, #1
 800f33c:	2206      	movs	r2, #6
 800f33e:	4830      	ldr	r0, [pc, #192]	; (800f400 <_vfiprintf_r+0x268>)
 800f340:	9303      	str	r3, [sp, #12]
 800f342:	7629      	strb	r1, [r5, #24]
 800f344:	f7ff f936 	bl	800e5b4 <memchr>
 800f348:	2800      	cmp	r0, #0
 800f34a:	d045      	beq.n	800f3d8 <_vfiprintf_r+0x240>
 800f34c:	4b2d      	ldr	r3, [pc, #180]	; (800f404 <_vfiprintf_r+0x26c>)
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d127      	bne.n	800f3a2 <_vfiprintf_r+0x20a>
 800f352:	2207      	movs	r2, #7
 800f354:	9b07      	ldr	r3, [sp, #28]
 800f356:	3307      	adds	r3, #7
 800f358:	4393      	bics	r3, r2
 800f35a:	3308      	adds	r3, #8
 800f35c:	9307      	str	r3, [sp, #28]
 800f35e:	696b      	ldr	r3, [r5, #20]
 800f360:	9a04      	ldr	r2, [sp, #16]
 800f362:	189b      	adds	r3, r3, r2
 800f364:	616b      	str	r3, [r5, #20]
 800f366:	e75d      	b.n	800f224 <_vfiprintf_r+0x8c>
 800f368:	210a      	movs	r1, #10
 800f36a:	434b      	muls	r3, r1
 800f36c:	4667      	mov	r7, ip
 800f36e:	189b      	adds	r3, r3, r2
 800f370:	3909      	subs	r1, #9
 800f372:	e7a3      	b.n	800f2bc <_vfiprintf_r+0x124>
 800f374:	2301      	movs	r3, #1
 800f376:	425b      	negs	r3, r3
 800f378:	e7ce      	b.n	800f318 <_vfiprintf_r+0x180>
 800f37a:	2300      	movs	r3, #0
 800f37c:	001a      	movs	r2, r3
 800f37e:	3701      	adds	r7, #1
 800f380:	606b      	str	r3, [r5, #4]
 800f382:	7839      	ldrb	r1, [r7, #0]
 800f384:	1c78      	adds	r0, r7, #1
 800f386:	3930      	subs	r1, #48	; 0x30
 800f388:	4684      	mov	ip, r0
 800f38a:	2909      	cmp	r1, #9
 800f38c:	d903      	bls.n	800f396 <_vfiprintf_r+0x1fe>
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d0c3      	beq.n	800f31a <_vfiprintf_r+0x182>
 800f392:	9209      	str	r2, [sp, #36]	; 0x24
 800f394:	e7c1      	b.n	800f31a <_vfiprintf_r+0x182>
 800f396:	230a      	movs	r3, #10
 800f398:	435a      	muls	r2, r3
 800f39a:	4667      	mov	r7, ip
 800f39c:	1852      	adds	r2, r2, r1
 800f39e:	3b09      	subs	r3, #9
 800f3a0:	e7ef      	b.n	800f382 <_vfiprintf_r+0x1ea>
 800f3a2:	ab07      	add	r3, sp, #28
 800f3a4:	9300      	str	r3, [sp, #0]
 800f3a6:	0022      	movs	r2, r4
 800f3a8:	0029      	movs	r1, r5
 800f3aa:	0030      	movs	r0, r6
 800f3ac:	4b16      	ldr	r3, [pc, #88]	; (800f408 <_vfiprintf_r+0x270>)
 800f3ae:	f7fd fe61 	bl	800d074 <_printf_float>
 800f3b2:	9004      	str	r0, [sp, #16]
 800f3b4:	9b04      	ldr	r3, [sp, #16]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	d1d1      	bne.n	800f35e <_vfiprintf_r+0x1c6>
 800f3ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3bc:	07db      	lsls	r3, r3, #31
 800f3be:	d405      	bmi.n	800f3cc <_vfiprintf_r+0x234>
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	059b      	lsls	r3, r3, #22
 800f3c4:	d402      	bmi.n	800f3cc <_vfiprintf_r+0x234>
 800f3c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3c8:	f7ff fe6a 	bl	800f0a0 <__retarget_lock_release_recursive>
 800f3cc:	89a3      	ldrh	r3, [r4, #12]
 800f3ce:	065b      	lsls	r3, r3, #25
 800f3d0:	d500      	bpl.n	800f3d4 <_vfiprintf_r+0x23c>
 800f3d2:	e70a      	b.n	800f1ea <_vfiprintf_r+0x52>
 800f3d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f3d6:	e70a      	b.n	800f1ee <_vfiprintf_r+0x56>
 800f3d8:	ab07      	add	r3, sp, #28
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	0022      	movs	r2, r4
 800f3de:	0029      	movs	r1, r5
 800f3e0:	0030      	movs	r0, r6
 800f3e2:	4b09      	ldr	r3, [pc, #36]	; (800f408 <_vfiprintf_r+0x270>)
 800f3e4:	f7fe f8f8 	bl	800d5d8 <_printf_i>
 800f3e8:	e7e3      	b.n	800f3b2 <_vfiprintf_r+0x21a>
 800f3ea:	46c0      	nop			; (mov r8, r8)
 800f3ec:	08010504 	.word	0x08010504
 800f3f0:	08010524 	.word	0x08010524
 800f3f4:	080104e4 	.word	0x080104e4
 800f3f8:	0801038c 	.word	0x0801038c
 800f3fc:	08010392 	.word	0x08010392
 800f400:	08010396 	.word	0x08010396
 800f404:	0800d075 	.word	0x0800d075
 800f408:	0800f175 	.word	0x0800f175

0800f40c <__swbuf_r>:
 800f40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f40e:	0005      	movs	r5, r0
 800f410:	000e      	movs	r6, r1
 800f412:	0014      	movs	r4, r2
 800f414:	2800      	cmp	r0, #0
 800f416:	d004      	beq.n	800f422 <__swbuf_r+0x16>
 800f418:	6983      	ldr	r3, [r0, #24]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d101      	bne.n	800f422 <__swbuf_r+0x16>
 800f41e:	f000 fa07 	bl	800f830 <__sinit>
 800f422:	4b22      	ldr	r3, [pc, #136]	; (800f4ac <__swbuf_r+0xa0>)
 800f424:	429c      	cmp	r4, r3
 800f426:	d12e      	bne.n	800f486 <__swbuf_r+0x7a>
 800f428:	686c      	ldr	r4, [r5, #4]
 800f42a:	69a3      	ldr	r3, [r4, #24]
 800f42c:	60a3      	str	r3, [r4, #8]
 800f42e:	89a3      	ldrh	r3, [r4, #12]
 800f430:	071b      	lsls	r3, r3, #28
 800f432:	d532      	bpl.n	800f49a <__swbuf_r+0x8e>
 800f434:	6923      	ldr	r3, [r4, #16]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d02f      	beq.n	800f49a <__swbuf_r+0x8e>
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	6922      	ldr	r2, [r4, #16]
 800f43e:	b2f7      	uxtb	r7, r6
 800f440:	1a98      	subs	r0, r3, r2
 800f442:	6963      	ldr	r3, [r4, #20]
 800f444:	b2f6      	uxtb	r6, r6
 800f446:	4283      	cmp	r3, r0
 800f448:	dc05      	bgt.n	800f456 <__swbuf_r+0x4a>
 800f44a:	0021      	movs	r1, r4
 800f44c:	0028      	movs	r0, r5
 800f44e:	f000 f94d 	bl	800f6ec <_fflush_r>
 800f452:	2800      	cmp	r0, #0
 800f454:	d127      	bne.n	800f4a6 <__swbuf_r+0x9a>
 800f456:	68a3      	ldr	r3, [r4, #8]
 800f458:	3001      	adds	r0, #1
 800f45a:	3b01      	subs	r3, #1
 800f45c:	60a3      	str	r3, [r4, #8]
 800f45e:	6823      	ldr	r3, [r4, #0]
 800f460:	1c5a      	adds	r2, r3, #1
 800f462:	6022      	str	r2, [r4, #0]
 800f464:	701f      	strb	r7, [r3, #0]
 800f466:	6963      	ldr	r3, [r4, #20]
 800f468:	4283      	cmp	r3, r0
 800f46a:	d004      	beq.n	800f476 <__swbuf_r+0x6a>
 800f46c:	89a3      	ldrh	r3, [r4, #12]
 800f46e:	07db      	lsls	r3, r3, #31
 800f470:	d507      	bpl.n	800f482 <__swbuf_r+0x76>
 800f472:	2e0a      	cmp	r6, #10
 800f474:	d105      	bne.n	800f482 <__swbuf_r+0x76>
 800f476:	0021      	movs	r1, r4
 800f478:	0028      	movs	r0, r5
 800f47a:	f000 f937 	bl	800f6ec <_fflush_r>
 800f47e:	2800      	cmp	r0, #0
 800f480:	d111      	bne.n	800f4a6 <__swbuf_r+0x9a>
 800f482:	0030      	movs	r0, r6
 800f484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f486:	4b0a      	ldr	r3, [pc, #40]	; (800f4b0 <__swbuf_r+0xa4>)
 800f488:	429c      	cmp	r4, r3
 800f48a:	d101      	bne.n	800f490 <__swbuf_r+0x84>
 800f48c:	68ac      	ldr	r4, [r5, #8]
 800f48e:	e7cc      	b.n	800f42a <__swbuf_r+0x1e>
 800f490:	4b08      	ldr	r3, [pc, #32]	; (800f4b4 <__swbuf_r+0xa8>)
 800f492:	429c      	cmp	r4, r3
 800f494:	d1c9      	bne.n	800f42a <__swbuf_r+0x1e>
 800f496:	68ec      	ldr	r4, [r5, #12]
 800f498:	e7c7      	b.n	800f42a <__swbuf_r+0x1e>
 800f49a:	0021      	movs	r1, r4
 800f49c:	0028      	movs	r0, r5
 800f49e:	f000 f819 	bl	800f4d4 <__swsetup_r>
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d0c9      	beq.n	800f43a <__swbuf_r+0x2e>
 800f4a6:	2601      	movs	r6, #1
 800f4a8:	4276      	negs	r6, r6
 800f4aa:	e7ea      	b.n	800f482 <__swbuf_r+0x76>
 800f4ac:	08010504 	.word	0x08010504
 800f4b0:	08010524 	.word	0x08010524
 800f4b4:	080104e4 	.word	0x080104e4

0800f4b8 <__ascii_wctomb>:
 800f4b8:	0003      	movs	r3, r0
 800f4ba:	1e08      	subs	r0, r1, #0
 800f4bc:	d005      	beq.n	800f4ca <__ascii_wctomb+0x12>
 800f4be:	2aff      	cmp	r2, #255	; 0xff
 800f4c0:	d904      	bls.n	800f4cc <__ascii_wctomb+0x14>
 800f4c2:	228a      	movs	r2, #138	; 0x8a
 800f4c4:	2001      	movs	r0, #1
 800f4c6:	601a      	str	r2, [r3, #0]
 800f4c8:	4240      	negs	r0, r0
 800f4ca:	4770      	bx	lr
 800f4cc:	2001      	movs	r0, #1
 800f4ce:	700a      	strb	r2, [r1, #0]
 800f4d0:	e7fb      	b.n	800f4ca <__ascii_wctomb+0x12>
	...

0800f4d4 <__swsetup_r>:
 800f4d4:	4b37      	ldr	r3, [pc, #220]	; (800f5b4 <__swsetup_r+0xe0>)
 800f4d6:	b570      	push	{r4, r5, r6, lr}
 800f4d8:	681d      	ldr	r5, [r3, #0]
 800f4da:	0006      	movs	r6, r0
 800f4dc:	000c      	movs	r4, r1
 800f4de:	2d00      	cmp	r5, #0
 800f4e0:	d005      	beq.n	800f4ee <__swsetup_r+0x1a>
 800f4e2:	69ab      	ldr	r3, [r5, #24]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d102      	bne.n	800f4ee <__swsetup_r+0x1a>
 800f4e8:	0028      	movs	r0, r5
 800f4ea:	f000 f9a1 	bl	800f830 <__sinit>
 800f4ee:	4b32      	ldr	r3, [pc, #200]	; (800f5b8 <__swsetup_r+0xe4>)
 800f4f0:	429c      	cmp	r4, r3
 800f4f2:	d10f      	bne.n	800f514 <__swsetup_r+0x40>
 800f4f4:	686c      	ldr	r4, [r5, #4]
 800f4f6:	230c      	movs	r3, #12
 800f4f8:	5ee2      	ldrsh	r2, [r4, r3]
 800f4fa:	b293      	uxth	r3, r2
 800f4fc:	0711      	lsls	r1, r2, #28
 800f4fe:	d42d      	bmi.n	800f55c <__swsetup_r+0x88>
 800f500:	06d9      	lsls	r1, r3, #27
 800f502:	d411      	bmi.n	800f528 <__swsetup_r+0x54>
 800f504:	2309      	movs	r3, #9
 800f506:	2001      	movs	r0, #1
 800f508:	6033      	str	r3, [r6, #0]
 800f50a:	3337      	adds	r3, #55	; 0x37
 800f50c:	4313      	orrs	r3, r2
 800f50e:	81a3      	strh	r3, [r4, #12]
 800f510:	4240      	negs	r0, r0
 800f512:	bd70      	pop	{r4, r5, r6, pc}
 800f514:	4b29      	ldr	r3, [pc, #164]	; (800f5bc <__swsetup_r+0xe8>)
 800f516:	429c      	cmp	r4, r3
 800f518:	d101      	bne.n	800f51e <__swsetup_r+0x4a>
 800f51a:	68ac      	ldr	r4, [r5, #8]
 800f51c:	e7eb      	b.n	800f4f6 <__swsetup_r+0x22>
 800f51e:	4b28      	ldr	r3, [pc, #160]	; (800f5c0 <__swsetup_r+0xec>)
 800f520:	429c      	cmp	r4, r3
 800f522:	d1e8      	bne.n	800f4f6 <__swsetup_r+0x22>
 800f524:	68ec      	ldr	r4, [r5, #12]
 800f526:	e7e6      	b.n	800f4f6 <__swsetup_r+0x22>
 800f528:	075b      	lsls	r3, r3, #29
 800f52a:	d513      	bpl.n	800f554 <__swsetup_r+0x80>
 800f52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f52e:	2900      	cmp	r1, #0
 800f530:	d008      	beq.n	800f544 <__swsetup_r+0x70>
 800f532:	0023      	movs	r3, r4
 800f534:	3344      	adds	r3, #68	; 0x44
 800f536:	4299      	cmp	r1, r3
 800f538:	d002      	beq.n	800f540 <__swsetup_r+0x6c>
 800f53a:	0030      	movs	r0, r6
 800f53c:	f7fd fc0e 	bl	800cd5c <_free_r>
 800f540:	2300      	movs	r3, #0
 800f542:	6363      	str	r3, [r4, #52]	; 0x34
 800f544:	2224      	movs	r2, #36	; 0x24
 800f546:	89a3      	ldrh	r3, [r4, #12]
 800f548:	4393      	bics	r3, r2
 800f54a:	81a3      	strh	r3, [r4, #12]
 800f54c:	2300      	movs	r3, #0
 800f54e:	6063      	str	r3, [r4, #4]
 800f550:	6923      	ldr	r3, [r4, #16]
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	2308      	movs	r3, #8
 800f556:	89a2      	ldrh	r2, [r4, #12]
 800f558:	4313      	orrs	r3, r2
 800f55a:	81a3      	strh	r3, [r4, #12]
 800f55c:	6923      	ldr	r3, [r4, #16]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d10b      	bne.n	800f57a <__swsetup_r+0xa6>
 800f562:	21a0      	movs	r1, #160	; 0xa0
 800f564:	2280      	movs	r2, #128	; 0x80
 800f566:	89a3      	ldrh	r3, [r4, #12]
 800f568:	0089      	lsls	r1, r1, #2
 800f56a:	0092      	lsls	r2, r2, #2
 800f56c:	400b      	ands	r3, r1
 800f56e:	4293      	cmp	r3, r2
 800f570:	d003      	beq.n	800f57a <__swsetup_r+0xa6>
 800f572:	0021      	movs	r1, r4
 800f574:	0030      	movs	r0, r6
 800f576:	f000 fa23 	bl	800f9c0 <__smakebuf_r>
 800f57a:	220c      	movs	r2, #12
 800f57c:	5ea3      	ldrsh	r3, [r4, r2]
 800f57e:	2001      	movs	r0, #1
 800f580:	001a      	movs	r2, r3
 800f582:	b299      	uxth	r1, r3
 800f584:	4002      	ands	r2, r0
 800f586:	4203      	tst	r3, r0
 800f588:	d00f      	beq.n	800f5aa <__swsetup_r+0xd6>
 800f58a:	2200      	movs	r2, #0
 800f58c:	60a2      	str	r2, [r4, #8]
 800f58e:	6962      	ldr	r2, [r4, #20]
 800f590:	4252      	negs	r2, r2
 800f592:	61a2      	str	r2, [r4, #24]
 800f594:	2000      	movs	r0, #0
 800f596:	6922      	ldr	r2, [r4, #16]
 800f598:	4282      	cmp	r2, r0
 800f59a:	d1ba      	bne.n	800f512 <__swsetup_r+0x3e>
 800f59c:	060a      	lsls	r2, r1, #24
 800f59e:	d5b8      	bpl.n	800f512 <__swsetup_r+0x3e>
 800f5a0:	2240      	movs	r2, #64	; 0x40
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	81a3      	strh	r3, [r4, #12]
 800f5a6:	3801      	subs	r0, #1
 800f5a8:	e7b3      	b.n	800f512 <__swsetup_r+0x3e>
 800f5aa:	0788      	lsls	r0, r1, #30
 800f5ac:	d400      	bmi.n	800f5b0 <__swsetup_r+0xdc>
 800f5ae:	6962      	ldr	r2, [r4, #20]
 800f5b0:	60a2      	str	r2, [r4, #8]
 800f5b2:	e7ef      	b.n	800f594 <__swsetup_r+0xc0>
 800f5b4:	20000018 	.word	0x20000018
 800f5b8:	08010504 	.word	0x08010504
 800f5bc:	08010524 	.word	0x08010524
 800f5c0:	080104e4 	.word	0x080104e4

0800f5c4 <abort>:
 800f5c4:	2006      	movs	r0, #6
 800f5c6:	b510      	push	{r4, lr}
 800f5c8:	f000 fa70 	bl	800faac <raise>
 800f5cc:	2001      	movs	r0, #1
 800f5ce:	f7f6 ff0d 	bl	80063ec <_exit>
	...

0800f5d4 <__sflush_r>:
 800f5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5d6:	898b      	ldrh	r3, [r1, #12]
 800f5d8:	0005      	movs	r5, r0
 800f5da:	000c      	movs	r4, r1
 800f5dc:	071a      	lsls	r2, r3, #28
 800f5de:	d45f      	bmi.n	800f6a0 <__sflush_r+0xcc>
 800f5e0:	684a      	ldr	r2, [r1, #4]
 800f5e2:	2a00      	cmp	r2, #0
 800f5e4:	dc04      	bgt.n	800f5f0 <__sflush_r+0x1c>
 800f5e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800f5e8:	2a00      	cmp	r2, #0
 800f5ea:	dc01      	bgt.n	800f5f0 <__sflush_r+0x1c>
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f5f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f5f2:	2f00      	cmp	r7, #0
 800f5f4:	d0fa      	beq.n	800f5ec <__sflush_r+0x18>
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	2180      	movs	r1, #128	; 0x80
 800f5fa:	682e      	ldr	r6, [r5, #0]
 800f5fc:	602a      	str	r2, [r5, #0]
 800f5fe:	001a      	movs	r2, r3
 800f600:	0149      	lsls	r1, r1, #5
 800f602:	400a      	ands	r2, r1
 800f604:	420b      	tst	r3, r1
 800f606:	d034      	beq.n	800f672 <__sflush_r+0x9e>
 800f608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f60a:	89a3      	ldrh	r3, [r4, #12]
 800f60c:	075b      	lsls	r3, r3, #29
 800f60e:	d506      	bpl.n	800f61e <__sflush_r+0x4a>
 800f610:	6863      	ldr	r3, [r4, #4]
 800f612:	1ac0      	subs	r0, r0, r3
 800f614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f616:	2b00      	cmp	r3, #0
 800f618:	d001      	beq.n	800f61e <__sflush_r+0x4a>
 800f61a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f61c:	1ac0      	subs	r0, r0, r3
 800f61e:	0002      	movs	r2, r0
 800f620:	6a21      	ldr	r1, [r4, #32]
 800f622:	2300      	movs	r3, #0
 800f624:	0028      	movs	r0, r5
 800f626:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f628:	47b8      	blx	r7
 800f62a:	89a1      	ldrh	r1, [r4, #12]
 800f62c:	1c43      	adds	r3, r0, #1
 800f62e:	d106      	bne.n	800f63e <__sflush_r+0x6a>
 800f630:	682b      	ldr	r3, [r5, #0]
 800f632:	2b1d      	cmp	r3, #29
 800f634:	d831      	bhi.n	800f69a <__sflush_r+0xc6>
 800f636:	4a2c      	ldr	r2, [pc, #176]	; (800f6e8 <__sflush_r+0x114>)
 800f638:	40da      	lsrs	r2, r3
 800f63a:	07d3      	lsls	r3, r2, #31
 800f63c:	d52d      	bpl.n	800f69a <__sflush_r+0xc6>
 800f63e:	2300      	movs	r3, #0
 800f640:	6063      	str	r3, [r4, #4]
 800f642:	6923      	ldr	r3, [r4, #16]
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	04cb      	lsls	r3, r1, #19
 800f648:	d505      	bpl.n	800f656 <__sflush_r+0x82>
 800f64a:	1c43      	adds	r3, r0, #1
 800f64c:	d102      	bne.n	800f654 <__sflush_r+0x80>
 800f64e:	682b      	ldr	r3, [r5, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d100      	bne.n	800f656 <__sflush_r+0x82>
 800f654:	6560      	str	r0, [r4, #84]	; 0x54
 800f656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f658:	602e      	str	r6, [r5, #0]
 800f65a:	2900      	cmp	r1, #0
 800f65c:	d0c6      	beq.n	800f5ec <__sflush_r+0x18>
 800f65e:	0023      	movs	r3, r4
 800f660:	3344      	adds	r3, #68	; 0x44
 800f662:	4299      	cmp	r1, r3
 800f664:	d002      	beq.n	800f66c <__sflush_r+0x98>
 800f666:	0028      	movs	r0, r5
 800f668:	f7fd fb78 	bl	800cd5c <_free_r>
 800f66c:	2000      	movs	r0, #0
 800f66e:	6360      	str	r0, [r4, #52]	; 0x34
 800f670:	e7bd      	b.n	800f5ee <__sflush_r+0x1a>
 800f672:	2301      	movs	r3, #1
 800f674:	0028      	movs	r0, r5
 800f676:	6a21      	ldr	r1, [r4, #32]
 800f678:	47b8      	blx	r7
 800f67a:	1c43      	adds	r3, r0, #1
 800f67c:	d1c5      	bne.n	800f60a <__sflush_r+0x36>
 800f67e:	682b      	ldr	r3, [r5, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d0c2      	beq.n	800f60a <__sflush_r+0x36>
 800f684:	2b1d      	cmp	r3, #29
 800f686:	d001      	beq.n	800f68c <__sflush_r+0xb8>
 800f688:	2b16      	cmp	r3, #22
 800f68a:	d101      	bne.n	800f690 <__sflush_r+0xbc>
 800f68c:	602e      	str	r6, [r5, #0]
 800f68e:	e7ad      	b.n	800f5ec <__sflush_r+0x18>
 800f690:	2340      	movs	r3, #64	; 0x40
 800f692:	89a2      	ldrh	r2, [r4, #12]
 800f694:	4313      	orrs	r3, r2
 800f696:	81a3      	strh	r3, [r4, #12]
 800f698:	e7a9      	b.n	800f5ee <__sflush_r+0x1a>
 800f69a:	2340      	movs	r3, #64	; 0x40
 800f69c:	430b      	orrs	r3, r1
 800f69e:	e7fa      	b.n	800f696 <__sflush_r+0xc2>
 800f6a0:	690f      	ldr	r7, [r1, #16]
 800f6a2:	2f00      	cmp	r7, #0
 800f6a4:	d0a2      	beq.n	800f5ec <__sflush_r+0x18>
 800f6a6:	680a      	ldr	r2, [r1, #0]
 800f6a8:	600f      	str	r7, [r1, #0]
 800f6aa:	1bd2      	subs	r2, r2, r7
 800f6ac:	9201      	str	r2, [sp, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	079b      	lsls	r3, r3, #30
 800f6b2:	d100      	bne.n	800f6b6 <__sflush_r+0xe2>
 800f6b4:	694a      	ldr	r2, [r1, #20]
 800f6b6:	60a2      	str	r2, [r4, #8]
 800f6b8:	9b01      	ldr	r3, [sp, #4]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	dc00      	bgt.n	800f6c0 <__sflush_r+0xec>
 800f6be:	e795      	b.n	800f5ec <__sflush_r+0x18>
 800f6c0:	003a      	movs	r2, r7
 800f6c2:	0028      	movs	r0, r5
 800f6c4:	9b01      	ldr	r3, [sp, #4]
 800f6c6:	6a21      	ldr	r1, [r4, #32]
 800f6c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f6ca:	47b0      	blx	r6
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	dc06      	bgt.n	800f6de <__sflush_r+0x10a>
 800f6d0:	2340      	movs	r3, #64	; 0x40
 800f6d2:	2001      	movs	r0, #1
 800f6d4:	89a2      	ldrh	r2, [r4, #12]
 800f6d6:	4240      	negs	r0, r0
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	81a3      	strh	r3, [r4, #12]
 800f6dc:	e787      	b.n	800f5ee <__sflush_r+0x1a>
 800f6de:	9b01      	ldr	r3, [sp, #4]
 800f6e0:	183f      	adds	r7, r7, r0
 800f6e2:	1a1b      	subs	r3, r3, r0
 800f6e4:	9301      	str	r3, [sp, #4]
 800f6e6:	e7e7      	b.n	800f6b8 <__sflush_r+0xe4>
 800f6e8:	20400001 	.word	0x20400001

0800f6ec <_fflush_r>:
 800f6ec:	690b      	ldr	r3, [r1, #16]
 800f6ee:	b570      	push	{r4, r5, r6, lr}
 800f6f0:	0005      	movs	r5, r0
 800f6f2:	000c      	movs	r4, r1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d102      	bne.n	800f6fe <_fflush_r+0x12>
 800f6f8:	2500      	movs	r5, #0
 800f6fa:	0028      	movs	r0, r5
 800f6fc:	bd70      	pop	{r4, r5, r6, pc}
 800f6fe:	2800      	cmp	r0, #0
 800f700:	d004      	beq.n	800f70c <_fflush_r+0x20>
 800f702:	6983      	ldr	r3, [r0, #24]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d101      	bne.n	800f70c <_fflush_r+0x20>
 800f708:	f000 f892 	bl	800f830 <__sinit>
 800f70c:	4b14      	ldr	r3, [pc, #80]	; (800f760 <_fflush_r+0x74>)
 800f70e:	429c      	cmp	r4, r3
 800f710:	d11b      	bne.n	800f74a <_fflush_r+0x5e>
 800f712:	686c      	ldr	r4, [r5, #4]
 800f714:	220c      	movs	r2, #12
 800f716:	5ea3      	ldrsh	r3, [r4, r2]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d0ed      	beq.n	800f6f8 <_fflush_r+0xc>
 800f71c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f71e:	07d2      	lsls	r2, r2, #31
 800f720:	d404      	bmi.n	800f72c <_fflush_r+0x40>
 800f722:	059b      	lsls	r3, r3, #22
 800f724:	d402      	bmi.n	800f72c <_fflush_r+0x40>
 800f726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f728:	f7ff fcb9 	bl	800f09e <__retarget_lock_acquire_recursive>
 800f72c:	0028      	movs	r0, r5
 800f72e:	0021      	movs	r1, r4
 800f730:	f7ff ff50 	bl	800f5d4 <__sflush_r>
 800f734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f736:	0005      	movs	r5, r0
 800f738:	07db      	lsls	r3, r3, #31
 800f73a:	d4de      	bmi.n	800f6fa <_fflush_r+0xe>
 800f73c:	89a3      	ldrh	r3, [r4, #12]
 800f73e:	059b      	lsls	r3, r3, #22
 800f740:	d4db      	bmi.n	800f6fa <_fflush_r+0xe>
 800f742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f744:	f7ff fcac 	bl	800f0a0 <__retarget_lock_release_recursive>
 800f748:	e7d7      	b.n	800f6fa <_fflush_r+0xe>
 800f74a:	4b06      	ldr	r3, [pc, #24]	; (800f764 <_fflush_r+0x78>)
 800f74c:	429c      	cmp	r4, r3
 800f74e:	d101      	bne.n	800f754 <_fflush_r+0x68>
 800f750:	68ac      	ldr	r4, [r5, #8]
 800f752:	e7df      	b.n	800f714 <_fflush_r+0x28>
 800f754:	4b04      	ldr	r3, [pc, #16]	; (800f768 <_fflush_r+0x7c>)
 800f756:	429c      	cmp	r4, r3
 800f758:	d1dc      	bne.n	800f714 <_fflush_r+0x28>
 800f75a:	68ec      	ldr	r4, [r5, #12]
 800f75c:	e7da      	b.n	800f714 <_fflush_r+0x28>
 800f75e:	46c0      	nop			; (mov r8, r8)
 800f760:	08010504 	.word	0x08010504
 800f764:	08010524 	.word	0x08010524
 800f768:	080104e4 	.word	0x080104e4

0800f76c <std>:
 800f76c:	2300      	movs	r3, #0
 800f76e:	b510      	push	{r4, lr}
 800f770:	0004      	movs	r4, r0
 800f772:	6003      	str	r3, [r0, #0]
 800f774:	6043      	str	r3, [r0, #4]
 800f776:	6083      	str	r3, [r0, #8]
 800f778:	8181      	strh	r1, [r0, #12]
 800f77a:	6643      	str	r3, [r0, #100]	; 0x64
 800f77c:	0019      	movs	r1, r3
 800f77e:	81c2      	strh	r2, [r0, #14]
 800f780:	6103      	str	r3, [r0, #16]
 800f782:	6143      	str	r3, [r0, #20]
 800f784:	6183      	str	r3, [r0, #24]
 800f786:	2208      	movs	r2, #8
 800f788:	305c      	adds	r0, #92	; 0x5c
 800f78a:	f7fd fade 	bl	800cd4a <memset>
 800f78e:	4b05      	ldr	r3, [pc, #20]	; (800f7a4 <std+0x38>)
 800f790:	6224      	str	r4, [r4, #32]
 800f792:	6263      	str	r3, [r4, #36]	; 0x24
 800f794:	4b04      	ldr	r3, [pc, #16]	; (800f7a8 <std+0x3c>)
 800f796:	62a3      	str	r3, [r4, #40]	; 0x28
 800f798:	4b04      	ldr	r3, [pc, #16]	; (800f7ac <std+0x40>)
 800f79a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f79c:	4b04      	ldr	r3, [pc, #16]	; (800f7b0 <std+0x44>)
 800f79e:	6323      	str	r3, [r4, #48]	; 0x30
 800f7a0:	bd10      	pop	{r4, pc}
 800f7a2:	46c0      	nop			; (mov r8, r8)
 800f7a4:	0800faed 	.word	0x0800faed
 800f7a8:	0800fb15 	.word	0x0800fb15
 800f7ac:	0800fb4d 	.word	0x0800fb4d
 800f7b0:	0800fb79 	.word	0x0800fb79

0800f7b4 <_cleanup_r>:
 800f7b4:	b510      	push	{r4, lr}
 800f7b6:	4902      	ldr	r1, [pc, #8]	; (800f7c0 <_cleanup_r+0xc>)
 800f7b8:	f000 f8ba 	bl	800f930 <_fwalk_reent>
 800f7bc:	bd10      	pop	{r4, pc}
 800f7be:	46c0      	nop			; (mov r8, r8)
 800f7c0:	0800f6ed 	.word	0x0800f6ed

0800f7c4 <__sfmoreglue>:
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	2568      	movs	r5, #104	; 0x68
 800f7c8:	1e4a      	subs	r2, r1, #1
 800f7ca:	4355      	muls	r5, r2
 800f7cc:	000e      	movs	r6, r1
 800f7ce:	0029      	movs	r1, r5
 800f7d0:	3174      	adds	r1, #116	; 0x74
 800f7d2:	f7fd fb2f 	bl	800ce34 <_malloc_r>
 800f7d6:	1e04      	subs	r4, r0, #0
 800f7d8:	d008      	beq.n	800f7ec <__sfmoreglue+0x28>
 800f7da:	2100      	movs	r1, #0
 800f7dc:	002a      	movs	r2, r5
 800f7de:	6001      	str	r1, [r0, #0]
 800f7e0:	6046      	str	r6, [r0, #4]
 800f7e2:	300c      	adds	r0, #12
 800f7e4:	60a0      	str	r0, [r4, #8]
 800f7e6:	3268      	adds	r2, #104	; 0x68
 800f7e8:	f7fd faaf 	bl	800cd4a <memset>
 800f7ec:	0020      	movs	r0, r4
 800f7ee:	bd70      	pop	{r4, r5, r6, pc}

0800f7f0 <__sfp_lock_acquire>:
 800f7f0:	b510      	push	{r4, lr}
 800f7f2:	4802      	ldr	r0, [pc, #8]	; (800f7fc <__sfp_lock_acquire+0xc>)
 800f7f4:	f7ff fc53 	bl	800f09e <__retarget_lock_acquire_recursive>
 800f7f8:	bd10      	pop	{r4, pc}
 800f7fa:	46c0      	nop			; (mov r8, r8)
 800f7fc:	200009d5 	.word	0x200009d5

0800f800 <__sfp_lock_release>:
 800f800:	b510      	push	{r4, lr}
 800f802:	4802      	ldr	r0, [pc, #8]	; (800f80c <__sfp_lock_release+0xc>)
 800f804:	f7ff fc4c 	bl	800f0a0 <__retarget_lock_release_recursive>
 800f808:	bd10      	pop	{r4, pc}
 800f80a:	46c0      	nop			; (mov r8, r8)
 800f80c:	200009d5 	.word	0x200009d5

0800f810 <__sinit_lock_acquire>:
 800f810:	b510      	push	{r4, lr}
 800f812:	4802      	ldr	r0, [pc, #8]	; (800f81c <__sinit_lock_acquire+0xc>)
 800f814:	f7ff fc43 	bl	800f09e <__retarget_lock_acquire_recursive>
 800f818:	bd10      	pop	{r4, pc}
 800f81a:	46c0      	nop			; (mov r8, r8)
 800f81c:	200009d6 	.word	0x200009d6

0800f820 <__sinit_lock_release>:
 800f820:	b510      	push	{r4, lr}
 800f822:	4802      	ldr	r0, [pc, #8]	; (800f82c <__sinit_lock_release+0xc>)
 800f824:	f7ff fc3c 	bl	800f0a0 <__retarget_lock_release_recursive>
 800f828:	bd10      	pop	{r4, pc}
 800f82a:	46c0      	nop			; (mov r8, r8)
 800f82c:	200009d6 	.word	0x200009d6

0800f830 <__sinit>:
 800f830:	b513      	push	{r0, r1, r4, lr}
 800f832:	0004      	movs	r4, r0
 800f834:	f7ff ffec 	bl	800f810 <__sinit_lock_acquire>
 800f838:	69a3      	ldr	r3, [r4, #24]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d002      	beq.n	800f844 <__sinit+0x14>
 800f83e:	f7ff ffef 	bl	800f820 <__sinit_lock_release>
 800f842:	bd13      	pop	{r0, r1, r4, pc}
 800f844:	64a3      	str	r3, [r4, #72]	; 0x48
 800f846:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f848:	6523      	str	r3, [r4, #80]	; 0x50
 800f84a:	4b13      	ldr	r3, [pc, #76]	; (800f898 <__sinit+0x68>)
 800f84c:	4a13      	ldr	r2, [pc, #76]	; (800f89c <__sinit+0x6c>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	62a2      	str	r2, [r4, #40]	; 0x28
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	42a3      	cmp	r3, r4
 800f856:	d101      	bne.n	800f85c <__sinit+0x2c>
 800f858:	2301      	movs	r3, #1
 800f85a:	61a3      	str	r3, [r4, #24]
 800f85c:	0020      	movs	r0, r4
 800f85e:	f000 f81f 	bl	800f8a0 <__sfp>
 800f862:	6060      	str	r0, [r4, #4]
 800f864:	0020      	movs	r0, r4
 800f866:	f000 f81b 	bl	800f8a0 <__sfp>
 800f86a:	60a0      	str	r0, [r4, #8]
 800f86c:	0020      	movs	r0, r4
 800f86e:	f000 f817 	bl	800f8a0 <__sfp>
 800f872:	2200      	movs	r2, #0
 800f874:	2104      	movs	r1, #4
 800f876:	60e0      	str	r0, [r4, #12]
 800f878:	6860      	ldr	r0, [r4, #4]
 800f87a:	f7ff ff77 	bl	800f76c <std>
 800f87e:	2201      	movs	r2, #1
 800f880:	2109      	movs	r1, #9
 800f882:	68a0      	ldr	r0, [r4, #8]
 800f884:	f7ff ff72 	bl	800f76c <std>
 800f888:	2202      	movs	r2, #2
 800f88a:	2112      	movs	r1, #18
 800f88c:	68e0      	ldr	r0, [r4, #12]
 800f88e:	f7ff ff6d 	bl	800f76c <std>
 800f892:	2301      	movs	r3, #1
 800f894:	61a3      	str	r3, [r4, #24]
 800f896:	e7d2      	b.n	800f83e <__sinit+0xe>
 800f898:	08010168 	.word	0x08010168
 800f89c:	0800f7b5 	.word	0x0800f7b5

0800f8a0 <__sfp>:
 800f8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8a2:	0007      	movs	r7, r0
 800f8a4:	f7ff ffa4 	bl	800f7f0 <__sfp_lock_acquire>
 800f8a8:	4b1f      	ldr	r3, [pc, #124]	; (800f928 <__sfp+0x88>)
 800f8aa:	681e      	ldr	r6, [r3, #0]
 800f8ac:	69b3      	ldr	r3, [r6, #24]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d102      	bne.n	800f8b8 <__sfp+0x18>
 800f8b2:	0030      	movs	r0, r6
 800f8b4:	f7ff ffbc 	bl	800f830 <__sinit>
 800f8b8:	3648      	adds	r6, #72	; 0x48
 800f8ba:	68b4      	ldr	r4, [r6, #8]
 800f8bc:	6873      	ldr	r3, [r6, #4]
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	d504      	bpl.n	800f8cc <__sfp+0x2c>
 800f8c2:	6833      	ldr	r3, [r6, #0]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d022      	beq.n	800f90e <__sfp+0x6e>
 800f8c8:	6836      	ldr	r6, [r6, #0]
 800f8ca:	e7f6      	b.n	800f8ba <__sfp+0x1a>
 800f8cc:	220c      	movs	r2, #12
 800f8ce:	5ea5      	ldrsh	r5, [r4, r2]
 800f8d0:	2d00      	cmp	r5, #0
 800f8d2:	d11a      	bne.n	800f90a <__sfp+0x6a>
 800f8d4:	0020      	movs	r0, r4
 800f8d6:	4b15      	ldr	r3, [pc, #84]	; (800f92c <__sfp+0x8c>)
 800f8d8:	3058      	adds	r0, #88	; 0x58
 800f8da:	60e3      	str	r3, [r4, #12]
 800f8dc:	6665      	str	r5, [r4, #100]	; 0x64
 800f8de:	f7ff fbdd 	bl	800f09c <__retarget_lock_init_recursive>
 800f8e2:	f7ff ff8d 	bl	800f800 <__sfp_lock_release>
 800f8e6:	0020      	movs	r0, r4
 800f8e8:	2208      	movs	r2, #8
 800f8ea:	0029      	movs	r1, r5
 800f8ec:	6025      	str	r5, [r4, #0]
 800f8ee:	60a5      	str	r5, [r4, #8]
 800f8f0:	6065      	str	r5, [r4, #4]
 800f8f2:	6125      	str	r5, [r4, #16]
 800f8f4:	6165      	str	r5, [r4, #20]
 800f8f6:	61a5      	str	r5, [r4, #24]
 800f8f8:	305c      	adds	r0, #92	; 0x5c
 800f8fa:	f7fd fa26 	bl	800cd4a <memset>
 800f8fe:	6365      	str	r5, [r4, #52]	; 0x34
 800f900:	63a5      	str	r5, [r4, #56]	; 0x38
 800f902:	64a5      	str	r5, [r4, #72]	; 0x48
 800f904:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f906:	0020      	movs	r0, r4
 800f908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f90a:	3468      	adds	r4, #104	; 0x68
 800f90c:	e7d7      	b.n	800f8be <__sfp+0x1e>
 800f90e:	2104      	movs	r1, #4
 800f910:	0038      	movs	r0, r7
 800f912:	f7ff ff57 	bl	800f7c4 <__sfmoreglue>
 800f916:	1e04      	subs	r4, r0, #0
 800f918:	6030      	str	r0, [r6, #0]
 800f91a:	d1d5      	bne.n	800f8c8 <__sfp+0x28>
 800f91c:	f7ff ff70 	bl	800f800 <__sfp_lock_release>
 800f920:	230c      	movs	r3, #12
 800f922:	603b      	str	r3, [r7, #0]
 800f924:	e7ef      	b.n	800f906 <__sfp+0x66>
 800f926:	46c0      	nop			; (mov r8, r8)
 800f928:	08010168 	.word	0x08010168
 800f92c:	ffff0001 	.word	0xffff0001

0800f930 <_fwalk_reent>:
 800f930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f932:	0004      	movs	r4, r0
 800f934:	0006      	movs	r6, r0
 800f936:	2700      	movs	r7, #0
 800f938:	9101      	str	r1, [sp, #4]
 800f93a:	3448      	adds	r4, #72	; 0x48
 800f93c:	6863      	ldr	r3, [r4, #4]
 800f93e:	68a5      	ldr	r5, [r4, #8]
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	9b00      	ldr	r3, [sp, #0]
 800f944:	3b01      	subs	r3, #1
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	d504      	bpl.n	800f954 <_fwalk_reent+0x24>
 800f94a:	6824      	ldr	r4, [r4, #0]
 800f94c:	2c00      	cmp	r4, #0
 800f94e:	d1f5      	bne.n	800f93c <_fwalk_reent+0xc>
 800f950:	0038      	movs	r0, r7
 800f952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f954:	89ab      	ldrh	r3, [r5, #12]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d908      	bls.n	800f96c <_fwalk_reent+0x3c>
 800f95a:	220e      	movs	r2, #14
 800f95c:	5eab      	ldrsh	r3, [r5, r2]
 800f95e:	3301      	adds	r3, #1
 800f960:	d004      	beq.n	800f96c <_fwalk_reent+0x3c>
 800f962:	0029      	movs	r1, r5
 800f964:	0030      	movs	r0, r6
 800f966:	9b01      	ldr	r3, [sp, #4]
 800f968:	4798      	blx	r3
 800f96a:	4307      	orrs	r7, r0
 800f96c:	3568      	adds	r5, #104	; 0x68
 800f96e:	e7e8      	b.n	800f942 <_fwalk_reent+0x12>

0800f970 <__swhatbuf_r>:
 800f970:	b570      	push	{r4, r5, r6, lr}
 800f972:	000e      	movs	r6, r1
 800f974:	001d      	movs	r5, r3
 800f976:	230e      	movs	r3, #14
 800f978:	5ec9      	ldrsh	r1, [r1, r3]
 800f97a:	0014      	movs	r4, r2
 800f97c:	b096      	sub	sp, #88	; 0x58
 800f97e:	2900      	cmp	r1, #0
 800f980:	da08      	bge.n	800f994 <__swhatbuf_r+0x24>
 800f982:	220c      	movs	r2, #12
 800f984:	5eb3      	ldrsh	r3, [r6, r2]
 800f986:	2200      	movs	r2, #0
 800f988:	602a      	str	r2, [r5, #0]
 800f98a:	061b      	lsls	r3, r3, #24
 800f98c:	d411      	bmi.n	800f9b2 <__swhatbuf_r+0x42>
 800f98e:	2380      	movs	r3, #128	; 0x80
 800f990:	00db      	lsls	r3, r3, #3
 800f992:	e00f      	b.n	800f9b4 <__swhatbuf_r+0x44>
 800f994:	466a      	mov	r2, sp
 800f996:	f000 f91b 	bl	800fbd0 <_fstat_r>
 800f99a:	2800      	cmp	r0, #0
 800f99c:	dbf1      	blt.n	800f982 <__swhatbuf_r+0x12>
 800f99e:	23f0      	movs	r3, #240	; 0xf0
 800f9a0:	9901      	ldr	r1, [sp, #4]
 800f9a2:	021b      	lsls	r3, r3, #8
 800f9a4:	4019      	ands	r1, r3
 800f9a6:	4b05      	ldr	r3, [pc, #20]	; (800f9bc <__swhatbuf_r+0x4c>)
 800f9a8:	18c9      	adds	r1, r1, r3
 800f9aa:	424b      	negs	r3, r1
 800f9ac:	4159      	adcs	r1, r3
 800f9ae:	6029      	str	r1, [r5, #0]
 800f9b0:	e7ed      	b.n	800f98e <__swhatbuf_r+0x1e>
 800f9b2:	2340      	movs	r3, #64	; 0x40
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	6023      	str	r3, [r4, #0]
 800f9b8:	b016      	add	sp, #88	; 0x58
 800f9ba:	bd70      	pop	{r4, r5, r6, pc}
 800f9bc:	ffffe000 	.word	0xffffe000

0800f9c0 <__smakebuf_r>:
 800f9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9c2:	2602      	movs	r6, #2
 800f9c4:	898b      	ldrh	r3, [r1, #12]
 800f9c6:	0005      	movs	r5, r0
 800f9c8:	000c      	movs	r4, r1
 800f9ca:	4233      	tst	r3, r6
 800f9cc:	d006      	beq.n	800f9dc <__smakebuf_r+0x1c>
 800f9ce:	0023      	movs	r3, r4
 800f9d0:	3347      	adds	r3, #71	; 0x47
 800f9d2:	6023      	str	r3, [r4, #0]
 800f9d4:	6123      	str	r3, [r4, #16]
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	6163      	str	r3, [r4, #20]
 800f9da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f9dc:	466a      	mov	r2, sp
 800f9de:	ab01      	add	r3, sp, #4
 800f9e0:	f7ff ffc6 	bl	800f970 <__swhatbuf_r>
 800f9e4:	9900      	ldr	r1, [sp, #0]
 800f9e6:	0007      	movs	r7, r0
 800f9e8:	0028      	movs	r0, r5
 800f9ea:	f7fd fa23 	bl	800ce34 <_malloc_r>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	d108      	bne.n	800fa04 <__smakebuf_r+0x44>
 800f9f2:	220c      	movs	r2, #12
 800f9f4:	5ea3      	ldrsh	r3, [r4, r2]
 800f9f6:	059a      	lsls	r2, r3, #22
 800f9f8:	d4ef      	bmi.n	800f9da <__smakebuf_r+0x1a>
 800f9fa:	2203      	movs	r2, #3
 800f9fc:	4393      	bics	r3, r2
 800f9fe:	431e      	orrs	r6, r3
 800fa00:	81a6      	strh	r6, [r4, #12]
 800fa02:	e7e4      	b.n	800f9ce <__smakebuf_r+0xe>
 800fa04:	4b0f      	ldr	r3, [pc, #60]	; (800fa44 <__smakebuf_r+0x84>)
 800fa06:	62ab      	str	r3, [r5, #40]	; 0x28
 800fa08:	2380      	movs	r3, #128	; 0x80
 800fa0a:	89a2      	ldrh	r2, [r4, #12]
 800fa0c:	6020      	str	r0, [r4, #0]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	81a3      	strh	r3, [r4, #12]
 800fa12:	9b00      	ldr	r3, [sp, #0]
 800fa14:	6120      	str	r0, [r4, #16]
 800fa16:	6163      	str	r3, [r4, #20]
 800fa18:	9b01      	ldr	r3, [sp, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00d      	beq.n	800fa3a <__smakebuf_r+0x7a>
 800fa1e:	0028      	movs	r0, r5
 800fa20:	230e      	movs	r3, #14
 800fa22:	5ee1      	ldrsh	r1, [r4, r3]
 800fa24:	f000 f8e6 	bl	800fbf4 <_isatty_r>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d006      	beq.n	800fa3a <__smakebuf_r+0x7a>
 800fa2c:	2203      	movs	r2, #3
 800fa2e:	89a3      	ldrh	r3, [r4, #12]
 800fa30:	4393      	bics	r3, r2
 800fa32:	001a      	movs	r2, r3
 800fa34:	2301      	movs	r3, #1
 800fa36:	4313      	orrs	r3, r2
 800fa38:	81a3      	strh	r3, [r4, #12]
 800fa3a:	89a0      	ldrh	r0, [r4, #12]
 800fa3c:	4307      	orrs	r7, r0
 800fa3e:	81a7      	strh	r7, [r4, #12]
 800fa40:	e7cb      	b.n	800f9da <__smakebuf_r+0x1a>
 800fa42:	46c0      	nop			; (mov r8, r8)
 800fa44:	0800f7b5 	.word	0x0800f7b5

0800fa48 <_malloc_usable_size_r>:
 800fa48:	1f0b      	subs	r3, r1, #4
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	1f18      	subs	r0, r3, #4
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	da01      	bge.n	800fa56 <_malloc_usable_size_r+0xe>
 800fa52:	580b      	ldr	r3, [r1, r0]
 800fa54:	18c0      	adds	r0, r0, r3
 800fa56:	4770      	bx	lr

0800fa58 <_raise_r>:
 800fa58:	b570      	push	{r4, r5, r6, lr}
 800fa5a:	0004      	movs	r4, r0
 800fa5c:	000d      	movs	r5, r1
 800fa5e:	291f      	cmp	r1, #31
 800fa60:	d904      	bls.n	800fa6c <_raise_r+0x14>
 800fa62:	2316      	movs	r3, #22
 800fa64:	6003      	str	r3, [r0, #0]
 800fa66:	2001      	movs	r0, #1
 800fa68:	4240      	negs	r0, r0
 800fa6a:	bd70      	pop	{r4, r5, r6, pc}
 800fa6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d004      	beq.n	800fa7c <_raise_r+0x24>
 800fa72:	008a      	lsls	r2, r1, #2
 800fa74:	189b      	adds	r3, r3, r2
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	2a00      	cmp	r2, #0
 800fa7a:	d108      	bne.n	800fa8e <_raise_r+0x36>
 800fa7c:	0020      	movs	r0, r4
 800fa7e:	f000 f831 	bl	800fae4 <_getpid_r>
 800fa82:	002a      	movs	r2, r5
 800fa84:	0001      	movs	r1, r0
 800fa86:	0020      	movs	r0, r4
 800fa88:	f000 f81a 	bl	800fac0 <_kill_r>
 800fa8c:	e7ed      	b.n	800fa6a <_raise_r+0x12>
 800fa8e:	2000      	movs	r0, #0
 800fa90:	2a01      	cmp	r2, #1
 800fa92:	d0ea      	beq.n	800fa6a <_raise_r+0x12>
 800fa94:	1c51      	adds	r1, r2, #1
 800fa96:	d103      	bne.n	800faa0 <_raise_r+0x48>
 800fa98:	2316      	movs	r3, #22
 800fa9a:	3001      	adds	r0, #1
 800fa9c:	6023      	str	r3, [r4, #0]
 800fa9e:	e7e4      	b.n	800fa6a <_raise_r+0x12>
 800faa0:	2400      	movs	r4, #0
 800faa2:	0028      	movs	r0, r5
 800faa4:	601c      	str	r4, [r3, #0]
 800faa6:	4790      	blx	r2
 800faa8:	0020      	movs	r0, r4
 800faaa:	e7de      	b.n	800fa6a <_raise_r+0x12>

0800faac <raise>:
 800faac:	b510      	push	{r4, lr}
 800faae:	4b03      	ldr	r3, [pc, #12]	; (800fabc <raise+0x10>)
 800fab0:	0001      	movs	r1, r0
 800fab2:	6818      	ldr	r0, [r3, #0]
 800fab4:	f7ff ffd0 	bl	800fa58 <_raise_r>
 800fab8:	bd10      	pop	{r4, pc}
 800faba:	46c0      	nop			; (mov r8, r8)
 800fabc:	20000018 	.word	0x20000018

0800fac0 <_kill_r>:
 800fac0:	2300      	movs	r3, #0
 800fac2:	b570      	push	{r4, r5, r6, lr}
 800fac4:	4d06      	ldr	r5, [pc, #24]	; (800fae0 <_kill_r+0x20>)
 800fac6:	0004      	movs	r4, r0
 800fac8:	0008      	movs	r0, r1
 800faca:	0011      	movs	r1, r2
 800facc:	602b      	str	r3, [r5, #0]
 800face:	f7f6 fc7d 	bl	80063cc <_kill>
 800fad2:	1c43      	adds	r3, r0, #1
 800fad4:	d103      	bne.n	800fade <_kill_r+0x1e>
 800fad6:	682b      	ldr	r3, [r5, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d000      	beq.n	800fade <_kill_r+0x1e>
 800fadc:	6023      	str	r3, [r4, #0]
 800fade:	bd70      	pop	{r4, r5, r6, pc}
 800fae0:	200009d0 	.word	0x200009d0

0800fae4 <_getpid_r>:
 800fae4:	b510      	push	{r4, lr}
 800fae6:	f7f6 fc6b 	bl	80063c0 <_getpid>
 800faea:	bd10      	pop	{r4, pc}

0800faec <__sread>:
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	000c      	movs	r4, r1
 800faf0:	250e      	movs	r5, #14
 800faf2:	5f49      	ldrsh	r1, [r1, r5]
 800faf4:	f000 f8a4 	bl	800fc40 <_read_r>
 800faf8:	2800      	cmp	r0, #0
 800fafa:	db03      	blt.n	800fb04 <__sread+0x18>
 800fafc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800fafe:	181b      	adds	r3, r3, r0
 800fb00:	6563      	str	r3, [r4, #84]	; 0x54
 800fb02:	bd70      	pop	{r4, r5, r6, pc}
 800fb04:	89a3      	ldrh	r3, [r4, #12]
 800fb06:	4a02      	ldr	r2, [pc, #8]	; (800fb10 <__sread+0x24>)
 800fb08:	4013      	ands	r3, r2
 800fb0a:	81a3      	strh	r3, [r4, #12]
 800fb0c:	e7f9      	b.n	800fb02 <__sread+0x16>
 800fb0e:	46c0      	nop			; (mov r8, r8)
 800fb10:	ffffefff 	.word	0xffffefff

0800fb14 <__swrite>:
 800fb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb16:	001f      	movs	r7, r3
 800fb18:	898b      	ldrh	r3, [r1, #12]
 800fb1a:	0005      	movs	r5, r0
 800fb1c:	000c      	movs	r4, r1
 800fb1e:	0016      	movs	r6, r2
 800fb20:	05db      	lsls	r3, r3, #23
 800fb22:	d505      	bpl.n	800fb30 <__swrite+0x1c>
 800fb24:	230e      	movs	r3, #14
 800fb26:	5ec9      	ldrsh	r1, [r1, r3]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	2302      	movs	r3, #2
 800fb2c:	f000 f874 	bl	800fc18 <_lseek_r>
 800fb30:	89a3      	ldrh	r3, [r4, #12]
 800fb32:	4a05      	ldr	r2, [pc, #20]	; (800fb48 <__swrite+0x34>)
 800fb34:	0028      	movs	r0, r5
 800fb36:	4013      	ands	r3, r2
 800fb38:	81a3      	strh	r3, [r4, #12]
 800fb3a:	0032      	movs	r2, r6
 800fb3c:	230e      	movs	r3, #14
 800fb3e:	5ee1      	ldrsh	r1, [r4, r3]
 800fb40:	003b      	movs	r3, r7
 800fb42:	f000 f81f 	bl	800fb84 <_write_r>
 800fb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb48:	ffffefff 	.word	0xffffefff

0800fb4c <__sseek>:
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	000c      	movs	r4, r1
 800fb50:	250e      	movs	r5, #14
 800fb52:	5f49      	ldrsh	r1, [r1, r5]
 800fb54:	f000 f860 	bl	800fc18 <_lseek_r>
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	1c42      	adds	r2, r0, #1
 800fb5c:	d103      	bne.n	800fb66 <__sseek+0x1a>
 800fb5e:	4a05      	ldr	r2, [pc, #20]	; (800fb74 <__sseek+0x28>)
 800fb60:	4013      	ands	r3, r2
 800fb62:	81a3      	strh	r3, [r4, #12]
 800fb64:	bd70      	pop	{r4, r5, r6, pc}
 800fb66:	2280      	movs	r2, #128	; 0x80
 800fb68:	0152      	lsls	r2, r2, #5
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	81a3      	strh	r3, [r4, #12]
 800fb6e:	6560      	str	r0, [r4, #84]	; 0x54
 800fb70:	e7f8      	b.n	800fb64 <__sseek+0x18>
 800fb72:	46c0      	nop			; (mov r8, r8)
 800fb74:	ffffefff 	.word	0xffffefff

0800fb78 <__sclose>:
 800fb78:	b510      	push	{r4, lr}
 800fb7a:	230e      	movs	r3, #14
 800fb7c:	5ec9      	ldrsh	r1, [r1, r3]
 800fb7e:	f000 f815 	bl	800fbac <_close_r>
 800fb82:	bd10      	pop	{r4, pc}

0800fb84 <_write_r>:
 800fb84:	b570      	push	{r4, r5, r6, lr}
 800fb86:	0004      	movs	r4, r0
 800fb88:	0008      	movs	r0, r1
 800fb8a:	0011      	movs	r1, r2
 800fb8c:	001a      	movs	r2, r3
 800fb8e:	2300      	movs	r3, #0
 800fb90:	4d05      	ldr	r5, [pc, #20]	; (800fba8 <_write_r+0x24>)
 800fb92:	602b      	str	r3, [r5, #0]
 800fb94:	f7f6 fc53 	bl	800643e <_write>
 800fb98:	1c43      	adds	r3, r0, #1
 800fb9a:	d103      	bne.n	800fba4 <_write_r+0x20>
 800fb9c:	682b      	ldr	r3, [r5, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d000      	beq.n	800fba4 <_write_r+0x20>
 800fba2:	6023      	str	r3, [r4, #0]
 800fba4:	bd70      	pop	{r4, r5, r6, pc}
 800fba6:	46c0      	nop			; (mov r8, r8)
 800fba8:	200009d0 	.word	0x200009d0

0800fbac <_close_r>:
 800fbac:	2300      	movs	r3, #0
 800fbae:	b570      	push	{r4, r5, r6, lr}
 800fbb0:	4d06      	ldr	r5, [pc, #24]	; (800fbcc <_close_r+0x20>)
 800fbb2:	0004      	movs	r4, r0
 800fbb4:	0008      	movs	r0, r1
 800fbb6:	602b      	str	r3, [r5, #0]
 800fbb8:	f7f6 fc5d 	bl	8006476 <_close>
 800fbbc:	1c43      	adds	r3, r0, #1
 800fbbe:	d103      	bne.n	800fbc8 <_close_r+0x1c>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d000      	beq.n	800fbc8 <_close_r+0x1c>
 800fbc6:	6023      	str	r3, [r4, #0]
 800fbc8:	bd70      	pop	{r4, r5, r6, pc}
 800fbca:	46c0      	nop			; (mov r8, r8)
 800fbcc:	200009d0 	.word	0x200009d0

0800fbd0 <_fstat_r>:
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	b570      	push	{r4, r5, r6, lr}
 800fbd4:	4d06      	ldr	r5, [pc, #24]	; (800fbf0 <_fstat_r+0x20>)
 800fbd6:	0004      	movs	r4, r0
 800fbd8:	0008      	movs	r0, r1
 800fbda:	0011      	movs	r1, r2
 800fbdc:	602b      	str	r3, [r5, #0]
 800fbde:	f7f6 fc54 	bl	800648a <_fstat>
 800fbe2:	1c43      	adds	r3, r0, #1
 800fbe4:	d103      	bne.n	800fbee <_fstat_r+0x1e>
 800fbe6:	682b      	ldr	r3, [r5, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d000      	beq.n	800fbee <_fstat_r+0x1e>
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	bd70      	pop	{r4, r5, r6, pc}
 800fbf0:	200009d0 	.word	0x200009d0

0800fbf4 <_isatty_r>:
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	b570      	push	{r4, r5, r6, lr}
 800fbf8:	4d06      	ldr	r5, [pc, #24]	; (800fc14 <_isatty_r+0x20>)
 800fbfa:	0004      	movs	r4, r0
 800fbfc:	0008      	movs	r0, r1
 800fbfe:	602b      	str	r3, [r5, #0]
 800fc00:	f7f6 fc51 	bl	80064a6 <_isatty>
 800fc04:	1c43      	adds	r3, r0, #1
 800fc06:	d103      	bne.n	800fc10 <_isatty_r+0x1c>
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d000      	beq.n	800fc10 <_isatty_r+0x1c>
 800fc0e:	6023      	str	r3, [r4, #0]
 800fc10:	bd70      	pop	{r4, r5, r6, pc}
 800fc12:	46c0      	nop			; (mov r8, r8)
 800fc14:	200009d0 	.word	0x200009d0

0800fc18 <_lseek_r>:
 800fc18:	b570      	push	{r4, r5, r6, lr}
 800fc1a:	0004      	movs	r4, r0
 800fc1c:	0008      	movs	r0, r1
 800fc1e:	0011      	movs	r1, r2
 800fc20:	001a      	movs	r2, r3
 800fc22:	2300      	movs	r3, #0
 800fc24:	4d05      	ldr	r5, [pc, #20]	; (800fc3c <_lseek_r+0x24>)
 800fc26:	602b      	str	r3, [r5, #0]
 800fc28:	f7f6 fc46 	bl	80064b8 <_lseek>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	d103      	bne.n	800fc38 <_lseek_r+0x20>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d000      	beq.n	800fc38 <_lseek_r+0x20>
 800fc36:	6023      	str	r3, [r4, #0]
 800fc38:	bd70      	pop	{r4, r5, r6, pc}
 800fc3a:	46c0      	nop			; (mov r8, r8)
 800fc3c:	200009d0 	.word	0x200009d0

0800fc40 <_read_r>:
 800fc40:	b570      	push	{r4, r5, r6, lr}
 800fc42:	0004      	movs	r4, r0
 800fc44:	0008      	movs	r0, r1
 800fc46:	0011      	movs	r1, r2
 800fc48:	001a      	movs	r2, r3
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	4d05      	ldr	r5, [pc, #20]	; (800fc64 <_read_r+0x24>)
 800fc4e:	602b      	str	r3, [r5, #0]
 800fc50:	f7f6 fbd8 	bl	8006404 <_read>
 800fc54:	1c43      	adds	r3, r0, #1
 800fc56:	d103      	bne.n	800fc60 <_read_r+0x20>
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d000      	beq.n	800fc60 <_read_r+0x20>
 800fc5e:	6023      	str	r3, [r4, #0]
 800fc60:	bd70      	pop	{r4, r5, r6, pc}
 800fc62:	46c0      	nop			; (mov r8, r8)
 800fc64:	200009d0 	.word	0x200009d0

0800fc68 <_init>:
 800fc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc6a:	46c0      	nop			; (mov r8, r8)
 800fc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc6e:	bc08      	pop	{r3}
 800fc70:	469e      	mov	lr, r3
 800fc72:	4770      	bx	lr

0800fc74 <_fini>:
 800fc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc76:	46c0      	nop			; (mov r8, r8)
 800fc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc7a:	bc08      	pop	{r3}
 800fc7c:	469e      	mov	lr, r3
 800fc7e:	4770      	bx	lr

0800fc80 <__FLASH_Program_Fast_veneer>:
 800fc80:	b401      	push	{r0}
 800fc82:	4802      	ldr	r0, [pc, #8]	; (800fc8c <__FLASH_Program_Fast_veneer+0xc>)
 800fc84:	4684      	mov	ip, r0
 800fc86:	bc01      	pop	{r0}
 800fc88:	4760      	bx	ip
 800fc8a:	bf00      	nop
 800fc8c:	200001e9 	.word	0x200001e9

Disassembly of section .data:

20000000 <ReturnVal.0>:
20000000:	00000001 00000000                       ........

20000008 <callbackSystickHandle>:
20000008:	08004949                                II..

2000000c <SystemCoreClock>:
2000000c:	00f42400                                .$..

20000010 <uwTickPrio>:
20000010:	00000004                                ....

20000014 <uwTickFreq>:
20000014:	00000001                                ....

20000018 <_impure_ptr>:
20000018:	2000001c                                ... 

2000001c <impure_data>:
2000001c:	00000000 08010504 08010524 080104e4     ........$.......
	...

2000007c <__global_locale>:
2000007c:	00000043 00000000 00000000 00000000     C...............
	...
2000009c:	00000043 00000000 00000000 00000000     C...............
	...
200000bc:	00000043 00000000 00000000 00000000     C...............
	...
200000dc:	00000043 00000000 00000000 00000000     C...............
	...
200000fc:	00000043 00000000 00000000 00000000     C...............
	...
2000011c:	00000043 00000000 00000000 00000000     C...............
	...
2000013c:	00000043 00000000 00000000 00000000     C...............
	...
2000015c:	0800f4b9 0800f0a3 00000000 080103e3     ................
2000016c:	080103e1 080103d8 080103d8 080103d8     ................
2000017c:	080103d8 080103d8 080103d8 080103d8     ................
2000018c:	080103d8 080103d8 ffffffff ffffffff     ................
2000019c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200001c4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200001e8 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200001e8:	b580      	push	{r7, lr}
200001ea:	b088      	sub	sp, #32
200001ec:	af00      	add	r7, sp, #0
200001ee:	6078      	str	r0, [r7, #4]
200001f0:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200001f2:	231f      	movs	r3, #31
200001f4:	18fb      	adds	r3, r7, r3
200001f6:	2200      	movs	r2, #0
200001f8:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200001fa:	687b      	ldr	r3, [r7, #4]
200001fc:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200001fe:	683b      	ldr	r3, [r7, #0]
20000200:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000202:	4b1a      	ldr	r3, [pc, #104]	; (2000026c <FLASH_Program_Fast+0x84>)
20000204:	695a      	ldr	r2, [r3, #20]
20000206:	4b19      	ldr	r3, [pc, #100]	; (2000026c <FLASH_Program_Fast+0x84>)
20000208:	2180      	movs	r1, #128	; 0x80
2000020a:	02c9      	lsls	r1, r1, #11
2000020c:	430a      	orrs	r2, r1
2000020e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000210:	f3ef 8310 	mrs	r3, PRIMASK
20000214:	60fb      	str	r3, [r7, #12]
  return(result);
20000216:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000021a:	b672      	cpsid	i
}
2000021c:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000021e:	e00f      	b.n	20000240 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000220:	697a      	ldr	r2, [r7, #20]
20000222:	69bb      	ldr	r3, [r7, #24]
20000224:	6812      	ldr	r2, [r2, #0]
20000226:	601a      	str	r2, [r3, #0]
    src += 4U;
20000228:	697b      	ldr	r3, [r7, #20]
2000022a:	3304      	adds	r3, #4
2000022c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000022e:	69bb      	ldr	r3, [r7, #24]
20000230:	3304      	adds	r3, #4
20000232:	61bb      	str	r3, [r7, #24]
    index++;
20000234:	211f      	movs	r1, #31
20000236:	187b      	adds	r3, r7, r1
20000238:	781a      	ldrb	r2, [r3, #0]
2000023a:	187b      	adds	r3, r7, r1
2000023c:	3201      	adds	r2, #1
2000023e:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000240:	231f      	movs	r3, #31
20000242:	18fb      	adds	r3, r7, r3
20000244:	781b      	ldrb	r3, [r3, #0]
20000246:	2b3f      	cmp	r3, #63	; 0x3f
20000248:	d9ea      	bls.n	20000220 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000024a:	46c0      	nop			; (mov r8, r8)
2000024c:	4b07      	ldr	r3, [pc, #28]	; (2000026c <FLASH_Program_Fast+0x84>)
2000024e:	691a      	ldr	r2, [r3, #16]
20000250:	2380      	movs	r3, #128	; 0x80
20000252:	025b      	lsls	r3, r3, #9
20000254:	4013      	ands	r3, r2
20000256:	d1f9      	bne.n	2000024c <FLASH_Program_Fast+0x64>
20000258:	693b      	ldr	r3, [r7, #16]
2000025a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000025c:	68bb      	ldr	r3, [r7, #8]
2000025e:	f383 8810 	msr	PRIMASK, r3
}
20000262:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b008      	add	sp, #32
2000026a:	bd80      	pop	{r7, pc}
2000026c:	40022000 	.word	0x40022000
