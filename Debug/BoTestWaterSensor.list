
BoTestWaterSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006044  08006044  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006044  08006044  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006044  08006044  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800604c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  2000000c  08006058  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08006058  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017880  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc2  00000000  00000000  000378b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d59  00000000  00000000  0003cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001840e  00000000  00000000  0003f9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000983c7  00000000  00000000  00057df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f01be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004990  00000000  00000000  000f0210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005f50 	.word	0x08005f50

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005f50 	.word	0x08005f50

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f001 f968 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f81b 	bl	800042e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 fbec 	bl	8000bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80003fc:	f000 fbcc 	bl	8000b98 <MX_DMA_Init>
  MX_ADC1_Init();
 8000400:	f000 f872 	bl	80004e8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000404:	f000 f970 	bl	80006e8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000408:	f000 fa2a 	bl	8000860 <MX_TIM6_Init>
  MX_TIM14_Init();
 800040c:	f000 fa9c 	bl	8000948 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000410:	f000 fb0c 	bl	8000a2c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000414:	f000 fb58 	bl	8000ac8 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8000418:	f000 fb8a 	bl	8000b30 <MX_USART4_UART_Init>
  MX_IWDG_Init();
 800041c:	f000 f944 	bl	80006a8 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 8000420:	f000 fab6 	bl	8000990 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8000424:	f000 fa56 	bl	80008d4 <MX_TIM7_Init>
  MX_I2C2_Init();
 8000428:	f000 f8fe 	bl	8000628 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800042c:	e7fe      	b.n	800042c <main+0x40>

0800042e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042e:	b590      	push	{r4, r7, lr}
 8000430:	b093      	sub	sp, #76	; 0x4c
 8000432:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000434:	2414      	movs	r4, #20
 8000436:	193b      	adds	r3, r7, r4
 8000438:	0018      	movs	r0, r3
 800043a:	2334      	movs	r3, #52	; 0x34
 800043c:	001a      	movs	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	f005 fd7e 	bl	8005f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	0018      	movs	r0, r3
 8000448:	2310      	movs	r3, #16
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f005 fd77 	bl	8005f40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	0018      	movs	r0, r3
 8000458:	f002 fdf4 	bl	8003044 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	220a      	movs	r2, #10
 8000460:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800046a:	0021      	movs	r1, r4
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2240      	movs	r2, #64	; 0x40
 8000476:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2201      	movs	r2, #1
 800047c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2202      	movs	r2, #2
 8000482:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2202      	movs	r2, #2
 8000488:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2208      	movs	r2, #8
 8000494:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	0292      	lsls	r2, r2, #10
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	0592      	lsls	r2, r2, #22
 80004a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	0018      	movs	r0, r3
 80004aa:	f002 fe17 	bl	80030dc <HAL_RCC_OscConfig>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004b2:	f000 fd25 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2202      	movs	r2, #2
 80004c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2102      	movs	r1, #2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f003 f912 	bl	80036fc <HAL_RCC_ClockConfig>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004dc:	f000 fd10 	bl	8000f00 <Error_Handler>
  }
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b013      	add	sp, #76	; 0x4c
 80004e6:	bd90      	pop	{r4, r7, pc}

080004e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	0018      	movs	r0, r3
 80004f2:	230c      	movs	r3, #12
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f005 fd22 	bl	8005f40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004fc:	4b44      	ldr	r3, [pc, #272]	; (8000610 <MX_ADC1_Init+0x128>)
 80004fe:	4a45      	ldr	r2, [pc, #276]	; (8000614 <MX_ADC1_Init+0x12c>)
 8000500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000502:	4b43      	ldr	r3, [pc, #268]	; (8000610 <MX_ADC1_Init+0x128>)
 8000504:	2280      	movs	r2, #128	; 0x80
 8000506:	0312      	lsls	r2, r2, #12
 8000508:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800050a:	4b41      	ldr	r3, [pc, #260]	; (8000610 <MX_ADC1_Init+0x128>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000510:	4b3f      	ldr	r3, [pc, #252]	; (8000610 <MX_ADC1_Init+0x128>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000516:	4b3e      	ldr	r3, [pc, #248]	; (8000610 <MX_ADC1_Init+0x128>)
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	0392      	lsls	r2, r2, #14
 800051c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051e:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <MX_ADC1_Init+0x128>)
 8000520:	2204      	movs	r2, #4
 8000522:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000524:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <MX_ADC1_Init+0x128>)
 8000526:	2200      	movs	r2, #0
 8000528:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800052a:	4b39      	ldr	r3, [pc, #228]	; (8000610 <MX_ADC1_Init+0x128>)
 800052c:	2200      	movs	r2, #0
 800052e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000530:	4b37      	ldr	r3, [pc, #220]	; (8000610 <MX_ADC1_Init+0x128>)
 8000532:	2201      	movs	r2, #1
 8000534:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000536:	4b36      	ldr	r3, [pc, #216]	; (8000610 <MX_ADC1_Init+0x128>)
 8000538:	2204      	movs	r2, #4
 800053a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800053c:	4b34      	ldr	r3, [pc, #208]	; (8000610 <MX_ADC1_Init+0x128>)
 800053e:	2200      	movs	r2, #0
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000542:	4b33      	ldr	r3, [pc, #204]	; (8000610 <MX_ADC1_Init+0x128>)
 8000544:	2200      	movs	r2, #0
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000548:	4b31      	ldr	r3, [pc, #196]	; (8000610 <MX_ADC1_Init+0x128>)
 800054a:	222c      	movs	r2, #44	; 0x2c
 800054c:	2101      	movs	r1, #1
 800054e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000550:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <MX_ADC1_Init+0x128>)
 8000552:	2200      	movs	r2, #0
 8000554:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <MX_ADC1_Init+0x128>)
 8000558:	2207      	movs	r2, #7
 800055a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <MX_ADC1_Init+0x128>)
 800055e:	2207      	movs	r2, #7
 8000560:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <MX_ADC1_Init+0x128>)
 8000564:	223c      	movs	r2, #60	; 0x3c
 8000566:	2100      	movs	r1, #0
 8000568:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800056a:	4b29      	ldr	r3, [pc, #164]	; (8000610 <MX_ADC1_Init+0x128>)
 800056c:	2200      	movs	r2, #0
 800056e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <MX_ADC1_Init+0x128>)
 8000572:	0018      	movs	r0, r3
 8000574:	f001 fa5e 	bl	8001a34 <HAL_ADC_Init>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800057c:	f000 fcc0 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4a25      	ldr	r2, [pc, #148]	; (8000618 <MX_ADC1_Init+0x130>)
 8000584:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000592:	1d3a      	adds	r2, r7, #4
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <MX_ADC1_Init+0x128>)
 8000596:	0011      	movs	r1, r2
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fd23 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80005a2:	f000 fcad 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4a1c      	ldr	r2, [pc, #112]	; (800061c <MX_ADC1_Init+0x134>)
 80005aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2204      	movs	r2, #4
 80005b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_ADC1_Init+0x128>)
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fd13 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005c2:	f000 fc9d 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4a15      	ldr	r2, [pc, #84]	; (8000620 <MX_ADC1_Init+0x138>)
 80005ca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2208      	movs	r2, #8
 80005d0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3a      	adds	r2, r7, #4
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_ADC1_Init+0x128>)
 80005d6:	0011      	movs	r1, r2
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 fd03 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80005e2:	f000 fc8d 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <MX_ADC1_Init+0x13c>)
 80005ea:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	220c      	movs	r2, #12
 80005f0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_ADC1_Init+0x128>)
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fcf3 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000602:	f000 fc7d 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	20000028 	.word	0x20000028
 8000614:	40012400 	.word	0x40012400
 8000618:	08000004 	.word	0x08000004
 800061c:	0c000008 	.word	0x0c000008
 8000620:	10000010 	.word	0x10000010
 8000624:	14000020 	.word	0x14000020

08000628 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_I2C2_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <MX_I2C2_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_I2C2_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <MX_I2C2_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_I2C2_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_I2C2_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_I2C2_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_I2C2_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2C2_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_I2C2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_I2C2_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2C2_Init+0x74>)
 8000664:	0018      	movs	r0, r3
 8000666:	f002 fb6d 	bl	8002d44 <HAL_I2C_Init>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 fc47 	bl	8000f00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_I2C2_Init+0x74>)
 8000674:	2100      	movs	r1, #0
 8000676:	0018      	movs	r0, r3
 8000678:	f002 fbfa 	bl	8002e70 <HAL_I2CEx_ConfigAnalogFilter>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 fc3e 	bl	8000f00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_I2C2_Init+0x74>)
 8000686:	2100      	movs	r1, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f002 fc3d 	bl	8002f08 <HAL_I2CEx_ConfigDigitalFilter>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 fc35 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000e8 	.word	0x200000e8
 80006a0:	40005800 	.word	0x40005800
 80006a4:	10707dbc 	.word	0x10707dbc

080006a8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_IWDG_Init+0x34>)
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <MX_IWDG_Init+0x38>)
 80006b0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_IWDG_Init+0x34>)
 80006b4:	2203      	movs	r2, #3
 80006b6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_IWDG_Init+0x34>)
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <MX_IWDG_Init+0x3c>)
 80006bc:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_IWDG_Init+0x34>)
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <MX_IWDG_Init+0x3c>)
 80006c2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MX_IWDG_Init+0x34>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f002 fc6a 	bl	8002fa0 <HAL_IWDG_Init>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80006d0:	f000 fc16 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	2000013c 	.word	0x2000013c
 80006e0:	40003000 	.word	0x40003000
 80006e4:	00000fff 	.word	0x00000fff

080006e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	; 0x38
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	2328      	movs	r3, #40	; 0x28
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	0018      	movs	r0, r3
 80006f4:	2310      	movs	r3, #16
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f005 fc21 	bl	8005f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fe:	231c      	movs	r3, #28
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	0018      	movs	r0, r3
 8000704:	230c      	movs	r3, #12
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f005 fc19 	bl	8005f40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070e:	003b      	movs	r3, r7
 8000710:	0018      	movs	r0, r3
 8000712:	231c      	movs	r3, #28
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f005 fc12 	bl	8005f40 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800071c:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <MX_TIM3_Init+0x168>)
 800071e:	4a4d      	ldr	r2, [pc, #308]	; (8000854 <MX_TIM3_Init+0x16c>)
 8000720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8000722:	4b4b      	ldr	r3, [pc, #300]	; (8000850 <MX_TIM3_Init+0x168>)
 8000724:	2205      	movs	r2, #5
 8000726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b49      	ldr	r3, [pc, #292]	; (8000850 <MX_TIM3_Init+0x168>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 38000;
 800072e:	4b48      	ldr	r3, [pc, #288]	; (8000850 <MX_TIM3_Init+0x168>)
 8000730:	4a49      	ldr	r2, [pc, #292]	; (8000858 <MX_TIM3_Init+0x170>)
 8000732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b46      	ldr	r3, [pc, #280]	; (8000850 <MX_TIM3_Init+0x168>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800073a:	4b45      	ldr	r3, [pc, #276]	; (8000850 <MX_TIM3_Init+0x168>)
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000740:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MX_TIM3_Init+0x168>)
 8000742:	0018      	movs	r0, r3
 8000744:	f003 fab8 	bl	8003cb8 <HAL_TIM_Base_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800074c:	f000 fbd8 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	2128      	movs	r1, #40	; 0x28
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	0152      	lsls	r2, r2, #5
 8000758:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800075a:	187a      	adds	r2, r7, r1
 800075c:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <MX_TIM3_Init+0x168>)
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f003 fd93 	bl	800428c <HAL_TIM_ConfigClockSource>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800076a:	f000 fbc9 	bl	8000f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <MX_TIM3_Init+0x168>)
 8000770:	0018      	movs	r0, r3
 8000772:	f003 faf9 	bl	8003d68 <HAL_TIM_PWM_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800077a:	f000 fbc1 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	211c      	movs	r1, #28
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800078c:	187a      	adds	r2, r7, r1
 800078e:	4b30      	ldr	r3, [pc, #192]	; (8000850 <MX_TIM3_Init+0x168>)
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f004 fa4e 	bl	8004c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800079c:	f000 fbb0 	bl	8000f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a0:	003b      	movs	r3, r7
 80007a2:	2260      	movs	r2, #96	; 0x60
 80007a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007a6:	003b      	movs	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80007ac:	003b      	movs	r3, r7
 80007ae:	2202      	movs	r2, #2
 80007b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2204      	movs	r2, #4
 80007b6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b8:	0039      	movs	r1, r7
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_TIM3_Init+0x168>)
 80007bc:	2200      	movs	r2, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f003 fc64 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80007c8:	f000 fb9a 	bl	8000f00 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_TIM3_Init+0x168>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	699a      	ldr	r2, [r3, #24]
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_TIM3_Init+0x168>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2108      	movs	r1, #8
 80007d8:	438a      	bics	r2, r1
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007dc:	0039      	movs	r1, r7
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_TIM3_Init+0x168>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	0018      	movs	r0, r3
 80007e4:	f003 fc52 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80007ec:	f000 fb88 	bl	8000f00 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_TIM3_Init+0x168>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_TIM3_Init+0x168>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4918      	ldr	r1, [pc, #96]	; (800085c <MX_TIM3_Init+0x174>)
 80007fc:	400a      	ands	r2, r1
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000800:	0039      	movs	r1, r7
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_TIM3_Init+0x168>)
 8000804:	2208      	movs	r2, #8
 8000806:	0018      	movs	r0, r3
 8000808:	f003 fc40 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8000810:	f000 fb76 	bl	8000f00 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_TIM3_Init+0x168>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69da      	ldr	r2, [r3, #28]
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_TIM3_Init+0x168>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2108      	movs	r1, #8
 8000820:	438a      	bics	r2, r1
 8000822:	61da      	str	r2, [r3, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000824:	003b      	movs	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800082a:	0039      	movs	r1, r7
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_TIM3_Init+0x168>)
 800082e:	220c      	movs	r2, #12
 8000830:	0018      	movs	r0, r3
 8000832:	f003 fc2b 	bl	800408c <HAL_TIM_PWM_ConfigChannel>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x156>
  {
    Error_Handler();
 800083a:	f000 fb61 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <MX_TIM3_Init+0x168>)
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fce7 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b00e      	add	sp, #56	; 0x38
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	2000014c 	.word	0x2000014c
 8000854:	40000400 	.word	0x40000400
 8000858:	00009470 	.word	0x00009470
 800085c:	fffff7ff 	.word	0xfffff7ff

08000860 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	0018      	movs	r0, r3
 800086a:	230c      	movs	r3, #12
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f005 fb66 	bl	8005f40 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_TIM6_Init+0x6c>)
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <MX_TIM6_Init+0x70>)
 8000878:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_TIM6_Init+0x6c>)
 800087c:	2240      	movs	r2, #64	; 0x40
 800087e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_TIM6_Init+0x6c>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 103;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_TIM6_Init+0x6c>)
 8000888:	2267      	movs	r2, #103	; 0x67
 800088a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_TIM6_Init+0x6c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_TIM6_Init+0x6c>)
 8000894:	0018      	movs	r0, r3
 8000896:	f003 fa0f 	bl	8003cb8 <HAL_TIM_Base_Init>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800089e:	f000 fb2f 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ae:	1d3a      	adds	r2, r7, #4
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_TIM6_Init+0x6c>)
 80008b2:	0011      	movs	r1, r2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f004 f9bd 	bl	8004c34 <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80008be:	f000 fb1f 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b004      	add	sp, #16
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20000198 	.word	0x20000198
 80008d0:	40001000 	.word	0x40001000

080008d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	0018      	movs	r0, r3
 80008de:	230c      	movs	r3, #12
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f005 fb2c 	bl	8005f40 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_TIM7_Init+0x6c>)
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <MX_TIM7_Init+0x70>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_TIM7_Init+0x6c>)
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_TIM7_Init+0x6c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_TIM7_Init+0x6c>)
 80008fc:	2263      	movs	r2, #99	; 0x63
 80008fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_TIM7_Init+0x6c>)
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_TIM7_Init+0x6c>)
 8000908:	0018      	movs	r0, r3
 800090a:	f003 f9d5 	bl	8003cb8 <HAL_TIM_Base_Init>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000912:	f000 faf5 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000922:	1d3a      	adds	r2, r7, #4
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_TIM7_Init+0x6c>)
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f004 f983 	bl	8004c34 <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000932:	f000 fae5 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b004      	add	sp, #16
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	200001e4 	.word	0x200001e4
 8000944:	40001400 	.word	0x40001400

08000948 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_TIM14_Init+0x40>)
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <MX_TIM14_Init+0x44>)
 8000950:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_TIM14_Init+0x40>)
 8000954:	2240      	movs	r2, #64	; 0x40
 8000956:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_TIM14_Init+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 103;
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_TIM14_Init+0x40>)
 8000960:	2267      	movs	r2, #103	; 0x67
 8000962:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_TIM14_Init+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_TIM14_Init+0x40>)
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <MX_TIM14_Init+0x40>)
 8000972:	0018      	movs	r0, r3
 8000974:	f003 f9a0 	bl	8003cb8 <HAL_TIM_Base_Init>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800097c:	f000 fac0 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	20000230 	.word	0x20000230
 800098c:	40002000 	.word	0x40002000

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 8000996:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <MX_USART1_UART_Init+0x98>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 800099c:	22e1      	movs	r2, #225	; 0xe1
 800099e:	0252      	lsls	r2, r2, #9
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f004 f9aa 	bl	8004d34 <HAL_UART_Init>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009e4:	f000 fa8c 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009ea:	2100      	movs	r1, #0
 80009ec:	0018      	movs	r0, r3
 80009ee:	f005 f9a3 	bl	8005d38 <HAL_UARTEx_SetTxFifoThreshold>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009f6:	f000 fa83 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f005 f9da 	bl	8005db8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a08:	f000 fa7a 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <MX_USART1_UART_Init+0x94>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f005 f958 	bl	8005cc4 <HAL_UARTEx_DisableFifoMode>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a18:	f000 fa72 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	2000027c 	.word	0x2000027c
 8000a28:	40013800 	.word	0x40013800

08000a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a32:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <MX_USART2_UART_Init+0x98>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a38:	2296      	movs	r2, #150	; 0x96
 8000a3a:	0192      	lsls	r2, r2, #6
 8000a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f004 f95c 	bl	8004d34 <HAL_UART_Init>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 fa3e 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f005 f955 	bl	8005d38 <HAL_UARTEx_SetTxFifoThreshold>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 fa35 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f005 f98c 	bl	8005db8 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 fa2c 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <MX_USART2_UART_Init+0x94>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f005 f90a 	bl	8005cc4 <HAL_UARTEx_DisableFifoMode>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 fa24 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000310 	.word	0x20000310
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <MX_USART3_UART_Init+0x64>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000ad4:	2296      	movs	r2, #150	; 0x96
 8000ad6:	0192      	lsls	r2, r2, #6
 8000ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <MX_USART3_UART_Init+0x60>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f004 f90e 	bl	8004d34 <HAL_UART_Init>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 f9f0 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	200003a4 	.word	0x200003a4
 8000b2c:	40004800 	.word	0x40004800

08000b30 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <MX_USART4_UART_Init+0x64>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b3c:	2296      	movs	r2, #150	; 0x96
 8000b3e:	0192      	lsls	r2, r2, #6
 8000b40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <MX_USART4_UART_Init+0x60>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f004 f8da 	bl	8004d34 <HAL_UART_Init>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8000b84:	f000 f9bc 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	20000438 	.word	0x20000438
 8000b94:	40004c00 	.word	0x40004c00

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2009      	movs	r0, #9
 8000bbc:	f001 fcb6 	bl	800252c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bc0:	2009      	movs	r0, #9
 8000bc2:	f001 fcc8 	bl	8002556 <HAL_NVIC_EnableIRQ>

}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b08b      	sub	sp, #44	; 0x2c
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	2414      	movs	r4, #20
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	0018      	movs	r0, r3
 8000be0:	2314      	movs	r3, #20
 8000be2:	001a      	movs	r2, r3
 8000be4:	2100      	movs	r1, #0
 8000be6:	f005 f9ab 	bl	8005f40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4bbc      	ldr	r3, [pc, #752]	; (8000edc <MX_GPIO_Init+0x308>)
 8000bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bee:	4bbb      	ldr	r3, [pc, #748]	; (8000edc <MX_GPIO_Init+0x308>)
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf6:	4bb9      	ldr	r3, [pc, #740]	; (8000edc <MX_GPIO_Init+0x308>)
 8000bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4bb6      	ldr	r3, [pc, #728]	; (8000edc <MX_GPIO_Init+0x308>)
 8000c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c06:	4bb5      	ldr	r3, [pc, #724]	; (8000edc <MX_GPIO_Init+0x308>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0e:	4bb3      	ldr	r3, [pc, #716]	; (8000edc <MX_GPIO_Init+0x308>)
 8000c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c12:	2201      	movs	r2, #1
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4bb0      	ldr	r3, [pc, #704]	; (8000edc <MX_GPIO_Init+0x308>)
 8000c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c1e:	4baf      	ldr	r3, [pc, #700]	; (8000edc <MX_GPIO_Init+0x308>)
 8000c20:	2102      	movs	r1, #2
 8000c22:	430a      	orrs	r2, r1
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
 8000c26:	4bad      	ldr	r3, [pc, #692]	; (8000edc <MX_GPIO_Init+0x308>)
 8000c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4baa      	ldr	r3, [pc, #680]	; (8000edc <MX_GPIO_Init+0x308>)
 8000c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c36:	4ba9      	ldr	r3, [pc, #676]	; (8000edc <MX_GPIO_Init+0x308>)
 8000c38:	2108      	movs	r1, #8
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c3e:	4ba7      	ldr	r3, [pc, #668]	; (8000edc <MX_GPIO_Init+0x308>)
 8000c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c42:	2208      	movs	r2, #8
 8000c44:	4013      	ands	r3, r2
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSDRAIN_SIGNAL_Pin|SS_5V_CTRL_Pin, GPIO_PIN_SET);
 8000c4a:	2390      	movs	r3, #144	; 0x90
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	48a4      	ldr	r0, [pc, #656]	; (8000ee0 <MX_GPIO_Init+0x30c>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	0019      	movs	r1, r3
 8000c54:	f002 f858 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC14_Pin|LED2_BL_Pin|BUZ_Pin|LED1_YE_Pin
 8000c58:	49a2      	ldr	r1, [pc, #648]	; (8000ee4 <MX_GPIO_Init+0x310>)
 8000c5a:	4ba1      	ldr	r3, [pc, #644]	; (8000ee0 <MX_GPIO_Init+0x30c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f002 f852 	bl	8002d08 <HAL_GPIO_WritePin>
                          |DIM_TRIAC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FAN_Pin|RL_SS_STEAM_Pin|TO_MASS_Pin|BLE_EN_Pin, GPIO_PIN_RESET);
 8000c64:	23b8      	movs	r3, #184	; 0xb8
 8000c66:	00d9      	lsls	r1, r3, #3
 8000c68:	23a0      	movs	r3, #160	; 0xa0
 8000c6a:	05db      	lsls	r3, r3, #23
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f002 f84a 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RL_DRAIN_Pin|RL_WHIRL_Pin|RL_AIR_Pin|RL_STEAM100_Pin
 8000c74:	499c      	ldr	r1, [pc, #624]	; (8000ee8 <MX_GPIO_Init+0x314>)
 8000c76:	4b9d      	ldr	r3, [pc, #628]	; (8000eec <MX_GPIO_Init+0x318>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f002 f844 	bl	8002d08 <HAL_GPIO_WritePin>
                          |RL_STEAM50_Pin|RL_COM_Pin|BUG_IO_Pin|PB3_Pin
                          |RL_SOL_COM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD0_GPIO_Port, PD0_Pin, GPIO_PIN_RESET);
 8000c80:	4b9b      	ldr	r3, [pc, #620]	; (8000ef0 <MX_GPIO_Init+0x31c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 f83e 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FET_DOME_LIGHT_Pin|FET_SOL_AF_Pin|FET_SOL_STEAM_Pin, GPIO_PIN_SET);
 8000c8c:	4b98      	ldr	r3, [pc, #608]	; (8000ef0 <MX_GPIO_Init+0x31c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	211a      	movs	r1, #26
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 f838 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSWATER_SIGNAL_GPIO_Port, SSWATER_SIGNAL_Pin, GPIO_PIN_SET);
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4893      	ldr	r0, [pc, #588]	; (8000eec <MX_GPIO_Init+0x318>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	f002 f831 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SSDRAIN_LOGIC_Pin IN_SAFETY_Pin BLE_STATE_Pin SSWATER_LOGIC_Pin */
  GPIO_InitStruct.Pin = SSDRAIN_LOGIC_Pin|IN_SAFETY_Pin|BLE_STATE_Pin|SSWATER_LOGIC_Pin;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	22b2      	movs	r2, #178	; 0xb2
 8000caa:	0192      	lsls	r2, r2, #6
 8000cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	4a88      	ldr	r2, [pc, #544]	; (8000ee0 <MX_GPIO_Init+0x30c>)
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	f001 febd 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSDRAIN_SIGNAL_Pin */
  GPIO_InitStruct.Pin = SSDRAIN_SIGNAL_Pin;
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	0152      	lsls	r2, r2, #5
 8000cce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	000c      	movs	r4, r1
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2201      	movs	r2, #1
 8000cdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SSDRAIN_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	4a7e      	ldr	r2, [pc, #504]	; (8000ee0 <MX_GPIO_Init+0x30c>)
 8000ce8:	0019      	movs	r1, r3
 8000cea:	0010      	movs	r0, r2
 8000cec:	f001 fea8 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14_Pin LED2_BL_Pin LED1_YE_Pin */
  GPIO_InitStruct.Pin = PC14_Pin|LED2_BL_Pin|LED1_YE_Pin;
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	4a80      	ldr	r2, [pc, #512]	; (8000ef4 <MX_GPIO_Init+0x320>)
 8000cf4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	4a75      	ldr	r2, [pc, #468]	; (8000ee0 <MX_GPIO_Init+0x30c>)
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	0010      	movs	r0, r2
 8000d10:	f001 fe96 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_5V_CTRL_Pin */
  GPIO_InitStruct.Pin = SS_5V_CTRL_Pin;
 8000d14:	0021      	movs	r1, r4
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	0212      	lsls	r2, r2, #8
 8000d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	000c      	movs	r4, r1
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	2201      	movs	r2, #1
 8000d24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	2201      	movs	r2, #1
 8000d2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SS_5V_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	4a6a      	ldr	r2, [pc, #424]	; (8000ee0 <MX_GPIO_Init+0x30c>)
 8000d36:	0019      	movs	r1, r3
 8000d38:	0010      	movs	r0, r2
 8000d3a:	f001 fe81 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2204      	movs	r2, #4
 8000d42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2201      	movs	r2, #1
 8000d48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	4a61      	ldr	r2, [pc, #388]	; (8000ee0 <MX_GPIO_Init+0x30c>)
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	0010      	movs	r0, r2
 8000d5e:	f001 fe6f 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_Pin RL_SS_STEAM_Pin TO_MASS_Pin BLE_EN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin|RL_SS_STEAM_Pin|TO_MASS_Pin|BLE_EN_Pin;
 8000d62:	0021      	movs	r1, r4
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	22b8      	movs	r2, #184	; 0xb8
 8000d68:	00d2      	lsls	r2, r2, #3
 8000d6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	000c      	movs	r4, r1
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2201      	movs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2202      	movs	r2, #2
 8000d78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	193a      	adds	r2, r7, r4
 8000d82:	23a0      	movs	r3, #160	; 0xa0
 8000d84:	05db      	lsls	r3, r3, #23
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f001 fe59 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RL_DRAIN_Pin RL_WHIRL_Pin RL_AIR_Pin RL_STEAM100_Pin
                           RL_STEAM50_Pin RL_COM_Pin RL_SOL_COM_Pin */
  GPIO_InitStruct.Pin = RL_DRAIN_Pin|RL_WHIRL_Pin|RL_AIR_Pin|RL_STEAM100_Pin
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	4a59      	ldr	r2, [pc, #356]	; (8000ef8 <MX_GPIO_Init+0x324>)
 8000d92:	601a      	str	r2, [r3, #0]
                          |RL_STEAM50_Pin|RL_COM_Pin|RL_SOL_COM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2201      	movs	r2, #1
 8000d98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	4a50      	ldr	r2, [pc, #320]	; (8000eec <MX_GPIO_Init+0x318>)
 8000daa:	0019      	movs	r1, r3
 8000dac:	0010      	movs	r0, r2
 8000dae:	f001 fe47 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUG_IO_Pin */
  GPIO_InitStruct.Pin = BUG_IO_Pin;
 8000db2:	0021      	movs	r1, r4
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	0192      	lsls	r2, r2, #6
 8000dba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	000c      	movs	r4, r1
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	2203      	movs	r2, #3
 8000dce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUG_IO_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	4a46      	ldr	r2, [pc, #280]	; (8000eec <MX_GPIO_Init+0x318>)
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	0010      	movs	r0, r2
 8000dd8:	f001 fe32 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_BUTTON_Pin IN_EN_DEBUG_Pin IN_JETSW_Pin IN_DRAINSW_Pin */
  GPIO_InitStruct.Pin = IN_BUTTON_Pin|IN_EN_DEBUG_Pin|IN_JETSW_Pin|IN_DRAINSW_Pin;
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	4a47      	ldr	r2, [pc, #284]	; (8000efc <MX_GPIO_Init+0x328>)
 8000de0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2201      	movs	r2, #1
 8000dec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	4a3e      	ldr	r2, [pc, #248]	; (8000eec <MX_GPIO_Init+0x318>)
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f001 fe23 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_EL814_Pin */
  GPIO_InitStruct.Pin = IN_EL814_Pin;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IN_EL814_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	193a      	adds	r2, r7, r4
 8000e10:	23a0      	movs	r3, #160	; 0xa0
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 fe12 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIM_TRIAC_Pin */
  GPIO_InitStruct.Pin = DIM_TRIAC_Pin;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2201      	movs	r2, #1
 8000e26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	2202      	movs	r2, #2
 8000e32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIM_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	4a2a      	ldr	r2, [pc, #168]	; (8000ee0 <MX_GPIO_Init+0x30c>)
 8000e38:	0019      	movs	r1, r3
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	f001 fe00 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0_Pin */
  GPIO_InitStruct.Pin = PD0_Pin;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2201      	movs	r2, #1
 8000e4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PD0_GPIO_Port, &GPIO_InitStruct);
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	4a25      	ldr	r2, [pc, #148]	; (8000ef0 <MX_GPIO_Init+0x31c>)
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	0010      	movs	r0, r2
 8000e60:	f001 fdee 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : FET_DOME_LIGHT_Pin FET_SOL_AF_Pin FET_SOL_STEAM_Pin */
  GPIO_InitStruct.Pin = FET_DOME_LIGHT_Pin|FET_SOL_AF_Pin|FET_SOL_STEAM_Pin;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	221a      	movs	r2, #26
 8000e68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2201      	movs	r2, #1
 8000e74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_GPIO_Init+0x31c>)
 8000e80:	0019      	movs	r1, r3
 8000e82:	0010      	movs	r0, r2
 8000e84:	f001 fddc 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_Pin */
  GPIO_InitStruct.Pin = PB3_Pin;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2201      	movs	r2, #1
 8000e92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PB3_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_GPIO_Init+0x318>)
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	f001 fdca 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSWATER_SIGNAL_Pin */
  GPIO_InitStruct.Pin = SSWATER_SIGNAL_Pin;
 8000eac:	0021      	movs	r1, r4
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0052      	lsls	r2, r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SSWATER_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <MX_GPIO_Init+0x318>)
 8000ecc:	0019      	movs	r1, r3
 8000ece:	0010      	movs	r0, r2
 8000ed0:	f001 fdb6 	bl	8002a40 <HAL_GPIO_Init>

}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b00b      	add	sp, #44	; 0x2c
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	50000800 	.word	0x50000800
 8000ee4:	0000404e 	.word	0x0000404e
 8000ee8:	00003c4f 	.word	0x00003c4f
 8000eec:	50000400 	.word	0x50000400
 8000ef0:	50000c00 	.word	0x50000c00
 8000ef4:	0000400a 	.word	0x0000400a
 8000ef8:	00001c47 	.word	0x00001c47
 8000efc:	0000c280 	.word	0x0000c280

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x8>
	...

08000f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	2201      	movs	r2, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	0549      	lsls	r1, r1, #21
 8000f34:	430a      	orrs	r2, r1
 8000f36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	055b      	lsls	r3, r3, #21
 8000f40:	4013      	ands	r3, r2
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000f46:	23c0      	movs	r3, #192	; 0xc0
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fc40 	bl	80017d0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b091      	sub	sp, #68	; 0x44
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	232c      	movs	r3, #44	; 0x2c
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	0018      	movs	r0, r3
 8000f6a:	2314      	movs	r3, #20
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f004 ffe6 	bl	8005f40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f74:	2410      	movs	r4, #16
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	0018      	movs	r0, r3
 8000f7a:	231c      	movs	r3, #28
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f004 ffde 	bl	8005f40 <memset>
  if(hadc->Instance==ADC1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a3a      	ldr	r2, [pc, #232]	; (8001074 <HAL_ADC_MspInit+0x118>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d16d      	bne.n	800106a <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	01d2      	lsls	r2, r2, #7
 8000f94:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	0612      	lsls	r2, r2, #24
 8000f9c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f002 fd55 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000faa:	f7ff ffa9 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <HAL_ADC_MspInit+0x11c>)
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_ADC_MspInit+0x11c>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	0349      	lsls	r1, r1, #13
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <HAL_ADC_MspInit+0x11c>)
 8000fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	035b      	lsls	r3, r3, #13
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_ADC_MspInit+0x11c>)
 8000fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_ADC_MspInit+0x11c>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <HAL_ADC_MspInit+0x11c>)
 8000fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fe2:	212c      	movs	r1, #44	; 0x2c
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	223c      	movs	r2, #60	; 0x3c
 8000fe8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2203      	movs	r2, #3
 8000fee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	187a      	adds	r2, r7, r1
 8000ff8:	23a0      	movs	r3, #160	; 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f001 fd1e 	bl	8002a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_ADC_MspInit+0x120>)
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <HAL_ADC_MspInit+0x124>)
 8001008:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_ADC_MspInit+0x120>)
 800100c:	2205      	movs	r2, #5
 800100e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_ADC_MspInit+0x120>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_ADC_MspInit+0x120>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_ADC_MspInit+0x120>)
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_ADC_MspInit+0x120>)
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	0052      	lsls	r2, r2, #1
 8001028:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_ADC_MspInit+0x120>)
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	00d2      	lsls	r2, r2, #3
 8001030:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_ADC_MspInit+0x120>)
 8001034:	2220      	movs	r2, #32
 8001036:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_ADC_MspInit+0x120>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_ADC_MspInit+0x120>)
 8001040:	0018      	movs	r0, r3
 8001042:	f001 faa5 	bl	8002590 <HAL_DMA_Init>
 8001046:	1e03      	subs	r3, r0, #0
 8001048:	d001      	beq.n	800104e <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 800104a:	f7ff ff59 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_ADC_MspInit+0x120>)
 8001052:	651a      	str	r2, [r3, #80]	; 0x50
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_ADC_MspInit+0x120>)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	200c      	movs	r0, #12
 8001060:	f001 fa64 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001064:	200c      	movs	r0, #12
 8001066:	f001 fa76 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b011      	add	sp, #68	; 0x44
 8001070:	bd90      	pop	{r4, r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40012400 	.word	0x40012400
 8001078:	40021000 	.word	0x40021000
 800107c:	2000008c 	.word	0x2000008c
 8001080:	40020008 	.word	0x40020008

08001084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b08b      	sub	sp, #44	; 0x2c
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	2414      	movs	r4, #20
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	2314      	movs	r3, #20
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f004 ff52 	bl	8005f40 <memset>
  if(hi2c->Instance==I2C2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_I2C_MspInit+0x90>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d131      	bne.n	800110a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_I2C_MspInit+0x94>)
 80010a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HAL_I2C_MspInit+0x94>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	430a      	orrs	r2, r1
 80010b0:	635a      	str	r2, [r3, #52]	; 0x34
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_I2C_MspInit+0x94>)
 80010b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b6:	2201      	movs	r2, #1
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	22c0      	movs	r2, #192	; 0xc0
 80010c2:	0152      	lsls	r2, r2, #5
 80010c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c6:	0021      	movs	r1, r4
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2212      	movs	r2, #18
 80010cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2201      	movs	r2, #1
 80010d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2206      	movs	r2, #6
 80010de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	187a      	adds	r2, r7, r1
 80010e2:	23a0      	movs	r3, #160	; 0xa0
 80010e4:	05db      	lsls	r3, r3, #23
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f001 fca9 	bl	8002a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_I2C_MspInit+0x94>)
 80010f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_I2C_MspInit+0x94>)
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	03c9      	lsls	r1, r1, #15
 80010f8:	430a      	orrs	r2, r1
 80010fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_I2C_MspInit+0x94>)
 80010fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	03db      	lsls	r3, r3, #15
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b00b      	add	sp, #44	; 0x2c
 8001110:	bd90      	pop	{r4, r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	40005800 	.word	0x40005800
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a35      	ldr	r2, [pc, #212]	; (8001200 <HAL_TIM_Base_MspInit+0xe4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d114      	bne.n	8001158 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800112e:	4b35      	ldr	r3, [pc, #212]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 8001130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 8001134:	2102      	movs	r1, #2
 8001136:	430a      	orrs	r2, r1
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 800113c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113e:	2202      	movs	r2, #2
 8001140:	4013      	ands	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2102      	movs	r1, #2
 800114a:	2010      	movs	r0, #16
 800114c:	f001 f9ee 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001150:	2010      	movs	r0, #16
 8001152:	f001 fa00 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001156:	e04e      	b.n	80011f6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <HAL_TIM_Base_MspInit+0xec>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d114      	bne.n	800118c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 8001164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 8001168:	2110      	movs	r1, #16
 800116a:	430a      	orrs	r2, r1
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 8001170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001172:	2210      	movs	r2, #16
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2011      	movs	r0, #17
 8001180:	f001 f9d4 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001184:	2011      	movs	r0, #17
 8001186:	f001 f9e6 	bl	8002556 <HAL_NVIC_EnableIRQ>
}
 800118a:	e034      	b.n	80011f6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <HAL_TIM_Base_MspInit+0xf0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d114      	bne.n	80011c0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 8001198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 800119c:	2120      	movs	r1, #32
 800119e:	430a      	orrs	r2, r1
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 80011a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a6:	2220      	movs	r2, #32
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2101      	movs	r1, #1
 80011b2:	2012      	movs	r0, #18
 80011b4:	f001 f9ba 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011b8:	2012      	movs	r0, #18
 80011ba:	f001 f9cc 	bl	8002556 <HAL_NVIC_EnableIRQ>
}
 80011be:	e01a      	b.n	80011f6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM14)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <HAL_TIM_Base_MspInit+0xf4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d115      	bne.n	80011f6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 80011cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	0209      	lsls	r1, r1, #8
 80011d4:	430a      	orrs	r2, r1
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_TIM_Base_MspInit+0xe8>)
 80011da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2102      	movs	r1, #2
 80011ea:	2013      	movs	r0, #19
 80011ec:	f001 f99e 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80011f0:	2013      	movs	r0, #19
 80011f2:	f001 f9b0 	bl	8002556 <HAL_NVIC_EnableIRQ>
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b006      	add	sp, #24
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	40000400 	.word	0x40000400
 8001204:	40021000 	.word	0x40021000
 8001208:	40001000 	.word	0x40001000
 800120c:	40001400 	.word	0x40001400
 8001210:	40002000 	.word	0x40002000

08001214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b08b      	sub	sp, #44	; 0x2c
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	2414      	movs	r4, #20
 800121e:	193b      	adds	r3, r7, r4
 8001220:	0018      	movs	r0, r3
 8001222:	2314      	movs	r3, #20
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f004 fe8a 	bl	8005f40 <memset>
  if(htim->Instance==TIM3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <HAL_TIM_MspPostInit+0xb4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d143      	bne.n	80012be <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_TIM_MspPostInit+0xb8>)
 8001238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_TIM_MspPostInit+0xb8>)
 800123c:	2104      	movs	r1, #4
 800123e:	430a      	orrs	r2, r1
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_TIM_MspPostInit+0xb8>)
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	2204      	movs	r2, #4
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_TIM_MspPostInit+0xb8>)
 8001250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_TIM_MspPostInit+0xb8>)
 8001254:	2102      	movs	r1, #2
 8001256:	430a      	orrs	r2, r1
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_TIM_MspPostInit+0xb8>)
 800125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125e:	2202      	movs	r2, #2
 8001260:	4013      	ands	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH3_R_Pin|TIM3_CH4_SPOT_Pin;
 8001266:	193b      	adds	r3, r7, r4
 8001268:	22c0      	movs	r2, #192	; 0xc0
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2202      	movs	r2, #2
 8001272:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	193b      	adds	r3, r7, r4
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	193b      	adds	r3, r7, r4
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001280:	193b      	adds	r3, r7, r4
 8001282:	2201      	movs	r2, #1
 8001284:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	193b      	adds	r3, r7, r4
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <HAL_TIM_MspPostInit+0xbc>)
 800128a:	0019      	movs	r1, r3
 800128c:	0010      	movs	r0, r2
 800128e:	f001 fbd7 	bl	8002a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM3_CH1_B_Pin|TIM3_CH2_G_Pin;
 8001292:	0021      	movs	r1, r4
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2230      	movs	r2, #48	; 0x30
 8001298:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2202      	movs	r2, #2
 800129e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2201      	movs	r2, #1
 80012b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_TIM_MspPostInit+0xc0>)
 80012b6:	0019      	movs	r1, r3
 80012b8:	0010      	movs	r0, r2
 80012ba:	f001 fbc1 	bl	8002a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b00b      	add	sp, #44	; 0x2c
 80012c4:	bd90      	pop	{r4, r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	40000400 	.word	0x40000400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	50000800 	.word	0x50000800
 80012d4:	50000400 	.word	0x50000400

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b097      	sub	sp, #92	; 0x5c
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	2344      	movs	r3, #68	; 0x44
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	0018      	movs	r0, r3
 80012e6:	2314      	movs	r3, #20
 80012e8:	001a      	movs	r2, r3
 80012ea:	2100      	movs	r1, #0
 80012ec:	f004 fe28 	bl	8005f40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	2428      	movs	r4, #40	; 0x28
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	0018      	movs	r0, r3
 80012f6:	231c      	movs	r3, #28
 80012f8:	001a      	movs	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	f004 fe20 	bl	8005f40 <memset>
  if(huart->Instance==USART1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a8b      	ldr	r2, [pc, #556]	; (8001534 <HAL_UART_MspInit+0x25c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d146      	bne.n	8001398 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800130a:	193b      	adds	r3, r7, r4
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001310:	193b      	adds	r3, r7, r4
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001316:	193b      	adds	r3, r7, r4
 8001318:	0018      	movs	r0, r3
 800131a:	f002 fb99 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d001      	beq.n	8001326 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001322:	f7ff fded 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001326:	4b84      	ldr	r3, [pc, #528]	; (8001538 <HAL_UART_MspInit+0x260>)
 8001328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132a:	4b83      	ldr	r3, [pc, #524]	; (8001538 <HAL_UART_MspInit+0x260>)
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	01c9      	lsls	r1, r1, #7
 8001330:	430a      	orrs	r2, r1
 8001332:	641a      	str	r2, [r3, #64]	; 0x40
 8001334:	4b80      	ldr	r3, [pc, #512]	; (8001538 <HAL_UART_MspInit+0x260>)
 8001336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	01db      	lsls	r3, r3, #7
 800133c:	4013      	ands	r3, r2
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b7d      	ldr	r3, [pc, #500]	; (8001538 <HAL_UART_MspInit+0x260>)
 8001344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001346:	4b7c      	ldr	r3, [pc, #496]	; (8001538 <HAL_UART_MspInit+0x260>)
 8001348:	2104      	movs	r1, #4
 800134a:	430a      	orrs	r2, r1
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
 800134e:	4b7a      	ldr	r3, [pc, #488]	; (8001538 <HAL_UART_MspInit+0x260>)
 8001350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001352:	2204      	movs	r2, #4
 8001354:	4013      	ands	r3, r2
 8001356:	623b      	str	r3, [r7, #32]
 8001358:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800135a:	2144      	movs	r1, #68	; 0x44
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2230      	movs	r2, #48	; 0x30
 8001360:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2202      	movs	r2, #2
 8001366:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2201      	movs	r2, #1
 8001378:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	187b      	adds	r3, r7, r1
 800137c:	4a6f      	ldr	r2, [pc, #444]	; (800153c <HAL_UART_MspInit+0x264>)
 800137e:	0019      	movs	r1, r3
 8001380:	0010      	movs	r0, r2
 8001382:	f001 fb5d 	bl	8002a40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	201b      	movs	r0, #27
 800138c:	f001 f8ce 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001390:	201b      	movs	r0, #27
 8001392:	f001 f8e0 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8001396:	e0c9      	b.n	800152c <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a68      	ldr	r2, [pc, #416]	; (8001540 <HAL_UART_MspInit+0x268>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d147      	bne.n	8001432 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013a2:	2128      	movs	r1, #40	; 0x28
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	2202      	movs	r2, #2
 80013a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013aa:	187b      	adds	r3, r7, r1
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	0018      	movs	r0, r3
 80013b4:	f002 fb4c 	bl	8003a50 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 80013bc:	f7ff fda0 	bl	8000f00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c0:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <HAL_UART_MspInit+0x260>)
 80013c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013c4:	4b5c      	ldr	r3, [pc, #368]	; (8001538 <HAL_UART_MspInit+0x260>)
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	0289      	lsls	r1, r1, #10
 80013ca:	430a      	orrs	r2, r1
 80013cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80013ce:	4b5a      	ldr	r3, [pc, #360]	; (8001538 <HAL_UART_MspInit+0x260>)
 80013d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	4013      	ands	r3, r2
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013dc:	4b56      	ldr	r3, [pc, #344]	; (8001538 <HAL_UART_MspInit+0x260>)
 80013de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e0:	4b55      	ldr	r3, [pc, #340]	; (8001538 <HAL_UART_MspInit+0x260>)
 80013e2:	2108      	movs	r1, #8
 80013e4:	430a      	orrs	r2, r1
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_UART_MspInit+0x260>)
 80013ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ec:	2208      	movs	r2, #8
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013f4:	2144      	movs	r1, #68	; 0x44
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2260      	movs	r2, #96	; 0x60
 80013fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2202      	movs	r2, #2
 8001400:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	187b      	adds	r3, r7, r1
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001414:	187b      	adds	r3, r7, r1
 8001416:	4a4b      	ldr	r2, [pc, #300]	; (8001544 <HAL_UART_MspInit+0x26c>)
 8001418:	0019      	movs	r1, r3
 800141a:	0010      	movs	r0, r2
 800141c:	f001 fb10 	bl	8002a40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	201c      	movs	r0, #28
 8001426:	f001 f881 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800142a:	201c      	movs	r0, #28
 800142c:	f001 f893 	bl	8002556 <HAL_NVIC_EnableIRQ>
}
 8001430:	e07c      	b.n	800152c <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART3)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a44      	ldr	r2, [pc, #272]	; (8001548 <HAL_UART_MspInit+0x270>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d139      	bne.n	80014b0 <HAL_UART_MspInit+0x1d8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800143c:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <HAL_UART_MspInit+0x260>)
 800143e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_UART_MspInit+0x260>)
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	02c9      	lsls	r1, r1, #11
 8001446:	430a      	orrs	r2, r1
 8001448:	63da      	str	r2, [r3, #60]	; 0x3c
 800144a:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <HAL_UART_MspInit+0x260>)
 800144c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	02db      	lsls	r3, r3, #11
 8001452:	4013      	ands	r3, r2
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001458:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_UART_MspInit+0x260>)
 800145a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_UART_MspInit+0x260>)
 800145e:	2108      	movs	r1, #8
 8001460:	430a      	orrs	r2, r1
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_UART_MspInit+0x260>)
 8001466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001468:	2208      	movs	r2, #8
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001470:	2144      	movs	r1, #68	; 0x44
 8001472:	187b      	adds	r3, r7, r1
 8001474:	22c0      	movs	r2, #192	; 0xc0
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	187b      	adds	r3, r7, r1
 800147c:	2202      	movs	r2, #2
 800147e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	187b      	adds	r3, r7, r1
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	187b      	adds	r3, r7, r1
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 800148c:	187b      	adds	r3, r7, r1
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001492:	187b      	adds	r3, r7, r1
 8001494:	4a2b      	ldr	r2, [pc, #172]	; (8001544 <HAL_UART_MspInit+0x26c>)
 8001496:	0019      	movs	r1, r3
 8001498:	0010      	movs	r0, r2
 800149a:	f001 fad1 	bl	8002a40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	201d      	movs	r0, #29
 80014a4:	f001 f842 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80014a8:	201d      	movs	r0, #29
 80014aa:	f001 f854 	bl	8002556 <HAL_NVIC_EnableIRQ>
}
 80014ae:	e03d      	b.n	800152c <HAL_UART_MspInit+0x254>
  else if(huart->Instance==USART4)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a25      	ldr	r2, [pc, #148]	; (800154c <HAL_UART_MspInit+0x274>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d138      	bne.n	800152c <HAL_UART_MspInit+0x254>
    __HAL_RCC_USART4_CLK_ENABLE();
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_UART_MspInit+0x260>)
 80014bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_UART_MspInit+0x260>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0309      	lsls	r1, r1, #12
 80014c4:	430a      	orrs	r2, r1
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_UART_MspInit+0x260>)
 80014ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	031b      	lsls	r3, r3, #12
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_UART_MspInit+0x260>)
 80014d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_UART_MspInit+0x260>)
 80014dc:	2101      	movs	r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_UART_MspInit+0x260>)
 80014e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e6:	2201      	movs	r2, #1
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ee:	2144      	movs	r1, #68	; 0x44
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2203      	movs	r2, #3
 80014f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2202      	movs	r2, #2
 80014fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2204      	movs	r2, #4
 800150c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	187a      	adds	r2, r7, r1
 8001510:	23a0      	movs	r3, #160	; 0xa0
 8001512:	05db      	lsls	r3, r3, #23
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f001 fa92 	bl	8002a40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	201d      	movs	r0, #29
 8001522:	f001 f803 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001526:	201d      	movs	r0, #29
 8001528:	f001 f815 	bl	8002556 <HAL_NVIC_EnableIRQ>
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b017      	add	sp, #92	; 0x5c
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	40013800 	.word	0x40013800
 8001538:	40021000 	.word	0x40021000
 800153c:	50000800 	.word	0x50000800
 8001540:	40004400 	.word	0x40004400
 8001544:	50000c00 	.word	0x50000c00
 8001548:	40004800 	.word	0x40004800
 800154c:	40004c00 	.word	0x40004c00

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x4>

08001556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 f910 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <DMA1_Channel1_IRQHandler+0x14>)
 8001586:	0018      	movs	r0, r3
 8001588:	f001 f958 	bl	800283c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	2000008c 	.word	0x2000008c

08001598 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <ADC1_IRQHandler+0x14>)
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 fbf0 	bl	8001d84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	20000028 	.word	0x20000028

080015b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <TIM3_IRQHandler+0x14>)
 80015b6:	0018      	movs	r0, r3
 80015b8:	f002 fc36 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	2000014c 	.word	0x2000014c

080015c8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <TIM6_IRQHandler+0x14>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f002 fc2a 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	20000198 	.word	0x20000198

080015e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <TIM7_IRQHandler+0x14>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f002 fc1e 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	200001e4 	.word	0x200001e4

080015f8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <TIM14_IRQHandler+0x14>)
 80015fe:	0018      	movs	r0, r3
 8001600:	f002 fc12 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	20000230 	.word	0x20000230

08001610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <USART1_IRQHandler+0x14>)
 8001616:	0018      	movs	r0, r3
 8001618:	f003 fbe2 	bl	8004de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	2000027c 	.word	0x2000027c

08001628 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <USART2_IRQHandler+0x14>)
 800162e:	0018      	movs	r0, r3
 8001630:	f003 fbd6 	bl	8004de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	20000310 	.word	0x20000310

08001640 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <USART3_4_IRQHandler+0x1c>)
 8001646:	0018      	movs	r0, r3
 8001648:	f003 fbca 	bl	8004de0 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <USART3_4_IRQHandler+0x20>)
 800164e:	0018      	movs	r0, r3
 8001650:	f003 fbc6 	bl	8004de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	200003a4 	.word	0x200003a4
 8001660:	20000438 	.word	0x20000438

08001664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001672:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001674:	f7ff fff6 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <LoopForever+0x6>)
  ldr r1, =_edata
 800167a:	490d      	ldr	r1, [pc, #52]	; (80016b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <LoopForever+0xe>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001690:	4c0a      	ldr	r4, [pc, #40]	; (80016bc <LoopForever+0x16>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800169e:	f004 fc2b 	bl	8005ef8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016a2:	f7fe fea3 	bl	80003ec <main>

080016a6 <LoopForever>:

LoopForever:
  b LoopForever
 80016a6:	e7fe      	b.n	80016a6 <LoopForever>
  ldr   r0, =_estack
 80016a8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016b4:	0800604c 	.word	0x0800604c
  ldr r2, =_sbss
 80016b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016bc:	200004d0 	.word	0x200004d0

080016c0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_Init+0x3c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_Init+0x3c>)
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	0049      	lsls	r1, r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f810 	bl	8001704 <HAL_InitTick>
 80016e4:	1e03      	subs	r3, r0, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e001      	b.n	80016f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80016f0:	f7ff fc0c 	bl	8000f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	781b      	ldrb	r3, [r3, #0]
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40022000 	.word	0x40022000

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800170c:	230f      	movs	r3, #15
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_InitTick+0x88>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d02b      	beq.n	8001774 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_InitTick+0x8c>)
 800171e:	681c      	ldr	r4, [r3, #0]
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_InitTick+0x88>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	0019      	movs	r1, r3
 8001726:	23fa      	movs	r3, #250	; 0xfa
 8001728:	0098      	lsls	r0, r3, #2
 800172a:	f7fe fce9 	bl	8000100 <__udivsi3>
 800172e:	0003      	movs	r3, r0
 8001730:	0019      	movs	r1, r3
 8001732:	0020      	movs	r0, r4
 8001734:	f7fe fce4 	bl	8000100 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	0018      	movs	r0, r3
 800173c:	f000 ff1b 	bl	8002576 <HAL_SYSTICK_Config>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d112      	bne.n	800176a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d80a      	bhi.n	8001760 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	2301      	movs	r3, #1
 800174e:	425b      	negs	r3, r3
 8001750:	2200      	movs	r2, #0
 8001752:	0018      	movs	r0, r3
 8001754:	f000 feea 	bl	800252c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_InitTick+0x90>)
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e00d      	b.n	800177c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001760:	230f      	movs	r3, #15
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e008      	b.n	800177c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800176a:	230f      	movs	r3, #15
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e003      	b.n	800177c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001774:	230f      	movs	r3, #15
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	781b      	ldrb	r3, [r3, #0]
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b005      	add	sp, #20
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	20000008 	.word	0x20000008
 8001790:	20000000 	.word	0x20000000
 8001794:	20000004 	.word	0x20000004

08001798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_IncTick+0x1c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	001a      	movs	r2, r3
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_IncTick+0x20>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	18d2      	adds	r2, r2, r3
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_IncTick+0x20>)
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000008 	.word	0x20000008
 80017b8:	200004cc 	.word	0x200004cc

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b02      	ldr	r3, [pc, #8]	; (80017cc <HAL_GetTick+0x10>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	200004cc 	.word	0x200004cc

080017d0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80017de:	4013      	ands	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	40010000 	.word	0x40010000
 80017f8:	fffff9ff 	.word	0xfffff9ff

080017fc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800180c:	401a      	ands	r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	601a      	str	r2, [r3, #0]
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	fe3fffff 	.word	0xfe3fffff

08001824 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	23e0      	movs	r3, #224	; 0xe0
 8001832:	045b      	lsls	r3, r3, #17
 8001834:	4013      	ands	r3, r2
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}

0800183e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	2104      	movs	r1, #4
 8001852:	400a      	ands	r2, r1
 8001854:	2107      	movs	r1, #7
 8001856:	4091      	lsls	r1, r2
 8001858:	000a      	movs	r2, r1
 800185a:	43d2      	mvns	r2, r2
 800185c:	401a      	ands	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2104      	movs	r1, #4
 8001862:	400b      	ands	r3, r1
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4099      	lsls	r1, r3
 8001868:	000b      	movs	r3, r1
 800186a:	431a      	orrs	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b004      	add	sp, #16
 8001876:	bd80      	pop	{r7, pc}

08001878 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	2104      	movs	r1, #4
 800188a:	400a      	ands	r2, r1
 800188c:	2107      	movs	r1, #7
 800188e:	4091      	lsls	r1, r2
 8001890:	000a      	movs	r2, r1
 8001892:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2104      	movs	r1, #4
 8001898:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800189a:	40da      	lsrs	r2, r3
 800189c:	0013      	movs	r3, r2
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	23c0      	movs	r3, #192	; 0xc0
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4013      	ands	r3, r2
 80018b8:	d101      	bne.n	80018be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b002      	add	sp, #8
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	211f      	movs	r1, #31
 80018dc:	400a      	ands	r2, r1
 80018de:	210f      	movs	r1, #15
 80018e0:	4091      	lsls	r1, r2
 80018e2:	000a      	movs	r2, r1
 80018e4:	43d2      	mvns	r2, r2
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	210f      	movs	r1, #15
 80018ee:	4019      	ands	r1, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	201f      	movs	r0, #31
 80018f4:	4003      	ands	r3, r0
 80018f6:	4099      	lsls	r1, r3
 80018f8:	000b      	movs	r3, r1
 80018fa:	431a      	orrs	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bd80      	pop	{r7, pc}

08001908 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	035b      	lsls	r3, r3, #13
 800191a:	0b5b      	lsrs	r3, r3, #13
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b002      	add	sp, #8
 8001928:	bd80      	pop	{r7, pc}

0800192a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	0352      	lsls	r2, r2, #13
 800193c:	0b52      	lsrs	r2, r2, #13
 800193e:	43d2      	mvns	r2, r2
 8001940:	401a      	ands	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}

0800194e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	43d2      	mvns	r2, r2
 800197e:	401a      	ands	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	400b      	ands	r3, r1
 8001988:	4904      	ldr	r1, [pc, #16]	; (800199c <LL_ADC_SetChannelSamplingTime+0x34>)
 800198a:	400b      	ands	r3, r1
 800198c:	431a      	orrs	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	b004      	add	sp, #16
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	07ffff00 	.word	0x07ffff00

080019a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	0552      	lsls	r2, r2, #21
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	6fffffe8 	.word	0x6fffffe8

080019c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	055b      	lsls	r3, r3, #21
 80019d8:	401a      	ands	r2, r3
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	055b      	lsls	r3, r3, #21
 80019de:	429a      	cmp	r2, r3
 80019e0:	d101      	bne.n	80019e6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <LL_ADC_IsEnabled+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_ADC_IsEnabled+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d101      	bne.n	8001a2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b002      	add	sp, #8
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3c:	231f      	movs	r3, #31
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e17f      	b.n	8001d5a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10a      	bne.n	8001a78 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff fa79 	bl	8000f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2254      	movs	r2, #84	; 0x54
 8001a74:	2100      	movs	r1, #0
 8001a76:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff ffa3 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff ff88 	bl	80019a0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a90:	4bb4      	ldr	r3, [pc, #720]	; (8001d64 <HAL_ADC_Init+0x330>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	49b4      	ldr	r1, [pc, #720]	; (8001d68 <HAL_ADC_Init+0x334>)
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7fe fb32 	bl	8000100 <__udivsi3>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f9      	bne.n	8001aa6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff ff86 	bl	80019c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d10f      	bne.n	8001ae0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ad8:	231f      	movs	r3, #31
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff ff94 	bl	8001a12 <LL_ADC_REG_IsConversionOngoing>
 8001aea:	0003      	movs	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	2210      	movs	r2, #16
 8001af4:	4013      	ands	r3, r2
 8001af6:	d000      	beq.n	8001afa <HAL_ADC_Init+0xc6>
 8001af8:	e122      	b.n	8001d40 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d000      	beq.n	8001b02 <HAL_ADC_Init+0xce>
 8001b00:	e11e      	b.n	8001d40 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	4a99      	ldr	r2, [pc, #612]	; (8001d6c <HAL_ADC_Init+0x338>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7ff ff6a 	bl	80019f0 <LL_ADC_IsEnabled>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	d000      	beq.n	8001b22 <HAL_ADC_Init+0xee>
 8001b20:	e0ad      	b.n	8001c7e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7e1b      	ldrb	r3, [r3, #24]
 8001b2a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001b2c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7e5b      	ldrb	r3, [r3, #25]
 8001b32:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b34:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7e9b      	ldrb	r3, [r3, #26]
 8001b3a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b3c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_ADC_Init+0x118>
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	015b      	lsls	r3, r3, #5
 8001b4a:	e000      	b.n	8001b4e <HAL_ADC_Init+0x11a>
 8001b4c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b4e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b54:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da04      	bge.n	8001b68 <HAL_ADC_Init+0x134>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	e001      	b.n	8001b6c <HAL_ADC_Init+0x138>
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001b6c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	212c      	movs	r1, #44	; 0x2c
 8001b72:	5c5b      	ldrb	r3, [r3, r1]
 8001b74:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b76:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	5c9b      	ldrb	r3, [r3, r2]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d115      	bne.n	8001bb4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7e9b      	ldrb	r3, [r3, #26]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	0252      	lsls	r2, r2, #9
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	2201      	movs	r2, #1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00a      	beq.n	8001bd2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc0:	23e0      	movs	r3, #224	; 0xe0
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4a65      	ldr	r2, [pc, #404]	; (8001d70 <HAL_ADC_Init+0x33c>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	0f9b      	lsrs	r3, r3, #30
 8001bee:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	223c      	movs	r2, #60	; 0x3c
 8001c00:	5c9b      	ldrb	r3, [r3, r2]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d111      	bne.n	8001c2a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0f9b      	lsrs	r3, r3, #30
 8001c0c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c12:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001c18:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001c1e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	2201      	movs	r2, #1
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_ADC_Init+0x340>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	23c0      	movs	r3, #192	; 0xc0
 8001c46:	061b      	lsls	r3, r3, #24
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d018      	beq.n	8001c7e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	05db      	lsls	r3, r3, #23
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d012      	beq.n	8001c7e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	061b      	lsls	r3, r3, #24
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d00c      	beq.n	8001c7e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001c64:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <HAL_ADC_Init+0x344>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a44      	ldr	r2, [pc, #272]	; (8001d7c <HAL_ADC_Init+0x348>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	23f0      	movs	r3, #240	; 0xf0
 8001c74:	039b      	lsls	r3, r3, #14
 8001c76:	401a      	ands	r2, r3
 8001c78:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_ADC_Init+0x344>)
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c86:	001a      	movs	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f7ff fdd8 	bl	800183e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	493a      	ldr	r1, [pc, #232]	; (8001d80 <HAL_ADC_Init+0x34c>)
 8001c98:	001a      	movs	r2, r3
 8001c9a:	f7ff fdd0 	bl	800183e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2110      	movs	r1, #16
 8001cb2:	4249      	negs	r1, r1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8001cb8:	e018      	b.n	8001cec <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	039b      	lsls	r3, r3, #14
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d112      	bne.n	8001cec <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	221c      	movs	r2, #28
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2210      	movs	r2, #16
 8001cda:	4252      	negs	r2, r2
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0011      	movs	r1, r2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff fdc0 	bl	8001878 <LL_ADC_GetSamplingTimeCommonChannels>
 8001cf8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d10b      	bne.n	8001d1a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	4393      	bics	r3, r2
 8001d10:	2201      	movs	r2, #1
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d18:	e01c      	b.n	8001d54 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	2212      	movs	r2, #18
 8001d20:	4393      	bics	r3, r2
 8001d22:	2210      	movs	r2, #16
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	2201      	movs	r2, #1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001d36:	231f      	movs	r3, #31
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d3e:	e009      	b.n	8001d54 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	2210      	movs	r2, #16
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d4c:	231f      	movs	r3, #31
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001d54:	231f      	movs	r3, #31
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	781b      	ldrb	r3, [r3, #0]
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b008      	add	sp, #32
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	20000000 	.word	0x20000000
 8001d68:	00030d40 	.word	0x00030d40
 8001d6c:	fffffefd 	.word	0xfffffefd
 8001d70:	fffe0201 	.word	0xfffe0201
 8001d74:	1ffffc02 	.word	0x1ffffc02
 8001d78:	40012708 	.word	0x40012708
 8001d7c:	ffc3ffff 	.word	0xffc3ffff
 8001d80:	07ffff04 	.word	0x07ffff04

08001d84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2202      	movs	r2, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d017      	beq.n	8001dd8 <HAL_ADC_IRQHandler+0x54>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	2210      	movs	r2, #16
 8001db6:	4013      	ands	r3, r2
 8001db8:	d106      	bne.n	8001dc8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	2280      	movs	r2, #128	; 0x80
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 faf2 	bl	80023b4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2204      	movs	r2, #4
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d003      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x64>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2204      	movs	r2, #4
 8001de4:	4013      	ands	r3, r2
 8001de6:	d107      	bne.n	8001df8 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2208      	movs	r2, #8
 8001dec:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dee:	d04d      	beq.n	8001e8c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2208      	movs	r2, #8
 8001df4:	4013      	ands	r3, r2
 8001df6:	d049      	beq.n	8001e8c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d106      	bne.n	8001e10 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff fd46 	bl	80018a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e1a:	1e03      	subs	r3, r0, #0
 8001e1c:	d02e      	beq.n	8001e7c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7e9b      	ldrb	r3, [r3, #26]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d12a      	bne.n	8001e7c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d123      	bne.n	8001e7c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff fdea 	bl	8001a12 <LL_ADC_REG_IsConversionOngoing>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d110      	bne.n	8001e64 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	210c      	movs	r1, #12
 8001e4e:	438a      	bics	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a56      	ldr	r2, [pc, #344]	; (8001fb0 <HAL_ADC_IRQHandler+0x22c>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	659a      	str	r2, [r3, #88]	; 0x58
 8001e62:	e00b      	b.n	8001e7c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	2220      	movs	r2, #32
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2201      	movs	r2, #1
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f000 f898 	bl	8001fb4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	220c      	movs	r2, #12
 8001e8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	4013      	ands	r3, r2
 8001e92:	d012      	beq.n	8001eba <HAL_ADC_IRQHandler+0x136>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2280      	movs	r2, #128	; 0x80
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d00e      	beq.n	8001eba <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	0252      	lsls	r2, r2, #9
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f000 f889 	bl	8001fc4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d014      	beq.n	8001eee <HAL_ADC_IRQHandler+0x16a>
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	0292      	lsls	r2, r2, #10
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 fa58 	bl	8002394 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	0052      	lsls	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d014      	beq.n	8001f22 <HAL_ADC_IRQHandler+0x19e>
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4013      	ands	r3, r2
 8001f00:	d00f      	beq.n	8001f22 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	02d2      	lsls	r2, r2, #11
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 fa46 	bl	80023a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2210      	movs	r2, #16
 8001f26:	4013      	ands	r3, r2
 8001f28:	d02b      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x1fe>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d027      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e008      	b.n	8001f52 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff fd02 	bl	800194e <LL_ADC_REG_GetDMATransfer>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d110      	bne.n	8001f7a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	00d2      	lsls	r2, r2, #3
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 f82d 	bl	8001fd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2210      	movs	r2, #16
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x224>
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	019b      	lsls	r3, r3, #6
 8001f92:	4013      	ands	r3, r2
 8001f94:	d008      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 fa13 	bl	80023c4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	0192      	lsls	r2, r2, #6
 8001fa6:	601a      	str	r2, [r3, #0]
  }
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b006      	add	sp, #24
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	fffffefe 	.word	0xfffffefe

08001fb4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fee:	2317      	movs	r3, #23
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2254      	movs	r2, #84	; 0x54
 8001ffe:	5c9b      	ldrb	r3, [r3, r2]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x24>
 8002004:	2302      	movs	r3, #2
 8002006:	e1c0      	b.n	800238a <HAL_ADC_ConfigChannel+0x3a6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2254      	movs	r2, #84	; 0x54
 800200c:	2101      	movs	r1, #1
 800200e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff fcfc 	bl	8001a12 <LL_ADC_REG_IsConversionOngoing>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d000      	beq.n	8002020 <HAL_ADC_ConfigChannel+0x3c>
 800201e:	e1a3      	b.n	8002368 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d100      	bne.n	800202a <HAL_ADC_ConfigChannel+0x46>
 8002028:	e143      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	429a      	cmp	r2, r3
 8002034:	d004      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800203a:	4ac1      	ldr	r2, [pc, #772]	; (8002340 <HAL_ADC_ConfigChannel+0x35c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0019      	movs	r1, r3
 800204a:	0010      	movs	r0, r2
 800204c:	f7ff fc5c 	bl	8001908 <LL_ADC_REG_SetSequencerChAdd>
 8002050:	e0c9      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	211f      	movs	r1, #31
 800205c:	400b      	ands	r3, r1
 800205e:	210f      	movs	r1, #15
 8002060:	4099      	lsls	r1, r3
 8002062:	000b      	movs	r3, r1
 8002064:	43db      	mvns	r3, r3
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	035b      	lsls	r3, r3, #13
 8002070:	0b5b      	lsrs	r3, r3, #13
 8002072:	d105      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x9c>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	221f      	movs	r2, #31
 800207c:	4013      	ands	r3, r2
 800207e:	e098      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2201      	movs	r2, #1
 8002086:	4013      	ands	r3, r2
 8002088:	d000      	beq.n	800208c <HAL_ADC_ConfigChannel+0xa8>
 800208a:	e091      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x1cc>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2202      	movs	r2, #2
 8002092:	4013      	ands	r3, r2
 8002094:	d000      	beq.n	8002098 <HAL_ADC_ConfigChannel+0xb4>
 8002096:	e089      	b.n	80021ac <HAL_ADC_ConfigChannel+0x1c8>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2204      	movs	r2, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	d000      	beq.n	80020a4 <HAL_ADC_ConfigChannel+0xc0>
 80020a2:	e081      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x1c4>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2208      	movs	r2, #8
 80020aa:	4013      	ands	r3, r2
 80020ac:	d000      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0xcc>
 80020ae:	e079      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x1c0>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2210      	movs	r2, #16
 80020b6:	4013      	ands	r3, r2
 80020b8:	d000      	beq.n	80020bc <HAL_ADC_ConfigChannel+0xd8>
 80020ba:	e071      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1bc>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2220      	movs	r2, #32
 80020c2:	4013      	ands	r3, r2
 80020c4:	d000      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0xe4>
 80020c6:	e069      	b.n	800219c <HAL_ADC_ConfigChannel+0x1b8>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	4013      	ands	r3, r2
 80020d0:	d000      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0xf0>
 80020d2:	e061      	b.n	8002198 <HAL_ADC_ConfigChannel+0x1b4>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	4013      	ands	r3, r2
 80020dc:	d000      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0xfc>
 80020de:	e059      	b.n	8002194 <HAL_ADC_ConfigChannel+0x1b0>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4013      	ands	r3, r2
 80020ea:	d151      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1ac>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d149      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1a8>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4013      	ands	r3, r2
 8002102:	d141      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1a4>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4013      	ands	r3, r2
 800210e:	d139      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x1a0>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	015b      	lsls	r3, r3, #5
 8002118:	4013      	ands	r3, r2
 800211a:	d131      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x19c>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	019b      	lsls	r3, r3, #6
 8002124:	4013      	ands	r3, r2
 8002126:	d129      	bne.n	800217c <HAL_ADC_ConfigChannel+0x198>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	01db      	lsls	r3, r3, #7
 8002130:	4013      	ands	r3, r2
 8002132:	d121      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x194>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	4013      	ands	r3, r2
 800213e:	d119      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x190>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	4013      	ands	r3, r2
 800214a:	d111      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x18c>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	029b      	lsls	r3, r3, #10
 8002154:	4013      	ands	r3, r2
 8002156:	d109      	bne.n	800216c <HAL_ADC_ConfigChannel+0x188>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	02db      	lsls	r3, r3, #11
 8002160:	4013      	ands	r3, r2
 8002162:	d001      	beq.n	8002168 <HAL_ADC_ConfigChannel+0x184>
 8002164:	2312      	movs	r3, #18
 8002166:	e024      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002168:	2300      	movs	r3, #0
 800216a:	e022      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 800216c:	2311      	movs	r3, #17
 800216e:	e020      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002170:	2310      	movs	r3, #16
 8002172:	e01e      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002174:	230f      	movs	r3, #15
 8002176:	e01c      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002178:	230e      	movs	r3, #14
 800217a:	e01a      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 800217c:	230d      	movs	r3, #13
 800217e:	e018      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002180:	230c      	movs	r3, #12
 8002182:	e016      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002184:	230b      	movs	r3, #11
 8002186:	e014      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002188:	230a      	movs	r3, #10
 800218a:	e012      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 800218c:	2309      	movs	r3, #9
 800218e:	e010      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002190:	2308      	movs	r3, #8
 8002192:	e00e      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002194:	2307      	movs	r3, #7
 8002196:	e00c      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002198:	2306      	movs	r3, #6
 800219a:	e00a      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 800219c:	2305      	movs	r3, #5
 800219e:	e008      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e006      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e004      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1ce>
 80021b0:	2300      	movs	r3, #0
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	6852      	ldr	r2, [r2, #4]
 80021b6:	201f      	movs	r0, #31
 80021b8:	4002      	ands	r2, r0
 80021ba:	4093      	lsls	r3, r2
 80021bc:	000a      	movs	r2, r1
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d808      	bhi.n	80021e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	001a      	movs	r2, r3
 80021e2:	f7ff fb71 	bl	80018c8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	001a      	movs	r2, r3
 80021f4:	f7ff fbb8 	bl	8001968 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db00      	blt.n	8002202 <HAL_ADC_ConfigChannel+0x21e>
 8002200:	e0bc      	b.n	800237c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002202:	4b50      	ldr	r3, [pc, #320]	; (8002344 <HAL_ADC_ConfigChannel+0x360>)
 8002204:	0018      	movs	r0, r3
 8002206:	f7ff fb0d 	bl	8001824 <LL_ADC_GetCommonPathInternalCh>
 800220a:	0003      	movs	r3, r0
 800220c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a4d      	ldr	r2, [pc, #308]	; (8002348 <HAL_ADC_ConfigChannel+0x364>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d122      	bne.n	800225e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002220:	d11d      	bne.n	800225e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	0412      	lsls	r2, r2, #16
 8002228:	4313      	orrs	r3, r2
 800222a:	4a46      	ldr	r2, [pc, #280]	; (8002344 <HAL_ADC_ConfigChannel+0x360>)
 800222c:	0019      	movs	r1, r3
 800222e:	0010      	movs	r0, r2
 8002230:	f7ff fae4 	bl	80017fc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002234:	4b45      	ldr	r3, [pc, #276]	; (800234c <HAL_ADC_ConfigChannel+0x368>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4945      	ldr	r1, [pc, #276]	; (8002350 <HAL_ADC_ConfigChannel+0x36c>)
 800223a:	0018      	movs	r0, r3
 800223c:	f7fd ff60 	bl	8000100 <__udivsi3>
 8002240:	0003      	movs	r3, r0
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	0013      	movs	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	189b      	adds	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800224e:	e002      	b.n	8002256 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3b01      	subs	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f9      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800225c:	e08e      	b.n	800237c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <HAL_ADC_ConfigChannel+0x370>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d10e      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	045b      	lsls	r3, r3, #17
 800226e:	4013      	ands	r3, r2
 8002270:	d109      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	0452      	lsls	r2, r2, #17
 8002278:	4313      	orrs	r3, r2
 800227a:	4a32      	ldr	r2, [pc, #200]	; (8002344 <HAL_ADC_ConfigChannel+0x360>)
 800227c:	0019      	movs	r1, r3
 800227e:	0010      	movs	r0, r2
 8002280:	f7ff fabc 	bl	80017fc <LL_ADC_SetCommonPathInternalCh>
 8002284:	e07a      	b.n	800237c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a33      	ldr	r2, [pc, #204]	; (8002358 <HAL_ADC_ConfigChannel+0x374>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d000      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x2ae>
 8002290:	e074      	b.n	800237c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	03db      	lsls	r3, r3, #15
 8002298:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800229a:	d000      	beq.n	800229e <HAL_ADC_ConfigChannel+0x2ba>
 800229c:	e06e      	b.n	800237c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	03d2      	lsls	r2, r2, #15
 80022a4:	4313      	orrs	r3, r2
 80022a6:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_ADC_ConfigChannel+0x360>)
 80022a8:	0019      	movs	r1, r3
 80022aa:	0010      	movs	r0, r2
 80022ac:	f7ff faa6 	bl	80017fc <LL_ADC_SetCommonPathInternalCh>
 80022b0:	e064      	b.n	800237c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d004      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022c2:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_ADC_ConfigChannel+0x35c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0019      	movs	r1, r3
 80022d2:	0010      	movs	r0, r2
 80022d4:	f7ff fb29 	bl	800192a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da4d      	bge.n	800237c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_ADC_ConfigChannel+0x360>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7ff fa9e 	bl	8001824 <LL_ADC_GetCommonPathInternalCh>
 80022e8:	0003      	movs	r3, r0
 80022ea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a15      	ldr	r2, [pc, #84]	; (8002348 <HAL_ADC_ConfigChannel+0x364>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d108      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <HAL_ADC_ConfigChannel+0x378>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_ADC_ConfigChannel+0x360>)
 80022fe:	0019      	movs	r1, r3
 8002300:	0010      	movs	r0, r2
 8002302:	f7ff fa7b 	bl	80017fc <LL_ADC_SetCommonPathInternalCh>
 8002306:	e039      	b.n	800237c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a11      	ldr	r2, [pc, #68]	; (8002354 <HAL_ADC_ConfigChannel+0x370>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d108      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_ADC_ConfigChannel+0x37c>)
 8002316:	4013      	ands	r3, r2
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_ADC_ConfigChannel+0x360>)
 800231a:	0019      	movs	r1, r3
 800231c:	0010      	movs	r0, r2
 800231e:	f7ff fa6d 	bl	80017fc <LL_ADC_SetCommonPathInternalCh>
 8002322:	e02b      	b.n	800237c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <HAL_ADC_ConfigChannel+0x374>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d126      	bne.n	800237c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4a0c      	ldr	r2, [pc, #48]	; (8002364 <HAL_ADC_ConfigChannel+0x380>)
 8002332:	4013      	ands	r3, r2
 8002334:	4a03      	ldr	r2, [pc, #12]	; (8002344 <HAL_ADC_ConfigChannel+0x360>)
 8002336:	0019      	movs	r1, r3
 8002338:	0010      	movs	r0, r2
 800233a:	f7ff fa5f 	bl	80017fc <LL_ADC_SetCommonPathInternalCh>
 800233e:	e01d      	b.n	800237c <HAL_ADC_ConfigChannel+0x398>
 8002340:	80000004 	.word	0x80000004
 8002344:	40012708 	.word	0x40012708
 8002348:	b0001000 	.word	0xb0001000
 800234c:	20000000 	.word	0x20000000
 8002350:	00030d40 	.word	0x00030d40
 8002354:	b8004000 	.word	0xb8004000
 8002358:	b4002000 	.word	0xb4002000
 800235c:	ff7fffff 	.word	0xff7fffff
 8002360:	feffffff 	.word	0xfeffffff
 8002364:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	2220      	movs	r2, #32
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002374:	2317      	movs	r3, #23
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2254      	movs	r2, #84	; 0x54
 8002380:	2100      	movs	r1, #0
 8002382:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002384:	2317      	movs	r3, #23
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	781b      	ldrb	r3, [r3, #0]
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b006      	add	sp, #24
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)

08002394 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	b002      	add	sp, #8
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b002      	add	sp, #8
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	0002      	movs	r2, r0
 80023dc:	1dfb      	adds	r3, r7, #7
 80023de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b7f      	cmp	r3, #127	; 0x7f
 80023e6:	d809      	bhi.n	80023fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	001a      	movs	r2, r3
 80023ee:	231f      	movs	r3, #31
 80023f0:	401a      	ands	r2, r3
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <__NVIC_EnableIRQ+0x30>)
 80023f4:	2101      	movs	r1, #1
 80023f6:	4091      	lsls	r1, r2
 80023f8:	000a      	movs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80023fc:	46c0      	nop			; (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	b002      	add	sp, #8
 8002402:	bd80      	pop	{r7, pc}
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	0002      	movs	r2, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b7f      	cmp	r3, #127	; 0x7f
 800241c:	d828      	bhi.n	8002470 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241e:	4a2f      	ldr	r2, [pc, #188]	; (80024dc <__NVIC_SetPriority+0xd4>)
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b25b      	sxtb	r3, r3
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	33c0      	adds	r3, #192	; 0xc0
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	589b      	ldr	r3, [r3, r2]
 800242e:	1dfa      	adds	r2, r7, #7
 8002430:	7812      	ldrb	r2, [r2, #0]
 8002432:	0011      	movs	r1, r2
 8002434:	2203      	movs	r2, #3
 8002436:	400a      	ands	r2, r1
 8002438:	00d2      	lsls	r2, r2, #3
 800243a:	21ff      	movs	r1, #255	; 0xff
 800243c:	4091      	lsls	r1, r2
 800243e:	000a      	movs	r2, r1
 8002440:	43d2      	mvns	r2, r2
 8002442:	401a      	ands	r2, r3
 8002444:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	019b      	lsls	r3, r3, #6
 800244a:	22ff      	movs	r2, #255	; 0xff
 800244c:	401a      	ands	r2, r3
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	0018      	movs	r0, r3
 8002454:	2303      	movs	r3, #3
 8002456:	4003      	ands	r3, r0
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800245c:	481f      	ldr	r0, [pc, #124]	; (80024dc <__NVIC_SetPriority+0xd4>)
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b25b      	sxtb	r3, r3
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	430a      	orrs	r2, r1
 8002468:	33c0      	adds	r3, #192	; 0xc0
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800246e:	e031      	b.n	80024d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <__NVIC_SetPriority+0xd8>)
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	0019      	movs	r1, r3
 8002478:	230f      	movs	r3, #15
 800247a:	400b      	ands	r3, r1
 800247c:	3b08      	subs	r3, #8
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3306      	adds	r3, #6
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	18d3      	adds	r3, r2, r3
 8002486:	3304      	adds	r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1dfa      	adds	r2, r7, #7
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	0011      	movs	r1, r2
 8002490:	2203      	movs	r2, #3
 8002492:	400a      	ands	r2, r1
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	21ff      	movs	r1, #255	; 0xff
 8002498:	4091      	lsls	r1, r2
 800249a:	000a      	movs	r2, r1
 800249c:	43d2      	mvns	r2, r2
 800249e:	401a      	ands	r2, r3
 80024a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	22ff      	movs	r2, #255	; 0xff
 80024a8:	401a      	ands	r2, r3
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	0018      	movs	r0, r3
 80024b0:	2303      	movs	r3, #3
 80024b2:	4003      	ands	r3, r0
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <__NVIC_SetPriority+0xd8>)
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	001c      	movs	r4, r3
 80024c0:	230f      	movs	r3, #15
 80024c2:	4023      	ands	r3, r4
 80024c4:	3b08      	subs	r3, #8
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	430a      	orrs	r2, r1
 80024ca:	3306      	adds	r3, #6
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	18c3      	adds	r3, r0, r3
 80024d0:	3304      	adds	r3, #4
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b003      	add	sp, #12
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	045b      	lsls	r3, r3, #17
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d301      	bcc.n	80024fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f8:	2301      	movs	r3, #1
 80024fa:	e010      	b.n	800251e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <SysTick_Config+0x44>)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	3a01      	subs	r2, #1
 8002502:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002504:	2301      	movs	r3, #1
 8002506:	425b      	negs	r3, r3
 8002508:	2103      	movs	r1, #3
 800250a:	0018      	movs	r0, r3
 800250c:	f7ff ff7c 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SysTick_Config+0x44>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <SysTick_Config+0x44>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	210f      	movs	r1, #15
 8002538:	187b      	adds	r3, r7, r1
 800253a:	1c02      	adds	r2, r0, #0
 800253c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	187b      	adds	r3, r7, r1
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b25b      	sxtb	r3, r3
 8002546:	0011      	movs	r1, r2
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff ff5d 	bl	8002408 <__NVIC_SetPriority>
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b004      	add	sp, #16
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	0002      	movs	r2, r0
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	b25b      	sxtb	r3, r3
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff ff33 	bl	80023d4 <__NVIC_EnableIRQ>
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b002      	add	sp, #8
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff ffaf 	bl	80024e4 <SysTick_Config>
 8002586:	0003      	movs	r3, r0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e077      	b.n	8002692 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3d      	ldr	r2, [pc, #244]	; (800269c <HAL_DMA_Init+0x10c>)
 80025a8:	4694      	mov	ip, r2
 80025aa:	4463      	add	r3, ip
 80025ac:	2114      	movs	r1, #20
 80025ae:	0018      	movs	r0, r3
 80025b0:	f7fd fda6 	bl	8000100 <__udivsi3>
 80025b4:	0003      	movs	r3, r0
 80025b6:	009a      	lsls	r2, r3, #2
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2225      	movs	r2, #37	; 0x25
 80025c0:	2102      	movs	r1, #2
 80025c2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4934      	ldr	r1, [pc, #208]	; (80026a0 <HAL_DMA_Init+0x110>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0018      	movs	r0, r3
 800260e:	f000 f9c7 	bl	80029a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	01db      	lsls	r3, r3, #7
 800261a:	429a      	cmp	r2, r3
 800261c:	d102      	bne.n	8002624 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	213f      	movs	r1, #63	; 0x3f
 800262e:	400a      	ands	r2, r1
 8002630:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800263a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d011      	beq.n	8002668 <HAL_DMA_Init+0xd8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b04      	cmp	r3, #4
 800264a:	d80d      	bhi.n	8002668 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	0018      	movs	r0, r3
 8002650:	f000 f9d2 	bl	80029f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	e008      	b.n	800267a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2225      	movs	r2, #37	; 0x25
 8002684:	2101      	movs	r1, #1
 8002686:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2224      	movs	r2, #36	; 0x24
 800268c:	2100      	movs	r1, #0
 800268e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b002      	add	sp, #8
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	bffdfff8 	.word	0xbffdfff8
 80026a0:	ffff800f 	.word	0xffff800f

080026a4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e050      	b.n	8002758 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2225      	movs	r2, #37	; 0x25
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d008      	beq.n	80026d4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2204      	movs	r2, #4
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2224      	movs	r2, #36	; 0x24
 80026cc:	2100      	movs	r1, #0
 80026ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e041      	b.n	8002758 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	210e      	movs	r1, #14
 80026e0:	438a      	bics	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	491c      	ldr	r1, [pc, #112]	; (8002760 <HAL_DMA_Abort+0xbc>)
 80026f0:	400a      	ands	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2101      	movs	r1, #1
 8002700:	438a      	bics	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <HAL_DMA_Abort+0xc0>)
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	221c      	movs	r2, #28
 800270e:	4013      	ands	r3, r2
 8002710:	2201      	movs	r2, #1
 8002712:	409a      	lsls	r2, r3
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_DMA_Abort+0xc0>)
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002722:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00c      	beq.n	8002746 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002736:	490a      	ldr	r1, [pc, #40]	; (8002760 <HAL_DMA_Abort+0xbc>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002744:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2225      	movs	r2, #37	; 0x25
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2224      	movs	r2, #36	; 0x24
 8002752:	2100      	movs	r1, #0
 8002754:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}
 8002760:	fffffeff 	.word	0xfffffeff
 8002764:	40020000 	.word	0x40020000

08002768 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	210f      	movs	r1, #15
 8002772:	187b      	adds	r3, r7, r1
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2225      	movs	r2, #37	; 0x25
 800277c:	5c9b      	ldrb	r3, [r3, r2]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d006      	beq.n	8002792 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2204      	movs	r2, #4
 8002788:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800278a:	187b      	adds	r3, r7, r1
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e049      	b.n	8002826 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	210e      	movs	r1, #14
 800279e:	438a      	bics	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	438a      	bics	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	491d      	ldr	r1, [pc, #116]	; (8002834 <HAL_DMA_Abort_IT+0xcc>)
 80027be:	400a      	ands	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_DMA_Abort_IT+0xd0>)
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	221c      	movs	r2, #28
 80027cc:	4013      	ands	r3, r2
 80027ce:	2201      	movs	r2, #1
 80027d0:	409a      	lsls	r2, r3
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_DMA_Abort_IT+0xd0>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00c      	beq.n	8002804 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f4:	490f      	ldr	r1, [pc, #60]	; (8002834 <HAL_DMA_Abort_IT+0xcc>)
 80027f6:	400a      	ands	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002802:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2225      	movs	r2, #37	; 0x25
 8002808:	2101      	movs	r1, #1
 800280a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	0010      	movs	r0, r2
 8002824:	4798      	blx	r3
    }
  }
  return status;
 8002826:	230f      	movs	r3, #15
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	781b      	ldrb	r3, [r3, #0]
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b004      	add	sp, #16
 8002832:	bd80      	pop	{r7, pc}
 8002834:	fffffeff 	.word	0xfffffeff
 8002838:	40020000 	.word	0x40020000

0800283c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002844:	4b55      	ldr	r3, [pc, #340]	; (800299c <HAL_DMA_IRQHandler+0x160>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	221c      	movs	r2, #28
 8002858:	4013      	ands	r3, r2
 800285a:	2204      	movs	r2, #4
 800285c:	409a      	lsls	r2, r3
 800285e:	0013      	movs	r3, r2
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	d027      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x7a>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2204      	movs	r2, #4
 800286a:	4013      	ands	r3, r2
 800286c:	d023      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2220      	movs	r2, #32
 8002876:	4013      	ands	r3, r2
 8002878:	d107      	bne.n	800288a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2104      	movs	r1, #4
 8002886:	438a      	bics	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800288a:	4b44      	ldr	r3, [pc, #272]	; (800299c <HAL_DMA_IRQHandler+0x160>)
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	221c      	movs	r2, #28
 8002894:	4013      	ands	r3, r2
 8002896:	2204      	movs	r2, #4
 8002898:	409a      	lsls	r2, r3
 800289a:	4b40      	ldr	r3, [pc, #256]	; (800299c <HAL_DMA_IRQHandler+0x160>)
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d100      	bne.n	80028aa <HAL_DMA_IRQHandler+0x6e>
 80028a8:	e073      	b.n	8002992 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	0010      	movs	r0, r2
 80028b2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80028b4:	e06d      	b.n	8002992 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	221c      	movs	r2, #28
 80028bc:	4013      	ands	r3, r2
 80028be:	2202      	movs	r2, #2
 80028c0:	409a      	lsls	r2, r3
 80028c2:	0013      	movs	r3, r2
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	d02e      	beq.n	8002928 <HAL_DMA_IRQHandler+0xec>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2202      	movs	r2, #2
 80028ce:	4013      	ands	r3, r2
 80028d0:	d02a      	beq.n	8002928 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2220      	movs	r2, #32
 80028da:	4013      	ands	r3, r2
 80028dc:	d10b      	bne.n	80028f6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	210a      	movs	r1, #10
 80028ea:	438a      	bics	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2225      	movs	r2, #37	; 0x25
 80028f2:	2101      	movs	r1, #1
 80028f4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_DMA_IRQHandler+0x160>)
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	221c      	movs	r2, #28
 8002900:	4013      	ands	r3, r2
 8002902:	2202      	movs	r2, #2
 8002904:	409a      	lsls	r2, r3
 8002906:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_DMA_IRQHandler+0x160>)
 8002908:	430a      	orrs	r2, r1
 800290a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	2100      	movs	r1, #0
 8002912:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d03a      	beq.n	8002992 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	0010      	movs	r0, r2
 8002924:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002926:	e034      	b.n	8002992 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	221c      	movs	r2, #28
 800292e:	4013      	ands	r3, r2
 8002930:	2208      	movs	r2, #8
 8002932:	409a      	lsls	r2, r3
 8002934:	0013      	movs	r3, r2
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	d02b      	beq.n	8002994 <HAL_DMA_IRQHandler+0x158>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2208      	movs	r2, #8
 8002940:	4013      	ands	r3, r2
 8002942:	d027      	beq.n	8002994 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	210e      	movs	r1, #14
 8002950:	438a      	bics	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_DMA_IRQHandler+0x160>)
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	221c      	movs	r2, #28
 800295e:	4013      	ands	r3, r2
 8002960:	2201      	movs	r2, #1
 8002962:	409a      	lsls	r2, r3
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_DMA_IRQHandler+0x160>)
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2225      	movs	r2, #37	; 0x25
 8002974:	2101      	movs	r1, #1
 8002976:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	0010      	movs	r0, r2
 8002990:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46c0      	nop			; (mov r8, r8)
}
 8002996:	46bd      	mov	sp, r7
 8002998:	b004      	add	sp, #16
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40020000 	.word	0x40020000

080029a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80029b0:	4694      	mov	ip, r2
 80029b2:	4463      	add	r3, ip
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	001a      	movs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	001a      	movs	r2, r3
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	4013      	ands	r3, r2
 80029c6:	3b08      	subs	r3, #8
 80029c8:	2114      	movs	r1, #20
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7fd fb98 	bl	8000100 <__udivsi3>
 80029d0:	0003      	movs	r3, r0
 80029d2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80029d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	221f      	movs	r2, #31
 80029de:	4013      	ands	r3, r2
 80029e0:	2201      	movs	r2, #1
 80029e2:	409a      	lsls	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	10008200 	.word	0x10008200
 80029f4:	40020880 	.word	0x40020880

080029f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	223f      	movs	r2, #63	; 0x3f
 8002a06:	4013      	ands	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a0e:	4694      	mov	ip, r2
 8002a10:	4463      	add	r3, ip
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	001a      	movs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	4013      	ands	r3, r2
 8002a28:	2201      	movs	r2, #1
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	1000823f 	.word	0x1000823f
 8002a3c:	40020940 	.word	0x40020940

08002a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4e:	e147      	b.n	8002ce0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2101      	movs	r1, #1
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4091      	lsls	r1, r2
 8002a5a:	000a      	movs	r2, r1
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d100      	bne.n	8002a68 <HAL_GPIO_Init+0x28>
 8002a66:	e138      	b.n	8002cda <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d005      	beq.n	8002a80 <HAL_GPIO_Init+0x40>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d130      	bne.n	8002ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	0013      	movs	r3, r2
 8002a90:	43da      	mvns	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	0013      	movs	r3, r2
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
 8002abc:	0013      	movs	r3, r2
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	2201      	movs	r2, #1
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	0013      	movs	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d017      	beq.n	8002b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	2203      	movs	r2, #3
 8002afa:	409a      	lsls	r2, r3
 8002afc:	0013      	movs	r3, r2
 8002afe:	43da      	mvns	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	0013      	movs	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2203      	movs	r2, #3
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d123      	bne.n	8002b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	58d3      	ldr	r3, [r2, r3]
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2207      	movs	r2, #7
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	220f      	movs	r2, #15
 8002b42:	409a      	lsls	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	43da      	mvns	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2107      	movs	r1, #7
 8002b56:	400b      	ands	r3, r1
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	08da      	lsrs	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3208      	adds	r2, #8
 8002b6c:	0092      	lsls	r2, r2, #2
 8002b6e:	6939      	ldr	r1, [r7, #16]
 8002b70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	0013      	movs	r3, r2
 8002b82:	43da      	mvns	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2203      	movs	r2, #3
 8002b90:	401a      	ands	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	23c0      	movs	r3, #192	; 0xc0
 8002bac:	029b      	lsls	r3, r3, #10
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d100      	bne.n	8002bb4 <HAL_GPIO_Init+0x174>
 8002bb2:	e092      	b.n	8002cda <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002bb4:	4a50      	ldr	r2, [pc, #320]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3318      	adds	r3, #24
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	589b      	ldr	r3, [r3, r2]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	220f      	movs	r2, #15
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	0013      	movs	r3, r2
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	23a0      	movs	r3, #160	; 0xa0
 8002bdc:	05db      	lsls	r3, r3, #23
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0x1ca>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a45      	ldr	r2, [pc, #276]	; (8002cfc <HAL_GPIO_Init+0x2bc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00d      	beq.n	8002c06 <HAL_GPIO_Init+0x1c6>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a44      	ldr	r2, [pc, #272]	; (8002d00 <HAL_GPIO_Init+0x2c0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <HAL_GPIO_Init+0x1c2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a43      	ldr	r2, [pc, #268]	; (8002d04 <HAL_GPIO_Init+0x2c4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_GPIO_Init+0x1be>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_Init+0x1cc>
 8002bfe:	2305      	movs	r3, #5
 8002c00:	e004      	b.n	8002c0c <HAL_GPIO_Init+0x1cc>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_Init+0x1cc>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_GPIO_Init+0x1cc>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	2103      	movs	r1, #3
 8002c10:	400a      	ands	r2, r1
 8002c12:	00d2      	lsls	r2, r2, #3
 8002c14:	4093      	lsls	r3, r2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c1c:	4936      	ldr	r1, [pc, #216]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	3318      	adds	r3, #24
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c2a:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	035b      	lsls	r3, r3, #13
 8002c42:	4013      	ands	r3, r2
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c54:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	039b      	lsls	r3, r3, #14
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c7e:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002c80:	2384      	movs	r3, #132	; 0x84
 8002c82:	58d3      	ldr	r3, [r2, r3]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ca4:	4914      	ldr	r1, [pc, #80]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002ca6:	2284      	movs	r2, #132	; 0x84
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002cac:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	58d3      	ldr	r3, [r2, r3]
 8002cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	025b      	lsls	r3, r3, #9
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cd2:	4909      	ldr	r1, [pc, #36]	; (8002cf8 <HAL_GPIO_Init+0x2b8>)
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	40da      	lsrs	r2, r3
 8002ce8:	1e13      	subs	r3, r2, #0
 8002cea:	d000      	beq.n	8002cee <HAL_GPIO_Init+0x2ae>
 8002cec:	e6b0      	b.n	8002a50 <HAL_GPIO_Init+0x10>
  }
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b006      	add	sp, #24
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021800 	.word	0x40021800
 8002cfc:	50000400 	.word	0x50000400
 8002d00:	50000800 	.word	0x50000800
 8002d04:	50000c00 	.word	0x50000c00

08002d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	0008      	movs	r0, r1
 8002d12:	0011      	movs	r1, r2
 8002d14:	1cbb      	adds	r3, r7, #2
 8002d16:	1c02      	adds	r2, r0, #0
 8002d18:	801a      	strh	r2, [r3, #0]
 8002d1a:	1c7b      	adds	r3, r7, #1
 8002d1c:	1c0a      	adds	r2, r1, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d20:	1c7b      	adds	r3, r7, #1
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d28:	1cbb      	adds	r3, r7, #2
 8002d2a:	881a      	ldrh	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d30:	e003      	b.n	8002d3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d32:	1cbb      	adds	r3, r7, #2
 8002d34:	881a      	ldrh	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e082      	b.n	8002e5c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2241      	movs	r2, #65	; 0x41
 8002d5a:	5c9b      	ldrb	r3, [r3, r2]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d107      	bne.n	8002d72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2240      	movs	r2, #64	; 0x40
 8002d66:	2100      	movs	r1, #0
 8002d68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7fe f989 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2241      	movs	r2, #65	; 0x41
 8002d76:	2124      	movs	r1, #36	; 0x24
 8002d78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	438a      	bics	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_I2C_Init+0x120>)
 8002d94:	400a      	ands	r2, r1
 8002d96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4931      	ldr	r1, [pc, #196]	; (8002e68 <HAL_I2C_Init+0x124>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d108      	bne.n	8002dc2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	0209      	lsls	r1, r1, #8
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	e007      	b.n	8002dd2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2184      	movs	r1, #132	; 0x84
 8002dcc:	0209      	lsls	r1, r1, #8
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d104      	bne.n	8002de4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	491f      	ldr	r1, [pc, #124]	; (8002e6c <HAL_I2C_Init+0x128>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	491a      	ldr	r1, [pc, #104]	; (8002e68 <HAL_I2C_Init+0x124>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69d9      	ldr	r1, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2241      	movs	r2, #65	; 0x41
 8002e48:	2120      	movs	r1, #32
 8002e4a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2242      	movs	r2, #66	; 0x42
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	f0ffffff 	.word	0xf0ffffff
 8002e68:	ffff7fff 	.word	0xffff7fff
 8002e6c:	02008000 	.word	0x02008000

08002e70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2241      	movs	r2, #65	; 0x41
 8002e7e:	5c9b      	ldrb	r3, [r3, r2]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d138      	bne.n	8002ef8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2240      	movs	r2, #64	; 0x40
 8002e8a:	5c9b      	ldrb	r3, [r3, r2]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e032      	b.n	8002efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2240      	movs	r2, #64	; 0x40
 8002e98:	2101      	movs	r1, #1
 8002e9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2241      	movs	r2, #65	; 0x41
 8002ea0:	2124      	movs	r1, #36	; 0x24
 8002ea2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4911      	ldr	r1, [pc, #68]	; (8002f04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6819      	ldr	r1, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2101      	movs	r1, #1
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2241      	movs	r2, #65	; 0x41
 8002ee8:	2120      	movs	r1, #32
 8002eea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	ffffefff 	.word	0xffffefff

08002f08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2241      	movs	r2, #65	; 0x41
 8002f16:	5c9b      	ldrb	r3, [r3, r2]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d139      	bne.n	8002f92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2240      	movs	r2, #64	; 0x40
 8002f22:	5c9b      	ldrb	r3, [r3, r2]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e033      	b.n	8002f94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2241      	movs	r2, #65	; 0x41
 8002f38:	2124      	movs	r1, #36	; 0x24
 8002f3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	438a      	bics	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2241      	movs	r2, #65	; 0x41
 8002f82:	2120      	movs	r1, #32
 8002f84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	fffff0ff 	.word	0xfffff0ff

08002fa0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e03d      	b.n	800302e <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a20      	ldr	r2, [pc, #128]	; (8003038 <HAL_IWDG_Init+0x98>)
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1f      	ldr	r2, [pc, #124]	; (800303c <HAL_IWDG_Init+0x9c>)
 8002fc0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6852      	ldr	r2, [r2, #4]
 8002fca:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002fd6:	f7fe fbf1 	bl	80017bc <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002fde:	e00e      	b.n	8002ffe <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002fe0:	f7fe fbec 	bl	80017bc <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b31      	cmp	r3, #49	; 0x31
 8002fec:	d907      	bls.n	8002ffe <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d001      	beq.n	8002ffe <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e017      	b.n	800302e <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2207      	movs	r2, #7
 8003006:	4013      	ands	r3, r2
 8003008:	d1ea      	bne.n	8002fe0 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d005      	beq.n	8003024 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68d2      	ldr	r2, [r2, #12]
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	e003      	b.n	800302c <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a05      	ldr	r2, [pc, #20]	; (8003040 <HAL_IWDG_Init+0xa0>)
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b004      	add	sp, #16
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	0000cccc 	.word	0x0000cccc
 800303c:	00005555 	.word	0x00005555
 8003040:	0000aaaa 	.word	0x0000aaaa

08003044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003052:	4013      	ands	r3, r2
 8003054:	0019      	movs	r1, r3
 8003056:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d11f      	bne.n	80030a8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003068:	4b14      	ldr	r3, [pc, #80]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	0013      	movs	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	189b      	adds	r3, r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4912      	ldr	r1, [pc, #72]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003076:	0018      	movs	r0, r3
 8003078:	f7fd f842 	bl	8000100 <__udivsi3>
 800307c:	0003      	movs	r3, r0
 800307e:	3301      	adds	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003082:	e008      	b.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3b01      	subs	r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e001      	b.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e009      	b.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	401a      	ands	r2, r3
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d0ed      	beq.n	8003084 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b004      	add	sp, #16
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	40007000 	.word	0x40007000
 80030b8:	fffff9ff 	.word	0xfffff9ff
 80030bc:	20000000 	.word	0x20000000
 80030c0:	000f4240 	.word	0x000f4240

080030c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	23e0      	movs	r3, #224	; 0xe0
 80030ce:	01db      	lsls	r3, r3, #7
 80030d0:	4013      	ands	r3, r2
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000

080030dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e2f3      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	4013      	ands	r3, r2
 80030f6:	d100      	bne.n	80030fa <HAL_RCC_OscConfig+0x1e>
 80030f8:	e07c      	b.n	80031f4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fa:	4bc3      	ldr	r3, [pc, #780]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2238      	movs	r2, #56	; 0x38
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003104:	4bc0      	ldr	r3, [pc, #768]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2203      	movs	r2, #3
 800310a:	4013      	ands	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b10      	cmp	r3, #16
 8003112:	d102      	bne.n	800311a <HAL_RCC_OscConfig+0x3e>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d002      	beq.n	8003120 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d10b      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	4bb9      	ldr	r3, [pc, #740]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	029b      	lsls	r3, r3, #10
 8003128:	4013      	ands	r3, r2
 800312a:	d062      	beq.n	80031f2 <HAL_RCC_OscConfig+0x116>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d15e      	bne.n	80031f2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e2ce      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	025b      	lsls	r3, r3, #9
 8003140:	429a      	cmp	r2, r3
 8003142:	d107      	bne.n	8003154 <HAL_RCC_OscConfig+0x78>
 8003144:	4bb0      	ldr	r3, [pc, #704]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4baf      	ldr	r3, [pc, #700]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	0249      	lsls	r1, r1, #9
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e020      	b.n	8003196 <HAL_RCC_OscConfig+0xba>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	23a0      	movs	r3, #160	; 0xa0
 800315a:	02db      	lsls	r3, r3, #11
 800315c:	429a      	cmp	r2, r3
 800315e:	d10e      	bne.n	800317e <HAL_RCC_OscConfig+0xa2>
 8003160:	4ba9      	ldr	r3, [pc, #676]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4ba8      	ldr	r3, [pc, #672]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	02c9      	lsls	r1, r1, #11
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	4ba6      	ldr	r3, [pc, #664]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4ba5      	ldr	r3, [pc, #660]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	0249      	lsls	r1, r1, #9
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0xba>
 800317e:	4ba2      	ldr	r3, [pc, #648]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4ba1      	ldr	r3, [pc, #644]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003184:	49a1      	ldr	r1, [pc, #644]	; (800340c <HAL_RCC_OscConfig+0x330>)
 8003186:	400a      	ands	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	4b9f      	ldr	r3, [pc, #636]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003190:	499f      	ldr	r1, [pc, #636]	; (8003410 <HAL_RCC_OscConfig+0x334>)
 8003192:	400a      	ands	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d014      	beq.n	80031c8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe fb0d 	bl	80017bc <HAL_GetTick>
 80031a2:	0003      	movs	r3, r0
 80031a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fe fb08 	bl	80017bc <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e28d      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ba:	4b93      	ldr	r3, [pc, #588]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	4013      	ands	r3, r2
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0xcc>
 80031c6:	e015      	b.n	80031f4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe faf8 	bl	80017bc <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d2:	f7fe faf3 	bl	80017bc <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b64      	cmp	r3, #100	; 0x64
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e278      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e4:	4b88      	ldr	r3, [pc, #544]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	029b      	lsls	r3, r3, #10
 80031ec:	4013      	ands	r3, r2
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0xf6>
 80031f0:	e000      	b.n	80031f4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	d100      	bne.n	8003200 <HAL_RCC_OscConfig+0x124>
 80031fe:	e099      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003200:	4b81      	ldr	r3, [pc, #516]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2238      	movs	r2, #56	; 0x38
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320a:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2203      	movs	r2, #3
 8003210:	4013      	ands	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b10      	cmp	r3, #16
 8003218:	d102      	bne.n	8003220 <HAL_RCC_OscConfig+0x144>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d002      	beq.n	8003226 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d135      	bne.n	8003292 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003226:	4b78      	ldr	r3, [pc, #480]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4013      	ands	r3, r2
 8003230:	d005      	beq.n	800323e <HAL_RCC_OscConfig+0x162>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e24b      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b72      	ldr	r3, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4a74      	ldr	r2, [pc, #464]	; (8003414 <HAL_RCC_OscConfig+0x338>)
 8003244:	4013      	ands	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	021a      	lsls	r2, r3, #8
 800324e:	4b6e      	ldr	r3, [pc, #440]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d112      	bne.n	8003280 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800325a:	4b6b      	ldr	r3, [pc, #428]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6e      	ldr	r2, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x33c>)
 8003260:	4013      	ands	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800326e:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0adb      	lsrs	r3, r3, #11
 8003274:	2207      	movs	r2, #7
 8003276:	4013      	ands	r3, r2
 8003278:	4a68      	ldr	r2, [pc, #416]	; (800341c <HAL_RCC_OscConfig+0x340>)
 800327a:	40da      	lsrs	r2, r3
 800327c:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_OscConfig+0x344>)
 800327e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003280:	4b68      	ldr	r3, [pc, #416]	; (8003424 <HAL_RCC_OscConfig+0x348>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0018      	movs	r0, r3
 8003286:	f7fe fa3d 	bl	8001704 <HAL_InitTick>
 800328a:	1e03      	subs	r3, r0, #0
 800328c:	d051      	beq.n	8003332 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e221      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d030      	beq.n	80032fc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800329a:	4b5b      	ldr	r3, [pc, #364]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <HAL_RCC_OscConfig+0x33c>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80032ae:	4b56      	ldr	r3, [pc, #344]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b55      	ldr	r3, [pc, #340]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	2180      	movs	r1, #128	; 0x80
 80032b6:	0049      	lsls	r1, r1, #1
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fa7e 	bl	80017bc <HAL_GetTick>
 80032c0:	0003      	movs	r3, r0
 80032c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fe fa79 	bl	80017bc <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1fe      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d8:	4b4b      	ldr	r3, [pc, #300]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4013      	ands	r3, r2
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b48      	ldr	r3, [pc, #288]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a4a      	ldr	r2, [pc, #296]	; (8003414 <HAL_RCC_OscConfig+0x338>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	021a      	lsls	r2, r3, #8
 80032f4:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e01b      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80032fc:	4b42      	ldr	r3, [pc, #264]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003302:	4949      	ldr	r1, [pc, #292]	; (8003428 <HAL_RCC_OscConfig+0x34c>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe fa58 	bl	80017bc <HAL_GetTick>
 800330c:	0003      	movs	r3, r0
 800330e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003312:	f7fe fa53 	bl	80017bc <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1d8      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003324:	4b38      	ldr	r3, [pc, #224]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4013      	ands	r3, r2
 800332e:	d1f0      	bne.n	8003312 <HAL_RCC_OscConfig+0x236>
 8003330:	e000      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003332:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2208      	movs	r2, #8
 800333a:	4013      	ands	r3, r2
 800333c:	d047      	beq.n	80033ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2238      	movs	r2, #56	; 0x38
 8003344:	4013      	ands	r3, r2
 8003346:	2b18      	cmp	r3, #24
 8003348:	d10a      	bne.n	8003360 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d03c      	beq.n	80033ce <HAL_RCC_OscConfig+0x2f2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d138      	bne.n	80033ce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e1ba      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d019      	beq.n	800339c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800336a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800336c:	4b26      	ldr	r3, [pc, #152]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800336e:	2101      	movs	r1, #1
 8003370:	430a      	orrs	r2, r1
 8003372:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe fa22 	bl	80017bc <HAL_GetTick>
 8003378:	0003      	movs	r3, r0
 800337a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337e:	f7fe fa1d 	bl	80017bc <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e1a2      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 8003392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003394:	2202      	movs	r2, #2
 8003396:	4013      	ands	r3, r2
 8003398:	d0f1      	beq.n	800337e <HAL_RCC_OscConfig+0x2a2>
 800339a:	e018      	b.n	80033ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 800339e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	438a      	bics	r2, r1
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe fa08 	bl	80017bc <HAL_GetTick>
 80033ac:	0003      	movs	r3, r0
 80033ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b2:	f7fe fa03 	bl	80017bc <HAL_GetTick>
 80033b6:	0002      	movs	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e188      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	2202      	movs	r2, #2
 80033ca:	4013      	ands	r3, r2
 80033cc:	d1f1      	bne.n	80033b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2204      	movs	r2, #4
 80033d4:	4013      	ands	r3, r2
 80033d6:	d100      	bne.n	80033da <HAL_RCC_OscConfig+0x2fe>
 80033d8:	e0c6      	b.n	8003568 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	231f      	movs	r3, #31
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2238      	movs	r2, #56	; 0x38
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d11e      	bne.n	800342c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x32c>)
 80033f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f2:	2202      	movs	r2, #2
 80033f4:	4013      	ands	r3, r2
 80033f6:	d100      	bne.n	80033fa <HAL_RCC_OscConfig+0x31e>
 80033f8:	e0b6      	b.n	8003568 <HAL_RCC_OscConfig+0x48c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d000      	beq.n	8003404 <HAL_RCC_OscConfig+0x328>
 8003402:	e0b1      	b.n	8003568 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e166      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
 8003408:	40021000 	.word	0x40021000
 800340c:	fffeffff 	.word	0xfffeffff
 8003410:	fffbffff 	.word	0xfffbffff
 8003414:	ffff80ff 	.word	0xffff80ff
 8003418:	ffffc7ff 	.word	0xffffc7ff
 800341c:	00f42400 	.word	0x00f42400
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004
 8003428:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800342c:	4bac      	ldr	r3, [pc, #688]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800342e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	055b      	lsls	r3, r3, #21
 8003434:	4013      	ands	r3, r2
 8003436:	d101      	bne.n	800343c <HAL_RCC_OscConfig+0x360>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x362>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4ba7      	ldr	r3, [pc, #668]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003446:	4ba6      	ldr	r3, [pc, #664]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	0549      	lsls	r1, r1, #21
 800344c:	430a      	orrs	r2, r1
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003450:	4ba3      	ldr	r3, [pc, #652]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	055b      	lsls	r3, r3, #21
 8003458:	4013      	ands	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800345e:	231f      	movs	r3, #31
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003466:	4b9f      	ldr	r3, [pc, #636]	; (80036e4 <HAL_RCC_OscConfig+0x608>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4013      	ands	r3, r2
 8003470:	d11a      	bne.n	80034a8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003472:	4b9c      	ldr	r3, [pc, #624]	; (80036e4 <HAL_RCC_OscConfig+0x608>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b9b      	ldr	r3, [pc, #620]	; (80036e4 <HAL_RCC_OscConfig+0x608>)
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	0049      	lsls	r1, r1, #1
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003480:	f7fe f99c 	bl	80017bc <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fe f997 	bl	80017bc <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e11c      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	4b91      	ldr	r3, [pc, #580]	; (80036e4 <HAL_RCC_OscConfig+0x608>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4013      	ands	r3, r2
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x3e2>
 80034b0:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034b4:	4b8a      	ldr	r3, [pc, #552]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	430a      	orrs	r2, r1
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80034bc:	e01c      	b.n	80034f8 <HAL_RCC_OscConfig+0x41c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x404>
 80034c6:	4b86      	ldr	r3, [pc, #536]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034ca:	4b85      	ldr	r3, [pc, #532]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034cc:	2104      	movs	r1, #4
 80034ce:	430a      	orrs	r2, r1
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80034d2:	4b83      	ldr	r3, [pc, #524]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034d6:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034d8:	2101      	movs	r1, #1
 80034da:	430a      	orrs	r2, r1
 80034dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0x41c>
 80034e0:	4b7f      	ldr	r3, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034e4:	4b7e      	ldr	r3, [pc, #504]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034e6:	2101      	movs	r1, #1
 80034e8:	438a      	bics	r2, r1
 80034ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ec:	4b7c      	ldr	r3, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034f0:	4b7b      	ldr	r3, [pc, #492]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80034f2:	2104      	movs	r1, #4
 80034f4:	438a      	bics	r2, r1
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d014      	beq.n	800352a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe f95c 	bl	80017bc <HAL_GetTick>
 8003504:	0003      	movs	r3, r0
 8003506:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003508:	e009      	b.n	800351e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fe f957 	bl	80017bc <HAL_GetTick>
 800350e:	0002      	movs	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	4a74      	ldr	r2, [pc, #464]	; (80036e8 <HAL_RCC_OscConfig+0x60c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0db      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351e:	4b70      	ldr	r3, [pc, #448]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	2202      	movs	r2, #2
 8003524:	4013      	ands	r3, r2
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x42e>
 8003528:	e013      	b.n	8003552 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe f947 	bl	80017bc <HAL_GetTick>
 800352e:	0003      	movs	r3, r0
 8003530:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003532:	e009      	b.n	8003548 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe f942 	bl	80017bc <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	4a6a      	ldr	r2, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x60c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0c6      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003548:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	2202      	movs	r2, #2
 800354e:	4013      	ands	r3, r2
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003552:	231f      	movs	r3, #31
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b60      	ldr	r3, [pc, #384]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800355e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003560:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003562:	4962      	ldr	r1, [pc, #392]	; (80036ec <HAL_RCC_OscConfig+0x610>)
 8003564:	400a      	ands	r2, r1
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d100      	bne.n	8003572 <HAL_RCC_OscConfig+0x496>
 8003570:	e0b0      	b.n	80036d4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2238      	movs	r2, #56	; 0x38
 8003578:	4013      	ands	r3, r2
 800357a:	2b10      	cmp	r3, #16
 800357c:	d100      	bne.n	8003580 <HAL_RCC_OscConfig+0x4a4>
 800357e:	e078      	b.n	8003672 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d153      	bne.n	8003630 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003588:	4b55      	ldr	r3, [pc, #340]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800358e:	4958      	ldr	r1, [pc, #352]	; (80036f0 <HAL_RCC_OscConfig+0x614>)
 8003590:	400a      	ands	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe f912 	bl	80017bc <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7fe f90d 	bl	80017bc <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e092      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b0:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	049b      	lsls	r3, r3, #18
 80035b8:	4013      	ands	r3, r2
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <HAL_RCC_OscConfig+0x618>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	431a      	orrs	r2, r3
 80035e4:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	0449      	lsls	r1, r1, #17
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80035f8:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 80035fe:	2180      	movs	r1, #128	; 0x80
 8003600:	0549      	lsls	r1, r1, #21
 8003602:	430a      	orrs	r2, r1
 8003604:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fe f8d9 	bl	80017bc <HAL_GetTick>
 800360a:	0003      	movs	r3, r0
 800360c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7fe f8d4 	bl	80017bc <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e059      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	049b      	lsls	r3, r3, #18
 800362a:	4013      	ands	r3, r2
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x534>
 800362e:	e051      	b.n	80036d4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003636:	492e      	ldr	r1, [pc, #184]	; (80036f0 <HAL_RCC_OscConfig+0x614>)
 8003638:	400a      	ands	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe f8be 	bl	80017bc <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7fe f8b9 	bl	80017bc <HAL_GetTick>
 800364a:	0002      	movs	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e03e      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003658:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	049b      	lsls	r3, r3, #18
 8003660:	4013      	ands	r3, r2
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003664:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 800366a:	4923      	ldr	r1, [pc, #140]	; (80036f8 <HAL_RCC_OscConfig+0x61c>)
 800366c:	400a      	ands	r2, r1
 800366e:	60da      	str	r2, [r3, #12]
 8003670:	e030      	b.n	80036d4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e02b      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <HAL_RCC_OscConfig+0x604>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2203      	movs	r2, #3
 8003688:	401a      	ands	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	429a      	cmp	r2, r3
 8003690:	d11e      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2270      	movs	r2, #112	; 0x70
 8003696:	401a      	ands	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d117      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	23fe      	movs	r3, #254	; 0xfe
 80036a4:	01db      	lsls	r3, r3, #7
 80036a6:	401a      	ands	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d10e      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	23f8      	movs	r3, #248	; 0xf8
 80036b6:	039b      	lsls	r3, r3, #14
 80036b8:	401a      	ands	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d106      	bne.n	80036d0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	0f5b      	lsrs	r3, r3, #29
 80036c6:	075a      	lsls	r2, r3, #29
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b008      	add	sp, #32
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	00001388 	.word	0x00001388
 80036ec:	efffffff 	.word	0xefffffff
 80036f0:	feffffff 	.word	0xfeffffff
 80036f4:	1fc1808c 	.word	0x1fc1808c
 80036f8:	effefffc 	.word	0xeffefffc

080036fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0e9      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b76      	ldr	r3, [pc, #472]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2207      	movs	r2, #7
 8003716:	4013      	ands	r3, r2
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d91e      	bls.n	800375c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b73      	ldr	r3, [pc, #460]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2207      	movs	r2, #7
 8003724:	4393      	bics	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	4b70      	ldr	r3, [pc, #448]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003730:	f7fe f844 	bl	80017bc <HAL_GetTick>
 8003734:	0003      	movs	r3, r0
 8003736:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003738:	e009      	b.n	800374e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373a:	f7fe f83f 	bl	80017bc <HAL_GetTick>
 800373e:	0002      	movs	r2, r0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	4a6a      	ldr	r2, [pc, #424]	; (80038f0 <HAL_RCC_ClockConfig+0x1f4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0ca      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800374e:	4b67      	ldr	r3, [pc, #412]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2207      	movs	r2, #7
 8003754:	4013      	ands	r3, r2
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d1ee      	bne.n	800373a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2202      	movs	r2, #2
 8003762:	4013      	ands	r3, r2
 8003764:	d015      	beq.n	8003792 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2204      	movs	r2, #4
 800376c:	4013      	ands	r3, r2
 800376e:	d006      	beq.n	800377e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003770:	4b60      	ldr	r3, [pc, #384]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003776:	21e0      	movs	r1, #224	; 0xe0
 8003778:	01c9      	lsls	r1, r1, #7
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377e:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4a5d      	ldr	r2, [pc, #372]	; (80038f8 <HAL_RCC_ClockConfig+0x1fc>)
 8003784:	4013      	ands	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2201      	movs	r2, #1
 8003798:	4013      	ands	r3, r2
 800379a:	d057      	beq.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	029b      	lsls	r3, r3, #10
 80037ac:	4013      	ands	r3, r2
 80037ae:	d12b      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e097      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037bc:	4b4d      	ldr	r3, [pc, #308]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	049b      	lsls	r3, r3, #18
 80037c4:	4013      	ands	r3, r2
 80037c6:	d11f      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e08b      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d4:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4013      	ands	r3, r2
 80037de:	d113      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e07f      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ec:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f0:	2202      	movs	r2, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	d108      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e074      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fa:	4b3e      	ldr	r3, [pc, #248]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2202      	movs	r2, #2
 8003800:	4013      	ands	r3, r2
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e06d      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003808:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2207      	movs	r2, #7
 800380e:	4393      	bics	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 8003818:	430a      	orrs	r2, r1
 800381a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381c:	f7fd ffce 	bl	80017bc <HAL_GetTick>
 8003820:	0003      	movs	r3, r0
 8003822:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003824:	e009      	b.n	800383a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003826:	f7fd ffc9 	bl	80017bc <HAL_GetTick>
 800382a:	0002      	movs	r2, r0
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <HAL_RCC_ClockConfig+0x1f4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e054      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2238      	movs	r2, #56	; 0x38
 8003840:	401a      	ands	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	429a      	cmp	r2, r3
 800384a:	d1ec      	bne.n	8003826 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800384c:	4b27      	ldr	r3, [pc, #156]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2207      	movs	r2, #7
 8003852:	4013      	ands	r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d21e      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2207      	movs	r2, #7
 8003860:	4393      	bics	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800386c:	f7fd ffa6 	bl	80017bc <HAL_GetTick>
 8003870:	0003      	movs	r3, r0
 8003872:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003874:	e009      	b.n	800388a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003876:	f7fd ffa1 	bl	80017bc <HAL_GetTick>
 800387a:	0002      	movs	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_RCC_ClockConfig+0x1f4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e02c      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2207      	movs	r2, #7
 8003890:	4013      	ands	r3, r2
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d1ee      	bne.n	8003876 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2204      	movs	r2, #4
 800389e:	4013      	ands	r3, r2
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <HAL_RCC_ClockConfig+0x200>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	0019      	movs	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80038b6:	f000 f829 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ba:	0001      	movs	r1, r0
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_RCC_ClockConfig+0x1f8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	220f      	movs	r2, #15
 80038c4:	401a      	ands	r2, r3
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_RCC_ClockConfig+0x204>)
 80038c8:	0092      	lsls	r2, r2, #2
 80038ca:	58d3      	ldr	r3, [r2, r3]
 80038cc:	221f      	movs	r2, #31
 80038ce:	4013      	ands	r3, r2
 80038d0:	000a      	movs	r2, r1
 80038d2:	40da      	lsrs	r2, r3
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_ClockConfig+0x208>)
 80038d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_ClockConfig+0x20c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0018      	movs	r0, r3
 80038de:	f7fd ff11 	bl	8001704 <HAL_InitTick>
 80038e2:	0003      	movs	r3, r0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40022000 	.word	0x40022000
 80038f0:	00001388 	.word	0x00001388
 80038f4:	40021000 	.word	0x40021000
 80038f8:	fffff0ff 	.word	0xfffff0ff
 80038fc:	ffff8fff 	.word	0xffff8fff
 8003900:	08005f68 	.word	0x08005f68
 8003904:	20000000 	.word	0x20000000
 8003908:	20000004 	.word	0x20000004

0800390c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003912:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2238      	movs	r2, #56	; 0x38
 8003918:	4013      	ands	r3, r2
 800391a:	d10f      	bne.n	800393c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800391c:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0adb      	lsrs	r3, r3, #11
 8003922:	2207      	movs	r2, #7
 8003924:	4013      	ands	r3, r2
 8003926:	2201      	movs	r2, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	0013      	movs	r3, r2
 800392c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	4835      	ldr	r0, [pc, #212]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003932:	f7fc fbe5 	bl	8000100 <__udivsi3>
 8003936:	0003      	movs	r3, r0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	e05d      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800393c:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2238      	movs	r2, #56	; 0x38
 8003942:	4013      	ands	r3, r2
 8003944:	2b08      	cmp	r3, #8
 8003946:	d102      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003948:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x100>)
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e054      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394e:	4b2d      	ldr	r3, [pc, #180]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2238      	movs	r2, #56	; 0x38
 8003954:	4013      	ands	r3, r2
 8003956:	2b10      	cmp	r3, #16
 8003958:	d138      	bne.n	80039cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800395a:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2203      	movs	r2, #3
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	2207      	movs	r2, #7
 800396c:	4013      	ands	r3, r2
 800396e:	3301      	adds	r3, #1
 8003970:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d10d      	bne.n	8003994 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	4824      	ldr	r0, [pc, #144]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x100>)
 800397c:	f7fc fbc0 	bl	8000100 <__udivsi3>
 8003980:	0003      	movs	r3, r0
 8003982:	0019      	movs	r1, r3
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	227f      	movs	r2, #127	; 0x7f
 800398c:	4013      	ands	r3, r2
 800398e:	434b      	muls	r3, r1
 8003990:	617b      	str	r3, [r7, #20]
        break;
 8003992:	e00d      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	481c      	ldr	r0, [pc, #112]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003998:	f7fc fbb2 	bl	8000100 <__udivsi3>
 800399c:	0003      	movs	r3, r0
 800399e:	0019      	movs	r1, r3
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	227f      	movs	r2, #127	; 0x7f
 80039a8:	4013      	ands	r3, r2
 80039aa:	434b      	muls	r3, r1
 80039ac:	617b      	str	r3, [r7, #20]
        break;
 80039ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0f5b      	lsrs	r3, r3, #29
 80039b6:	2207      	movs	r2, #7
 80039b8:	4013      	ands	r3, r2
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	6978      	ldr	r0, [r7, #20]
 80039c2:	f7fc fb9d 	bl	8000100 <__udivsi3>
 80039c6:	0003      	movs	r3, r0
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e015      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2238      	movs	r2, #56	; 0x38
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d103      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2238      	movs	r2, #56	; 0x38
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b18      	cmp	r3, #24
 80039ea:	d103      	bne.n	80039f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80039ec:	23fa      	movs	r3, #250	; 0xfa
 80039ee:	01db      	lsls	r3, r3, #7
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e001      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039f8:	693b      	ldr	r3, [r7, #16]
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b006      	add	sp, #24
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40021000 	.word	0x40021000
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b02      	ldr	r3, [pc, #8]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	20000000 	.word	0x20000000

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b5b0      	push	{r4, r5, r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a28:	f7ff fff2 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a2c:	0004      	movs	r4, r0
 8003a2e:	f7ff fb49 	bl	80030c4 <LL_RCC_GetAPB1Prescaler>
 8003a32:	0003      	movs	r3, r0
 8003a34:	0b1a      	lsrs	r2, r3, #12
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a38:	0092      	lsls	r2, r2, #2
 8003a3a:	58d3      	ldr	r3, [r2, r3]
 8003a3c:	221f      	movs	r2, #31
 8003a3e:	4013      	ands	r3, r2
 8003a40:	40dc      	lsrs	r4, r3
 8003a42:	0023      	movs	r3, r4
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	08005fa8 	.word	0x08005fa8

08003a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003a58:	2313      	movs	r3, #19
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a60:	2312      	movs	r3, #18
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	029b      	lsls	r3, r3, #10
 8003a70:	4013      	ands	r3, r2
 8003a72:	d100      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a74:	e0a3      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a76:	2011      	movs	r0, #17
 8003a78:	183b      	adds	r3, r7, r0
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7e:	4b86      	ldr	r3, [pc, #536]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	055b      	lsls	r3, r3, #21
 8003a86:	4013      	ands	r3, r2
 8003a88:	d110      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	4b83      	ldr	r3, [pc, #524]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8e:	4b82      	ldr	r3, [pc, #520]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	0549      	lsls	r1, r1, #21
 8003a94:	430a      	orrs	r2, r1
 8003a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a98:	4b7f      	ldr	r3, [pc, #508]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	055b      	lsls	r3, r3, #21
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa6:	183b      	adds	r3, r7, r0
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aac:	4b7b      	ldr	r3, [pc, #492]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b7a      	ldr	r3, [pc, #488]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	0049      	lsls	r1, r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aba:	f7fd fe7f 	bl	80017bc <HAL_GetTick>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ac2:	e00b      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac4:	f7fd fe7a 	bl	80017bc <HAL_GetTick>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d904      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003ad2:	2313      	movs	r3, #19
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	701a      	strb	r2, [r3, #0]
        break;
 8003ada:	e005      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003adc:	4b6f      	ldr	r3, [pc, #444]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d0ed      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003ae8:	2313      	movs	r3, #19
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d154      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003af2:	4b69      	ldr	r3, [pc, #420]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003af6:	23c0      	movs	r3, #192	; 0xc0
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4013      	ands	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d019      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d014      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b0e:	4b62      	ldr	r3, [pc, #392]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	4a63      	ldr	r2, [pc, #396]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b18:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b1c:	4b5e      	ldr	r3, [pc, #376]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b1e:	2180      	movs	r1, #128	; 0x80
 8003b20:	0249      	lsls	r1, r1, #9
 8003b22:	430a      	orrs	r2, r1
 8003b24:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b26:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b2a:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b2c:	495d      	ldr	r1, [pc, #372]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b2e:	400a      	ands	r2, r1
 8003b30:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b32:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d016      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fd fe3c 	bl	80017bc <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b48:	e00c      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fd fe37 	bl	80017bc <HAL_GetTick>
 8003b4e:	0002      	movs	r2, r0
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	4a54      	ldr	r2, [pc, #336]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d904      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003b5a:	2313      	movs	r3, #19
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	2203      	movs	r2, #3
 8003b60:	701a      	strb	r2, [r3, #0]
            break;
 8003b62:	e004      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b64:	4b4c      	ldr	r3, [pc, #304]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d0ed      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003b6e:	2313      	movs	r3, #19
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b78:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	4a48      	ldr	r2, [pc, #288]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	0019      	movs	r1, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	4b44      	ldr	r3, [pc, #272]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b8c:	e00c      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b8e:	2312      	movs	r3, #18
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	2213      	movs	r2, #19
 8003b94:	18ba      	adds	r2, r7, r2
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	2312      	movs	r3, #18
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	2213      	movs	r2, #19
 8003ba2:	18ba      	adds	r2, r7, r2
 8003ba4:	7812      	ldrb	r2, [r2, #0]
 8003ba6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba8:	2311      	movs	r3, #17
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d105      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb6:	4b38      	ldr	r3, [pc, #224]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bb8:	493c      	ldr	r1, [pc, #240]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bba:	400a      	ands	r2, r1
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bc8:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	2203      	movs	r2, #3
 8003bce:	4393      	bics	r3, r2
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	d009      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003be6:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	220c      	movs	r2, #12
 8003bec:	4393      	bics	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	4013      	ands	r3, r2
 8003c02:	d009      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	4a29      	ldr	r2, [pc, #164]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c14:	430a      	orrs	r2, r1
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	01db      	lsls	r3, r3, #7
 8003c20:	4013      	ands	r3, r2
 8003c22:	d015      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c24:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	0899      	lsrs	r1, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c32:	430a      	orrs	r2, r1
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	05db      	lsls	r3, r3, #23
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d106      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	0249      	lsls	r1, r1, #9
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d016      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	0019      	movs	r1, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	01db      	lsls	r3, r3, #7
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	0249      	lsls	r1, r1, #9
 8003c86:	430a      	orrs	r2, r1
 8003c88:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c8a:	2312      	movs	r3, #18
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	781b      	ldrb	r3, [r3, #0]
}
 8003c90:	0018      	movs	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b006      	add	sp, #24
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	fffffcff 	.word	0xfffffcff
 8003ca4:	fffeffff 	.word	0xfffeffff
 8003ca8:	00001388 	.word	0x00001388
 8003cac:	efffffff 	.word	0xefffffff
 8003cb0:	ffffcfff 	.word	0xffffcfff
 8003cb4:	ffff3fff 	.word	0xffff3fff

08003cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e04a      	b.n	8003d60 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	223d      	movs	r2, #61	; 0x3d
 8003cce:	5c9b      	ldrb	r3, [r3, r2]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d107      	bne.n	8003ce6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	223c      	movs	r2, #60	; 0x3c
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7fd fa1b 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	223d      	movs	r2, #61	; 0x3d
 8003cea:	2102      	movs	r1, #2
 8003cec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	0010      	movs	r0, r2
 8003cfa:	f000 fbc5 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2248      	movs	r2, #72	; 0x48
 8003d02:	2101      	movs	r1, #1
 8003d04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	223e      	movs	r2, #62	; 0x3e
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	5499      	strb	r1, [r3, r2]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	223f      	movs	r2, #63	; 0x3f
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2240      	movs	r2, #64	; 0x40
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2241      	movs	r2, #65	; 0x41
 8003d22:	2101      	movs	r1, #1
 8003d24:	5499      	strb	r1, [r3, r2]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2242      	movs	r2, #66	; 0x42
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	5499      	strb	r1, [r3, r2]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2243      	movs	r2, #67	; 0x43
 8003d32:	2101      	movs	r1, #1
 8003d34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2244      	movs	r2, #68	; 0x44
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	5499      	strb	r1, [r3, r2]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2245      	movs	r2, #69	; 0x45
 8003d42:	2101      	movs	r1, #1
 8003d44:	5499      	strb	r1, [r3, r2]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2246      	movs	r2, #70	; 0x46
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	5499      	strb	r1, [r3, r2]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2247      	movs	r2, #71	; 0x47
 8003d52:	2101      	movs	r1, #1
 8003d54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	223d      	movs	r2, #61	; 0x3d
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	0018      	movs	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e04a      	b.n	8003e10 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	223d      	movs	r2, #61	; 0x3d
 8003d7e:	5c9b      	ldrb	r3, [r3, r2]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d107      	bne.n	8003d96 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	223c      	movs	r2, #60	; 0x3c
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 f841 	bl	8003e18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	223d      	movs	r2, #61	; 0x3d
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3304      	adds	r3, #4
 8003da6:	0019      	movs	r1, r3
 8003da8:	0010      	movs	r0, r2
 8003daa:	f000 fb6d 	bl	8004488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2248      	movs	r2, #72	; 0x48
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	223e      	movs	r2, #62	; 0x3e
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	223f      	movs	r2, #63	; 0x3f
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2240      	movs	r2, #64	; 0x40
 8003dca:	2101      	movs	r1, #1
 8003dcc:	5499      	strb	r1, [r3, r2]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2241      	movs	r2, #65	; 0x41
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2242      	movs	r2, #66	; 0x42
 8003dda:	2101      	movs	r1, #1
 8003ddc:	5499      	strb	r1, [r3, r2]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2243      	movs	r2, #67	; 0x43
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2244      	movs	r2, #68	; 0x44
 8003dea:	2101      	movs	r1, #1
 8003dec:	5499      	strb	r1, [r3, r2]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2245      	movs	r2, #69	; 0x45
 8003df2:	2101      	movs	r1, #1
 8003df4:	5499      	strb	r1, [r3, r2]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2246      	movs	r2, #70	; 0x46
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	5499      	strb	r1, [r3, r2]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2247      	movs	r2, #71	; 0x47
 8003e02:	2101      	movs	r1, #1
 8003e04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	223d      	movs	r2, #61	; 0x3d
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b002      	add	sp, #8
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2202      	movs	r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d124      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2202      	movs	r2, #2
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d11d      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2203      	movs	r2, #3
 8003e52:	4252      	negs	r2, r2
 8003e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2203      	movs	r2, #3
 8003e64:	4013      	ands	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 faf4 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 8003e70:	e007      	b.n	8003e82 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 fae7 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f000 faf3 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2204      	movs	r2, #4
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d125      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d11e      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2205      	movs	r2, #5
 8003eaa:	4252      	negs	r2, r2
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	23c0      	movs	r3, #192	; 0xc0
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 fac7 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 8003eca:	e007      	b.n	8003edc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 faba 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 fac6 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2208      	movs	r2, #8
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d124      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11d      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2209      	movs	r2, #9
 8003f04:	4252      	negs	r2, r2
 8003f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2203      	movs	r2, #3
 8003f16:	4013      	ands	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f000 fa9b 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 8003f22:	e007      	b.n	8003f34 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 fa8e 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 fa9a 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2210      	movs	r2, #16
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d125      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	2210      	movs	r2, #16
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d11e      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2211      	movs	r2, #17
 8003f5c:	4252      	negs	r2, r2
 8003f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2208      	movs	r2, #8
 8003f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	23c0      	movs	r3, #192	; 0xc0
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4013      	ands	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	0018      	movs	r0, r3
 8003f78:	f000 fa6e 	bl	8004458 <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e007      	b.n	8003f8e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 fa61 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f000 fa6d 	bl	8004468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d108      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	4252      	negs	r2, r2
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f000 fa3b 	bl	8004438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d10f      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b80      	cmp	r3, #128	; 0x80
 8003fdc:	d108      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2281      	movs	r2, #129	; 0x81
 8003fe4:	4252      	negs	r2, r2
 8003fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 fe92 	bl	8004d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	429a      	cmp	r2, r3
 8004002:	d10e      	bne.n	8004022 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	4013      	ands	r3, r2
 800400e:	2b80      	cmp	r3, #128	; 0x80
 8004010:	d107      	bne.n	8004022 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <HAL_TIM_IRQHandler+0x260>)
 8004018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 fe81 	bl	8004d24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	2240      	movs	r2, #64	; 0x40
 800402a:	4013      	ands	r3, r2
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d10f      	bne.n	8004050 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2240      	movs	r2, #64	; 0x40
 8004038:	4013      	ands	r3, r2
 800403a:	2b40      	cmp	r3, #64	; 0x40
 800403c:	d108      	bne.n	8004050 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2241      	movs	r2, #65	; 0x41
 8004044:	4252      	negs	r2, r2
 8004046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	0018      	movs	r0, r3
 800404c:	f000 fa14 	bl	8004478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2220      	movs	r2, #32
 8004058:	4013      	ands	r3, r2
 800405a:	2b20      	cmp	r3, #32
 800405c:	d10f      	bne.n	800407e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	4013      	ands	r3, r2
 8004068:	2b20      	cmp	r3, #32
 800406a:	d108      	bne.n	800407e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2221      	movs	r2, #33	; 0x21
 8004072:	4252      	negs	r2, r2
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f000 fe43 	bl	8004d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	b002      	add	sp, #8
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	fffffeff 	.word	0xfffffeff

0800408c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004098:	2317      	movs	r3, #23
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	223c      	movs	r2, #60	; 0x3c
 80040a4:	5c9b      	ldrb	r3, [r3, r2]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e0e5      	b.n	800427a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	223c      	movs	r2, #60	; 0x3c
 80040b2:	2101      	movs	r1, #1
 80040b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b14      	cmp	r3, #20
 80040ba:	d900      	bls.n	80040be <HAL_TIM_PWM_ConfigChannel+0x32>
 80040bc:	e0d1      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	009a      	lsls	r2, r3, #2
 80040c2:	4b70      	ldr	r3, [pc, #448]	; (8004284 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 fa4e 	bl	8004574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2108      	movs	r1, #8
 80040e4:	430a      	orrs	r2, r1
 80040e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2104      	movs	r1, #4
 80040f4:	438a      	bics	r2, r1
 80040f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6999      	ldr	r1, [r3, #24]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	619a      	str	r2, [r3, #24]
      break;
 800410a:	e0af      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	0011      	movs	r1, r2
 8004114:	0018      	movs	r0, r3
 8004116:	f000 fab7 	bl	8004688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699a      	ldr	r2, [r3, #24]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2180      	movs	r1, #128	; 0x80
 8004126:	0109      	lsls	r1, r1, #4
 8004128:	430a      	orrs	r2, r1
 800412a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4954      	ldr	r1, [pc, #336]	; (8004288 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004138:	400a      	ands	r2, r1
 800413a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6999      	ldr	r1, [r3, #24]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	021a      	lsls	r2, r3, #8
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	619a      	str	r2, [r3, #24]
      break;
 8004150:	e08c      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	0011      	movs	r1, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f000 fb18 	bl	8004790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2108      	movs	r1, #8
 800416c:	430a      	orrs	r2, r1
 800416e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2104      	movs	r1, #4
 800417c:	438a      	bics	r2, r1
 800417e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69d9      	ldr	r1, [r3, #28]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	61da      	str	r2, [r3, #28]
      break;
 8004192:	e06b      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	0011      	movs	r1, r2
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fb7f 	bl	80048a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	0109      	lsls	r1, r1, #4
 80041b0:	430a      	orrs	r2, r1
 80041b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4932      	ldr	r1, [pc, #200]	; (8004288 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69d9      	ldr	r1, [r3, #28]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	61da      	str	r2, [r3, #28]
      break;
 80041d8:	e048      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 fbc6 	bl	8004974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2108      	movs	r1, #8
 80041f4:	430a      	orrs	r2, r1
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2104      	movs	r1, #4
 8004204:	438a      	bics	r2, r1
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800421a:	e027      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	0011      	movs	r1, r2
 8004224:	0018      	movs	r0, r3
 8004226:	f000 fc05 	bl	8004a34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	0109      	lsls	r1, r1, #4
 8004238:	430a      	orrs	r2, r1
 800423a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4910      	ldr	r1, [pc, #64]	; (8004288 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004248:	400a      	ands	r2, r1
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	021a      	lsls	r2, r3, #8
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004260:	e004      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004262:	2317      	movs	r3, #23
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
      break;
 800426a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	223c      	movs	r2, #60	; 0x3c
 8004270:	2100      	movs	r1, #0
 8004272:	5499      	strb	r1, [r3, r2]

  return status;
 8004274:	2317      	movs	r3, #23
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	781b      	ldrb	r3, [r3, #0]
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b006      	add	sp, #24
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	08005fc8 	.word	0x08005fc8
 8004288:	fffffbff 	.word	0xfffffbff

0800428c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004296:	230f      	movs	r3, #15
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	223c      	movs	r2, #60	; 0x3c
 80042a2:	5c9b      	ldrb	r3, [r3, r2]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIM_ConfigClockSource+0x20>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e0bc      	b.n	8004426 <HAL_TIM_ConfigClockSource+0x19a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223c      	movs	r2, #60	; 0x3c
 80042b0:	2101      	movs	r1, #1
 80042b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	223d      	movs	r2, #61	; 0x3d
 80042b8:	2102      	movs	r1, #2
 80042ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a5a      	ldr	r2, [pc, #360]	; (8004430 <HAL_TIM_ConfigClockSource+0x1a4>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a59      	ldr	r2, [pc, #356]	; (8004434 <HAL_TIM_ConfigClockSource+0x1a8>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2280      	movs	r2, #128	; 0x80
 80042e2:	0192      	lsls	r2, r2, #6
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d040      	beq.n	800436a <HAL_TIM_ConfigClockSource+0xde>
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	0192      	lsls	r2, r2, #6
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d900      	bls.n	80042f2 <HAL_TIM_ConfigClockSource+0x66>
 80042f0:	e088      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x178>
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	0152      	lsls	r2, r2, #5
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d100      	bne.n	80042fc <HAL_TIM_ConfigClockSource+0x70>
 80042fa:	e088      	b.n	800440e <HAL_TIM_ConfigClockSource+0x182>
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	0152      	lsls	r2, r2, #5
 8004300:	4293      	cmp	r3, r2
 8004302:	d900      	bls.n	8004306 <HAL_TIM_ConfigClockSource+0x7a>
 8004304:	e07e      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x178>
 8004306:	2b70      	cmp	r3, #112	; 0x70
 8004308:	d018      	beq.n	800433c <HAL_TIM_ConfigClockSource+0xb0>
 800430a:	d900      	bls.n	800430e <HAL_TIM_ConfigClockSource+0x82>
 800430c:	e07a      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x178>
 800430e:	2b60      	cmp	r3, #96	; 0x60
 8004310:	d04f      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x126>
 8004312:	d900      	bls.n	8004316 <HAL_TIM_ConfigClockSource+0x8a>
 8004314:	e076      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x178>
 8004316:	2b50      	cmp	r3, #80	; 0x50
 8004318:	d03b      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x106>
 800431a:	d900      	bls.n	800431e <HAL_TIM_ConfigClockSource+0x92>
 800431c:	e072      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x178>
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d057      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x146>
 8004322:	d900      	bls.n	8004326 <HAL_TIM_ConfigClockSource+0x9a>
 8004324:	e06e      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x178>
 8004326:	2b30      	cmp	r3, #48	; 0x30
 8004328:	d063      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x166>
 800432a:	d86b      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x178>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d060      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x166>
 8004330:	d868      	bhi.n	8004404 <HAL_TIM_ConfigClockSource+0x178>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d05d      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x166>
 8004336:	2b10      	cmp	r3, #16
 8004338:	d05b      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x166>
 800433a:	e063      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6899      	ldr	r1, [r3, #8]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f000 fc52 	bl	8004bf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2277      	movs	r2, #119	; 0x77
 800435c:	4313      	orrs	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
      break;
 8004368:	e052      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6899      	ldr	r1, [r3, #8]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f000 fc3b 	bl	8004bf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2180      	movs	r1, #128	; 0x80
 800438a:	01c9      	lsls	r1, r1, #7
 800438c:	430a      	orrs	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
      break;
 8004390:	e03e      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	001a      	movs	r2, r3
 80043a0:	f000 fbac 	bl	8004afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2150      	movs	r1, #80	; 0x50
 80043aa:	0018      	movs	r0, r3
 80043ac:	f000 fc06 	bl	8004bbc <TIM_ITRx_SetConfig>
      break;
 80043b0:	e02e      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	001a      	movs	r2, r3
 80043c0:	f000 fbca 	bl	8004b58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2160      	movs	r1, #96	; 0x60
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 fbf6 	bl	8004bbc <TIM_ITRx_SetConfig>
      break;
 80043d0:	e01e      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	001a      	movs	r2, r3
 80043e0:	f000 fb8c 	bl	8004afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2140      	movs	r1, #64	; 0x40
 80043ea:	0018      	movs	r0, r3
 80043ec:	f000 fbe6 	bl	8004bbc <TIM_ITRx_SetConfig>
      break;
 80043f0:	e00e      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	0019      	movs	r1, r3
 80043fc:	0010      	movs	r0, r2
 80043fe:	f000 fbdd 	bl	8004bbc <TIM_ITRx_SetConfig>
      break;
 8004402:	e005      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004404:	230f      	movs	r3, #15
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]
      break;
 800440c:	e000      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800440e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	223d      	movs	r2, #61	; 0x3d
 8004414:	2101      	movs	r1, #1
 8004416:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	223c      	movs	r2, #60	; 0x3c
 800441c:	2100      	movs	r1, #0
 800441e:	5499      	strb	r1, [r3, r2]

  return status;
 8004420:	230f      	movs	r3, #15
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	781b      	ldrb	r3, [r3, #0]
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b004      	add	sp, #16
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	ffceff88 	.word	0xffceff88
 8004434:	ffff00ff 	.word	0xffff00ff

08004438 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	b002      	add	sp, #8
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004450:	46c0      	nop			; (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b002      	add	sp, #8
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}

08004488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <TIM_Base_SetConfig+0xd0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_Base_SetConfig+0x20>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a2e      	ldr	r2, [pc, #184]	; (800455c <TIM_Base_SetConfig+0xd4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2270      	movs	r2, #112	; 0x70
 80044ac:	4393      	bics	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a26      	ldr	r2, [pc, #152]	; (8004558 <TIM_Base_SetConfig+0xd0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a25      	ldr	r2, [pc, #148]	; (800455c <TIM_Base_SetConfig+0xd4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00f      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a24      	ldr	r2, [pc, #144]	; (8004560 <TIM_Base_SetConfig+0xd8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a23      	ldr	r2, [pc, #140]	; (8004564 <TIM_Base_SetConfig+0xdc>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a22      	ldr	r2, [pc, #136]	; (8004568 <TIM_Base_SetConfig+0xe0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a21      	ldr	r2, [pc, #132]	; (800456c <TIM_Base_SetConfig+0xe4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a20      	ldr	r2, [pc, #128]	; (8004570 <TIM_Base_SetConfig+0xe8>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2280      	movs	r2, #128	; 0x80
 8004500:	4393      	bics	r3, r2
 8004502:	001a      	movs	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <TIM_Base_SetConfig+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0xba>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <TIM_Base_SetConfig+0xdc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0xba>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <TIM_Base_SetConfig+0xe0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0xba>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a0b      	ldr	r2, [pc, #44]	; (800456c <TIM_Base_SetConfig+0xe4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d103      	bne.n	800454a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	615a      	str	r2, [r3, #20]
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b004      	add	sp, #16
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40002000 	.word	0x40002000
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800
 8004570:	fffffcff 	.word	0xfffffcff

08004574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	2201      	movs	r2, #1
 8004584:	4393      	bics	r3, r2
 8004586:	001a      	movs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a32      	ldr	r2, [pc, #200]	; (800466c <TIM_OC1_SetConfig+0xf8>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2203      	movs	r2, #3
 80045aa:	4393      	bics	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2202      	movs	r2, #2
 80045bc:	4393      	bics	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a28      	ldr	r2, [pc, #160]	; (8004670 <TIM_OC1_SetConfig+0xfc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_OC1_SetConfig+0x76>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a27      	ldr	r2, [pc, #156]	; (8004674 <TIM_OC1_SetConfig+0x100>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_OC1_SetConfig+0x76>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a26      	ldr	r2, [pc, #152]	; (8004678 <TIM_OC1_SetConfig+0x104>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_OC1_SetConfig+0x76>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a25      	ldr	r2, [pc, #148]	; (800467c <TIM_OC1_SetConfig+0x108>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d10c      	bne.n	8004604 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2208      	movs	r2, #8
 80045ee:	4393      	bics	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2204      	movs	r2, #4
 8004600:	4393      	bics	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <TIM_OC1_SetConfig+0xfc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <TIM_OC1_SetConfig+0xb0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a19      	ldr	r2, [pc, #100]	; (8004674 <TIM_OC1_SetConfig+0x100>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <TIM_OC1_SetConfig+0xb0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a18      	ldr	r2, [pc, #96]	; (8004678 <TIM_OC1_SetConfig+0x104>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_OC1_SetConfig+0xb0>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <TIM_OC1_SetConfig+0x108>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d111      	bne.n	8004648 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4a16      	ldr	r2, [pc, #88]	; (8004680 <TIM_OC1_SetConfig+0x10c>)
 8004628:	4013      	ands	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <TIM_OC1_SetConfig+0x110>)
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b006      	add	sp, #24
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	fffeff8f 	.word	0xfffeff8f
 8004670:	40012c00 	.word	0x40012c00
 8004674:	40014000 	.word	0x40014000
 8004678:	40014400 	.word	0x40014400
 800467c:	40014800 	.word	0x40014800
 8004680:	fffffeff 	.word	0xfffffeff
 8004684:	fffffdff 	.word	0xfffffdff

08004688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	2210      	movs	r2, #16
 8004698:	4393      	bics	r3, r2
 800469a:	001a      	movs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a2e      	ldr	r2, [pc, #184]	; (8004770 <TIM_OC2_SetConfig+0xe8>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a2d      	ldr	r2, [pc, #180]	; (8004774 <TIM_OC2_SetConfig+0xec>)
 80046be:	4013      	ands	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2220      	movs	r2, #32
 80046d2:	4393      	bics	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a24      	ldr	r2, [pc, #144]	; (8004778 <TIM_OC2_SetConfig+0xf0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10d      	bne.n	8004706 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	4393      	bics	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2240      	movs	r2, #64	; 0x40
 8004702:	4393      	bics	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <TIM_OC2_SetConfig+0xf0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_OC2_SetConfig+0x9e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1a      	ldr	r2, [pc, #104]	; (800477c <TIM_OC2_SetConfig+0xf4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_OC2_SetConfig+0x9e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a19      	ldr	r2, [pc, #100]	; (8004780 <TIM_OC2_SetConfig+0xf8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_OC2_SetConfig+0x9e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a18      	ldr	r2, [pc, #96]	; (8004784 <TIM_OC2_SetConfig+0xfc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d113      	bne.n	800474e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4a17      	ldr	r2, [pc, #92]	; (8004788 <TIM_OC2_SetConfig+0x100>)
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4a16      	ldr	r2, [pc, #88]	; (800478c <TIM_OC2_SetConfig+0x104>)
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	621a      	str	r2, [r3, #32]
}
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	b006      	add	sp, #24
 800476e:	bd80      	pop	{r7, pc}
 8004770:	feff8fff 	.word	0xfeff8fff
 8004774:	fffffcff 	.word	0xfffffcff
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800
 8004788:	fffffbff 	.word	0xfffffbff
 800478c:	fffff7ff 	.word	0xfffff7ff

08004790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	4a35      	ldr	r2, [pc, #212]	; (8004874 <TIM_OC3_SetConfig+0xe4>)
 80047a0:	401a      	ands	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a2f      	ldr	r2, [pc, #188]	; (8004878 <TIM_OC3_SetConfig+0xe8>)
 80047bc:	4013      	ands	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2203      	movs	r2, #3
 80047c4:	4393      	bics	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	4a29      	ldr	r2, [pc, #164]	; (800487c <TIM_OC3_SetConfig+0xec>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a25      	ldr	r2, [pc, #148]	; (8004880 <TIM_OC3_SetConfig+0xf0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10d      	bne.n	800480a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	4a24      	ldr	r2, [pc, #144]	; (8004884 <TIM_OC3_SetConfig+0xf4>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	4a20      	ldr	r2, [pc, #128]	; (8004888 <TIM_OC3_SetConfig+0xf8>)
 8004806:	4013      	ands	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <TIM_OC3_SetConfig+0xf0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00b      	beq.n	800482a <TIM_OC3_SetConfig+0x9a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <TIM_OC3_SetConfig+0xfc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <TIM_OC3_SetConfig+0x9a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <TIM_OC3_SetConfig+0x100>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_OC3_SetConfig+0x9a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <TIM_OC3_SetConfig+0x104>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d113      	bne.n	8004852 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4a1a      	ldr	r2, [pc, #104]	; (8004898 <TIM_OC3_SetConfig+0x108>)
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <TIM_OC3_SetConfig+0x10c>)
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	621a      	str	r2, [r3, #32]
}
 800486c:	46c0      	nop			; (mov r8, r8)
 800486e:	46bd      	mov	sp, r7
 8004870:	b006      	add	sp, #24
 8004872:	bd80      	pop	{r7, pc}
 8004874:	fffffeff 	.word	0xfffffeff
 8004878:	fffeff8f 	.word	0xfffeff8f
 800487c:	fffffdff 	.word	0xfffffdff
 8004880:	40012c00 	.word	0x40012c00
 8004884:	fffff7ff 	.word	0xfffff7ff
 8004888:	fffffbff 	.word	0xfffffbff
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800
 8004898:	ffffefff 	.word	0xffffefff
 800489c:	ffffdfff 	.word	0xffffdfff

080048a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	4a28      	ldr	r2, [pc, #160]	; (8004950 <TIM_OC4_SetConfig+0xb0>)
 80048b0:	401a      	ands	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a22      	ldr	r2, [pc, #136]	; (8004954 <TIM_OC4_SetConfig+0xb4>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a21      	ldr	r2, [pc, #132]	; (8004958 <TIM_OC4_SetConfig+0xb8>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4a1d      	ldr	r2, [pc, #116]	; (800495c <TIM_OC4_SetConfig+0xbc>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	031b      	lsls	r3, r3, #12
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <TIM_OC4_SetConfig+0xc0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00b      	beq.n	8004918 <TIM_OC4_SetConfig+0x78>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <TIM_OC4_SetConfig+0xc4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d007      	beq.n	8004918 <TIM_OC4_SetConfig+0x78>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <TIM_OC4_SetConfig+0xc8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d003      	beq.n	8004918 <TIM_OC4_SetConfig+0x78>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a16      	ldr	r2, [pc, #88]	; (800496c <TIM_OC4_SetConfig+0xcc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d109      	bne.n	800492c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4a15      	ldr	r2, [pc, #84]	; (8004970 <TIM_OC4_SetConfig+0xd0>)
 800491c:	4013      	ands	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	019b      	lsls	r3, r3, #6
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	46bd      	mov	sp, r7
 800494a:	b006      	add	sp, #24
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	ffffefff 	.word	0xffffefff
 8004954:	feff8fff 	.word	0xfeff8fff
 8004958:	fffffcff 	.word	0xfffffcff
 800495c:	ffffdfff 	.word	0xffffdfff
 8004960:	40012c00 	.word	0x40012c00
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800
 8004970:	ffffbfff 	.word	0xffffbfff

08004974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	4a25      	ldr	r2, [pc, #148]	; (8004a18 <TIM_OC5_SetConfig+0xa4>)
 8004984:	401a      	ands	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <TIM_OC5_SetConfig+0xa8>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <TIM_OC5_SetConfig+0xac>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <TIM_OC5_SetConfig+0xb0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_OC5_SetConfig+0x6e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a16      	ldr	r2, [pc, #88]	; (8004a28 <TIM_OC5_SetConfig+0xb4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_OC5_SetConfig+0x6e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <TIM_OC5_SetConfig+0xb8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_OC5_SetConfig+0x6e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <TIM_OC5_SetConfig+0xbc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d109      	bne.n	80049f6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	4a0c      	ldr	r2, [pc, #48]	; (8004a18 <TIM_OC5_SetConfig+0xa4>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	621a      	str	r2, [r3, #32]
}
 8004a10:	46c0      	nop			; (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b006      	add	sp, #24
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	fffeffff 	.word	0xfffeffff
 8004a1c:	fffeff8f 	.word	0xfffeff8f
 8004a20:	fffdffff 	.word	0xfffdffff
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40014400 	.word	0x40014400
 8004a30:	40014800 	.word	0x40014800

08004a34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4a26      	ldr	r2, [pc, #152]	; (8004adc <TIM_OC6_SetConfig+0xa8>)
 8004a44:	401a      	ands	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <TIM_OC6_SetConfig+0xac>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4a1c      	ldr	r2, [pc, #112]	; (8004ae4 <TIM_OC6_SetConfig+0xb0>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	051b      	lsls	r3, r3, #20
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <TIM_OC6_SetConfig+0xb4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <TIM_OC6_SetConfig+0x70>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <TIM_OC6_SetConfig+0xb8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d007      	beq.n	8004aa4 <TIM_OC6_SetConfig+0x70>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <TIM_OC6_SetConfig+0xbc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_OC6_SetConfig+0x70>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <TIM_OC6_SetConfig+0xc0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d109      	bne.n	8004ab8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <TIM_OC6_SetConfig+0xc4>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b006      	add	sp, #24
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	ffefffff 	.word	0xffefffff
 8004ae0:	feff8fff 	.word	0xfeff8fff
 8004ae4:	ffdfffff 	.word	0xffdfffff
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40014000 	.word	0x40014000
 8004af0:	40014400 	.word	0x40014400
 8004af4:	40014800 	.word	0x40014800
 8004af8:	fffbffff 	.word	0xfffbffff

08004afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	2201      	movs	r2, #1
 8004b14:	4393      	bics	r3, r2
 8004b16:	001a      	movs	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	22f0      	movs	r2, #240	; 0xf0
 8004b26:	4393      	bics	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	220a      	movs	r2, #10
 8004b38:	4393      	bics	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	621a      	str	r2, [r3, #32]
}
 8004b50:	46c0      	nop			; (mov r8, r8)
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b006      	add	sp, #24
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	4393      	bics	r3, r2
 8004b6c:	001a      	movs	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4a0d      	ldr	r2, [pc, #52]	; (8004bb8 <TIM_TI2_ConfigInputStage+0x60>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	031b      	lsls	r3, r3, #12
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	22a0      	movs	r2, #160	; 0xa0
 8004b94:	4393      	bics	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b006      	add	sp, #24
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	ffff0fff 	.word	0xffff0fff

08004bbc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <TIM_ITRx_SetConfig+0x34>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	2207      	movs	r2, #7
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	609a      	str	r2, [r3, #8]
}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b004      	add	sp, #16
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	ffcfff8f 	.word	0xffcfff8f

08004bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <TIM_ETR_SetConfig+0x3c>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	021a      	lsls	r2, r3, #8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b006      	add	sp, #24
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	ffff00ff 	.word	0xffff00ff

08004c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	223c      	movs	r2, #60	; 0x3c
 8004c42:	5c9b      	ldrb	r3, [r3, r2]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e04f      	b.n	8004cec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	223c      	movs	r2, #60	; 0x3c
 8004c50:	2101      	movs	r1, #1
 8004c52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	223d      	movs	r2, #61	; 0x3d
 8004c58:	2102      	movs	r1, #2
 8004c5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d108      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2270      	movs	r2, #112	; 0x70
 8004c8c:	4393      	bics	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a11      	ldr	r2, [pc, #68]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10c      	bne.n	8004cda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2280      	movs	r2, #128	; 0x80
 8004cc4:	4393      	bics	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	223d      	movs	r2, #61	; 0x3d
 8004cde:	2101      	movs	r1, #1
 8004ce0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	223c      	movs	r2, #60	; 0x3c
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b004      	add	sp, #16
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40012c00 	.word	0x40012c00
 8004cf8:	ff0fffff 	.word	0xff0fffff
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40014000 	.word	0x40014000

08004d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d0c:	46c0      	nop			; (mov r8, r8)
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b002      	add	sp, #8
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b002      	add	sp, #8
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d2c:	46c0      	nop			; (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b002      	add	sp, #8
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e046      	b.n	8004dd4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2288      	movs	r2, #136	; 0x88
 8004d4a:	589b      	ldr	r3, [r3, r2]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d107      	bne.n	8004d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2284      	movs	r2, #132	; 0x84
 8004d54:	2100      	movs	r1, #0
 8004d56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7fc fabc 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2288      	movs	r2, #136	; 0x88
 8004d64:	2124      	movs	r1, #36	; 0x24
 8004d66:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2101      	movs	r1, #1
 8004d74:	438a      	bics	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 fb72 	bl	8005464 <UART_SetConfig>
 8004d80:	0003      	movs	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e024      	b.n	8004dd4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f000 fd09 	bl	80057ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	490d      	ldr	r1, [pc, #52]	; (8004ddc <HAL_UART_Init+0xa8>)
 8004da6:	400a      	ands	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	212a      	movs	r1, #42	; 0x2a
 8004db6:	438a      	bics	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f000 fda1 	bl	8005914 <UART_CheckIdleState>
 8004dd2:	0003      	movs	r3, r0
}
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b002      	add	sp, #8
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	ffffb7ff 	.word	0xffffb7ff

08004de0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004de0:	b5b0      	push	{r4, r5, r7, lr}
 8004de2:	b0aa      	sub	sp, #168	; 0xa8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	22a4      	movs	r2, #164	; 0xa4
 8004df0:	18b9      	adds	r1, r7, r2
 8004df2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	20a0      	movs	r0, #160	; 0xa0
 8004dfc:	1839      	adds	r1, r7, r0
 8004dfe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	249c      	movs	r4, #156	; 0x9c
 8004e08:	1939      	adds	r1, r7, r4
 8004e0a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e0c:	0011      	movs	r1, r2
 8004e0e:	18bb      	adds	r3, r7, r2
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4aa2      	ldr	r2, [pc, #648]	; (800509c <HAL_UART_IRQHandler+0x2bc>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	2298      	movs	r2, #152	; 0x98
 8004e18:	18bd      	adds	r5, r7, r2
 8004e1a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004e1c:	18bb      	adds	r3, r7, r2
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d11a      	bne.n	8004e5a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e24:	187b      	adds	r3, r7, r1
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d015      	beq.n	8004e5a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e2e:	183b      	adds	r3, r7, r0
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2220      	movs	r2, #32
 8004e34:	4013      	ands	r3, r2
 8004e36:	d105      	bne.n	8004e44 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	055b      	lsls	r3, r3, #21
 8004e40:	4013      	ands	r3, r2
 8004e42:	d00a      	beq.n	8004e5a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d100      	bne.n	8004e4e <HAL_UART_IRQHandler+0x6e>
 8004e4c:	e2dc      	b.n	8005408 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	0010      	movs	r0, r2
 8004e56:	4798      	blx	r3
      }
      return;
 8004e58:	e2d6      	b.n	8005408 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e5a:	2398      	movs	r3, #152	; 0x98
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d100      	bne.n	8004e66 <HAL_UART_IRQHandler+0x86>
 8004e64:	e122      	b.n	80050ac <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e66:	239c      	movs	r3, #156	; 0x9c
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a8c      	ldr	r2, [pc, #560]	; (80050a0 <HAL_UART_IRQHandler+0x2c0>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d106      	bne.n	8004e80 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e72:	23a0      	movs	r3, #160	; 0xa0
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a8a      	ldr	r2, [pc, #552]	; (80050a4 <HAL_UART_IRQHandler+0x2c4>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d100      	bne.n	8004e80 <HAL_UART_IRQHandler+0xa0>
 8004e7e:	e115      	b.n	80050ac <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e80:	23a4      	movs	r3, #164	; 0xa4
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d012      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xd2>
 8004e8c:	23a0      	movs	r3, #160	; 0xa0
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	2380      	movs	r3, #128	; 0x80
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4013      	ands	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2290      	movs	r2, #144	; 0x90
 8004ea6:	589b      	ldr	r3, [r3, r2]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2190      	movs	r1, #144	; 0x90
 8004eb0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eb2:	23a4      	movs	r3, #164	; 0xa4
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d011      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x102>
 8004ebe:	239c      	movs	r3, #156	; 0x9c
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d00b      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2290      	movs	r2, #144	; 0x90
 8004ed6:	589b      	ldr	r3, [r3, r2]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2190      	movs	r1, #144	; 0x90
 8004ee0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ee2:	23a4      	movs	r3, #164	; 0xa4
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	4013      	ands	r3, r2
 8004eec:	d011      	beq.n	8004f12 <HAL_UART_IRQHandler+0x132>
 8004eee:	239c      	movs	r3, #156	; 0x9c
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2204      	movs	r2, #4
 8004f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2290      	movs	r2, #144	; 0x90
 8004f06:	589b      	ldr	r3, [r3, r2]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2190      	movs	r1, #144	; 0x90
 8004f10:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f12:	23a4      	movs	r3, #164	; 0xa4
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d017      	beq.n	8004f4e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f1e:	23a0      	movs	r3, #160	; 0xa0
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2220      	movs	r2, #32
 8004f26:	4013      	ands	r3, r2
 8004f28:	d105      	bne.n	8004f36 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f2a:	239c      	movs	r3, #156	; 0x9c
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5b      	ldr	r2, [pc, #364]	; (80050a0 <HAL_UART_IRQHandler+0x2c0>)
 8004f32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f34:	d00b      	beq.n	8004f4e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2208      	movs	r2, #8
 8004f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2290      	movs	r2, #144	; 0x90
 8004f42:	589b      	ldr	r3, [r3, r2]
 8004f44:	2208      	movs	r2, #8
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2190      	movs	r1, #144	; 0x90
 8004f4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f4e:	23a4      	movs	r3, #164	; 0xa4
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <HAL_UART_IRQHandler+0x1a4>
 8004f5c:	23a0      	movs	r3, #160	; 0xa0
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	04db      	lsls	r3, r3, #19
 8004f66:	4013      	ands	r3, r2
 8004f68:	d00c      	beq.n	8004f84 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	0112      	lsls	r2, r2, #4
 8004f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2290      	movs	r2, #144	; 0x90
 8004f78:	589b      	ldr	r3, [r3, r2]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2190      	movs	r1, #144	; 0x90
 8004f82:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2290      	movs	r2, #144	; 0x90
 8004f88:	589b      	ldr	r3, [r3, r2]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d100      	bne.n	8004f90 <HAL_UART_IRQHandler+0x1b0>
 8004f8e:	e23d      	b.n	800540c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f90:	23a4      	movs	r3, #164	; 0xa4
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2220      	movs	r2, #32
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d015      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f9c:	23a0      	movs	r3, #160	; 0xa0
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d106      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004fa8:	239c      	movs	r3, #156	; 0x9c
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	055b      	lsls	r3, r3, #21
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d008      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	0010      	movs	r0, r2
 8004fc6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2290      	movs	r2, #144	; 0x90
 8004fcc:	589b      	ldr	r3, [r3, r2]
 8004fce:	2194      	movs	r1, #148	; 0x94
 8004fd0:	187a      	adds	r2, r7, r1
 8004fd2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2240      	movs	r2, #64	; 0x40
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d004      	beq.n	8004fec <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fe2:	187b      	adds	r3, r7, r1
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2228      	movs	r2, #40	; 0x28
 8004fe8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fea:	d04c      	beq.n	8005086 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f000 fda6 	bl	8005b40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2240      	movs	r2, #64	; 0x40
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d13c      	bne.n	800507c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005002:	f3ef 8310 	mrs	r3, PRIMASK
 8005006:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800500a:	2090      	movs	r0, #144	; 0x90
 800500c:	183a      	adds	r2, r7, r0
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	2301      	movs	r3, #1
 8005012:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005016:	f383 8810 	msr	PRIMASK, r3
}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2140      	movs	r1, #64	; 0x40
 8005028:	438a      	bics	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	183b      	adds	r3, r7, r0
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005034:	f383 8810 	msr	PRIMASK, r3
}
 8005038:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	589b      	ldr	r3, [r3, r2]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d016      	beq.n	8005072 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2280      	movs	r2, #128	; 0x80
 8005048:	589b      	ldr	r3, [r3, r2]
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <HAL_UART_IRQHandler+0x2c8>)
 800504c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	589b      	ldr	r3, [r3, r2]
 8005054:	0018      	movs	r0, r3
 8005056:	f7fd fb87 	bl	8002768 <HAL_DMA_Abort_IT>
 800505a:	1e03      	subs	r3, r0, #0
 800505c:	d01c      	beq.n	8005098 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2280      	movs	r2, #128	; 0x80
 8005062:	589b      	ldr	r3, [r3, r2]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	2180      	movs	r1, #128	; 0x80
 800506a:	5852      	ldr	r2, [r2, r1]
 800506c:	0010      	movs	r0, r2
 800506e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	e012      	b.n	8005098 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	0018      	movs	r0, r3
 8005076:	f000 f9e1 	bl	800543c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507a:	e00d      	b.n	8005098 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	0018      	movs	r0, r3
 8005080:	f000 f9dc 	bl	800543c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	e008      	b.n	8005098 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 f9d7 	bl	800543c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2290      	movs	r2, #144	; 0x90
 8005092:	2100      	movs	r1, #0
 8005094:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005096:	e1b9      	b.n	800540c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005098:	46c0      	nop			; (mov r8, r8)
    return;
 800509a:	e1b7      	b.n	800540c <HAL_UART_IRQHandler+0x62c>
 800509c:	0000080f 	.word	0x0000080f
 80050a0:	10000001 	.word	0x10000001
 80050a4:	04000120 	.word	0x04000120
 80050a8:	08005c0d 	.word	0x08005c0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d000      	beq.n	80050b6 <HAL_UART_IRQHandler+0x2d6>
 80050b4:	e13e      	b.n	8005334 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050b6:	23a4      	movs	r3, #164	; 0xa4
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2210      	movs	r2, #16
 80050be:	4013      	ands	r3, r2
 80050c0:	d100      	bne.n	80050c4 <HAL_UART_IRQHandler+0x2e4>
 80050c2:	e137      	b.n	8005334 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050c4:	23a0      	movs	r3, #160	; 0xa0
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2210      	movs	r2, #16
 80050cc:	4013      	ands	r3, r2
 80050ce:	d100      	bne.n	80050d2 <HAL_UART_IRQHandler+0x2f2>
 80050d0:	e130      	b.n	8005334 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2210      	movs	r2, #16
 80050d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2240      	movs	r2, #64	; 0x40
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	d000      	beq.n	80050ea <HAL_UART_IRQHandler+0x30a>
 80050e8:	e0a4      	b.n	8005234 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2280      	movs	r2, #128	; 0x80
 80050ee:	589b      	ldr	r3, [r3, r2]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	217e      	movs	r1, #126	; 0x7e
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80050fa:	187b      	adds	r3, r7, r1
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d100      	bne.n	8005104 <HAL_UART_IRQHandler+0x324>
 8005102:	e185      	b.n	8005410 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	225c      	movs	r2, #92	; 0x5c
 8005108:	5a9b      	ldrh	r3, [r3, r2]
 800510a:	187a      	adds	r2, r7, r1
 800510c:	8812      	ldrh	r2, [r2, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d300      	bcc.n	8005114 <HAL_UART_IRQHandler+0x334>
 8005112:	e17d      	b.n	8005410 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	187a      	adds	r2, r7, r1
 8005118:	215e      	movs	r1, #94	; 0x5e
 800511a:	8812      	ldrh	r2, [r2, #0]
 800511c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2280      	movs	r2, #128	; 0x80
 8005122:	589b      	ldr	r3, [r3, r2]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2220      	movs	r2, #32
 800512a:	4013      	ands	r3, r2
 800512c:	d170      	bne.n	8005210 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800512e:	f3ef 8310 	mrs	r3, PRIMASK
 8005132:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005136:	67bb      	str	r3, [r7, #120]	; 0x78
 8005138:	2301      	movs	r3, #1
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	f383 8810 	msr	PRIMASK, r3
}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	49b4      	ldr	r1, [pc, #720]	; (8005420 <HAL_UART_IRQHandler+0x640>)
 8005150:	400a      	ands	r2, r1
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005156:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	f383 8810 	msr	PRIMASK, r3
}
 800515e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005160:	f3ef 8310 	mrs	r3, PRIMASK
 8005164:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	677b      	str	r3, [r7, #116]	; 0x74
 800516a:	2301      	movs	r3, #1
 800516c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005170:	f383 8810 	msr	PRIMASK, r3
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2101      	movs	r1, #1
 8005182:	438a      	bics	r2, r1
 8005184:	609a      	str	r2, [r3, #8]
 8005186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005188:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518c:	f383 8810 	msr	PRIMASK, r3
}
 8005190:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005192:	f3ef 8310 	mrs	r3, PRIMASK
 8005196:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005198:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519a:	673b      	str	r3, [r7, #112]	; 0x70
 800519c:	2301      	movs	r3, #1
 800519e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2140      	movs	r1, #64	; 0x40
 80051b4:	438a      	bics	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051ba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051be:	f383 8810 	msr	PRIMASK, r3
}
 80051c2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	228c      	movs	r2, #140	; 0x8c
 80051c8:	2120      	movs	r1, #32
 80051ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d2:	f3ef 8310 	mrs	r3, PRIMASK
 80051d6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80051d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051dc:	2301      	movs	r3, #1
 80051de:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051e2:	f383 8810 	msr	PRIMASK, r3
}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2110      	movs	r1, #16
 80051f4:	438a      	bics	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051fe:	f383 8810 	msr	PRIMASK, r3
}
 8005202:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2280      	movs	r2, #128	; 0x80
 8005208:	589b      	ldr	r3, [r3, r2]
 800520a:	0018      	movs	r0, r3
 800520c:	f7fd fa4a 	bl	80026a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	225c      	movs	r2, #92	; 0x5c
 800521a:	5a9a      	ldrh	r2, [r3, r2]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	215e      	movs	r1, #94	; 0x5e
 8005220:	5a5b      	ldrh	r3, [r3, r1]
 8005222:	b29b      	uxth	r3, r3
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	0011      	movs	r1, r2
 800522c:	0018      	movs	r0, r3
 800522e:	f000 f90d 	bl	800544c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005232:	e0ed      	b.n	8005410 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	225c      	movs	r2, #92	; 0x5c
 8005238:	5a99      	ldrh	r1, [r3, r2]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	225e      	movs	r2, #94	; 0x5e
 800523e:	5a9b      	ldrh	r3, [r3, r2]
 8005240:	b29a      	uxth	r2, r3
 8005242:	208e      	movs	r0, #142	; 0x8e
 8005244:	183b      	adds	r3, r7, r0
 8005246:	1a8a      	subs	r2, r1, r2
 8005248:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	225e      	movs	r2, #94	; 0x5e
 800524e:	5a9b      	ldrh	r3, [r3, r2]
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d100      	bne.n	8005258 <HAL_UART_IRQHandler+0x478>
 8005256:	e0dd      	b.n	8005414 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005258:	183b      	adds	r3, r7, r0
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d100      	bne.n	8005262 <HAL_UART_IRQHandler+0x482>
 8005260:	e0d8      	b.n	8005414 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005262:	f3ef 8310 	mrs	r3, PRIMASK
 8005266:	60fb      	str	r3, [r7, #12]
  return(result);
 8005268:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800526a:	2488      	movs	r4, #136	; 0x88
 800526c:	193a      	adds	r2, r7, r4
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	2301      	movs	r3, #1
 8005272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f383 8810 	msr	PRIMASK, r3
}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4967      	ldr	r1, [pc, #412]	; (8005424 <HAL_UART_IRQHandler+0x644>)
 8005288:	400a      	ands	r2, r1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	193b      	adds	r3, r7, r4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f383 8810 	msr	PRIMASK, r3
}
 8005298:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529a:	f3ef 8310 	mrs	r3, PRIMASK
 800529e:	61bb      	str	r3, [r7, #24]
  return(result);
 80052a0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052a2:	2484      	movs	r4, #132	; 0x84
 80052a4:	193a      	adds	r2, r7, r4
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	2301      	movs	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f383 8810 	msr	PRIMASK, r3
}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	495a      	ldr	r1, [pc, #360]	; (8005428 <HAL_UART_IRQHandler+0x648>)
 80052c0:	400a      	ands	r2, r1
 80052c2:	609a      	str	r2, [r3, #8]
 80052c4:	193b      	adds	r3, r7, r4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f383 8810 	msr	PRIMASK, r3
}
 80052d0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	228c      	movs	r2, #140	; 0x8c
 80052d6:	2120      	movs	r1, #32
 80052d8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ee:	2480      	movs	r4, #128	; 0x80
 80052f0:	193a      	adds	r2, r7, r4
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	2301      	movs	r3, #1
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	f383 8810 	msr	PRIMASK, r3
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2110      	movs	r1, #16
 800530c:	438a      	bics	r2, r1
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	193b      	adds	r3, r7, r4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005324:	183b      	adds	r3, r7, r0
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0011      	movs	r1, r2
 800532c:	0018      	movs	r0, r3
 800532e:	f000 f88d 	bl	800544c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005332:	e06f      	b.n	8005414 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005334:	23a4      	movs	r3, #164	; 0xa4
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	035b      	lsls	r3, r3, #13
 800533e:	4013      	ands	r3, r2
 8005340:	d010      	beq.n	8005364 <HAL_UART_IRQHandler+0x584>
 8005342:	239c      	movs	r3, #156	; 0x9c
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	03db      	lsls	r3, r3, #15
 800534c:	4013      	ands	r3, r2
 800534e:	d009      	beq.n	8005364 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2280      	movs	r2, #128	; 0x80
 8005356:	0352      	lsls	r2, r2, #13
 8005358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	0018      	movs	r0, r3
 800535e:	f000 fc98 	bl	8005c92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005362:	e05a      	b.n	800541a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005364:	23a4      	movs	r3, #164	; 0xa4
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2280      	movs	r2, #128	; 0x80
 800536c:	4013      	ands	r3, r2
 800536e:	d016      	beq.n	800539e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005370:	23a0      	movs	r3, #160	; 0xa0
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2280      	movs	r2, #128	; 0x80
 8005378:	4013      	ands	r3, r2
 800537a:	d106      	bne.n	800538a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800537c:	239c      	movs	r3, #156	; 0x9c
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	4013      	ands	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800538e:	2b00      	cmp	r3, #0
 8005390:	d042      	beq.n	8005418 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	0010      	movs	r0, r2
 800539a:	4798      	blx	r3
    }
    return;
 800539c:	e03c      	b.n	8005418 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800539e:	23a4      	movs	r3, #164	; 0xa4
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2240      	movs	r2, #64	; 0x40
 80053a6:	4013      	ands	r3, r2
 80053a8:	d00a      	beq.n	80053c0 <HAL_UART_IRQHandler+0x5e0>
 80053aa:	23a0      	movs	r3, #160	; 0xa0
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2240      	movs	r2, #64	; 0x40
 80053b2:	4013      	ands	r3, r2
 80053b4:	d004      	beq.n	80053c0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f000 fc3e 	bl	8005c3a <UART_EndTransmit_IT>
    return;
 80053be:	e02c      	b.n	800541a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053c0:	23a4      	movs	r3, #164	; 0xa4
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	4013      	ands	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <HAL_UART_IRQHandler+0x606>
 80053ce:	23a0      	movs	r3, #160	; 0xa0
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	05db      	lsls	r3, r3, #23
 80053d8:	4013      	ands	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 fc67 	bl	8005cb2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053e4:	e019      	b.n	800541a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053e6:	23a4      	movs	r3, #164	; 0xa4
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	045b      	lsls	r3, r3, #17
 80053f0:	4013      	ands	r3, r2
 80053f2:	d012      	beq.n	800541a <HAL_UART_IRQHandler+0x63a>
 80053f4:	23a0      	movs	r3, #160	; 0xa0
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da0d      	bge.n	800541a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	0018      	movs	r0, r3
 8005402:	f000 fc4e 	bl	8005ca2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005406:	e008      	b.n	800541a <HAL_UART_IRQHandler+0x63a>
      return;
 8005408:	46c0      	nop			; (mov r8, r8)
 800540a:	e006      	b.n	800541a <HAL_UART_IRQHandler+0x63a>
    return;
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	e004      	b.n	800541a <HAL_UART_IRQHandler+0x63a>
      return;
 8005410:	46c0      	nop			; (mov r8, r8)
 8005412:	e002      	b.n	800541a <HAL_UART_IRQHandler+0x63a>
      return;
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	e000      	b.n	800541a <HAL_UART_IRQHandler+0x63a>
    return;
 8005418:	46c0      	nop			; (mov r8, r8)
  }
}
 800541a:	46bd      	mov	sp, r7
 800541c:	b02a      	add	sp, #168	; 0xa8
 800541e:	bdb0      	pop	{r4, r5, r7, pc}
 8005420:	fffffeff 	.word	0xfffffeff
 8005424:	fffffedf 	.word	0xfffffedf
 8005428:	effffffe 	.word	0xeffffffe

0800542c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	46bd      	mov	sp, r7
 8005448:	b002      	add	sp, #8
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	000a      	movs	r2, r1
 8005456:	1cbb      	adds	r3, r7, #2
 8005458:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b002      	add	sp, #8
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800546c:	231a      	movs	r3, #26
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	4313      	orrs	r3, r2
 800548a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4abc      	ldr	r2, [pc, #752]	; (8005784 <UART_SetConfig+0x320>)
 8005494:	4013      	ands	r3, r2
 8005496:	0019      	movs	r1, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4ab7      	ldr	r2, [pc, #732]	; (8005788 <UART_SetConfig+0x324>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4aae      	ldr	r2, [pc, #696]	; (800578c <UART_SetConfig+0x328>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	0019      	movs	r1, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	430a      	orrs	r2, r1
 80054de:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	220f      	movs	r2, #15
 80054e8:	4393      	bics	r3, r2
 80054ea:	0019      	movs	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4aa4      	ldr	r2, [pc, #656]	; (8005790 <UART_SetConfig+0x32c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d127      	bne.n	8005552 <UART_SetConfig+0xee>
 8005502:	4ba4      	ldr	r3, [pc, #656]	; (8005794 <UART_SetConfig+0x330>)
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	2203      	movs	r2, #3
 8005508:	4013      	ands	r3, r2
 800550a:	2b03      	cmp	r3, #3
 800550c:	d017      	beq.n	800553e <UART_SetConfig+0xda>
 800550e:	d81b      	bhi.n	8005548 <UART_SetConfig+0xe4>
 8005510:	2b02      	cmp	r3, #2
 8005512:	d00a      	beq.n	800552a <UART_SetConfig+0xc6>
 8005514:	d818      	bhi.n	8005548 <UART_SetConfig+0xe4>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <UART_SetConfig+0xbc>
 800551a:	2b01      	cmp	r3, #1
 800551c:	d00a      	beq.n	8005534 <UART_SetConfig+0xd0>
 800551e:	e013      	b.n	8005548 <UART_SetConfig+0xe4>
 8005520:	231b      	movs	r3, #27
 8005522:	18fb      	adds	r3, r7, r3
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	e058      	b.n	80055dc <UART_SetConfig+0x178>
 800552a:	231b      	movs	r3, #27
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	2202      	movs	r2, #2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e053      	b.n	80055dc <UART_SetConfig+0x178>
 8005534:	231b      	movs	r3, #27
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	2204      	movs	r2, #4
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	e04e      	b.n	80055dc <UART_SetConfig+0x178>
 800553e:	231b      	movs	r3, #27
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2208      	movs	r2, #8
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e049      	b.n	80055dc <UART_SetConfig+0x178>
 8005548:	231b      	movs	r3, #27
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	2210      	movs	r2, #16
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e044      	b.n	80055dc <UART_SetConfig+0x178>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a90      	ldr	r2, [pc, #576]	; (8005798 <UART_SetConfig+0x334>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d127      	bne.n	80055ac <UART_SetConfig+0x148>
 800555c:	4b8d      	ldr	r3, [pc, #564]	; (8005794 <UART_SetConfig+0x330>)
 800555e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005560:	220c      	movs	r2, #12
 8005562:	4013      	ands	r3, r2
 8005564:	2b0c      	cmp	r3, #12
 8005566:	d017      	beq.n	8005598 <UART_SetConfig+0x134>
 8005568:	d81b      	bhi.n	80055a2 <UART_SetConfig+0x13e>
 800556a:	2b08      	cmp	r3, #8
 800556c:	d00a      	beq.n	8005584 <UART_SetConfig+0x120>
 800556e:	d818      	bhi.n	80055a2 <UART_SetConfig+0x13e>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <UART_SetConfig+0x116>
 8005574:	2b04      	cmp	r3, #4
 8005576:	d00a      	beq.n	800558e <UART_SetConfig+0x12a>
 8005578:	e013      	b.n	80055a2 <UART_SetConfig+0x13e>
 800557a:	231b      	movs	r3, #27
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	2200      	movs	r2, #0
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e02b      	b.n	80055dc <UART_SetConfig+0x178>
 8005584:	231b      	movs	r3, #27
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	2202      	movs	r2, #2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e026      	b.n	80055dc <UART_SetConfig+0x178>
 800558e:	231b      	movs	r3, #27
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	2204      	movs	r2, #4
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e021      	b.n	80055dc <UART_SetConfig+0x178>
 8005598:	231b      	movs	r3, #27
 800559a:	18fb      	adds	r3, r7, r3
 800559c:	2208      	movs	r2, #8
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e01c      	b.n	80055dc <UART_SetConfig+0x178>
 80055a2:	231b      	movs	r3, #27
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	2210      	movs	r2, #16
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e017      	b.n	80055dc <UART_SetConfig+0x178>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a7a      	ldr	r2, [pc, #488]	; (800579c <UART_SetConfig+0x338>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d104      	bne.n	80055c0 <UART_SetConfig+0x15c>
 80055b6:	231b      	movs	r3, #27
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	2200      	movs	r2, #0
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	e00d      	b.n	80055dc <UART_SetConfig+0x178>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a76      	ldr	r2, [pc, #472]	; (80057a0 <UART_SetConfig+0x33c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d104      	bne.n	80055d4 <UART_SetConfig+0x170>
 80055ca:	231b      	movs	r3, #27
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e003      	b.n	80055dc <UART_SetConfig+0x178>
 80055d4:	231b      	movs	r3, #27
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2210      	movs	r2, #16
 80055da:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d000      	beq.n	80055ea <UART_SetConfig+0x186>
 80055e8:	e065      	b.n	80056b6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80055ea:	231b      	movs	r3, #27
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d015      	beq.n	8005620 <UART_SetConfig+0x1bc>
 80055f4:	dc18      	bgt.n	8005628 <UART_SetConfig+0x1c4>
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d00d      	beq.n	8005616 <UART_SetConfig+0x1b2>
 80055fa:	dc15      	bgt.n	8005628 <UART_SetConfig+0x1c4>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <UART_SetConfig+0x1a2>
 8005600:	2b02      	cmp	r3, #2
 8005602:	d005      	beq.n	8005610 <UART_SetConfig+0x1ac>
 8005604:	e010      	b.n	8005628 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005606:	f7fe fa0d 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 800560a:	0003      	movs	r3, r0
 800560c:	617b      	str	r3, [r7, #20]
        break;
 800560e:	e012      	b.n	8005636 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <UART_SetConfig+0x340>)
 8005612:	617b      	str	r3, [r7, #20]
        break;
 8005614:	e00f      	b.n	8005636 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005616:	f7fe f979 	bl	800390c <HAL_RCC_GetSysClockFreq>
 800561a:	0003      	movs	r3, r0
 800561c:	617b      	str	r3, [r7, #20]
        break;
 800561e:	e00a      	b.n	8005636 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	617b      	str	r3, [r7, #20]
        break;
 8005626:	e006      	b.n	8005636 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800562c:	231a      	movs	r3, #26
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
        break;
 8005634:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d100      	bne.n	800563e <UART_SetConfig+0x1da>
 800563c:	e08d      	b.n	800575a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005642:	4b59      	ldr	r3, [pc, #356]	; (80057a8 <UART_SetConfig+0x344>)
 8005644:	0052      	lsls	r2, r2, #1
 8005646:	5ad3      	ldrh	r3, [r2, r3]
 8005648:	0019      	movs	r1, r3
 800564a:	6978      	ldr	r0, [r7, #20]
 800564c:	f7fa fd58 	bl	8000100 <__udivsi3>
 8005650:	0003      	movs	r3, r0
 8005652:	005a      	lsls	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	18d2      	adds	r2, r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	0019      	movs	r1, r3
 8005662:	0010      	movs	r0, r2
 8005664:	f7fa fd4c 	bl	8000100 <__udivsi3>
 8005668:	0003      	movs	r3, r0
 800566a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b0f      	cmp	r3, #15
 8005670:	d91c      	bls.n	80056ac <UART_SetConfig+0x248>
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	025b      	lsls	r3, r3, #9
 8005678:	429a      	cmp	r2, r3
 800567a:	d217      	bcs.n	80056ac <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	b29a      	uxth	r2, r3
 8005680:	200e      	movs	r0, #14
 8005682:	183b      	adds	r3, r7, r0
 8005684:	210f      	movs	r1, #15
 8005686:	438a      	bics	r2, r1
 8005688:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	b29b      	uxth	r3, r3
 8005690:	2207      	movs	r2, #7
 8005692:	4013      	ands	r3, r2
 8005694:	b299      	uxth	r1, r3
 8005696:	183b      	adds	r3, r7, r0
 8005698:	183a      	adds	r2, r7, r0
 800569a:	8812      	ldrh	r2, [r2, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	183a      	adds	r2, r7, r0
 80056a6:	8812      	ldrh	r2, [r2, #0]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	e056      	b.n	800575a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80056ac:	231a      	movs	r3, #26
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e051      	b.n	800575a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b6:	231b      	movs	r3, #27
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d015      	beq.n	80056ec <UART_SetConfig+0x288>
 80056c0:	dc18      	bgt.n	80056f4 <UART_SetConfig+0x290>
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d00d      	beq.n	80056e2 <UART_SetConfig+0x27e>
 80056c6:	dc15      	bgt.n	80056f4 <UART_SetConfig+0x290>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <UART_SetConfig+0x26e>
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d005      	beq.n	80056dc <UART_SetConfig+0x278>
 80056d0:	e010      	b.n	80056f4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d2:	f7fe f9a7 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 80056d6:	0003      	movs	r3, r0
 80056d8:	617b      	str	r3, [r7, #20]
        break;
 80056da:	e012      	b.n	8005702 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056dc:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <UART_SetConfig+0x340>)
 80056de:	617b      	str	r3, [r7, #20]
        break;
 80056e0:	e00f      	b.n	8005702 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e2:	f7fe f913 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80056e6:	0003      	movs	r3, r0
 80056e8:	617b      	str	r3, [r7, #20]
        break;
 80056ea:	e00a      	b.n	8005702 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	617b      	str	r3, [r7, #20]
        break;
 80056f2:	e006      	b.n	8005702 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056f8:	231a      	movs	r3, #26
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	2201      	movs	r2, #1
 80056fe:	701a      	strb	r2, [r3, #0]
        break;
 8005700:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d028      	beq.n	800575a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800570c:	4b26      	ldr	r3, [pc, #152]	; (80057a8 <UART_SetConfig+0x344>)
 800570e:	0052      	lsls	r2, r2, #1
 8005710:	5ad3      	ldrh	r3, [r2, r3]
 8005712:	0019      	movs	r1, r3
 8005714:	6978      	ldr	r0, [r7, #20]
 8005716:	f7fa fcf3 	bl	8000100 <__udivsi3>
 800571a:	0003      	movs	r3, r0
 800571c:	001a      	movs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	18d2      	adds	r2, r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	0019      	movs	r1, r3
 800572c:	0010      	movs	r0, r2
 800572e:	f7fa fce7 	bl	8000100 <__udivsi3>
 8005732:	0003      	movs	r3, r0
 8005734:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b0f      	cmp	r3, #15
 800573a:	d90a      	bls.n	8005752 <UART_SetConfig+0x2ee>
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	025b      	lsls	r3, r3, #9
 8005742:	429a      	cmp	r2, r3
 8005744:	d205      	bcs.n	8005752 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	e003      	b.n	800575a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005752:	231a      	movs	r3, #26
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	226a      	movs	r2, #106	; 0x6a
 800575e:	2101      	movs	r1, #1
 8005760:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2268      	movs	r2, #104	; 0x68
 8005766:	2101      	movs	r1, #1
 8005768:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005776:	231a      	movs	r3, #26
 8005778:	18fb      	adds	r3, r7, r3
 800577a:	781b      	ldrb	r3, [r3, #0]
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	b008      	add	sp, #32
 8005782:	bd80      	pop	{r7, pc}
 8005784:	cfff69f3 	.word	0xcfff69f3
 8005788:	ffffcfff 	.word	0xffffcfff
 800578c:	11fff4ff 	.word	0x11fff4ff
 8005790:	40013800 	.word	0x40013800
 8005794:	40021000 	.word	0x40021000
 8005798:	40004400 	.word	0x40004400
 800579c:	40004800 	.word	0x40004800
 80057a0:	40004c00 	.word	0x40004c00
 80057a4:	00f42400 	.word	0x00f42400
 80057a8:	0800601c 	.word	0x0800601c

080057ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	2201      	movs	r2, #1
 80057ba:	4013      	ands	r3, r2
 80057bc:	d00b      	beq.n	80057d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4a4a      	ldr	r2, [pc, #296]	; (80058f0 <UART_AdvFeatureConfig+0x144>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	0019      	movs	r1, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	2202      	movs	r2, #2
 80057dc:	4013      	ands	r3, r2
 80057de:	d00b      	beq.n	80057f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4a43      	ldr	r2, [pc, #268]	; (80058f4 <UART_AdvFeatureConfig+0x148>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	0019      	movs	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	2204      	movs	r2, #4
 80057fe:	4013      	ands	r3, r2
 8005800:	d00b      	beq.n	800581a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4a3b      	ldr	r2, [pc, #236]	; (80058f8 <UART_AdvFeatureConfig+0x14c>)
 800580a:	4013      	ands	r3, r2
 800580c:	0019      	movs	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	2208      	movs	r2, #8
 8005820:	4013      	ands	r3, r2
 8005822:	d00b      	beq.n	800583c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4a34      	ldr	r2, [pc, #208]	; (80058fc <UART_AdvFeatureConfig+0x150>)
 800582c:	4013      	ands	r3, r2
 800582e:	0019      	movs	r1, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	2210      	movs	r2, #16
 8005842:	4013      	ands	r3, r2
 8005844:	d00b      	beq.n	800585e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4a2c      	ldr	r2, [pc, #176]	; (8005900 <UART_AdvFeatureConfig+0x154>)
 800584e:	4013      	ands	r3, r2
 8005850:	0019      	movs	r1, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	2220      	movs	r2, #32
 8005864:	4013      	ands	r3, r2
 8005866:	d00b      	beq.n	8005880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	4a25      	ldr	r2, [pc, #148]	; (8005904 <UART_AdvFeatureConfig+0x158>)
 8005870:	4013      	ands	r3, r2
 8005872:	0019      	movs	r1, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	2240      	movs	r2, #64	; 0x40
 8005886:	4013      	ands	r3, r2
 8005888:	d01d      	beq.n	80058c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <UART_AdvFeatureConfig+0x15c>)
 8005892:	4013      	ands	r3, r2
 8005894:	0019      	movs	r1, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	035b      	lsls	r3, r3, #13
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d10b      	bne.n	80058c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a15      	ldr	r2, [pc, #84]	; (800590c <UART_AdvFeatureConfig+0x160>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	0019      	movs	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	2280      	movs	r2, #128	; 0x80
 80058cc:	4013      	ands	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4a0e      	ldr	r2, [pc, #56]	; (8005910 <UART_AdvFeatureConfig+0x164>)
 80058d8:	4013      	ands	r3, r2
 80058da:	0019      	movs	r1, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }
}
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b002      	add	sp, #8
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	fffdffff 	.word	0xfffdffff
 80058f4:	fffeffff 	.word	0xfffeffff
 80058f8:	fffbffff 	.word	0xfffbffff
 80058fc:	ffff7fff 	.word	0xffff7fff
 8005900:	ffffefff 	.word	0xffffefff
 8005904:	ffffdfff 	.word	0xffffdfff
 8005908:	ffefffff 	.word	0xffefffff
 800590c:	ff9fffff 	.word	0xff9fffff
 8005910:	fff7ffff 	.word	0xfff7ffff

08005914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af02      	add	r7, sp, #8
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2290      	movs	r2, #144	; 0x90
 8005920:	2100      	movs	r1, #0
 8005922:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005924:	f7fb ff4a 	bl	80017bc <HAL_GetTick>
 8005928:	0003      	movs	r3, r0
 800592a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2208      	movs	r2, #8
 8005934:	4013      	ands	r3, r2
 8005936:	2b08      	cmp	r3, #8
 8005938:	d10c      	bne.n	8005954 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2280      	movs	r2, #128	; 0x80
 800593e:	0391      	lsls	r1, r2, #14
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4a1a      	ldr	r2, [pc, #104]	; (80059ac <UART_CheckIdleState+0x98>)
 8005944:	9200      	str	r2, [sp, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	f000 f832 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 800594c:	1e03      	subs	r3, r0, #0
 800594e:	d001      	beq.n	8005954 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e026      	b.n	80059a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2204      	movs	r2, #4
 800595c:	4013      	ands	r3, r2
 800595e:	2b04      	cmp	r3, #4
 8005960:	d10c      	bne.n	800597c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2280      	movs	r2, #128	; 0x80
 8005966:	03d1      	lsls	r1, r2, #15
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	4a10      	ldr	r2, [pc, #64]	; (80059ac <UART_CheckIdleState+0x98>)
 800596c:	9200      	str	r2, [sp, #0]
 800596e:	2200      	movs	r2, #0
 8005970:	f000 f81e 	bl	80059b0 <UART_WaitOnFlagUntilTimeout>
 8005974:	1e03      	subs	r3, r0, #0
 8005976:	d001      	beq.n	800597c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e012      	b.n	80059a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2288      	movs	r2, #136	; 0x88
 8005980:	2120      	movs	r1, #32
 8005982:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	228c      	movs	r2, #140	; 0x8c
 8005988:	2120      	movs	r1, #32
 800598a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2284      	movs	r2, #132	; 0x84
 800599c:	2100      	movs	r1, #0
 800599e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b004      	add	sp, #16
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	01ffffff 	.word	0x01ffffff

080059b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b094      	sub	sp, #80	; 0x50
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	1dfb      	adds	r3, r7, #7
 80059be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c0:	e0a7      	b.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059c4:	3301      	adds	r3, #1
 80059c6:	d100      	bne.n	80059ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80059c8:	e0a3      	b.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ca:	f7fb fef7 	bl	80017bc <HAL_GetTick>
 80059ce:	0002      	movs	r2, r0
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d302      	bcc.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80059da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d13f      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e0:	f3ef 8310 	mrs	r3, PRIMASK
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059e8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ea:	2301      	movs	r3, #1
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	f383 8810 	msr	PRIMASK, r3
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	494e      	ldr	r1, [pc, #312]	; (8005b3c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005a02:	400a      	ands	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a08:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	f383 8810 	msr	PRIMASK, r3
}
 8005a10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a12:	f3ef 8310 	mrs	r3, PRIMASK
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	f383 8810 	msr	PRIMASK, r3
}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2101      	movs	r1, #1
 8005a34:	438a      	bics	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]
 8005a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3e:	f383 8810 	msr	PRIMASK, r3
}
 8005a42:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2288      	movs	r2, #136	; 0x88
 8005a48:	2120      	movs	r1, #32
 8005a4a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	228c      	movs	r2, #140	; 0x8c
 8005a50:	2120      	movs	r1, #32
 8005a52:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2284      	movs	r2, #132	; 0x84
 8005a58:	2100      	movs	r1, #0
 8005a5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e069      	b.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2204      	movs	r2, #4
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d052      	beq.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69da      	ldr	r2, [r3, #28]
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	401a      	ands	r2, r3
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d148      	bne.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2280      	movs	r2, #128	; 0x80
 8005a86:	0112      	lsls	r2, r2, #4
 8005a88:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8e:	613b      	str	r3, [r7, #16]
  return(result);
 8005a90:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f383 8810 	msr	PRIMASK, r3
}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4924      	ldr	r1, [pc, #144]	; (8005b3c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005aac:	400a      	ands	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f383 8810 	msr	PRIMASK, r3
}
 8005aba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005abc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ac2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	f383 8810 	msr	PRIMASK, r3
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2101      	movs	r1, #1
 8005ade:	438a      	bics	r2, r1
 8005ae0:	609a      	str	r2, [r3, #8]
 8005ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	f383 8810 	msr	PRIMASK, r3
}
 8005aec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2288      	movs	r2, #136	; 0x88
 8005af2:	2120      	movs	r1, #32
 8005af4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	228c      	movs	r2, #140	; 0x8c
 8005afa:	2120      	movs	r1, #32
 8005afc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2290      	movs	r2, #144	; 0x90
 8005b02:	2120      	movs	r1, #32
 8005b04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2284      	movs	r2, #132	; 0x84
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e010      	b.n	8005b34 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	425a      	negs	r2, r3
 8005b22:	4153      	adcs	r3, r2
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	001a      	movs	r2, r3
 8005b28:	1dfb      	adds	r3, r7, #7
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d100      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x182>
 8005b30:	e747      	b.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	0018      	movs	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b014      	add	sp, #80	; 0x50
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	fffffe5f 	.word	0xfffffe5f

08005b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08e      	sub	sp, #56	; 0x38
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b48:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
 8005b52:	2301      	movs	r3, #1
 8005b54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f383 8810 	msr	PRIMASK, r3
}
 8005b5c:	46c0      	nop			; (mov r8, r8)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4926      	ldr	r1, [pc, #152]	; (8005c04 <UART_EndRxTransfer+0xc4>)
 8005b6a:	400a      	ands	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f383 8810 	msr	PRIMASK, r3
}
 8005b78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b7e:	623b      	str	r3, [r7, #32]
  return(result);
 8005b80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b82:	633b      	str	r3, [r7, #48]	; 0x30
 8005b84:	2301      	movs	r3, #1
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	f383 8810 	msr	PRIMASK, r3
}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	491b      	ldr	r1, [pc, #108]	; (8005c08 <UART_EndRxTransfer+0xc8>)
 8005b9c:	400a      	ands	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	f383 8810 	msr	PRIMASK, r3
}
 8005baa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d118      	bne.n	8005be6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f383 8810 	msr	PRIMASK, r3
}
 8005bc8:	46c0      	nop			; (mov r8, r8)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2110      	movs	r1, #16
 8005bd6:	438a      	bics	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f383 8810 	msr	PRIMASK, r3
}
 8005be4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	228c      	movs	r2, #140	; 0x8c
 8005bea:	2120      	movs	r1, #32
 8005bec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b00e      	add	sp, #56	; 0x38
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	fffffedf 	.word	0xfffffedf
 8005c08:	effffffe 	.word	0xeffffffe

08005c0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	225e      	movs	r2, #94	; 0x5e
 8005c1e:	2100      	movs	r1, #0
 8005c20:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2256      	movs	r2, #86	; 0x56
 8005c26:	2100      	movs	r1, #0
 8005c28:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff fc05 	bl	800543c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b004      	add	sp, #16
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c42:	f3ef 8310 	mrs	r3, PRIMASK
 8005c46:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c48:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f383 8810 	msr	PRIMASK, r3
}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2140      	movs	r1, #64	; 0x40
 8005c64:	438a      	bics	r2, r1
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f383 8810 	msr	PRIMASK, r3
}
 8005c72:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2288      	movs	r2, #136	; 0x88
 8005c78:	2120      	movs	r1, #32
 8005c7a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	0018      	movs	r0, r3
 8005c86:	f7ff fbd1 	bl	800542c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b006      	add	sp, #24
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b002      	add	sp, #8
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b002      	add	sp, #8
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b002      	add	sp, #8
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2284      	movs	r2, #132	; 0x84
 8005cd0:	5c9b      	ldrb	r3, [r3, r2]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_UARTEx_DisableFifoMode+0x16>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e027      	b.n	8005d2a <HAL_UARTEx_DisableFifoMode+0x66>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2284      	movs	r2, #132	; 0x84
 8005cde:	2101      	movs	r1, #1
 8005ce0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2288      	movs	r2, #136	; 0x88
 8005ce6:	2124      	movs	r1, #36	; 0x24
 8005ce8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	438a      	bics	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a0b      	ldr	r2, [pc, #44]	; (8005d34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2288      	movs	r2, #136	; 0x88
 8005d1c:	2120      	movs	r1, #32
 8005d1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2284      	movs	r2, #132	; 0x84
 8005d24:	2100      	movs	r1, #0
 8005d26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b004      	add	sp, #16
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	dfffffff 	.word	0xdfffffff

08005d38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2284      	movs	r2, #132	; 0x84
 8005d46:	5c9b      	ldrb	r3, [r3, r2]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e02e      	b.n	8005dae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2284      	movs	r2, #132	; 0x84
 8005d54:	2101      	movs	r1, #1
 8005d56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2288      	movs	r2, #136	; 0x88
 8005d5c:	2124      	movs	r1, #36	; 0x24
 8005d5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2101      	movs	r1, #1
 8005d74:	438a      	bics	r2, r1
 8005d76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	08d9      	lsrs	r1, r3, #3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f000 f854 	bl	8005e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2288      	movs	r2, #136	; 0x88
 8005da0:	2120      	movs	r1, #32
 8005da2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2284      	movs	r2, #132	; 0x84
 8005da8:	2100      	movs	r1, #0
 8005daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	0018      	movs	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b004      	add	sp, #16
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2284      	movs	r2, #132	; 0x84
 8005dc6:	5c9b      	ldrb	r3, [r3, r2]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e02f      	b.n	8005e30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2284      	movs	r2, #132	; 0x84
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2288      	movs	r2, #136	; 0x88
 8005ddc:	2124      	movs	r1, #36	; 0x24
 8005dde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2101      	movs	r1, #1
 8005df4:	438a      	bics	r2, r1
 8005df6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	4a0e      	ldr	r2, [pc, #56]	; (8005e38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	0019      	movs	r1, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	0018      	movs	r0, r3
 8005e12:	f000 f813 	bl	8005e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2288      	movs	r2, #136	; 0x88
 8005e22:	2120      	movs	r1, #32
 8005e24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2284      	movs	r2, #132	; 0x84
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	0018      	movs	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b004      	add	sp, #16
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	f1ffffff 	.word	0xf1ffffff

08005e3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d108      	bne.n	8005e5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	226a      	movs	r2, #106	; 0x6a
 8005e50:	2101      	movs	r1, #1
 8005e52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2268      	movs	r2, #104	; 0x68
 8005e58:	2101      	movs	r1, #1
 8005e5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e5c:	e043      	b.n	8005ee6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e5e:	260f      	movs	r6, #15
 8005e60:	19bb      	adds	r3, r7, r6
 8005e62:	2208      	movs	r2, #8
 8005e64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e66:	200e      	movs	r0, #14
 8005e68:	183b      	adds	r3, r7, r0
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	0e5b      	lsrs	r3, r3, #25
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	240d      	movs	r4, #13
 8005e7a:	193b      	adds	r3, r7, r4
 8005e7c:	2107      	movs	r1, #7
 8005e7e:	400a      	ands	r2, r1
 8005e80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	0f5b      	lsrs	r3, r3, #29
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	250c      	movs	r5, #12
 8005e8e:	197b      	adds	r3, r7, r5
 8005e90:	2107      	movs	r1, #7
 8005e92:	400a      	ands	r2, r1
 8005e94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e96:	183b      	adds	r3, r7, r0
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	197a      	adds	r2, r7, r5
 8005e9c:	7812      	ldrb	r2, [r2, #0]
 8005e9e:	4914      	ldr	r1, [pc, #80]	; (8005ef0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ea0:	5c8a      	ldrb	r2, [r1, r2]
 8005ea2:	435a      	muls	r2, r3
 8005ea4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ea6:	197b      	adds	r3, r7, r5
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005eac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eae:	0019      	movs	r1, r3
 8005eb0:	f7fa f9b0 	bl	8000214 <__divsi3>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	b299      	uxth	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	226a      	movs	r2, #106	; 0x6a
 8005ebc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ebe:	19bb      	adds	r3, r7, r6
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	193a      	adds	r2, r7, r4
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	490a      	ldr	r1, [pc, #40]	; (8005ef0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ec8:	5c8a      	ldrb	r2, [r1, r2]
 8005eca:	435a      	muls	r2, r3
 8005ecc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ece:	193b      	adds	r3, r7, r4
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	4a08      	ldr	r2, [pc, #32]	; (8005ef4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ed4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	f7fa f99c 	bl	8000214 <__divsi3>
 8005edc:	0003      	movs	r3, r0
 8005ede:	b299      	uxth	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2268      	movs	r2, #104	; 0x68
 8005ee4:	5299      	strh	r1, [r3, r2]
}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	b005      	add	sp, #20
 8005eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	08006034 	.word	0x08006034
 8005ef4:	0800603c 	.word	0x0800603c

08005ef8 <__libc_init_array>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	2600      	movs	r6, #0
 8005efc:	4d0c      	ldr	r5, [pc, #48]	; (8005f30 <__libc_init_array+0x38>)
 8005efe:	4c0d      	ldr	r4, [pc, #52]	; (8005f34 <__libc_init_array+0x3c>)
 8005f00:	1b64      	subs	r4, r4, r5
 8005f02:	10a4      	asrs	r4, r4, #2
 8005f04:	42a6      	cmp	r6, r4
 8005f06:	d109      	bne.n	8005f1c <__libc_init_array+0x24>
 8005f08:	2600      	movs	r6, #0
 8005f0a:	f000 f821 	bl	8005f50 <_init>
 8005f0e:	4d0a      	ldr	r5, [pc, #40]	; (8005f38 <__libc_init_array+0x40>)
 8005f10:	4c0a      	ldr	r4, [pc, #40]	; (8005f3c <__libc_init_array+0x44>)
 8005f12:	1b64      	subs	r4, r4, r5
 8005f14:	10a4      	asrs	r4, r4, #2
 8005f16:	42a6      	cmp	r6, r4
 8005f18:	d105      	bne.n	8005f26 <__libc_init_array+0x2e>
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	00b3      	lsls	r3, r6, #2
 8005f1e:	58eb      	ldr	r3, [r5, r3]
 8005f20:	4798      	blx	r3
 8005f22:	3601      	adds	r6, #1
 8005f24:	e7ee      	b.n	8005f04 <__libc_init_array+0xc>
 8005f26:	00b3      	lsls	r3, r6, #2
 8005f28:	58eb      	ldr	r3, [r5, r3]
 8005f2a:	4798      	blx	r3
 8005f2c:	3601      	adds	r6, #1
 8005f2e:	e7f2      	b.n	8005f16 <__libc_init_array+0x1e>
 8005f30:	08006044 	.word	0x08006044
 8005f34:	08006044 	.word	0x08006044
 8005f38:	08006044 	.word	0x08006044
 8005f3c:	08006048 	.word	0x08006048

08005f40 <memset>:
 8005f40:	0003      	movs	r3, r0
 8005f42:	1882      	adds	r2, r0, r2
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d100      	bne.n	8005f4a <memset+0xa>
 8005f48:	4770      	bx	lr
 8005f4a:	7019      	strb	r1, [r3, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	e7f9      	b.n	8005f44 <memset+0x4>

08005f50 <_init>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr

08005f5c <_fini>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr
